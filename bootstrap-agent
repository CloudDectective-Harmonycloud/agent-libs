#!/bin/bash
set -exo pipefail

if [[ $(uname) == "Darwin" ]]; then
  SCRIPT=$(greadlink -f $0)
else
  SCRIPT=$(readlink -f $0)
fi

AGENT_SOURCEDIR=$(dirname $SCRIPT)
ROOT_SOURCEDIR=$AGENT_SOURCEDIR/..

if [ -z "$WORKDIR" ]; then
	WORKDIR=$AGENT_SOURCEDIR/..
fi

DEPENDENCIES=$WORKDIR/agent/dependencies
DEPENDENCIES_URL="https://s3.amazonaws.com/download.draios.com/dependencies"

if [ ! -d "$DEPENDENCIES" ]; then
	mkdir -p $DEPENDENCIES
fi

ZLIB_DIR=$DEPENDENCIES/zlib-1.2.11
if [ ! -d "$ZLIB_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/zlib-1.2.11.tar.gz
	tar -xzf zlib-1.2.11.tar.gz
	cd $ZLIB_DIR
	./configure
	make
fi

JQ_DIR=$DEPENDENCIES/jq-1.5
if [ ! -d "$JQ_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/jq-1.5.tar.gz
	tar -xzf jq-1.5.tar.gz
	wget -O jq-1.5-fix-tokenadd.patch https://github.com/stedolan/jq/commit/8eb1367ca44e772963e704a700ef72ae2e12babd.patch
	cd $JQ_DIR
	patch < ../jq-1.5-fix-tokenadd.patch
	./configure --disable-maintainer-mode --enable-all-static --disable-dependency-tracking
	make LDFLAGS=-all-static
fi

PROTOBUF_V3_DIR=$DEPENDENCIES/protobuf-3.5.0
if [ ! -d "$PROTOBUF_V3_DIR" ]; then
	cd $DEPENDENCIES
	wget https://github.com/google/protobuf/releases/download/v3.5.0/protobuf-cpp-3.5.0.tar.gz
	tar -xzf protobuf-cpp-3.5.0.tar.gz
	cd $PROTOBUF_V3_DIR
	CPPFLAGS=-I$ZLIB_DIR LDFLAGS=-L$ZLIB_DIR ./configure --with-zlib --prefix=$PROTOBUF_V3_DIR/target
	make install
fi

OPENSSL_VER=1.0.2n
OPENSSL_EXT=tar.gz
OPENSSL_DIR=$DEPENDENCIES/openssl-$OPENSSL_VER
if [ ! -d "$OPENSSL_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/openssl-$OPENSSL_VER.$OPENSSL_EXT
	tar -xzf openssl-$OPENSSL_VER.$OPENSSL_EXT
	cd $OPENSSL_DIR
	./config shared --prefix=$OPENSSL_DIR/target
	make install
	cd ..
fi

CARES_VER=1.13.0
CARES_EXT=tar.gz
CARES_DIR=$DEPENDENCIES/c-ares-$CARES_VER
if [ ! -d "$CARES_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/c-ares-$CARES_VER.$CARES_EXT
	tar -xzf c-ares-$CARES_VER.$CARES_EXT
	cd $CARES_DIR
	./configure --prefix=$CARES_DIR/target
	make install
	cd ..
fi

# Normally, grpc wants to use its own protobuf library, which it
# expects to get via git submmodules. It mostly has support for using
# a "system" protobuf/openssl instead, using pkg-config. The Makefile
# does require one small change to properly set LDFLAGS to the
# protobuf lib path returned by pkg-config. Hence the patch.
GRPC_DIR=$DEPENDENCIES/grpc-1.8.1
if [ ! -d "$GRPC_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/grpc-1.8.1.tar.gz
	tar -xzf grpc-1.8.1.tar.gz
	rm -rf grpc-1.8.1/third_party/zlib
	ln -s $ZLIB_DIR grpc-1.8.1/third_party/zlib
	cd $GRPC_DIR
	wget $DEPENDENCIES_URL/grpc-1.1.4-Makefile.patch
	patch < grpc-1.1.4-Makefile.patch
	HAS_SYSTEM_ZLIB=false LDFLAGS=-static PATH=$PROTOBUF_V3_DIR/target/bin:$PATH PKG_CONFIG_PATH=$OPENSSL_DIR:$PROTOBUF_V3_DIR:$CARES_DIR make grpc_cpp_plugin static_cxx static_c
fi

POCO_VER=1.7.7
POCO_EXT=tar.gz
POCO_DIR=poco-$POCO_VER-all
POCO_ARCH=$POCO_DIR.$POCO_EXT
POCO_DIR=$DEPENDENCIES/$POCO_DIR
if [ ! -d "$POCO_DIR" ]; then
        cd $DEPENDENCIES
        wget $DEPENDENCIES_URL/$POCO_ARCH
 	tar -xzf $POCO_ARCH
	cd $POCO_DIR
	patch -p1 < $AGENT_SOURCEDIR/patches/poco_LogFile_cpp_bug.patch
	patch -p1 < $AGENT_SOURCEDIR/patches/poco_LogFile_h_bug.patch
	./configure --prefix=./target --static --no-samples --no-tests --omit=Data,Data/MySQL,Data/ODBC,Data/SQLite,Zip,MongoDB,PageCompiler,PageCompiler/File2Page --include-path=$OPENSSL_DIR/target/include --cflags="-DPOCO_UTIL_NO_XMLCONFIGURATION -DPOCO_UTIL_NO_JSONCONFIGURATION"
	make install
	cd ..
fi

GTEST_DIR=$DEPENDENCIES/gtest-1.7.0
if [ ! -d "$GTEST_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/gtest-1.7.0.zip
	unzip gtest-1.7.0.zip
	cd $GTEST_DIR
	g++ -Iinclude -c fused-src/gtest/gtest-all.cc -o gtest-all.o
	g++ -Iinclude -c fused-src/gtest/gtest_main.cc -o gtest_main.o
  	ar -rv libgtest.a gtest-all.o
  	ar -rv libgtest_main.a gtest_main.o
fi

if [ ! -d "$DEPENDENCIES/simpleopt" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/simpleopt-3.6.zip
	unzip simpleopt-3.6.zip
fi

CMAKE_DIR=$DEPENDENCIES/cmake-3.3.2
if [ ! -d "$CMAKE_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/cmake-3.3.2.tar.gz
	tar -xzf cmake-3.3.2.tar.gz
	cd $CMAKE_DIR
	./bootstrap
	make
fi

LIBSSH_DIR=$DEPENDENCIES/libssh-0.7.3
if [ ! -d "$LIBSSH_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/libssh-0.7.3.tar.xz
	tar -xf libssh-0.7.3.tar.xz
	cd $LIBSSH_DIR
	mkdir build
	cd build
	OPENSSL_ROOT_DIR=$OPENSSL_DIR/target $CMAKE_DIR/bin/cmake -DCMAKE_INSTALL_PREFIX=$LIBSSH_DIR/target -DZLIB_LIBRARY=$ZLIB_DIR -DZLIB_INCLUDE_DIR=$ZLIB_DIR -DWITH_STATIC_LIB=ON -DWITH_GSSAPI=OFF ..
	make -C src install
	make -C include install
fi

LUAJIT_DIR=$DEPENDENCIES/LuaJIT-2.0.3
if [ ! -d "$LUAJIT_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/LuaJIT-2.0.3.tar.gz
	tar -xzf LuaJIT-2.0.3.tar.gz
	cd $LUAJIT_DIR
	make
fi

CURL_NAME=curl-7.57.0
CURL_EXT=tar.bz2
CURL_DIR=$DEPENDENCIES/$CURL_NAME
if [ ! -d "$CURL_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/$CURL_NAME.$CURL_EXT
	tar -xjf $CURL_NAME.$CURL_EXT
	cd $CURL_DIR
	./configure --disable-shared  \
		--enable-optimize     \
		--disable-curldebug   \
		--disable-rt          \
		--enable-http         \
		--disable-ftp         \
		--disable-file        \
		--disable-ldap        \
		--disable-ldaps       \
		--disable-rtsp        \
		--disable-telnet      \
		--disable-tftp        \
		--disable-pop3        \
		--disable-imap        \
		--disable-smb         \
		--disable-smtp        \
		--disable-gopher      \
		--disable-sspi        \
		--disable-ntlm-wb     \
		--disable-tls-srp     \
		--without-winssl      \
		--without-darwinssl   \
		--with-ssl=$OPENSSL_DIR/target \
		--without-polarssl    \
		--without-cyassl      \
		--without-nss         \
		--without-axtls       \
		--without-ca-path     \
		--without-ca-bundle   \
		--without-libmetalink \
		--without-librtmp     \
		--without-winidn      \
		--without-libidn      \
		--without-nghttp2     \
		--enable-ares=$CARES_DIR/target
	make
fi

B64_NAME=libb64-1.2
B64_EXT=src.zip
B64_DIR=$DEPENDENCIES/$B64_NAME
if [ ! -d "$B64_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/$B64_NAME.$B64_EXT
	unzip $B64_NAME.$B64_EXT
	cd $B64_DIR
	make
fi

JAVA_DIR=$DEPENDENCIES/jdk1.7.0_75
ARCH=$(uname -m)
if [ ! -d "$JAVA_DIR" ]; then
	cd $DEPENDENCIES
	if [[ $ARCH == "x86_64" ]]; then
		TARFILE=jdk-7u75-linux-x64.tar.bz2
	else
		TARFILE=jdk-7u75-linux-i586.tar.bz2
	fi
	wget $DEPENDENCIES_URL/$TARFILE
	tar -xjf $TARFILE
fi

MAVEN_DIR=$DEPENDENCIES/apache-maven-3.2.5
if [ ! -d "$MAVEN_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/apache-maven-3.2.5-bin.tar.gz
	tar -xzf apache-maven-3.2.5-bin.tar.gz
fi

BOOST_DIR=$DEPENDENCIES/boost_1_57_0
if [ ! -d "$BOOST_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/boost_1_57_0.tar.bz2
	tar xfj boost_1_57_0.tar.bz2
fi

YAMLCPP_DIR=$DEPENDENCIES/yaml-cpp-0.5.1
if [ ! -d "$YAMLCPP_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/yaml-cpp-0.5.1.tar.gz
	tar xfz yaml-cpp-0.5.1.tar.gz
	cd $YAMLCPP_DIR
	mkdir build
	cd build
	BOOST_ROOT=$BOOST_DIR $CMAKE_DIR/bin/cmake -DCMAKE_INSTALL_PREFIX=$YAMLCPP_DIR/target -DYAML_CPP_BUILD_CONTRIB=OFF ..
	make install
fi

SCONS_DIR=$DEPENDENCIES/scons-2.3.4
if [ ! -d "${SCONS_DIR}" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/scons-2.3.4.tar.gz
	tar xfz scons-2.3.4.tar.gz
fi

PYTHON_VER=2.7.14
PYTHON_EXT=tgz
PYTHON_DIR=$DEPENDENCIES/Python-$PYTHON_VER
if [ ! -d "${PYTHON_DIR}" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/Python-$PYTHON_VER.$PYTHON_EXT
	tar xfz Python-$PYTHON_VER.$PYTHON_EXT
	cd $PYTHON_DIR
	echo "zlib zlibmodule.c -I${ZLIB_DIR}/ -L${ZLIB_DIR}/ -lz" >> Modules/Setup.dist
	./configure CPPFLAGS="-DUSE_SSL -I${OPENSSL_DIR}/target/include" LDFLAGS="-L${OPENSSL_DIR}/target/lib -Wl,-rpath=${OPENSSL_DIR}/target/lib" --prefix=$PYTHON_DIR/target --with-ensurepip=install --enable-unicode=ucs4
	make
	make install
fi

PYTHON26_VER=2.6.9
PYTHON26_EXT=tgz
PYTHON26_DIR=$DEPENDENCIES/Python-$PYTHON26_VER
if [ ! -d "${PYTHON26_DIR}" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/Python-$PYTHON26_VER.$PYTHON26_EXT
	tar xfz Python-$PYTHON26_VER.$PYTHON26_EXT
	cd $PYTHON26_DIR
	echo "zlib zlibmodule.c -I${ZLIB_DIR}/ -L${ZLIB_DIR}/ -lz" >> Modules/Setup.dist
	./configure CPPFLAGS="-DUSE_SSL -I${OPENSSL_DIR}/target/include" LDFLAGS="-L${OPENSSL_DIR}/target/lib -Wl,-rpath=${OPENSSL_DIR}/target/lib" --prefix=$PYTHON26_DIR/target --enable-unicode=ucs4
	make
	make install
	wget $DEPENDENCIES_URL/get-pip.py
	echo "setuptools==36.8.0" > pip-reqs.txt
	echo "wheel==0.29.0" >> pip-reqs.txt
	./target/bin/python get-pip.py --no-setuptools --no-wheel -r pip-reqs.txt
fi

if [ -z $STATSITE_VERSION ]; then
  STATSITE_VERSION=0.7.0-sysdig5
fi
STATSITE_DIR=$DEPENDENCIES/statsite-private-$STATSITE_VERSION
if [ ! -d "${STATSITE_DIR}" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/statsite-private-$STATSITE_VERSION.zip
	unzip statsite-private-$STATSITE_VERSION.zip
	cd $STATSITE_DIR
	$PYTHON_DIR/target/bin/python $SCONS_DIR/script/scons
fi

POSTGRES_DIR=$DEPENDENCIES/postgresql-9.4.15
if [ ! -d "${POSTGRES_DIR}" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/postgresql-9.4.15.tar.bz2
	tar xfj postgresql-9.4.15.tar.bz2
	cd $POSTGRES_DIR
	./configure --prefix=$POSTGRES_DIR/target --without-readline --without-zlib
	make
	make -C src/bin install
	make -C src/include install
	make -C src/interfaces install
fi

GPERFTOOLS_DIR=$DEPENDENCIES/gperftools-2.5
if [ ! -d "${GPERFTOOLS_DIR}" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/gperftools-2.5.tar.gz
	tar xfz gperftools-2.5.tar.gz
	cd $GPERFTOOLS_DIR
	./configure --prefix=${GPERFTOOLS_DIR}/target --enable-emergency-malloc --disable-libunwind
	make
	make install
fi

# Falco Engine dependencies
LPEG_DIR=$DEPENDENCIES/lpeg-1.0.0
if [ ! -d "${LPEG_DIR}" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/lpeg-1.0.0.tar.gz
	tar -xzf lpeg-1.0.0.tar.gz
	cd $LPEG_DIR
	LUA_INCLUDE=${LUAJIT_DIR}/src "${ROOT_SOURCEDIR}/falco/scripts/build-lpeg.sh" "${LPEG_DIR}/target"
fi

LIBYAML_DIR=$DEPENDENCIES/libyaml-0.1.7
if [ ! -d "${LIBYAML_DIR}" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/libyaml-0.1.7.tar.gz
	tar -xzf libyaml-0.1.7.tar.gz
	cd $LIBYAML_DIR
	./bootstrap && ./configure --prefix=$LIBYAML_DIR/target
	make
	make install
fi

LYAML_DIR=$DEPENDENCIES/lyaml-release-v6.0
if [ ! -d "${LYAML_DIR}" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/lyaml-release-v6.0.tar.gz
	tar -xzf lyaml-release-v6.0.tar.gz
	cd $LYAML_DIR
	LD_LIBRARY_PATH="${LIBYAML_DIR}/target/lib" ./configure --prefix=$LYAML_DIR/target --enable-static LIBS=-L${LIBYAML_DIR}/target/lib CFLAGS=-I${LIBYAML_DIR}/target/include CPPFLAGS=-I${LIBYAML_DIR}/target/include LUA_INCLUDE=-I${LUAJIT_DIR}/src LUA=${LUAJIT_DIR}/src/luajit
	make
	make install
	sh -c "cp -R ${LYAML_DIR}/lib/* ${ROOT_SOURCEDIR}/falco/userspace/engine/lua"
fi

if [ -z "$AGENT_VERSION" ]; then
	AGENT_VERSION="0.1.1dev"
fi

if [ -z "$BUILD_DRIVER" ]; then
	BUILD_DRIVER=ON
fi

if [ -z "$ONLY_DEPS" ]; then
  AGENT_BUILD_DIR=$WORKDIR/agent/build
  mkdir -p $AGENT_BUILD_DIR/debug
  mkdir -p $AGENT_BUILD_DIR/release

  if [ -z "$BUILD_DEB_ONLY" ]; then
    BUILD_DEB_ONLY="OFF"
  fi

  cd $AGENT_BUILD_DIR/debug
  $CMAKE_DIR/bin/cmake -DCMAKE_BUILD_TYPE=Debug -DDRAIOS_DEPENDENCIES_DIR=$DEPENDENCIES -DJAVA_HOME=$JAVA_DIR -DAGENT_VERSION="$AGENT_VERSION" -DSTATSITE_VERSION=$STATSITE_VERSION -DBUILD_DRIVER=${BUILD_DRIVER} -DPACKAGE_DEB_ONLY=$BUILD_DEB_ONLY $AGENT_SOURCEDIR
  cd $AGENT_BUILD_DIR/release
  $CMAKE_DIR/bin/cmake -DCMAKE_BUILD_TYPE=Release -DDRAIOS_DEPENDENCIES_DIR=$DEPENDENCIES -DJAVA_HOME=$JAVA_DIR -DAGENT_VERSION="$AGENT_VERSION" -DSTATSITE_VERSION=$STATSITE_VERSION -DBUILD_DRIVER=${BUILD_DRIVER} -DPACKAGE_DEB_ONLY=$BUILD_DEB_ONLY $AGENT_SOURCEDIR
fi
