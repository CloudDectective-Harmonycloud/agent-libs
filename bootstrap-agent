#!/bin/bash
set -exo pipefail

if [ -z "$OS" ]; then
	OS="NA"
fi

if [[ $(uname) == "Darwin" ]]; then
  SCRIPT=$(greadlink -f $0)
else
  SCRIPT=$(readlink -f $0)
fi

AGENT_SOURCEDIR=$(dirname $SCRIPT)
ROOT_SOURCEDIR=$AGENT_SOURCEDIR/..
ARCH=$(uname -m)

if [ -z "$WORKDIR" ]; then
	WORKDIR=$AGENT_SOURCEDIR/..
fi

DEPENDENCIES=$WORKDIR/agent/dependencies
DEPENDENCIES_URL="https://s3.amazonaws.com/download.draios.com/dependencies"

if [ ! -d "$DEPENDENCIES" ]; then
	mkdir -p $DEPENDENCIES
fi

if [ $OS != "Windows_NT" ]; then
	ZLIB_VER=1.2.11
else
	ZLIB_VER=1.2.8
fi

ZLIB_DIR=$DEPENDENCIES/zlib-$ZLIB_VER

if [ ! -d "$ZLIB_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/zlib-$ZLIB_VER.tar.gz
	tar -xzf zlib-$ZLIB_VER.tar.gz
	cd $ZLIB_DIR
	./configure
	make
fi

JQ_DIR=$DEPENDENCIES/jq-1.5
if [ ! -d "$JQ_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/jq-1.5.tar.gz
	tar -xzf jq-1.5.tar.gz
	wget -O jq-1.5-fix-tokenadd.patch https://github.com/stedolan/jq/commit/8eb1367ca44e772963e704a700ef72ae2e12babd.patch
	cd $JQ_DIR
	patch < ../jq-1.5-fix-tokenadd.patch
	./configure --disable-maintainer-mode --enable-all-static --disable-dependency-tracking
	make LDFLAGS=-all-static
fi

if [ $OS != "Windows_NT" ]; then
	TBB_DIR=$DEPENDENCIES/tbb-2018_U5
	if [ ! -d "$TBB_DIR" ]; then
		cd $DEPENDENCIES
		wget $DEPENDENCIES_URL/tbb-2018_U5.tar.gz
		tar -xzf tbb-2018_U5.tar.gz
		cd $TBB_DIR
		make tbb_build_dir=${TBB_DIR}/build tbb_build_prefix=lib extra_inc=big_iron.inc
	fi
fi

# The njson vs json is intentional. The tarball has njson-x.y.z in the
# name, but it unpacks to json-x.y.z.
NJSON_DIR=$DEPENDENCIES/json-3.3.0
if [ ! -d "$NJSON_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/njson-3.3.0.tar.gz
	tar -xzf njson-3.3.0.tar.gz
	# No build neeeded, all of the code is in a single header file.
fi

if [[ "$ARCH" == "s390x" ]]; then
GO_DIR=/usr/local/go
if [ ! -d "$GO_DIR" ]; then
	mkdir -p $GO_DIR
	wget https://storage.googleapis.com/golang/go1.8.1.linux-s390x.tar.gz
	tar -C $GO_DIR/.. -xzf go1.8.1.linux-s390x.tar.gz
	ln -s $GO_DIR/bin/go /usr/local/bin
	ln -s /usr/bin/gcc s390x-linux-gnu-gcc
	rm go1.8.1.linux-s390x.tar.gz
fi
# SLES doesn't have dpkg but we need it for CPackDeb
# Build it ourselves
DPKG_VER=1.18.23
DPKG_DIR=$DEPENDENCIES/dpkg-$DPKG_VER
if [ ! -d "$DPKG_DIR" ]; then
	cd $DEPENDENCIES
	git clone https://anonscm.debian.org/git/dpkg/dpkg.git $DPKG_DIR
	cd $DPKG_DIR
	git checkout tags/$DPKG_VER
	autoreconf -f -i
	./configure
	make
	make install
fi
fi

PROTOBUF_V3_DIR=$DEPENDENCIES/protobuf-3.5.0
if [ ! -d "$PROTOBUF_V3_DIR" ]; then
	cd $DEPENDENCIES
	wget https://github.com/google/protobuf/releases/download/v3.5.0/protobuf-cpp-3.5.0.tar.gz
	tar -xzf protobuf-cpp-3.5.0.tar.gz
	cd $PROTOBUF_V3_DIR
	if [[ "$ARCH" == "s390x" ]]; then
	    wget $DEPENDENCIES_URL/protobuf-3.5.0-s390x.patch
	    patch -p1 < protobuf-3.5.0-s390x.patch
	    aclocal
	    automake
	fi
	CPPFLAGS=-I$ZLIB_DIR LDFLAGS=-L$ZLIB_DIR ./configure --with-zlib --prefix=$PROTOBUF_V3_DIR/target
	make install
fi

if [ $OS != "Windows_NT" ]; then
	export GOPATH=$DEPENDENCIES/go
else
	export GOPATH=C:/cygwin64$DEPENDENCIES/go
fi
if [ ! -d "$GOPATH" ]; then
	mkdir $GOPATH
fi

GOGO_PROTOBUF_URL=https://github.com/gogo/protobuf
GOGO_PROTOBUF_VER=v0.4
GOGO_PROTOBUF_PATH=github.com/gogo/protobuf/protoc-gen-gofast
GOGO_PROTOBUF_WIN_CLONE_PATH=dependencies/go/src/github.com/gogo/protobuf
GOGO_PROTOBUF_DIR=$GOPATH/src/$GOGO_PROTOBUF_PATH
GOGO_PROTOBUF_BIN=$GOPATH/bin/protoc-gen-gofast
if [ ! -d "$GOGO_PROTOBUF_DIR" ]; then
	# download but don't install yet
	if [ $OS != "Windows_NT" ]; then
		go get -u -d $GOGO_PROTOBUF_PATH
	else
		git clone $GOGO_PROTOBUF_URL $GOGO_PROTOBUF_WIN_CLONE_PATH
	fi
fi
cd $GOGO_PROTOBUF_DIR
# There's no easy way to go get a specific version or install from a
# vendored dep, so this hack makes sure we install the correct version
GIT_VER=$(git describe --tags)
if [ "$GIT_VER" != "$GOGO_PROTOBUF_VER" ]; then
	go clean -i $GOGO_PROTOBUF_PATH
	git checkout master
	go get -u -d $GOGO_PROTOBUF_PATH
	git checkout tags/$GOGO_PROTOBUF_VER
fi
if [ ! -f "$GOGO_PROTOBUF_BIN" ]; then
	go install $GOGO_PROTOBUF_PATH
fi

OPENSSL_VER=1.0.2n
OPENSSL_EXT=tar.gz
OPENSSL_DIR=$DEPENDENCIES/openssl-$OPENSSL_VER
if [ ! -d "$OPENSSL_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/openssl-$OPENSSL_VER.$OPENSSL_EXT
	tar -xzf openssl-$OPENSSL_VER.$OPENSSL_EXT
	cd $OPENSSL_DIR
	./config shared --prefix=$OPENSSL_DIR/target
	make install
	cd ..
fi

CARES_VER=1.13.0
CARES_EXT=tar.gz
CARES_DIR=$DEPENDENCIES/c-ares-$CARES_VER
if [ ! -d "$CARES_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/c-ares-$CARES_VER.$CARES_EXT
	tar -xzf c-ares-$CARES_VER.$CARES_EXT
	cd $CARES_DIR
	./configure --prefix=$CARES_DIR/target
	make install
	cd ..
fi

if [ $OS != "Windows_NT" ]; then
	# Normally, grpc wants to use its own protobuf library, which it
	# expects to get via git submmodules. It mostly has support for using
	# a "system" protobuf/openssl instead, using pkg-config. The Makefile
	# does require one small change to properly set LDFLAGS to the
	# protobuf lib path returned by pkg-config. Hence the patch.
	GRPC_DIR=$DEPENDENCIES/grpc-1.8.1
	if [ ! -d "$GRPC_DIR" ]; then
		cd $DEPENDENCIES
		wget $DEPENDENCIES_URL/grpc-1.8.1.tar.gz
		tar -xzf grpc-1.8.1.tar.gz
		rm -rf grpc-1.8.1/third_party/zlib
		ln -s $ZLIB_DIR grpc-1.8.1/third_party/zlib
		if [[ "$ARCH" == "s390x" ]]; then
			# Boringssl build fails on s390x, rely on openssl instead
			rm -rf $GRPC_DIR/third_party/boringssl $GRPC_DIR/third_party/boringssl-with-bazel
		fi
		cd $GRPC_DIR
		wget $DEPENDENCIES_URL/grpc-1.1.4-Makefile.patch
		patch < grpc-1.1.4-Makefile.patch
		HAS_SYSTEM_ZLIB=false LDFLAGS=-static PATH=$PROTOBUF_V3_DIR/target/bin:$PATH PKG_CONFIG_PATH=$OPENSSL_DIR:$PROTOBUF_V3_DIR:$CARES_DIR make grpc_cpp_plugin static_cxx static_c
	fi
fi

POCO_VER=1.9.0
POCO_EXT=tar.gz
POCO_DIR=poco-$POCO_VER-all
POCO_ARCH=$POCO_DIR.$POCO_EXT
POCO_DIR=$DEPENDENCIES/$POCO_DIR
if [ ! -d "$POCO_DIR" ]; then
        cd $DEPENDENCIES
        wget $DEPENDENCIES_URL/$POCO_ARCH
 	tar -xzf $POCO_ARCH
	cd $POCO_DIR
	if [ $OS == "Windows_NT" ]; then
		# Need a change in build/config/CYGWIN to use SYSFLAGS = -D_GNU_SOURCE instead of -D_XOPEN_SOURCE
		# Ref: https://github.com/pocoproject/poco/commit/a9c4f31aa90da640867c753305dc8dcb6d4b58ea
		# This change is not included in 1.9.0, the latest released version of poco, so manually apply the change.
		# When we get a new poco release (say 1.9.1) with the above fix, we can switch to that release and get rid of the
		# manual hack.
		mv ./build/config/CYGWIN ./build/config/CYGWIN.orig
		sed 's/SYSFLAGS.*=.*-D_XOPEN_SOURCE.*/SYSFLAGS = -D_GNU_SOURCE/' ./build/config/CYGWIN.orig > ./build/config/CYGWIN
	fi
	./configure --prefix=./target --static --no-samples --no-tests --omit=Data,Data/MySQL,Data/ODBC,Data/SQLite,Zip,MongoDB,PageCompiler,PageCompiler/File2Page,Redis --include-path=$OPENSSL_DIR/target/include --cflags="-DPOCO_UTIL_NO_XMLCONFIGURATION -DPOCO_UTIL_NO_JSONCONFIGURATION"
	make install
	cd ..
fi

if [ $OS != "Windows_NT" ]; then
	GTEST_DIR=$DEPENDENCIES/gtest-1.7.0
	if [ ! -d "$GTEST_DIR" ]; then
		cd $DEPENDENCIES
		wget $DEPENDENCIES_URL/gtest-1.7.0.zip
		unzip gtest-1.7.0.zip
		cd $GTEST_DIR
		g++ -Iinclude -c fused-src/gtest/gtest-all.cc -o gtest-all.o
		g++ -Iinclude -c fused-src/gtest/gtest_main.cc -o gtest_main.o
		ar -rv libgtest.a gtest-all.o
		ar -rv libgtest_main.a gtest_main.o
	fi
fi

if [ ! -d "$DEPENDENCIES/simpleopt" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/simpleopt-3.6.zip
	unzip simpleopt-3.6.zip
fi

if [ $OS != "Windows_NT" ]; then
	CMAKE_DIR=$DEPENDENCIES/cmake-3.3.2
	if [ ! -d "$CMAKE_DIR" ]; then
		cd $DEPENDENCIES
		wget $DEPENDENCIES_URL/cmake-3.3.2.tar.gz
		tar -xzf cmake-3.3.2.tar.gz
		cd $CMAKE_DIR
		./bootstrap
		make
	fi
fi

if [[ "$ARCH" == "s390x" ]]; then
LUAJIT_DIR=$DEPENDENCIES/lua-5.1.5
if [ ! -d "$LUAJIT_DIR" ]; then
	cd $DEPENDENCIES
	wget https://www.lua.org/ftp/lua-5.1.5.tar.gz
	tar -xzf lua-5.1.5.tar.gz
	cd $LUAJIT_DIR
	make linux
fi
else
if [ $OS != "Windows_NT" ]; then
	LUAJIT_NAME=LuaJIT-2.0.3
else
	LUAJIT_NAME=LuaJIT-2.0.5
fi
LUAJIT_DIR=$DEPENDENCIES/$LUAJIT_NAME

if [ ! -d "$LUAJIT_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/$LUAJIT_NAME.tar.gz
	tar -xzf $LUAJIT_NAME.tar.gz
	cd $LUAJIT_DIR
	if [ $OS != "Windows_NT" ]; then
		make
	else
		make BUILDMODE=static
	fi
fi
fi

CURL_NAME=curl-7.57.0
CURL_EXT=tar.bz2
CURL_DIR=$DEPENDENCIES/$CURL_NAME
if [ ! -d "$CURL_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/$CURL_NAME.$CURL_EXT
	tar -xjf $CURL_NAME.$CURL_EXT
	cd $CURL_DIR
	./configure --disable-shared  \
		--enable-optimize     \
		--disable-curldebug   \
		--disable-rt          \
		--enable-http         \
		--disable-ftp         \
		--disable-file        \
		--disable-ldap        \
		--disable-ldaps       \
		--disable-rtsp        \
		--disable-telnet      \
		--disable-tftp        \
		--disable-pop3        \
		--disable-imap        \
		--disable-smb         \
		--disable-smtp        \
		--disable-gopher      \
		--disable-sspi        \
		--disable-ntlm-wb     \
		--disable-tls-srp     \
		--without-winssl      \
		--without-darwinssl   \
		--with-ssl=$OPENSSL_DIR/target \
		--without-polarssl    \
		--without-cyassl      \
		--without-nss         \
		--without-axtls       \
		--without-ca-path     \
		--without-ca-bundle   \
		--without-libmetalink \
		--without-librtmp     \
		--without-winidn      \
		--without-libidn      \
		--without-nghttp2     \
		--enable-ares=$CARES_DIR/target
	make
fi

B64_NAME=libb64-1.2
B64_EXT=src.zip
B64_DIR=$DEPENDENCIES/$B64_NAME
if [ ! -d "$B64_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/$B64_NAME.$B64_EXT
	unzip $B64_NAME.$B64_EXT
	cd $B64_DIR
	make
fi

# On s390x we'll rely on Suse's jdk 1.7.0 for now
if [ $OS != "Windows_NT" ]; then
	if [[ "$ARCH" == "s390x" ]]; then
		JAVA_DIR=/usr/lib64/jvm/java-1.7.0-openjdk-1.7.0
	else
		JAVA_DIR=$DEPENDENCIES/jdk1.7.0_75
		if [ ! -d "$JAVA_DIR" ]; then
			cd $DEPENDENCIES
			if [[ $ARCH == "x86_64" ]]; then
				TARFILE=jdk-7u75-linux-x64.tar.bz2
			else
				TARFILE=jdk-7u75-linux-i586.tar.bz2
			fi
			wget $DEPENDENCIES_URL/$TARFILE
			tar -xjf $TARFILE
		fi
	fi
	MAVEN_DIR=$DEPENDENCIES/apache-maven-3.2.5
	if [ ! -d "$MAVEN_DIR" ]; then
		cd $DEPENDENCIES
		wget $DEPENDENCIES_URL/apache-maven-3.2.5-bin.tar.gz
		tar -xzf apache-maven-3.2.5-bin.tar.gz
	fi
fi

BOOST_DIR=$DEPENDENCIES/boost_1_57_0
if [ ! -d "$BOOST_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/boost_1_57_0.tar.bz2
	tar xfj boost_1_57_0.tar.bz2
fi

YAMLCPP_DIR=$DEPENDENCIES/yaml-cpp-0.5.1
if [ ! -d "$YAMLCPP_DIR" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/yaml-cpp-0.5.1.tar.gz
	tar xfz yaml-cpp-0.5.1.tar.gz
	cd $YAMLCPP_DIR
	mkdir build
	cd build
	if [ $OS != "Windows_NT" ]; then
		BOOST_ROOT=$BOOST_DIR $CMAKE_DIR/bin/cmake -DCMAKE_INSTALL_PREFIX=$YAMLCPP_DIR/target -DYAML_CPP_BUILD_CONTRIB=OFF ..
	else
		BOOST_ROOT=$BOOST_DIR /usr/bin/cmake -G"Unix Makefiles" -DCMAKE_INSTALL_PREFIX=$YAMLCPP_DIR/target -DYAML_CPP_BUILD_CONTRIB=OFF ..
	fi
	make install
fi

SCONS_DIR=$DEPENDENCIES/scons-2.3.4
if [ ! -d "${SCONS_DIR}" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/scons-2.3.4.tar.gz
	tar xfz scons-2.3.4.tar.gz
fi

if [ $OS != "Windows_NT" ]; then
	PYTHON_VER=2.7.14
	PYTHON_EXT=tgz
	PYTHON_DIR=$DEPENDENCIES/Python-$PYTHON_VER
	if [ ! -d "${PYTHON_DIR}" ]; then
		cd $DEPENDENCIES
		wget $DEPENDENCIES_URL/Python-$PYTHON_VER.$PYTHON_EXT
		tar xfz Python-$PYTHON_VER.$PYTHON_EXT
		cd $PYTHON_DIR
		echo "zlib zlibmodule.c -I${ZLIB_DIR}/ -L${ZLIB_DIR}/ -lz" >> Modules/Setup.dist
		./configure CPPFLAGS="-DUSE_SSL -I${OPENSSL_DIR}/target/include" LDFLAGS="-L${OPENSSL_DIR}/target/lib -Wl,-rpath=${OPENSSL_DIR}/target/lib" --prefix=$PYTHON_DIR/target --with-ensurepip=install --enable-unicode=ucs4
		make
		make install
	fi

	PYTHON26_VER=2.6.9
	PYTHON26_EXT=tgz
	PYTHON26_DIR=$DEPENDENCIES/Python-$PYTHON26_VER
	if [ ! -d "${PYTHON26_DIR}" ]; then
		cd $DEPENDENCIES
		wget $DEPENDENCIES_URL/Python-$PYTHON26_VER.$PYTHON26_EXT
		tar xfz Python-$PYTHON26_VER.$PYTHON26_EXT
		cd $PYTHON26_DIR
		echo "zlib zlibmodule.c -I${ZLIB_DIR}/ -L${ZLIB_DIR}/ -lz" >> Modules/Setup.dist
		./configure CPPFLAGS="-DUSE_SSL -I${OPENSSL_DIR}/target/include" LDFLAGS="-L${OPENSSL_DIR}/target/lib -Wl,-rpath=${OPENSSL_DIR}/target/lib" --prefix=$PYTHON26_DIR/target --enable-unicode=ucs4
		make
		make install
		wget $DEPENDENCIES_URL/get-pip.py
		echo "setuptools==36.8.0" > pip-reqs.txt
		echo "wheel==0.29.0" >> pip-reqs.txt
		./target/bin/python get-pip.py --no-setuptools --no-wheel -r pip-reqs.txt
	fi

	if [ -z $STATSITE_VERSION ]; then
	  STATSITE_VERSION=0.7.0-sysdig6
	fi
	STATSITE_DIR=$DEPENDENCIES/statsite-private-$STATSITE_VERSION
	if [ ! -d "${STATSITE_DIR}" ]; then
		cd $DEPENDENCIES
		wget $DEPENDENCIES_URL/statsite-private-$STATSITE_VERSION.zip
		unzip statsite-private-$STATSITE_VERSION.zip
		cd $STATSITE_DIR
		$PYTHON_DIR/target/bin/python $SCONS_DIR/script/scons
	fi

	POSTGRES_DIR=$DEPENDENCIES/postgresql-9.4.15
	if [ ! -d "${POSTGRES_DIR}" ]; then
		cd $DEPENDENCIES
		wget $DEPENDENCIES_URL/postgresql-9.4.15.tar.bz2
		tar xfj postgresql-9.4.15.tar.bz2
		cd $POSTGRES_DIR
		./configure --prefix=$POSTGRES_DIR/target --without-readline --without-zlib
		make
		make -C src/bin install
		make -C src/include install
		make -C src/interfaces install
	fi

	GPERFTOOLS_DIR=$DEPENDENCIES/gperftools-2.5
	if [ ! -d "${GPERFTOOLS_DIR}" ]; then
		cd $DEPENDENCIES
		wget $DEPENDENCIES_URL/gperftools-2.5.tar.gz
		tar xfz gperftools-2.5.tar.gz
		cd $GPERFTOOLS_DIR
		./configure --prefix=${GPERFTOOLS_DIR}/target --enable-emergency-malloc --disable-libunwind
		make
		make install
	fi
fi

# Falco Engine dependencies
LPEG_DIR=$DEPENDENCIES/lpeg-1.0.0
if [ ! -d "${LPEG_DIR}" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/lpeg-1.0.0.tar.gz
	tar -xzf lpeg-1.0.0.tar.gz
	cd $LPEG_DIR
	LUA_INCLUDE=${LUAJIT_DIR}/src "${ROOT_SOURCEDIR}/oss-falco/scripts/build-lpeg.sh" "${LPEG_DIR}/target"
fi

LIBYAML_DIR=$DEPENDENCIES/libyaml-0.1.7
if [ ! -d "${LIBYAML_DIR}" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/libyaml-0.1.7.tar.gz
	tar -xzf libyaml-0.1.7.tar.gz
	cd $LIBYAML_DIR
	./bootstrap && ./configure --prefix=$LIBYAML_DIR/target
	make
	make install
fi

LYAML_DIR=$DEPENDENCIES/lyaml-release-v6.0
if [ ! -d "${LYAML_DIR}" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/lyaml-release-v6.0.tar.gz
	tar -xzf lyaml-release-v6.0.tar.gz
	cd $LYAML_DIR
	CONFLUA=${LUAJIT_DIR}/src/lua
	if [ -e "${CONFLUA}jit" ]; then
		CONFLUA="${CONFLUA}jit"
	fi
	LD_LIBRARY_PATH="${LIBYAML_DIR}/target/lib" ./configure --prefix=$LYAML_DIR/target --enable-static LIBS=-L${LIBYAML_DIR}/target/lib CFLAGS=-I${LIBYAML_DIR}/target/include CPPFLAGS=-I${LIBYAML_DIR}/target/include LUA_INCLUDE=-I${LUAJIT_DIR}/src LUA=${CONFLUA}
	make
	make install
	sh -c "cp -R ${LYAML_DIR}/lib/* ${ROOT_SOURCEDIR}/oss-falco/userspace/engine/lua"
fi

KUBECTL_BINARY=$DEPENDENCIES/kubectl-1.9.6
if [ ! -f "${KUBECTL_BINARY}" ]; then
	cd $DEPENDENCIES
	wget https://storage.googleapis.com/kubernetes-release/release/v1.9.6/bin/linux/amd64/kubectl -O $KUBECTL_BINARY
fi

KUBE_BENCH_DIR=$DEPENDENCIES/kube-bench-0.0.23.1
if [ ! -d "${KUBE_BENCH_DIR}" ]; then
	cd $DEPENDENCIES
	wget $DEPENDENCIES_URL/kube-bench-0.0.23.1.tar.gz
	tar -xzf kube-bench-0.0.23.1.tar.gz
fi

if [ $OS == "Windows_NT" ]; then
	WINHAL_DIR=$DEPENDENCIES/dragent-win-hal-1.0
	if [ ! -d "${WINHAL_DIR}" ]; then
		cd $DEPENDENCIES
		wget $DEPENDENCIES_URL/dragent-win-hal-1.0.zip
		unzip dragent-win-hal-1.0.zip
	fi
fi

if [ -z "$AGENT_VERSION" ]; then
	AGENT_VERSION="0.1.1dev"
fi

if [ -z "$BUILD_DRIVER" ]; then
	BUILD_DRIVER=ON
fi

if [ -z "$BUILD_BPF" ]; then
	BUILD_BPF=OFF
fi

if [ -z "$BUILD_WARNINGS_AS_ERRORS" ]; then
	BUILD_WARNINGS_AS_ERRORS=ON
fi

if [ -z "$AGENT_BUILD_DATE" ]; then
	AGENT_BUILD_DATE="`date`"
fi

if [ -z "$ONLY_DEPS" ]; then
	AGENT_BUILD_DIR=$WORKDIR/agent/build
	mkdir -p $AGENT_BUILD_DIR/debug
	mkdir -p $AGENT_BUILD_DIR/release

	if [ $OS != "Windows_NT" ]; then
		if [ -z "$BUILD_DEB_ONLY" ]; then
			BUILD_DEB_ONLY="OFF"
		fi

		cd $AGENT_BUILD_DIR/debug
		$CMAKE_DIR/bin/cmake -DCMAKE_BUILD_TYPE=Debug -DDRAIOS_DEPENDENCIES_DIR=$DEPENDENCIES -DJAVA_HOME=$JAVA_DIR -DAGENT_VERSION="$AGENT_VERSION" -DAGENT_BUILD_COMMIT="${AGENT_BUILD_COMMIT:-}" -DAGENT_BUILD_DATE="$AGENT_BUILD_DATE" -DSTATSITE_VERSION=$STATSITE_VERSION -DBUILD_DRIVER=${BUILD_DRIVER} -DBUILD_BPF=${BUILD_BPF} -DPACKAGE_DEB_ONLY=$BUILD_DEB_ONLY -DCMAKE_INSTALL_PREFIX="${CMAKE_INSTALL_PREFIX:-/opt/draios}" -DCOMBINED_PACKAGE=${COMBINED_PACKAGE:-ON} -DBUILD_WARNINGS_AS_ERRORS=${BUILD_WARNINGS_AS_ERRORS} $AGENT_SOURCEDIR
		cd $AGENT_BUILD_DIR/release
		$CMAKE_DIR/bin/cmake -DCMAKE_BUILD_TYPE=Release -DDRAIOS_DEPENDENCIES_DIR=$DEPENDENCIES -DJAVA_HOME=$JAVA_DIR -DAGENT_VERSION="$AGENT_VERSION" -DAGENT_BUILD_COMMIT="${AGENT_BUILD_COMMIT:-}" -DAGENT_BUILD_DATE="$AGENT_BUILD_DATE" -DSTATSITE_VERSION=$STATSITE_VERSION -DBUILD_DRIVER=${BUILD_DRIVER} -DBUILD_BPF=${BUILD_BPF} -DPACKAGE_DEB_ONLY=$BUILD_DEB_ONLY -DCMAKE_INSTALL_PREFIX="${CMAKE_INSTALL_PREFIX:-/opt/draios}" -DCOMBINED_PACKAGE=${COMBINED_PACKAGE:-ON} -DBUILD_WARNINGS_AS_ERRORS=${BUILD_WARNINGS_AS_ERRORS} $AGENT_SOURCEDIR
	else
		# In Windows, we don't build the cointerface protobufs, and therefore we just create
		# two empty placeholder files here
		mkdir -p $AGENT_BUILD_DIR/debug/userspace/draiosproto/
		mkdir -p $AGENT_BUILD_DIR/release/userspace/draiosproto/
		echo "" > $AGENT_BUILD_DIR/debug/userspace/draiosproto/sdc_internal.pb.cc
		echo "" > $AGENT_BUILD_DIR/release/userspace/draiosproto/sdc_internal.pb.cc
		echo "" > $AGENT_BUILD_DIR/debug/userspace/draiosproto/sdc_internal.grpc.pb.cc
		echo "" > $AGENT_BUILD_DIR/release/userspace/draiosproto/sdc_internal.grpc.pb.cc

		# Turn off warnings as errors option for Windows
		# TODO: Fix warnings and then turn it on
		BUILD_WARNINGS_AS_ERRORS=OFF
		cd $AGENT_BUILD_DIR/debug
		/usr/bin/cmake -G"Unix Makefiles" -DCYGWIN=TRUE -DCMAKE_BUILD_TYPE=Debug -DDRAGENT_WINHAL_DIR=$WINHAL_DIR -DDRAIOS_DEPENDENCIES_DIR=$DEPENDENCIES -DJAVA_HOME=$JAVA_DIR -DAGENT_VERSION="$AGENT_VERSION" -DAGENT_BUILD_COMMIT="${AGENT_BUILD_COMMIT:-}" -DAGENT_BUILD_DATE="$AGENT_BUILD_DATE" -DSTATSITE_VERSION=$STATSITE_VERSION -DBUILD_DRIVER=${BUILD_DRIVER} -DBUILD_BPF=${BUILD_BPF} -DBUILD_WARNINGS_AS_ERRORS=${BUILD_WARNINGS_AS_ERRORS} -DCMAKE_INSTALL_PREFIX="${CMAKE_INSTALL_PREFIX:-/opt/draios}" $AGENT_SOURCEDIR
		cd $AGENT_BUILD_DIR/release
		/usr/bin/cmake -G"Unix Makefiles" -DCYGWIN=TRUE -DCMAKE_BUILD_TYPE=Release -DDRAGENT_WINHAL_DIR=$WINHAL_DIR -DDRAIOS_DEPENDENCIES_DIR=$DEPENDENCIES -DJAVA_HOME=$JAVA_DIR -DAGENT_VERSION="$AGENT_VERSION" -DAGENT_BUILD_COMMIT="${AGENT_BUILD_COMMIT:-}" -DAGENT_BUILD_DATE="$AGENT_BUILD_DATE" -DSTATSITE_VERSION=$STATSITE_VERSION -DBUILD_DRIVER=${BUILD_DRIVER} -DBUILD_BPF=${BUILD_BPF} -DBUILD_WARNINGS_AS_ERRORS=${BUILD_WARNINGS_AS_ERRORS} -DCMAKE_INSTALL_PREFIX="${CMAKE_INSTALL_PREFIX:-/opt/draios}" $AGENT_SOURCEDIR

	fi
fi
