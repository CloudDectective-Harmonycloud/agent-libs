Sysdig Cloud Agent: Mesos/Marathon
February 09, 2016 14:36
No additional agent configuration is required when the Mesos master agent is installed with default settings on the nodes where the Mesos API server runs ("Master" nodes). The Sysdig Cloud Agent will look for the process named “mesos-master”. If the process is found at any time, the agent will automatically connect to the local Mesos and Marathon (if available) API servers via http://localhost:5050 and http://localhost:8080 respectively, to collect cluster data in addition to host metrics. Mesos slave agents require no special configuration as well - Mesos containers will be detected automatically and reported to the back-end, which will match them with the Mesos/Marathon metadata received from master agent. Master agent should run on all Mesos masters and a special care should be taken not to schedule slave agents running as Marathon apps on master nodes - if a cluster node has both master and slave roles, then Sysdig Cloud Agent should not be configured to run as Marathon app.

While a Sysdig Cloud agent should be installed on each node in your infrastructure to allow for complete metrics reporting, it may not always be possible to install it on the Mesos API server. These instructions describe how to set up another designated Sysdig Cloud agent to receive information about your Mesos infrastructure for this and other non-default installations. Note, however, that agents must run on Mesos slaves in order for the tasks running on the slaves to be recognized as a part of Mesos cluster and Marathon framework.

 

Configuration Parameters

There are several additional configuration parameters required for Mesos installations where:

The Sysdig Cloud agent can not be run on the Mesos API server
The API server is protected with a username/password
Descriptions of the each parameter and examples are shown below.

 

Agent Can Not Run On Mesos API Server

If the API server can not be instrumented with a Sysdig Cloud agent, simply choose another node with an agent installed to remotely receive infrastructure information from the API server. Choose only one other agent installed node for this role - it will automatically detect Mesos master migrations.

Add the following Mesos parameter to the delegated agent's user settings configuration file /opt/draios/etc/dragent.yaml to allow it to connect to the remote API server and authenticate. Specify the API server's connection method, address and port. Also specify credentials if necessary:

mesos_state_uri: http://[username:password@][hostname][:port]
marathon_uris:
  - http://[username:password@][hostname][:port]
Note: although marathon_uris is an array, currently only one Marathon framework per cluster is supported and multiple Marathon frameworks should not be configured in order for agent to function properly. Setup for Multiple Marathon frameworks on the same cluster is planned for a future release.

For more information on adding parameters to a container agent's configuration file, see the FAQ: How-can-I-edit-the-agent-s-configuration-file?

 

The Mesos API Server Requires Authentication

If the agent is installed on the API server but the API server uses a different port or requires authentication, they must be explicitly specified. Add the following Mesos parameters to the API server's agent configuration file /opt/draios/etc/dragent.yaml to make it connect to the API server and authenticate with any unique account and password. Specify the API server's protocol, user credentials, and port:

mesos_state_uri: http://[username:password@][hostname][:port]
marathon_uris: 
  - http://[username:password@][hostname][:port]
 

Example Configuration File

This example shows all parameters which would be installed in the user settings file: /opt/draios/etc/dragent.yaml for an agent running on the API server, using a non-standard port and requiring user authentication.

customerid: 831g28-Your-Key-Here-a0fpc9d
tags: local:nyc1,linux:ubuntu,acct:dev
mesos_state_uri: http://myacct:mypass@localhost:5055
marathon_uris:
  - http://myacct:mypass@localhost:8088
 

HTTPS Protocol

HTTPS protocol is currently not supported.

 

Recommended Setup

It is recommended to run Sysdig Agent on Mesos master as a regular host daemon and on slaves as a Marathon app, created as shown in the following example:

$cat <<- EOF > "sysdig.json"
{
  "id": "sysdig-agent",
  "cpus": 1.0,
  "constraints": [["hostname", "UNIQUE"]],
  "mem": 500.0,
  "instances": YOUR-NUMBER-OF-INSTANCES-HERE,
  "labels" : {"role" : "monitoring", "name" : "sdc-agent" },
  "container": {
    "type": "DOCKER",
    "docker": {
      "image": "sysdig/agent",
      "forcePullImage": true,
      "network": "HOST",
      "privileged": true,
      "parameters": [
        { "key": "pid", "value": "host" },
        { "key": "env", "value": "ACCESS_KEY=YOUR-ACCESS—KEY-HERE” },
        { "key": "env", "value": "COLLECTOR=COLLECTOR-ADDRESS-HERE” }
      ]
    },
    "volumes": [
        { 
          "containerPath": "/host/var/run/docker.sock",
          "hostPath": "/var/run/docker.sock", 
          "mode": "RW" 
        },
        {
          "containerPath": "/host/dev",
          "hostPath": "/dev",
          "mode": "RW"
        },
        {
          "containerPath": "/host/proc",
          "hostPath": "/proc",
          "mode": "RO"
        },
        {
          "containerPath": "/host/boot",
          "hostPath": "/boot",
          "mode": "RO"
        },
        {
          "containerPath": "/host/lib/modules",
          "hostPath": "/lib/modules",
          "mode": "RO"
        },
        {
          "containerPath": "/host/usr",
          "hostPath": "/usr",
          "mode": "RO"
        }
      ]
  }
}
EOF
 
The above JSON should be POST-ed to Marathon leader API server; please replace the placeholders for number of instances (YOUR-NUMBER-OF-INSTANCES-HERE), access key (YOUR-ACCESS—KEY-HERE) and collector address (YOUR-COLLECTOR-ADDRESS-HERE) appropriately, as well as the “cpus”, “mem” and “labels” entries to fit the capacity and requirements of the cluster environment. Also, note that the node running the sysdigcloud agent that receives Mesos master information, if it is also connected as mesos slave node should not run the sysdigcloud slave agent in Marathon app at the same time.

$curl -X POST http://$(hostname -i):8080/v2/apps -d @sysdig.json -H "Content-type: application/json"
 

Turning Off Meta Data Reception

In troubleshooting cases where auto-detection and reporting of your Mesos infrastructure needs to be temporarily turned off in a designated agent, comment or remove any Mesos parameter entries and restart the agent.  If the agent is running on the API server and auto-detecting a default configuration, you can add the below entry to the agent's configuration file and disable detection and reporting:

mesos_autodetect: false
