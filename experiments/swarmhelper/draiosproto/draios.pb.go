// Code generated by protoc-gen-go.
// source: draios.proto
// DO NOT EDIT!

/*
Package draiosproto is a generated protocol buffer package.

It is generated from these files:
	draios.proto

It has these top-level messages:
	CounterTime
	CounterTimeBidirectional
	CounterBytes
	CounterTimeBytes
	TimeCategories
	TransactionBreakdownCategories
	CounterSyscallErrors
	ResourceCategories
	ConnectionCategories
	ProcessDetails
	CommandDetails
	CounterProtoEntry
	UrlDetails
	StatusCodeDetails
	HttpInfo
	SqlEntryDetails
	SqlQueryTypeDetails
	SqlInfo
	MongodbCollectionDetails
	MongodbOpTypeDetails
	MongodbInfo
	JmxAttribute
	JmxBean
	JavaInfo
	StatsdTag
	StatsdMetric
	StatsdInfo
	AppTag
	AppMetric
	AppCheck
	AppInfo
	ProtoInfo
	NetworkByPort
	Host
	Process
	Program
	Ipv4Tuple
	Ipv4Connection
	Ipv4NetworkInterface
	MountedFs
	FileStat
	ContainerPortMapping
	ContainerLabel
	Container
	K8SPair
	K8SCommon
	K8SNamespace
	K8SNode
	K8SPod
	K8SReplicationController
	K8SReplicaSet
	K8SService
	K8SDeployment
	K8SDaemonset
	K8SState
	MesosPair
	MesosCommon
	MesosTask
	MarathonApp
	MarathonGroup
	MesosFramework
	MesosSlave
	MesosState
	SwarmPair
	SwarmPort
	SwarmCommon
	SwarmService
	SwarmTask
	SwarmNode
	SwarmState
	Metrics
	DumpRequestStart
	DumpRequestStop
	DumpResponse
	SshOpenChannel
	SshData
	SshCloseChannel
	AutoUpdateRequest
	DirtyShutdownReport
	KeyValue
	AgentEvent
	ConfigFile
	ConfigData
	ErrorMessage
	FalcoSubcategory
	FalcoSubcategoryContainer
	FalcoCategory
	FalcoProg
	FalcoContainer
	FalcoBaseline
*/
package draiosproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// SQL statement information
//
type SqlStatementType int32

const (
	SqlStatementType_SOP_NONE    SqlStatementType = 0
	SqlStatementType_SOP_SELECT  SqlStatementType = 1
	SqlStatementType_SOP_INSERT  SqlStatementType = 2
	SqlStatementType_SOP_SET     SqlStatementType = 3
	SqlStatementType_SOP_CREATE  SqlStatementType = 4
	SqlStatementType_SOP_DELETE  SqlStatementType = 5
	SqlStatementType_SOP_DROP    SqlStatementType = 6
	SqlStatementType_SOP_REPLACE SqlStatementType = 7
	SqlStatementType_SOP_UPDATE  SqlStatementType = 8
	SqlStatementType_SOP_USE     SqlStatementType = 9
	SqlStatementType_SOP_SHOW    SqlStatementType = 10
	SqlStatementType_SOP_LOCK    SqlStatementType = 11
	SqlStatementType_SOP_UNLOCK  SqlStatementType = 12
	SqlStatementType_SOP_ALTER   SqlStatementType = 13
)

var SqlStatementType_name = map[int32]string{
	0:  "SOP_NONE",
	1:  "SOP_SELECT",
	2:  "SOP_INSERT",
	3:  "SOP_SET",
	4:  "SOP_CREATE",
	5:  "SOP_DELETE",
	6:  "SOP_DROP",
	7:  "SOP_REPLACE",
	8:  "SOP_UPDATE",
	9:  "SOP_USE",
	10: "SOP_SHOW",
	11: "SOP_LOCK",
	12: "SOP_UNLOCK",
	13: "SOP_ALTER",
}
var SqlStatementType_value = map[string]int32{
	"SOP_NONE":    0,
	"SOP_SELECT":  1,
	"SOP_INSERT":  2,
	"SOP_SET":     3,
	"SOP_CREATE":  4,
	"SOP_DELETE":  5,
	"SOP_DROP":    6,
	"SOP_REPLACE": 7,
	"SOP_UPDATE":  8,
	"SOP_USE":     9,
	"SOP_SHOW":    10,
	"SOP_LOCK":    11,
	"SOP_UNLOCK":  12,
	"SOP_ALTER":   13,
}

func (x SqlStatementType) Enum() *SqlStatementType {
	p := new(SqlStatementType)
	*p = x
	return p
}
func (x SqlStatementType) String() string {
	return proto.EnumName(SqlStatementType_name, int32(x))
}
func (x *SqlStatementType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SqlStatementType_value, data, "SqlStatementType")
	if err != nil {
		return err
	}
	*x = SqlStatementType(value)
	return nil
}
func (SqlStatementType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MongodbOpType int32

const (
	MongodbOpType_MONGODB_OP_NONE            MongodbOpType = 0
	MongodbOpType_MONGODB_OP_INSERT          MongodbOpType = 1
	MongodbOpType_MONGODB_OP_UPDATE          MongodbOpType = 2
	MongodbOpType_MONGODB_OP_DELETE          MongodbOpType = 3
	MongodbOpType_MONGODB_OP_GET_MORE        MongodbOpType = 4
	MongodbOpType_MONGODB_OP_KILL_CURSORS    MongodbOpType = 5
	MongodbOpType_MONGODB_OP_FIND            MongodbOpType = 6
	MongodbOpType_MONGODB_OP_AGGREGATE       MongodbOpType = 7
	MongodbOpType_MONGODB_OP_COMMAND         MongodbOpType = 8
	MongodbOpType_MONGODB_OP_COUNT           MongodbOpType = 9
	MongodbOpType_MONGODB_OP_DISTINCT        MongodbOpType = 10
	MongodbOpType_MONGODB_OP_MAP_REDUCE      MongodbOpType = 11
	MongodbOpType_MONGODB_OP_GEO_NEAR        MongodbOpType = 12
	MongodbOpType_MONGODB_OP_GEO_SEARCH      MongodbOpType = 13
	MongodbOpType_MONGODB_OP_FIND_AND_MODIFY MongodbOpType = 14
)

var MongodbOpType_name = map[int32]string{
	0:  "MONGODB_OP_NONE",
	1:  "MONGODB_OP_INSERT",
	2:  "MONGODB_OP_UPDATE",
	3:  "MONGODB_OP_DELETE",
	4:  "MONGODB_OP_GET_MORE",
	5:  "MONGODB_OP_KILL_CURSORS",
	6:  "MONGODB_OP_FIND",
	7:  "MONGODB_OP_AGGREGATE",
	8:  "MONGODB_OP_COMMAND",
	9:  "MONGODB_OP_COUNT",
	10: "MONGODB_OP_DISTINCT",
	11: "MONGODB_OP_MAP_REDUCE",
	12: "MONGODB_OP_GEO_NEAR",
	13: "MONGODB_OP_GEO_SEARCH",
	14: "MONGODB_OP_FIND_AND_MODIFY",
}
var MongodbOpType_value = map[string]int32{
	"MONGODB_OP_NONE":            0,
	"MONGODB_OP_INSERT":          1,
	"MONGODB_OP_UPDATE":          2,
	"MONGODB_OP_DELETE":          3,
	"MONGODB_OP_GET_MORE":        4,
	"MONGODB_OP_KILL_CURSORS":    5,
	"MONGODB_OP_FIND":            6,
	"MONGODB_OP_AGGREGATE":       7,
	"MONGODB_OP_COMMAND":         8,
	"MONGODB_OP_COUNT":           9,
	"MONGODB_OP_DISTINCT":        10,
	"MONGODB_OP_MAP_REDUCE":      11,
	"MONGODB_OP_GEO_NEAR":        12,
	"MONGODB_OP_GEO_SEARCH":      13,
	"MONGODB_OP_FIND_AND_MODIFY": 14,
}

func (x MongodbOpType) Enum() *MongodbOpType {
	p := new(MongodbOpType)
	*p = x
	return p
}
func (x MongodbOpType) String() string {
	return proto.EnumName(MongodbOpType_name, int32(x))
}
func (x *MongodbOpType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MongodbOpType_value, data, "MongodbOpType")
	if err != nil {
		return err
	}
	*x = MongodbOpType(value)
	return nil
}
func (MongodbOpType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Unit int32

const (
	Unit_UNIT_NONE    Unit = 0
	Unit_UNIT_SECOND  Unit = 1
	Unit_UNIT_BYTE    Unit = 2
	Unit_UNIT_PERCENT Unit = 3
)

var Unit_name = map[int32]string{
	0: "UNIT_NONE",
	1: "UNIT_SECOND",
	2: "UNIT_BYTE",
	3: "UNIT_PERCENT",
}
var Unit_value = map[string]int32{
	"UNIT_NONE":    0,
	"UNIT_SECOND":  1,
	"UNIT_BYTE":    2,
	"UNIT_PERCENT": 3,
}

func (x Unit) Enum() *Unit {
	p := new(Unit)
	*p = x
	return p
}
func (x Unit) String() string {
	return proto.EnumName(Unit_name, int32(x))
}
func (x *Unit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Unit_value, data, "Unit")
	if err != nil {
		return err
	}
	*x = Unit(value)
	return nil
}
func (Unit) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Scale int32

const (
	Scale_SCALE_NONE        Scale = 0
	Scale_SCALE_MILLI       Scale = 1
	Scale_SCALE_MICRO       Scale = 2
	Scale_SCALE_NANO        Scale = 3
	Scale_SCALE_MINUTE      Scale = 4
	Scale_SCALE_HOUR        Scale = 5
	Scale_SCALE_DAY         Scale = 6
	Scale_SCALE_KILO        Scale = 7
	Scale_SCALE_MEGA        Scale = 8
	Scale_SCALE_GIGA        Scale = 9
	Scale_SCALE_TERA        Scale = 10
	Scale_SCALE_KIBI        Scale = 11
	Scale_SCALE_MEBI        Scale = 12
	Scale_SCALE_GIBI        Scale = 13
	Scale_SCALE_TEBI        Scale = 14
	Scale_SCALE_PERCENT_0_1 Scale = 15
)

var Scale_name = map[int32]string{
	0:  "SCALE_NONE",
	1:  "SCALE_MILLI",
	2:  "SCALE_MICRO",
	3:  "SCALE_NANO",
	4:  "SCALE_MINUTE",
	5:  "SCALE_HOUR",
	6:  "SCALE_DAY",
	7:  "SCALE_KILO",
	8:  "SCALE_MEGA",
	9:  "SCALE_GIGA",
	10: "SCALE_TERA",
	11: "SCALE_KIBI",
	12: "SCALE_MEBI",
	13: "SCALE_GIBI",
	14: "SCALE_TEBI",
	15: "SCALE_PERCENT_0_1",
}
var Scale_value = map[string]int32{
	"SCALE_NONE":        0,
	"SCALE_MILLI":       1,
	"SCALE_MICRO":       2,
	"SCALE_NANO":        3,
	"SCALE_MINUTE":      4,
	"SCALE_HOUR":        5,
	"SCALE_DAY":         6,
	"SCALE_KILO":        7,
	"SCALE_MEGA":        8,
	"SCALE_GIGA":        9,
	"SCALE_TERA":        10,
	"SCALE_KIBI":        11,
	"SCALE_MEBI":        12,
	"SCALE_GIBI":        13,
	"SCALE_TEBI":        14,
	"SCALE_PERCENT_0_1": 15,
}

func (x Scale) Enum() *Scale {
	p := new(Scale)
	*p = x
	return p
}
func (x Scale) String() string {
	return proto.EnumName(Scale_name, int32(x))
}
func (x *Scale) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Scale_value, data, "Scale")
	if err != nil {
		return err
	}
	*x = Scale(value)
	return nil
}
func (Scale) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type JmxMetricType int32

const (
	JmxMetricType_JMX_METRIC_TYPE_COUNTER JmxMetricType = 1
	JmxMetricType_JMX_METRIC_TYPE_GAUGE   JmxMetricType = 2
)

var JmxMetricType_name = map[int32]string{
	1: "JMX_METRIC_TYPE_COUNTER",
	2: "JMX_METRIC_TYPE_GAUGE",
}
var JmxMetricType_value = map[string]int32{
	"JMX_METRIC_TYPE_COUNTER": 1,
	"JMX_METRIC_TYPE_GAUGE":   2,
}

func (x JmxMetricType) Enum() *JmxMetricType {
	p := new(JmxMetricType)
	*p = x
	return p
}
func (x JmxMetricType) String() string {
	return proto.EnumName(JmxMetricType_name, int32(x))
}
func (x *JmxMetricType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(JmxMetricType_value, data, "JmxMetricType")
	if err != nil {
		return err
	}
	*x = JmxMetricType(value)
	return nil
}
func (JmxMetricType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type StatsdMetricType int32

const (
	StatsdMetricType_STATSD_COUNT     StatsdMetricType = 1
	StatsdMetricType_STATSD_HISTOGRAM StatsdMetricType = 2
	StatsdMetricType_STATSD_GAUGE     StatsdMetricType = 3
	StatsdMetricType_STATSD_SET       StatsdMetricType = 4
)

var StatsdMetricType_name = map[int32]string{
	1: "STATSD_COUNT",
	2: "STATSD_HISTOGRAM",
	3: "STATSD_GAUGE",
	4: "STATSD_SET",
}
var StatsdMetricType_value = map[string]int32{
	"STATSD_COUNT":     1,
	"STATSD_HISTOGRAM": 2,
	"STATSD_GAUGE":     3,
	"STATSD_SET":       4,
}

func (x StatsdMetricType) Enum() *StatsdMetricType {
	p := new(StatsdMetricType)
	*p = x
	return p
}
func (x StatsdMetricType) String() string {
	return proto.EnumName(StatsdMetricType_name, int32(x))
}
func (x *StatsdMetricType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StatsdMetricType_value, data, "StatsdMetricType")
	if err != nil {
		return err
	}
	*x = StatsdMetricType(value)
	return nil
}
func (StatsdMetricType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type AppMetricType int32

const (
	AppMetricType_APP_METRIC_TYPE_GAUGE AppMetricType = 1
	AppMetricType_APP_METRIC_TYPE_RATE  AppMetricType = 2
)

var AppMetricType_name = map[int32]string{
	1: "APP_METRIC_TYPE_GAUGE",
	2: "APP_METRIC_TYPE_RATE",
}
var AppMetricType_value = map[string]int32{
	"APP_METRIC_TYPE_GAUGE": 1,
	"APP_METRIC_TYPE_RATE":  2,
}

func (x AppMetricType) Enum() *AppMetricType {
	p := new(AppMetricType)
	*p = x
	return p
}
func (x AppMetricType) String() string {
	return proto.EnumName(AppMetricType_name, int32(x))
}
func (x *AppMetricType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AppMetricType_value, data, "AppMetricType")
	if err != nil {
		return err
	}
	*x = AppMetricType(value)
	return nil
}
func (AppMetricType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type AppCheckValue int32

const (
	AppCheckValue_APP_CHECK_VALUE_OK       AppCheckValue = 0
	AppCheckValue_APP_CHECK_VALUE_WARNING  AppCheckValue = 1
	AppCheckValue_APP_CHECK_VALUE_CRITICAL AppCheckValue = 2
	AppCheckValue_APP_CHECK_VALUE_UNKNOWN  AppCheckValue = 3
)

var AppCheckValue_name = map[int32]string{
	0: "APP_CHECK_VALUE_OK",
	1: "APP_CHECK_VALUE_WARNING",
	2: "APP_CHECK_VALUE_CRITICAL",
	3: "APP_CHECK_VALUE_UNKNOWN",
}
var AppCheckValue_value = map[string]int32{
	"APP_CHECK_VALUE_OK":       0,
	"APP_CHECK_VALUE_WARNING":  1,
	"APP_CHECK_VALUE_CRITICAL": 2,
	"APP_CHECK_VALUE_UNKNOWN":  3,
}

func (x AppCheckValue) Enum() *AppCheckValue {
	p := new(AppCheckValue)
	*p = x
	return p
}
func (x AppCheckValue) String() string {
	return proto.EnumName(AppCheckValue_name, int32(x))
}
func (x *AppCheckValue) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AppCheckValue_value, data, "AppCheckValue")
	if err != nil {
		return err
	}
	*x = AppCheckValue(value)
	return nil
}
func (AppCheckValue) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

//
// PROCESS
// info for a process, i.e. a collection of threads.
// NOTE: this is process info only, when emitting threads, the main thread of a process will have a
// separate thread message with tid=process pid.
//
type Networkrole int32

const (
	Networkrole_NONE                  Networkrole = 0
	Networkrole_IS_LOCAL_IPV4_SERVER  Networkrole = 1
	Networkrole_IS_REMOTE_IPV4_SERVER Networkrole = 2
	Networkrole_IS_UNIX_SERVER        Networkrole = 4
	Networkrole_IS_LOCAL_IPV4_CLIENT  Networkrole = 8
	Networkrole_IS_REMOTE_IPV4_CLIENT Networkrole = 16
	Networkrole_IS_UNIX_CLIENT        Networkrole = 32
)

var Networkrole_name = map[int32]string{
	0:  "NONE",
	1:  "IS_LOCAL_IPV4_SERVER",
	2:  "IS_REMOTE_IPV4_SERVER",
	4:  "IS_UNIX_SERVER",
	8:  "IS_LOCAL_IPV4_CLIENT",
	16: "IS_REMOTE_IPV4_CLIENT",
	32: "IS_UNIX_CLIENT",
}
var Networkrole_value = map[string]int32{
	"NONE":                  0,
	"IS_LOCAL_IPV4_SERVER":  1,
	"IS_REMOTE_IPV4_SERVER": 2,
	"IS_UNIX_SERVER":        4,
	"IS_LOCAL_IPV4_CLIENT":  8,
	"IS_REMOTE_IPV4_CLIENT": 16,
	"IS_UNIX_CLIENT":        32,
}

func (x Networkrole) Enum() *Networkrole {
	p := new(Networkrole)
	*p = x
	return p
}
func (x Networkrole) String() string {
	return proto.EnumName(Networkrole_name, int32(x))
}
func (x *Networkrole) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Networkrole_value, data, "Networkrole")
	if err != nil {
		return err
	}
	*x = Networkrole(value)
	return nil
}
func (Networkrole) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

//
// MESSAGE TYPES
//
type MessageType int32

const (
	MessageType_METRICS               MessageType = 1
	MessageType_DUMP_REQUEST_START    MessageType = 2
	MessageType_DUMP_REQUEST_STOP     MessageType = 4
	MessageType_DUMP_RESPONSE         MessageType = 3
	MessageType_SSH_OPEN_CHANNEL      MessageType = 6
	MessageType_SSH_CLOSE_CHANNEL     MessageType = 7
	MessageType_SSH_DATA              MessageType = 8
	MessageType_AUTO_UPDATE_REQUEST   MessageType = 9
	MessageType_DIRTY_SHUTDOWN_REPORT MessageType = 10
	MessageType_CONFIG_DATA           MessageType = 11
	MessageType_ERROR_MESSAGE         MessageType = 12
)

var MessageType_name = map[int32]string{
	1:  "METRICS",
	2:  "DUMP_REQUEST_START",
	4:  "DUMP_REQUEST_STOP",
	3:  "DUMP_RESPONSE",
	6:  "SSH_OPEN_CHANNEL",
	7:  "SSH_CLOSE_CHANNEL",
	8:  "SSH_DATA",
	9:  "AUTO_UPDATE_REQUEST",
	10: "DIRTY_SHUTDOWN_REPORT",
	11: "CONFIG_DATA",
	12: "ERROR_MESSAGE",
}
var MessageType_value = map[string]int32{
	"METRICS":               1,
	"DUMP_REQUEST_START":    2,
	"DUMP_REQUEST_STOP":     4,
	"DUMP_RESPONSE":         3,
	"SSH_OPEN_CHANNEL":      6,
	"SSH_CLOSE_CHANNEL":     7,
	"SSH_DATA":              8,
	"AUTO_UPDATE_REQUEST":   9,
	"DIRTY_SHUTDOWN_REPORT": 10,
	"CONFIG_DATA":           11,
	"ERROR_MESSAGE":         12,
}

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}
func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (x *MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageType_value, data, "MessageType")
	if err != nil {
		return err
	}
	*x = MessageType(value)
	return nil
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ContainerType int32

const (
	ContainerType_DOCKER      ContainerType = 1
	ContainerType_LXC         ContainerType = 2
	ContainerType_LIBVIRT_LXC ContainerType = 3
	ContainerType_MESOS       ContainerType = 4
	ContainerType_RKT         ContainerType = 5
)

var ContainerType_name = map[int32]string{
	1: "DOCKER",
	2: "LXC",
	3: "LIBVIRT_LXC",
	4: "MESOS",
	5: "RKT",
}
var ContainerType_value = map[string]int32{
	"DOCKER":      1,
	"LXC":         2,
	"LIBVIRT_LXC": 3,
	"MESOS":       4,
	"RKT":         5,
}

func (x ContainerType) Enum() *ContainerType {
	p := new(ContainerType)
	*p = x
	return p
}
func (x ContainerType) String() string {
	return proto.EnumName(ContainerType_name, int32(x))
}
func (x *ContainerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContainerType_value, data, "ContainerType")
	if err != nil {
		return err
	}
	*x = ContainerType(value)
	return nil
}
func (ContainerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type ErrorType int32

const (
	ErrorType_ERR_CONN_LIMIT           ErrorType = 1
	ErrorType_ERR_INVALID_CUSTOMER_KEY ErrorType = 2
	ErrorType_ERR_DUPLICATE_AGENT      ErrorType = 3
)

var ErrorType_name = map[int32]string{
	1: "ERR_CONN_LIMIT",
	2: "ERR_INVALID_CUSTOMER_KEY",
	3: "ERR_DUPLICATE_AGENT",
}
var ErrorType_value = map[string]int32{
	"ERR_CONN_LIMIT":           1,
	"ERR_INVALID_CUSTOMER_KEY": 2,
	"ERR_DUPLICATE_AGENT":      3,
}

func (x ErrorType) Enum() *ErrorType {
	p := new(ErrorType)
	*p = x
	return p
}
func (x ErrorType) String() string {
	return proto.EnumName(ErrorType_name, int32(x))
}
func (x *ErrorType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrorType_value, data, "ErrorType")
	if err != nil {
		return err
	}
	*x = ErrorType(value)
	return nil
}
func (ErrorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type CounterTime struct {
	Count            *uint32 `protobuf:"varint,1,req,name=count" json:"count,omitempty"`
	TimeNs           *uint64 `protobuf:"varint,2,req,name=time_ns" json:"time_ns,omitempty"`
	TimePercentage   *uint32 `protobuf:"varint,3,opt,name=time_percentage" json:"time_percentage,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CounterTime) Reset()                    { *m = CounterTime{} }
func (m *CounterTime) String() string            { return proto.CompactTextString(m) }
func (*CounterTime) ProtoMessage()               {}
func (*CounterTime) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CounterTime) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CounterTime) GetTimeNs() uint64 {
	if m != nil && m.TimeNs != nil {
		return *m.TimeNs
	}
	return 0
}

func (m *CounterTime) GetTimePercentage() uint32 {
	if m != nil && m.TimePercentage != nil {
		return *m.TimePercentage
	}
	return 0
}

type CounterTimeBidirectional struct {
	CountIn          *uint32 `protobuf:"varint,1,req,name=count_in" json:"count_in,omitempty"`
	CountOut         *uint32 `protobuf:"varint,2,req,name=count_out" json:"count_out,omitempty"`
	TimeNsIn         *uint64 `protobuf:"varint,3,req,name=time_ns_in" json:"time_ns_in,omitempty"`
	TimeNsOut        *uint64 `protobuf:"varint,4,req,name=time_ns_out" json:"time_ns_out,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CounterTimeBidirectional) Reset()                    { *m = CounterTimeBidirectional{} }
func (m *CounterTimeBidirectional) String() string            { return proto.CompactTextString(m) }
func (*CounterTimeBidirectional) ProtoMessage()               {}
func (*CounterTimeBidirectional) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CounterTimeBidirectional) GetCountIn() uint32 {
	if m != nil && m.CountIn != nil {
		return *m.CountIn
	}
	return 0
}

func (m *CounterTimeBidirectional) GetCountOut() uint32 {
	if m != nil && m.CountOut != nil {
		return *m.CountOut
	}
	return 0
}

func (m *CounterTimeBidirectional) GetTimeNsIn() uint64 {
	if m != nil && m.TimeNsIn != nil {
		return *m.TimeNsIn
	}
	return 0
}

func (m *CounterTimeBidirectional) GetTimeNsOut() uint64 {
	if m != nil && m.TimeNsOut != nil {
		return *m.TimeNsOut
	}
	return 0
}

type CounterBytes struct {
	CountIn          *uint32 `protobuf:"varint,1,req,name=count_in" json:"count_in,omitempty"`
	CountOut         *uint32 `protobuf:"varint,2,req,name=count_out" json:"count_out,omitempty"`
	BytesIn          *uint32 `protobuf:"varint,3,req,name=bytes_in" json:"bytes_in,omitempty"`
	BytesOut         *uint32 `protobuf:"varint,4,req,name=bytes_out" json:"bytes_out,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CounterBytes) Reset()                    { *m = CounterBytes{} }
func (m *CounterBytes) String() string            { return proto.CompactTextString(m) }
func (*CounterBytes) ProtoMessage()               {}
func (*CounterBytes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CounterBytes) GetCountIn() uint32 {
	if m != nil && m.CountIn != nil {
		return *m.CountIn
	}
	return 0
}

func (m *CounterBytes) GetCountOut() uint32 {
	if m != nil && m.CountOut != nil {
		return *m.CountOut
	}
	return 0
}

func (m *CounterBytes) GetBytesIn() uint32 {
	if m != nil && m.BytesIn != nil {
		return *m.BytesIn
	}
	return 0
}

func (m *CounterBytes) GetBytesOut() uint32 {
	if m != nil && m.BytesOut != nil {
		return *m.BytesOut
	}
	return 0
}

type CounterTimeBytes struct {
	TimeNsIn            *uint64 `protobuf:"varint,1,req,name=time_ns_in" json:"time_ns_in,omitempty"`
	TimeNsOut           *uint64 `protobuf:"varint,2,req,name=time_ns_out" json:"time_ns_out,omitempty"`
	TimeNsOther         *uint64 `protobuf:"varint,3,req,name=time_ns_other" json:"time_ns_other,omitempty"`
	CountIn             *uint32 `protobuf:"varint,4,req,name=count_in" json:"count_in,omitempty"`
	CountOut            *uint32 `protobuf:"varint,5,req,name=count_out" json:"count_out,omitempty"`
	CountOther          *uint32 `protobuf:"varint,6,req,name=count_other" json:"count_other,omitempty"`
	BytesIn             *uint32 `protobuf:"varint,7,req,name=bytes_in" json:"bytes_in,omitempty"`
	BytesOut            *uint32 `protobuf:"varint,8,req,name=bytes_out" json:"bytes_out,omitempty"`
	BytesOther          *uint32 `protobuf:"varint,9,req,name=bytes_other" json:"bytes_other,omitempty"`
	TimePercentageIn    *uint32 `protobuf:"varint,10,opt,name=time_percentage_in" json:"time_percentage_in,omitempty"`
	TimePercentageOut   *uint32 `protobuf:"varint,11,opt,name=time_percentage_out" json:"time_percentage_out,omitempty"`
	TimePercentageOther *uint32 `protobuf:"varint,12,opt,name=time_percentage_other" json:"time_percentage_other,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *CounterTimeBytes) Reset()                    { *m = CounterTimeBytes{} }
func (m *CounterTimeBytes) String() string            { return proto.CompactTextString(m) }
func (*CounterTimeBytes) ProtoMessage()               {}
func (*CounterTimeBytes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CounterTimeBytes) GetTimeNsIn() uint64 {
	if m != nil && m.TimeNsIn != nil {
		return *m.TimeNsIn
	}
	return 0
}

func (m *CounterTimeBytes) GetTimeNsOut() uint64 {
	if m != nil && m.TimeNsOut != nil {
		return *m.TimeNsOut
	}
	return 0
}

func (m *CounterTimeBytes) GetTimeNsOther() uint64 {
	if m != nil && m.TimeNsOther != nil {
		return *m.TimeNsOther
	}
	return 0
}

func (m *CounterTimeBytes) GetCountIn() uint32 {
	if m != nil && m.CountIn != nil {
		return *m.CountIn
	}
	return 0
}

func (m *CounterTimeBytes) GetCountOut() uint32 {
	if m != nil && m.CountOut != nil {
		return *m.CountOut
	}
	return 0
}

func (m *CounterTimeBytes) GetCountOther() uint32 {
	if m != nil && m.CountOther != nil {
		return *m.CountOther
	}
	return 0
}

func (m *CounterTimeBytes) GetBytesIn() uint32 {
	if m != nil && m.BytesIn != nil {
		return *m.BytesIn
	}
	return 0
}

func (m *CounterTimeBytes) GetBytesOut() uint32 {
	if m != nil && m.BytesOut != nil {
		return *m.BytesOut
	}
	return 0
}

func (m *CounterTimeBytes) GetBytesOther() uint32 {
	if m != nil && m.BytesOther != nil {
		return *m.BytesOther
	}
	return 0
}

func (m *CounterTimeBytes) GetTimePercentageIn() uint32 {
	if m != nil && m.TimePercentageIn != nil {
		return *m.TimePercentageIn
	}
	return 0
}

func (m *CounterTimeBytes) GetTimePercentageOut() uint32 {
	if m != nil && m.TimePercentageOut != nil {
		return *m.TimePercentageOut
	}
	return 0
}

func (m *CounterTimeBytes) GetTimePercentageOther() uint32 {
	if m != nil && m.TimePercentageOther != nil {
		return *m.TimePercentageOther
	}
	return 0
}

type TimeCategories struct {
	Unknown          *CounterTime      `protobuf:"bytes,1,opt,name=unknown" json:"unknown,omitempty"`
	Other            *CounterTime      `protobuf:"bytes,2,opt,name=other" json:"other,omitempty"`
	File             *CounterTime      `protobuf:"bytes,3,opt,name=file" json:"file,omitempty"`
	Net              *CounterTime      `protobuf:"bytes,4,opt,name=net" json:"net,omitempty"`
	Ipc              *CounterTime      `protobuf:"bytes,5,opt,name=ipc" json:"ipc,omitempty"`
	Memory           *CounterTime      `protobuf:"bytes,6,opt,name=memory" json:"memory,omitempty"`
	Process          *CounterTime      `protobuf:"bytes,7,opt,name=process" json:"process,omitempty"`
	Sleep            *CounterTime      `protobuf:"bytes,8,opt,name=sleep" json:"sleep,omitempty"`
	System           *CounterTime      `protobuf:"bytes,9,opt,name=system" json:"system,omitempty"`
	Signal           *CounterTime      `protobuf:"bytes,10,opt,name=signal" json:"signal,omitempty"`
	User             *CounterTime      `protobuf:"bytes,11,opt,name=user" json:"user,omitempty"`
	Time             *CounterTime      `protobuf:"bytes,12,opt,name=time" json:"time,omitempty"`
	IoFile           *CounterTimeBytes `protobuf:"bytes,13,opt,name=io_file" json:"io_file,omitempty"`
	IoNet            *CounterTimeBytes `protobuf:"bytes,14,opt,name=io_net" json:"io_net,omitempty"`
	IoOther          *CounterTimeBytes `protobuf:"bytes,15,opt,name=io_other" json:"io_other,omitempty"`
	Wait             *CounterTime      `protobuf:"bytes,16,opt,name=wait" json:"wait,omitempty"`
	Processing       *CounterTime      `protobuf:"bytes,17,opt,name=processing" json:"processing,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *TimeCategories) Reset()                    { *m = TimeCategories{} }
func (m *TimeCategories) String() string            { return proto.CompactTextString(m) }
func (*TimeCategories) ProtoMessage()               {}
func (*TimeCategories) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TimeCategories) GetUnknown() *CounterTime {
	if m != nil {
		return m.Unknown
	}
	return nil
}

func (m *TimeCategories) GetOther() *CounterTime {
	if m != nil {
		return m.Other
	}
	return nil
}

func (m *TimeCategories) GetFile() *CounterTime {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *TimeCategories) GetNet() *CounterTime {
	if m != nil {
		return m.Net
	}
	return nil
}

func (m *TimeCategories) GetIpc() *CounterTime {
	if m != nil {
		return m.Ipc
	}
	return nil
}

func (m *TimeCategories) GetMemory() *CounterTime {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *TimeCategories) GetProcess() *CounterTime {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *TimeCategories) GetSleep() *CounterTime {
	if m != nil {
		return m.Sleep
	}
	return nil
}

func (m *TimeCategories) GetSystem() *CounterTime {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *TimeCategories) GetSignal() *CounterTime {
	if m != nil {
		return m.Signal
	}
	return nil
}

func (m *TimeCategories) GetUser() *CounterTime {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TimeCategories) GetTime() *CounterTime {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *TimeCategories) GetIoFile() *CounterTimeBytes {
	if m != nil {
		return m.IoFile
	}
	return nil
}

func (m *TimeCategories) GetIoNet() *CounterTimeBytes {
	if m != nil {
		return m.IoNet
	}
	return nil
}

func (m *TimeCategories) GetIoOther() *CounterTimeBytes {
	if m != nil {
		return m.IoOther
	}
	return nil
}

func (m *TimeCategories) GetWait() *CounterTime {
	if m != nil {
		return m.Wait
	}
	return nil
}

func (m *TimeCategories) GetProcessing() *CounterTime {
	if m != nil {
		return m.Processing
	}
	return nil
}

//
// Stores how time is spent serving requests by the host
//
type TransactionBreakdownCategories struct {
	Other            *CounterTime      `protobuf:"bytes,2,opt,name=other" json:"other,omitempty"`
	IoFile           *CounterTimeBytes `protobuf:"bytes,13,opt,name=io_file" json:"io_file,omitempty"`
	IoNet            *CounterTimeBytes `protobuf:"bytes,14,opt,name=io_net" json:"io_net,omitempty"`
	Processing       *CounterTime      `protobuf:"bytes,17,opt,name=processing" json:"processing,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *TransactionBreakdownCategories) Reset()                    { *m = TransactionBreakdownCategories{} }
func (m *TransactionBreakdownCategories) String() string            { return proto.CompactTextString(m) }
func (*TransactionBreakdownCategories) ProtoMessage()               {}
func (*TransactionBreakdownCategories) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TransactionBreakdownCategories) GetOther() *CounterTime {
	if m != nil {
		return m.Other
	}
	return nil
}

func (m *TransactionBreakdownCategories) GetIoFile() *CounterTimeBytes {
	if m != nil {
		return m.IoFile
	}
	return nil
}

func (m *TransactionBreakdownCategories) GetIoNet() *CounterTimeBytes {
	if m != nil {
		return m.IoNet
	}
	return nil
}

func (m *TransactionBreakdownCategories) GetProcessing() *CounterTime {
	if m != nil {
		return m.Processing
	}
	return nil
}

type CounterSyscallErrors struct {
	Count            *uint32  `protobuf:"varint,1,req,name=count" json:"count,omitempty"`
	TopErrorCodes    []uint32 `protobuf:"varint,2,rep,name=top_error_codes" json:"top_error_codes,omitempty"`
	CountFile        *uint32  `protobuf:"varint,4,opt,name=count_file" json:"count_file,omitempty"`
	CountFileOpen    *uint32  `protobuf:"varint,5,opt,name=count_file_open" json:"count_file_open,omitempty"`
	CountNet         *uint32  `protobuf:"varint,6,opt,name=count_net" json:"count_net,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CounterSyscallErrors) Reset()                    { *m = CounterSyscallErrors{} }
func (m *CounterSyscallErrors) String() string            { return proto.CompactTextString(m) }
func (*CounterSyscallErrors) ProtoMessage()               {}
func (*CounterSyscallErrors) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CounterSyscallErrors) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CounterSyscallErrors) GetTopErrorCodes() []uint32 {
	if m != nil {
		return m.TopErrorCodes
	}
	return nil
}

func (m *CounterSyscallErrors) GetCountFile() uint32 {
	if m != nil && m.CountFile != nil {
		return *m.CountFile
	}
	return 0
}

func (m *CounterSyscallErrors) GetCountFileOpen() uint32 {
	if m != nil && m.CountFileOpen != nil {
		return *m.CountFileOpen
	}
	return 0
}

func (m *CounterSyscallErrors) GetCountNet() uint32 {
	if m != nil && m.CountNet != nil {
		return *m.CountNet
	}
	return 0
}

type ResourceCategories struct {
	CapacityScore           *uint32 `protobuf:"varint,1,opt,name=capacity_score" json:"capacity_score,omitempty"`
	StolenCapacityScore     *uint32 `protobuf:"varint,6,opt,name=stolen_capacity_score" json:"stolen_capacity_score,omitempty"`
	ConnectionQueueUsagePct *uint32 `protobuf:"varint,2,opt,name=connection_queue_usage_pct" json:"connection_queue_usage_pct,omitempty"`
	FdUsagePct              *uint32 `protobuf:"varint,3,opt,name=fd_usage_pct" json:"fd_usage_pct,omitempty"`
	CpuPct                  *uint32 `protobuf:"varint,4,opt,name=cpu_pct" json:"cpu_pct,omitempty"`
	ResidentMemoryUsageKb   *uint32 `protobuf:"varint,5,opt,name=resident_memory_usage_kb" json:"resident_memory_usage_kb,omitempty"`
	VirtualMemoryUsageKb    *uint32 `protobuf:"varint,13,opt,name=virtual_memory_usage_kb" json:"virtual_memory_usage_kb,omitempty"`
	SwapMemoryUsageKb       *uint32 `protobuf:"varint,14,opt,name=swap_memory_usage_kb" json:"swap_memory_usage_kb,omitempty"`
	MajorPagefaults         *uint64 `protobuf:"varint,15,opt,name=major_pagefaults" json:"major_pagefaults,omitempty"`
	MinorPagefaults         *uint64 `protobuf:"varint,16,opt,name=minor_pagefaults" json:"minor_pagefaults,omitempty"`
	FdCount                 *uint32 `protobuf:"varint,21,opt,name=fd_count" json:"fd_count,omitempty"`
	CpuShares               *uint32 `protobuf:"varint,24,opt,name=cpu_shares" json:"cpu_shares,omitempty"`
	CpuSharesUsagePct       *uint32 `protobuf:"varint,25,opt,name=cpu_shares_usage_pct" json:"cpu_shares_usage_pct,omitempty"`
	MemoryLimitKb           *uint32 `protobuf:"varint,26,opt,name=memory_limit_kb" json:"memory_limit_kb,omitempty"`
	SwapLimitKb             *uint32 `protobuf:"varint,27,opt,name=swap_limit_kb" json:"swap_limit_kb,omitempty"`
	CpuQuotaUsedPct         *uint32 `protobuf:"varint,28,opt,name=cpu_quota_used_pct" json:"cpu_quota_used_pct,omitempty"`
	SwapMemoryTotalKb       *uint32 `protobuf:"varint,29,opt,name=swap_memory_total_kb" json:"swap_memory_total_kb,omitempty"`
	SwapMemoryAvailableKb   *uint32 `protobuf:"varint,30,opt,name=swap_memory_available_kb" json:"swap_memory_available_kb,omitempty"`
	CountProcesses          *uint64 `protobuf:"varint,31,opt,name=count_processes" json:"count_processes,omitempty"`
	ProcStartCount          *uint64 `protobuf:"varint,32,opt,name=proc_start_count" json:"proc_start_count,omitempty"`
	XXX_unrecognized        []byte  `json:"-"`
}

func (m *ResourceCategories) Reset()                    { *m = ResourceCategories{} }
func (m *ResourceCategories) String() string            { return proto.CompactTextString(m) }
func (*ResourceCategories) ProtoMessage()               {}
func (*ResourceCategories) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ResourceCategories) GetCapacityScore() uint32 {
	if m != nil && m.CapacityScore != nil {
		return *m.CapacityScore
	}
	return 0
}

func (m *ResourceCategories) GetStolenCapacityScore() uint32 {
	if m != nil && m.StolenCapacityScore != nil {
		return *m.StolenCapacityScore
	}
	return 0
}

func (m *ResourceCategories) GetConnectionQueueUsagePct() uint32 {
	if m != nil && m.ConnectionQueueUsagePct != nil {
		return *m.ConnectionQueueUsagePct
	}
	return 0
}

func (m *ResourceCategories) GetFdUsagePct() uint32 {
	if m != nil && m.FdUsagePct != nil {
		return *m.FdUsagePct
	}
	return 0
}

func (m *ResourceCategories) GetCpuPct() uint32 {
	if m != nil && m.CpuPct != nil {
		return *m.CpuPct
	}
	return 0
}

func (m *ResourceCategories) GetResidentMemoryUsageKb() uint32 {
	if m != nil && m.ResidentMemoryUsageKb != nil {
		return *m.ResidentMemoryUsageKb
	}
	return 0
}

func (m *ResourceCategories) GetVirtualMemoryUsageKb() uint32 {
	if m != nil && m.VirtualMemoryUsageKb != nil {
		return *m.VirtualMemoryUsageKb
	}
	return 0
}

func (m *ResourceCategories) GetSwapMemoryUsageKb() uint32 {
	if m != nil && m.SwapMemoryUsageKb != nil {
		return *m.SwapMemoryUsageKb
	}
	return 0
}

func (m *ResourceCategories) GetMajorPagefaults() uint64 {
	if m != nil && m.MajorPagefaults != nil {
		return *m.MajorPagefaults
	}
	return 0
}

func (m *ResourceCategories) GetMinorPagefaults() uint64 {
	if m != nil && m.MinorPagefaults != nil {
		return *m.MinorPagefaults
	}
	return 0
}

func (m *ResourceCategories) GetFdCount() uint32 {
	if m != nil && m.FdCount != nil {
		return *m.FdCount
	}
	return 0
}

func (m *ResourceCategories) GetCpuShares() uint32 {
	if m != nil && m.CpuShares != nil {
		return *m.CpuShares
	}
	return 0
}

func (m *ResourceCategories) GetCpuSharesUsagePct() uint32 {
	if m != nil && m.CpuSharesUsagePct != nil {
		return *m.CpuSharesUsagePct
	}
	return 0
}

func (m *ResourceCategories) GetMemoryLimitKb() uint32 {
	if m != nil && m.MemoryLimitKb != nil {
		return *m.MemoryLimitKb
	}
	return 0
}

func (m *ResourceCategories) GetSwapLimitKb() uint32 {
	if m != nil && m.SwapLimitKb != nil {
		return *m.SwapLimitKb
	}
	return 0
}

func (m *ResourceCategories) GetCpuQuotaUsedPct() uint32 {
	if m != nil && m.CpuQuotaUsedPct != nil {
		return *m.CpuQuotaUsedPct
	}
	return 0
}

func (m *ResourceCategories) GetSwapMemoryTotalKb() uint32 {
	if m != nil && m.SwapMemoryTotalKb != nil {
		return *m.SwapMemoryTotalKb
	}
	return 0
}

func (m *ResourceCategories) GetSwapMemoryAvailableKb() uint32 {
	if m != nil && m.SwapMemoryAvailableKb != nil {
		return *m.SwapMemoryAvailableKb
	}
	return 0
}

func (m *ResourceCategories) GetCountProcesses() uint64 {
	if m != nil && m.CountProcesses != nil {
		return *m.CountProcesses
	}
	return 0
}

func (m *ResourceCategories) GetProcStartCount() uint64 {
	if m != nil && m.ProcStartCount != nil {
		return *m.ProcStartCount
	}
	return 0
}

type ConnectionCategories struct {
	Server                 *CounterBytes             `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	Client                 *CounterBytes             `protobuf:"bytes,2,opt,name=client" json:"client,omitempty"`
	TransactionCounters    *CounterTimeBidirectional `protobuf:"bytes,3,opt,name=transaction_counters" json:"transaction_counters,omitempty"`
	MinTransactionCounters *CounterTimeBidirectional `protobuf:"bytes,18,opt,name=min_transaction_counters" json:"min_transaction_counters,omitempty"`
	MaxTransactionCounters *CounterTimeBidirectional `protobuf:"bytes,19,opt,name=max_transaction_counters" json:"max_transaction_counters,omitempty"`
	NAggregatedConnections *uint32                   `protobuf:"varint,4,opt,name=n_aggregated_connections" json:"n_aggregated_connections,omitempty"`
	XXX_unrecognized       []byte                    `json:"-"`
}

func (m *ConnectionCategories) Reset()                    { *m = ConnectionCategories{} }
func (m *ConnectionCategories) String() string            { return proto.CompactTextString(m) }
func (*ConnectionCategories) ProtoMessage()               {}
func (*ConnectionCategories) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ConnectionCategories) GetServer() *CounterBytes {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *ConnectionCategories) GetClient() *CounterBytes {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *ConnectionCategories) GetTransactionCounters() *CounterTimeBidirectional {
	if m != nil {
		return m.TransactionCounters
	}
	return nil
}

func (m *ConnectionCategories) GetMinTransactionCounters() *CounterTimeBidirectional {
	if m != nil {
		return m.MinTransactionCounters
	}
	return nil
}

func (m *ConnectionCategories) GetMaxTransactionCounters() *CounterTimeBidirectional {
	if m != nil {
		return m.MaxTransactionCounters
	}
	return nil
}

func (m *ConnectionCategories) GetNAggregatedConnections() uint32 {
	if m != nil && m.NAggregatedConnections != nil {
		return *m.NAggregatedConnections
	}
	return 0
}

type ProcessDetails struct {
	Comm             *string  `protobuf:"bytes,1,req,name=comm" json:"comm,omitempty"`
	Exe              *string  `protobuf:"bytes,2,req,name=exe" json:"exe,omitempty"`
	Args             []string `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	ContainerId      *string  `protobuf:"bytes,4,opt,name=container_id" json:"container_id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ProcessDetails) Reset()                    { *m = ProcessDetails{} }
func (m *ProcessDetails) String() string            { return proto.CompactTextString(m) }
func (*ProcessDetails) ProtoMessage()               {}
func (*ProcessDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ProcessDetails) GetComm() string {
	if m != nil && m.Comm != nil {
		return *m.Comm
	}
	return ""
}

func (m *ProcessDetails) GetExe() string {
	if m != nil && m.Exe != nil {
		return *m.Exe
	}
	return ""
}

func (m *ProcessDetails) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ProcessDetails) GetContainerId() string {
	if m != nil && m.ContainerId != nil {
		return *m.ContainerId
	}
	return ""
}

//
// Description of a command executed on the machine
//
type CommandDetails struct {
	Timestamp        *uint64 `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"`
	Count            *uint32 `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	Cmdline          *string `protobuf:"bytes,3,req,name=cmdline" json:"cmdline,omitempty"`
	Exe              *string `protobuf:"bytes,4,req,name=exe" json:"exe,omitempty"`
	Parentcomm       *string `protobuf:"bytes,5,opt,name=parentcomm" json:"parentcomm,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandDetails) Reset()                    { *m = CommandDetails{} }
func (m *CommandDetails) String() string            { return proto.CompactTextString(m) }
func (*CommandDetails) ProtoMessage()               {}
func (*CommandDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CommandDetails) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CommandDetails) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CommandDetails) GetCmdline() string {
	if m != nil && m.Cmdline != nil {
		return *m.Cmdline
	}
	return ""
}

func (m *CommandDetails) GetExe() string {
	if m != nil && m.Exe != nil {
		return *m.Exe
	}
	return ""
}

func (m *CommandDetails) GetParentcomm() string {
	if m != nil && m.Parentcomm != nil {
		return *m.Parentcomm
	}
	return ""
}

//
// Counters for a protocol-related dimension, like a URL or a query
//
type CounterProtoEntry struct {
	Ncalls           *uint32 `protobuf:"varint,1,req,name=ncalls" json:"ncalls,omitempty"`
	TimeTot          *uint64 `protobuf:"varint,2,req,name=time_tot" json:"time_tot,omitempty"`
	TimeMax          *uint64 `protobuf:"varint,3,req,name=time_max" json:"time_max,omitempty"`
	BytesIn          *uint64 `protobuf:"varint,4,req,name=bytes_in" json:"bytes_in,omitempty"`
	BytesOut         *uint64 `protobuf:"varint,5,req,name=bytes_out" json:"bytes_out,omitempty"`
	Nerrors          *uint32 `protobuf:"varint,6,req,name=nerrors" json:"nerrors,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CounterProtoEntry) Reset()                    { *m = CounterProtoEntry{} }
func (m *CounterProtoEntry) String() string            { return proto.CompactTextString(m) }
func (*CounterProtoEntry) ProtoMessage()               {}
func (*CounterProtoEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CounterProtoEntry) GetNcalls() uint32 {
	if m != nil && m.Ncalls != nil {
		return *m.Ncalls
	}
	return 0
}

func (m *CounterProtoEntry) GetTimeTot() uint64 {
	if m != nil && m.TimeTot != nil {
		return *m.TimeTot
	}
	return 0
}

func (m *CounterProtoEntry) GetTimeMax() uint64 {
	if m != nil && m.TimeMax != nil {
		return *m.TimeMax
	}
	return 0
}

func (m *CounterProtoEntry) GetBytesIn() uint64 {
	if m != nil && m.BytesIn != nil {
		return *m.BytesIn
	}
	return 0
}

func (m *CounterProtoEntry) GetBytesOut() uint64 {
	if m != nil && m.BytesOut != nil {
		return *m.BytesOut
	}
	return 0
}

func (m *CounterProtoEntry) GetNerrors() uint32 {
	if m != nil && m.Nerrors != nil {
		return *m.Nerrors
	}
	return 0
}

//
// URL information
//
type UrlDetails struct {
	//
	// The URL, in the following format "TYPEADDR<:PORT>/PATH", e.g. "p172.16.189.128:9000/api/data".
	// Note: possible values foy type are:
	//   n for NONE
	//   g for GET
	//   p for POST
	//   o for OPTIONS
	//   h for HEAD
	//   P for PUT
	//   d for DELETE
	//   t for TRACE
	//   c for CONNECT
	//
	Url              *string            `protobuf:"bytes,1,req,name=url" json:"url,omitempty"`
	Counters         *CounterProtoEntry `protobuf:"bytes,2,req,name=counters" json:"counters,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *UrlDetails) Reset()                    { *m = UrlDetails{} }
func (m *UrlDetails) String() string            { return proto.CompactTextString(m) }
func (*UrlDetails) ProtoMessage()               {}
func (*UrlDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UrlDetails) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *UrlDetails) GetCounters() *CounterProtoEntry {
	if m != nil {
		return m.Counters
	}
	return nil
}

type StatusCodeDetails struct {
	StatusCode       *uint32 `protobuf:"varint,1,req,name=status_code" json:"status_code,omitempty"`
	Ncalls           *uint32 `protobuf:"varint,2,req,name=ncalls" json:"ncalls,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StatusCodeDetails) Reset()                    { *m = StatusCodeDetails{} }
func (m *StatusCodeDetails) String() string            { return proto.CompactTextString(m) }
func (*StatusCodeDetails) ProtoMessage()               {}
func (*StatusCodeDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *StatusCodeDetails) GetStatusCode() uint32 {
	if m != nil && m.StatusCode != nil {
		return *m.StatusCode
	}
	return 0
}

func (m *StatusCodeDetails) GetNcalls() uint32 {
	if m != nil && m.Ncalls != nil {
		return *m.Ncalls
	}
	return 0
}

//
// HTTP protocol information
//
type HttpInfo struct {
	ServerUrls        []*UrlDetails        `protobuf:"bytes,1,rep,name=server_urls" json:"server_urls,omitempty"`
	ClientUrls        []*UrlDetails        `protobuf:"bytes,2,rep,name=client_urls" json:"client_urls,omitempty"`
	ClientStatusCodes []*StatusCodeDetails `protobuf:"bytes,3,rep,name=client_status_codes" json:"client_status_codes,omitempty"`
	ServerStatusCodes []*StatusCodeDetails `protobuf:"bytes,4,rep,name=server_status_codes" json:"server_status_codes,omitempty"`
	XXX_unrecognized  []byte               `json:"-"`
}

func (m *HttpInfo) Reset()                    { *m = HttpInfo{} }
func (m *HttpInfo) String() string            { return proto.CompactTextString(m) }
func (*HttpInfo) ProtoMessage()               {}
func (*HttpInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *HttpInfo) GetServerUrls() []*UrlDetails {
	if m != nil {
		return m.ServerUrls
	}
	return nil
}

func (m *HttpInfo) GetClientUrls() []*UrlDetails {
	if m != nil {
		return m.ClientUrls
	}
	return nil
}

func (m *HttpInfo) GetClientStatusCodes() []*StatusCodeDetails {
	if m != nil {
		return m.ClientStatusCodes
	}
	return nil
}

func (m *HttpInfo) GetServerStatusCodes() []*StatusCodeDetails {
	if m != nil {
		return m.ServerStatusCodes
	}
	return nil
}

//
// SQL query information
//
type SqlEntryDetails struct {
	Name             *string            `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Counters         *CounterProtoEntry `protobuf:"bytes,2,req,name=counters" json:"counters,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *SqlEntryDetails) Reset()                    { *m = SqlEntryDetails{} }
func (m *SqlEntryDetails) String() string            { return proto.CompactTextString(m) }
func (*SqlEntryDetails) ProtoMessage()               {}
func (*SqlEntryDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SqlEntryDetails) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SqlEntryDetails) GetCounters() *CounterProtoEntry {
	if m != nil {
		return m.Counters
	}
	return nil
}

type SqlQueryTypeDetails struct {
	Type             *SqlStatementType  `protobuf:"varint,1,req,name=type,enum=draiosproto.SqlStatementType" json:"type,omitempty"`
	Counters         *CounterProtoEntry `protobuf:"bytes,2,req,name=counters" json:"counters,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *SqlQueryTypeDetails) Reset()                    { *m = SqlQueryTypeDetails{} }
func (m *SqlQueryTypeDetails) String() string            { return proto.CompactTextString(m) }
func (*SqlQueryTypeDetails) ProtoMessage()               {}
func (*SqlQueryTypeDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SqlQueryTypeDetails) GetType() SqlStatementType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SqlStatementType_SOP_NONE
}

func (m *SqlQueryTypeDetails) GetCounters() *CounterProtoEntry {
	if m != nil {
		return m.Counters
	}
	return nil
}

//
// SQL protocol information
//
type SqlInfo struct {
	ServerQueries    []*SqlEntryDetails     `protobuf:"bytes,1,rep,name=server_queries" json:"server_queries,omitempty"`
	ClientQueries    []*SqlEntryDetails     `protobuf:"bytes,2,rep,name=client_queries" json:"client_queries,omitempty"`
	ServerQueryTypes []*SqlQueryTypeDetails `protobuf:"bytes,3,rep,name=server_query_types" json:"server_query_types,omitempty"`
	ClientQueryTypes []*SqlQueryTypeDetails `protobuf:"bytes,4,rep,name=client_query_types" json:"client_query_types,omitempty"`
	ServerTables     []*SqlEntryDetails     `protobuf:"bytes,5,rep,name=server_tables" json:"server_tables,omitempty"`
	ClientTables     []*SqlEntryDetails     `protobuf:"bytes,6,rep,name=client_tables" json:"client_tables,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *SqlInfo) Reset()                    { *m = SqlInfo{} }
func (m *SqlInfo) String() string            { return proto.CompactTextString(m) }
func (*SqlInfo) ProtoMessage()               {}
func (*SqlInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SqlInfo) GetServerQueries() []*SqlEntryDetails {
	if m != nil {
		return m.ServerQueries
	}
	return nil
}

func (m *SqlInfo) GetClientQueries() []*SqlEntryDetails {
	if m != nil {
		return m.ClientQueries
	}
	return nil
}

func (m *SqlInfo) GetServerQueryTypes() []*SqlQueryTypeDetails {
	if m != nil {
		return m.ServerQueryTypes
	}
	return nil
}

func (m *SqlInfo) GetClientQueryTypes() []*SqlQueryTypeDetails {
	if m != nil {
		return m.ClientQueryTypes
	}
	return nil
}

func (m *SqlInfo) GetServerTables() []*SqlEntryDetails {
	if m != nil {
		return m.ServerTables
	}
	return nil
}

func (m *SqlInfo) GetClientTables() []*SqlEntryDetails {
	if m != nil {
		return m.ClientTables
	}
	return nil
}

type MongodbCollectionDetails struct {
	Name             *string            `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Counters         *CounterProtoEntry `protobuf:"bytes,2,req,name=counters" json:"counters,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *MongodbCollectionDetails) Reset()                    { *m = MongodbCollectionDetails{} }
func (m *MongodbCollectionDetails) String() string            { return proto.CompactTextString(m) }
func (*MongodbCollectionDetails) ProtoMessage()               {}
func (*MongodbCollectionDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *MongodbCollectionDetails) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MongodbCollectionDetails) GetCounters() *CounterProtoEntry {
	if m != nil {
		return m.Counters
	}
	return nil
}

type MongodbOpTypeDetails struct {
	Op               *MongodbOpType     `protobuf:"varint,1,req,name=op,enum=draiosproto.MongodbOpType" json:"op,omitempty"`
	Counters         *CounterProtoEntry `protobuf:"bytes,2,req,name=counters" json:"counters,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *MongodbOpTypeDetails) Reset()                    { *m = MongodbOpTypeDetails{} }
func (m *MongodbOpTypeDetails) String() string            { return proto.CompactTextString(m) }
func (*MongodbOpTypeDetails) ProtoMessage()               {}
func (*MongodbOpTypeDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *MongodbOpTypeDetails) GetOp() MongodbOpType {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return MongodbOpType_MONGODB_OP_NONE
}

func (m *MongodbOpTypeDetails) GetCounters() *CounterProtoEntry {
	if m != nil {
		return m.Counters
	}
	return nil
}

type MongodbInfo struct {
	ServersOps        []*MongodbOpTypeDetails     `protobuf:"bytes,1,rep,name=servers_ops" json:"servers_ops,omitempty"`
	ClientOps         []*MongodbOpTypeDetails     `protobuf:"bytes,2,rep,name=client_ops" json:"client_ops,omitempty"`
	ServerCollections []*MongodbCollectionDetails `protobuf:"bytes,3,rep,name=server_collections" json:"server_collections,omitempty"`
	ClientCollections []*MongodbCollectionDetails `protobuf:"bytes,4,rep,name=client_collections" json:"client_collections,omitempty"`
	XXX_unrecognized  []byte                      `json:"-"`
}

func (m *MongodbInfo) Reset()                    { *m = MongodbInfo{} }
func (m *MongodbInfo) String() string            { return proto.CompactTextString(m) }
func (*MongodbInfo) ProtoMessage()               {}
func (*MongodbInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *MongodbInfo) GetServersOps() []*MongodbOpTypeDetails {
	if m != nil {
		return m.ServersOps
	}
	return nil
}

func (m *MongodbInfo) GetClientOps() []*MongodbOpTypeDetails {
	if m != nil {
		return m.ClientOps
	}
	return nil
}

func (m *MongodbInfo) GetServerCollections() []*MongodbCollectionDetails {
	if m != nil {
		return m.ServerCollections
	}
	return nil
}

func (m *MongodbInfo) GetClientCollections() []*MongodbCollectionDetails {
	if m != nil {
		return m.ClientCollections
	}
	return nil
}

type JmxAttribute struct {
	Name             *string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            *float64        `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
	Alias            *string         `protobuf:"bytes,5,opt,name=alias" json:"alias,omitempty"`
	Type             *JmxMetricType  `protobuf:"varint,7,opt,name=type,enum=draiosproto.JmxMetricType" json:"type,omitempty"`
	Unit             *Unit           `protobuf:"varint,8,opt,name=unit,enum=draiosproto.Unit" json:"unit,omitempty"`
	Scale            *Scale          `protobuf:"varint,9,opt,name=scale,enum=draiosproto.Scale" json:"scale,omitempty"`
	Subattributes    []*JmxAttribute `protobuf:"bytes,3,rep,name=subattributes" json:"subattributes,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *JmxAttribute) Reset()                    { *m = JmxAttribute{} }
func (m *JmxAttribute) String() string            { return proto.CompactTextString(m) }
func (*JmxAttribute) ProtoMessage()               {}
func (*JmxAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *JmxAttribute) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *JmxAttribute) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *JmxAttribute) GetAlias() string {
	if m != nil && m.Alias != nil {
		return *m.Alias
	}
	return ""
}

func (m *JmxAttribute) GetType() JmxMetricType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return JmxMetricType_JMX_METRIC_TYPE_COUNTER
}

func (m *JmxAttribute) GetUnit() Unit {
	if m != nil && m.Unit != nil {
		return *m.Unit
	}
	return Unit_UNIT_NONE
}

func (m *JmxAttribute) GetScale() Scale {
	if m != nil && m.Scale != nil {
		return *m.Scale
	}
	return Scale_SCALE_NONE
}

func (m *JmxAttribute) GetSubattributes() []*JmxAttribute {
	if m != nil {
		return m.Subattributes
	}
	return nil
}

type JmxBean struct {
	Name             *string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Attributes       []*JmxAttribute `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *JmxBean) Reset()                    { *m = JmxBean{} }
func (m *JmxBean) String() string            { return proto.CompactTextString(m) }
func (*JmxBean) ProtoMessage()               {}
func (*JmxBean) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *JmxBean) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *JmxBean) GetAttributes() []*JmxAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type JavaInfo struct {
	ProcessName      *string    `protobuf:"bytes,1,opt,name=process_name" json:"process_name,omitempty"`
	Beans            []*JmxBean `protobuf:"bytes,2,rep,name=beans" json:"beans,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *JavaInfo) Reset()                    { *m = JavaInfo{} }
func (m *JavaInfo) String() string            { return proto.CompactTextString(m) }
func (*JavaInfo) ProtoMessage()               {}
func (*JavaInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *JavaInfo) GetProcessName() string {
	if m != nil && m.ProcessName != nil {
		return *m.ProcessName
	}
	return ""
}

func (m *JavaInfo) GetBeans() []*JmxBean {
	if m != nil {
		return m.Beans
	}
	return nil
}

type StatsdTag struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StatsdTag) Reset()                    { *m = StatsdTag{} }
func (m *StatsdTag) String() string            { return proto.CompactTextString(m) }
func (*StatsdTag) ProtoMessage()               {}
func (*StatsdTag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *StatsdTag) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *StatsdTag) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type StatsdMetric struct {
	Name *string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags []*StatsdTag      `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	Type *StatsdMetricType `protobuf:"varint,3,opt,name=type,enum=draiosproto.StatsdMetricType" json:"type,omitempty"`
	// Valid on COUNT, GAUGE and SET
	Value *float64 `protobuf:"fixed64,4,opt,name=value" json:"value,omitempty"`
	// Valid only on HISTOGRAM type
	Sum              *float64 `protobuf:"fixed64,5,opt,name=sum" json:"sum,omitempty"`
	Min              *float64 `protobuf:"fixed64,6,opt,name=min" json:"min,omitempty"`
	Max              *float64 `protobuf:"fixed64,7,opt,name=max" json:"max,omitempty"`
	Count            *float64 `protobuf:"fixed64,8,opt,name=count" json:"count,omitempty"`
	Median           *float64 `protobuf:"fixed64,9,opt,name=median" json:"median,omitempty"`
	Percentile_95    *float64 `protobuf:"fixed64,10,opt,name=percentile_95" json:"percentile_95,omitempty"`
	Percentile_99    *float64 `protobuf:"fixed64,11,opt,name=percentile_99" json:"percentile_99,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *StatsdMetric) Reset()                    { *m = StatsdMetric{} }
func (m *StatsdMetric) String() string            { return proto.CompactTextString(m) }
func (*StatsdMetric) ProtoMessage()               {}
func (*StatsdMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *StatsdMetric) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *StatsdMetric) GetTags() []*StatsdTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *StatsdMetric) GetType() StatsdMetricType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return StatsdMetricType_STATSD_COUNT
}

func (m *StatsdMetric) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *StatsdMetric) GetSum() float64 {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return 0
}

func (m *StatsdMetric) GetMin() float64 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *StatsdMetric) GetMax() float64 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

func (m *StatsdMetric) GetCount() float64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *StatsdMetric) GetMedian() float64 {
	if m != nil && m.Median != nil {
		return *m.Median
	}
	return 0
}

func (m *StatsdMetric) GetPercentile_95() float64 {
	if m != nil && m.Percentile_95 != nil {
		return *m.Percentile_95
	}
	return 0
}

func (m *StatsdMetric) GetPercentile_99() float64 {
	if m != nil && m.Percentile_99 != nil {
		return *m.Percentile_99
	}
	return 0
}

type StatsdInfo struct {
	// May be used in the future to add metadata
	StatsdMetrics    []*StatsdMetric `protobuf:"bytes,1,rep,name=statsd_metrics" json:"statsd_metrics,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *StatsdInfo) Reset()                    { *m = StatsdInfo{} }
func (m *StatsdInfo) String() string            { return proto.CompactTextString(m) }
func (*StatsdInfo) ProtoMessage()               {}
func (*StatsdInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *StatsdInfo) GetStatsdMetrics() []*StatsdMetric {
	if m != nil {
		return m.StatsdMetrics
	}
	return nil
}

type AppTag struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AppTag) Reset()                    { *m = AppTag{} }
func (m *AppTag) String() string            { return proto.CompactTextString(m) }
func (*AppTag) ProtoMessage()               {}
func (*AppTag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *AppTag) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *AppTag) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type AppMetric struct {
	Name *string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type *AppMetricType `protobuf:"varint,2,opt,name=type,enum=draiosproto.AppMetricType" json:"type,omitempty"`
	// Valid on GAUGE and RATE
	Value            *float64  `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
	Tags             []*AppTag `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *AppMetric) Reset()                    { *m = AppMetric{} }
func (m *AppMetric) String() string            { return proto.CompactTextString(m) }
func (*AppMetric) ProtoMessage()               {}
func (*AppMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *AppMetric) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AppMetric) GetType() AppMetricType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AppMetricType_APP_METRIC_TYPE_GAUGE
}

func (m *AppMetric) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *AppMetric) GetTags() []*AppTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type AppCheck struct {
	Name             *string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            *AppCheckValue `protobuf:"varint,2,opt,name=value,enum=draiosproto.AppCheckValue" json:"value,omitempty"`
	Tags             []*AppTag      `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *AppCheck) Reset()                    { *m = AppCheck{} }
func (m *AppCheck) String() string            { return proto.CompactTextString(m) }
func (*AppCheck) ProtoMessage()               {}
func (*AppCheck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *AppCheck) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AppCheck) GetValue() AppCheckValue {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return AppCheckValue_APP_CHECK_VALUE_OK
}

func (m *AppCheck) GetTags() []*AppTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type AppInfo struct {
	ProcessName      *string      `protobuf:"bytes,1,opt,name=process_name" json:"process_name,omitempty"`
	Metrics          []*AppMetric `protobuf:"bytes,2,rep,name=metrics" json:"metrics,omitempty"`
	Checks           []*AppCheck  `protobuf:"bytes,3,rep,name=checks" json:"checks,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *AppInfo) Reset()                    { *m = AppInfo{} }
func (m *AppInfo) String() string            { return proto.CompactTextString(m) }
func (*AppInfo) ProtoMessage()               {}
func (*AppInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *AppInfo) GetProcessName() string {
	if m != nil && m.ProcessName != nil {
		return *m.ProcessName
	}
	return ""
}

func (m *AppInfo) GetMetrics() []*AppMetric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *AppInfo) GetChecks() []*AppCheck {
	if m != nil {
		return m.Checks
	}
	return nil
}

//
// General protocol information
//
type ProtoInfo struct {
	Http             *HttpInfo    `protobuf:"bytes,1,opt,name=http" json:"http,omitempty"`
	Mysql            *SqlInfo     `protobuf:"bytes,2,opt,name=mysql" json:"mysql,omitempty"`
	Postgres         *SqlInfo     `protobuf:"bytes,3,opt,name=postgres" json:"postgres,omitempty"`
	Mongodb          *MongodbInfo `protobuf:"bytes,4,opt,name=mongodb" json:"mongodb,omitempty"`
	Java             *JavaInfo    `protobuf:"bytes,5,opt,name=java" json:"java,omitempty"`
	Statsd           *StatsdInfo  `protobuf:"bytes,6,opt,name=statsd" json:"statsd,omitempty"`
	App              *AppInfo     `protobuf:"bytes,7,opt,name=app" json:"app,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ProtoInfo) Reset()                    { *m = ProtoInfo{} }
func (m *ProtoInfo) String() string            { return proto.CompactTextString(m) }
func (*ProtoInfo) ProtoMessage()               {}
func (*ProtoInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ProtoInfo) GetHttp() *HttpInfo {
	if m != nil {
		return m.Http
	}
	return nil
}

func (m *ProtoInfo) GetMysql() *SqlInfo {
	if m != nil {
		return m.Mysql
	}
	return nil
}

func (m *ProtoInfo) GetPostgres() *SqlInfo {
	if m != nil {
		return m.Postgres
	}
	return nil
}

func (m *ProtoInfo) GetMongodb() *MongodbInfo {
	if m != nil {
		return m.Mongodb
	}
	return nil
}

func (m *ProtoInfo) GetJava() *JavaInfo {
	if m != nil {
		return m.Java
	}
	return nil
}

func (m *ProtoInfo) GetStatsd() *StatsdInfo {
	if m != nil {
		return m.Statsd
	}
	return nil
}

func (m *ProtoInfo) GetApp() *AppInfo {
	if m != nil {
		return m.App
	}
	return nil
}

type NetworkByPort struct {
	Port             *uint32               `protobuf:"varint,1,req,name=port" json:"port,omitempty"`
	Counters         *ConnectionCategories `protobuf:"bytes,2,req,name=counters" json:"counters,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *NetworkByPort) Reset()                    { *m = NetworkByPort{} }
func (m *NetworkByPort) String() string            { return proto.CompactTextString(m) }
func (*NetworkByPort) ProtoMessage()               {}
func (*NetworkByPort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *NetworkByPort) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *NetworkByPort) GetCounters() *ConnectionCategories {
	if m != nil {
		return m.Counters
	}
	return nil
}

//
// HOST
// global host info.
//
type Host struct {
	Hostname                   *string                         `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	NumCpus                    *uint32                         `protobuf:"varint,2,opt,name=num_cpus" json:"num_cpus,omitempty"`
	CpuLoads                   []uint32                        `protobuf:"varint,3,rep,name=cpu_loads" json:"cpu_loads,omitempty"`
	CpuSteal                   []uint32                        `protobuf:"varint,11,rep,name=cpu_steal" json:"cpu_steal,omitempty"`
	PhysicalMemorySizeBytes    *uint64                         `protobuf:"varint,4,req,name=physical_memory_size_bytes" json:"physical_memory_size_bytes,omitempty"`
	Tcounters                  *TimeCategories                 `protobuf:"bytes,5,opt,name=tcounters" json:"tcounters,omitempty"`
	Reqcounters                *TransactionBreakdownCategories `protobuf:"bytes,12,opt,name=reqcounters" json:"reqcounters,omitempty"`
	TransactionCounters        *CounterTimeBidirectional       `protobuf:"bytes,6,opt,name=transaction_counters" json:"transaction_counters,omitempty"`
	MinTransactionCounters     *CounterTimeBidirectional       `protobuf:"bytes,22,opt,name=min_transaction_counters" json:"min_transaction_counters,omitempty"`
	MaxTransactionCounters     *CounterTimeBidirectional       `protobuf:"bytes,23,opt,name=max_transaction_counters" json:"max_transaction_counters,omitempty"`
	TransactionProcessingDelay *uint64                         `protobuf:"varint,7,opt,name=transaction_processing_delay" json:"transaction_processing_delay,omitempty"`
	// It's calculated by subtracting outgoing connection time from incoming connection time.
	// NEVER USED optional uint64 merged_server_delay = 14; // the total merged time of all the incoming requests.
	NextTiersDelay         *uint64               `protobuf:"varint,13,opt,name=next_tiers_delay" json:"next_tiers_delay,omitempty"`
	ResourceCounters       *ResourceCategories   `protobuf:"bytes,8,opt,name=resource_counters" json:"resource_counters,omitempty"`
	SyscallErrors          *CounterSyscallErrors `protobuf:"bytes,9,opt,name=syscall_errors" json:"syscall_errors,omitempty"`
	ExternalIoNet          *CounterTimeBytes     `protobuf:"bytes,10,opt,name=external_io_net" json:"external_io_net,omitempty"`
	NetworkByServerports   []*NetworkByPort      `protobuf:"bytes,24,rep,name=network_by_serverports" json:"network_by_serverports,omitempty"`
	CpuIdle                []uint32              `protobuf:"varint,25,rep,name=cpu_idle" json:"cpu_idle,omitempty"`
	Uptime                 *uint64               `protobuf:"varint,33,opt,name=uptime" json:"uptime,omitempty"`
	SystemCpu              []uint32              `protobuf:"varint,34,rep,name=system_cpu" json:"system_cpu,omitempty"`
	UserCpu                []uint32              `protobuf:"varint,35,rep,name=user_cpu" json:"user_cpu,omitempty"`
	MemoryBytesAvailableKb *uint64               `protobuf:"varint,36,opt,name=memory_bytes_available_kb" json:"memory_bytes_available_kb,omitempty"`
	IowaitCpu              []uint32              `protobuf:"varint,37,rep,name=iowait_cpu" json:"iowait_cpu,omitempty"`
	NiceCpu                []uint32              `protobuf:"varint,38,rep,name=nice_cpu" json:"nice_cpu,omitempty"`
	SystemLoad_1           *uint32               `protobuf:"varint,41,opt,name=system_load_1" json:"system_load_1,omitempty"`
	SystemLoad_5           *uint32               `protobuf:"varint,42,opt,name=system_load_5" json:"system_load_5,omitempty"`
	SystemLoad_15          *uint32               `protobuf:"varint,43,opt,name=system_load_15" json:"system_load_15,omitempty"`
	XXX_unrecognized       []byte                `json:"-"`
}

func (m *Host) Reset()                    { *m = Host{} }
func (m *Host) String() string            { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()               {}
func (*Host) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *Host) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *Host) GetNumCpus() uint32 {
	if m != nil && m.NumCpus != nil {
		return *m.NumCpus
	}
	return 0
}

func (m *Host) GetCpuLoads() []uint32 {
	if m != nil {
		return m.CpuLoads
	}
	return nil
}

func (m *Host) GetCpuSteal() []uint32 {
	if m != nil {
		return m.CpuSteal
	}
	return nil
}

func (m *Host) GetPhysicalMemorySizeBytes() uint64 {
	if m != nil && m.PhysicalMemorySizeBytes != nil {
		return *m.PhysicalMemorySizeBytes
	}
	return 0
}

func (m *Host) GetTcounters() *TimeCategories {
	if m != nil {
		return m.Tcounters
	}
	return nil
}

func (m *Host) GetReqcounters() *TransactionBreakdownCategories {
	if m != nil {
		return m.Reqcounters
	}
	return nil
}

func (m *Host) GetTransactionCounters() *CounterTimeBidirectional {
	if m != nil {
		return m.TransactionCounters
	}
	return nil
}

func (m *Host) GetMinTransactionCounters() *CounterTimeBidirectional {
	if m != nil {
		return m.MinTransactionCounters
	}
	return nil
}

func (m *Host) GetMaxTransactionCounters() *CounterTimeBidirectional {
	if m != nil {
		return m.MaxTransactionCounters
	}
	return nil
}

func (m *Host) GetTransactionProcessingDelay() uint64 {
	if m != nil && m.TransactionProcessingDelay != nil {
		return *m.TransactionProcessingDelay
	}
	return 0
}

func (m *Host) GetNextTiersDelay() uint64 {
	if m != nil && m.NextTiersDelay != nil {
		return *m.NextTiersDelay
	}
	return 0
}

func (m *Host) GetResourceCounters() *ResourceCategories {
	if m != nil {
		return m.ResourceCounters
	}
	return nil
}

func (m *Host) GetSyscallErrors() *CounterSyscallErrors {
	if m != nil {
		return m.SyscallErrors
	}
	return nil
}

func (m *Host) GetExternalIoNet() *CounterTimeBytes {
	if m != nil {
		return m.ExternalIoNet
	}
	return nil
}

func (m *Host) GetNetworkByServerports() []*NetworkByPort {
	if m != nil {
		return m.NetworkByServerports
	}
	return nil
}

func (m *Host) GetCpuIdle() []uint32 {
	if m != nil {
		return m.CpuIdle
	}
	return nil
}

func (m *Host) GetUptime() uint64 {
	if m != nil && m.Uptime != nil {
		return *m.Uptime
	}
	return 0
}

func (m *Host) GetSystemCpu() []uint32 {
	if m != nil {
		return m.SystemCpu
	}
	return nil
}

func (m *Host) GetUserCpu() []uint32 {
	if m != nil {
		return m.UserCpu
	}
	return nil
}

func (m *Host) GetMemoryBytesAvailableKb() uint64 {
	if m != nil && m.MemoryBytesAvailableKb != nil {
		return *m.MemoryBytesAvailableKb
	}
	return 0
}

func (m *Host) GetIowaitCpu() []uint32 {
	if m != nil {
		return m.IowaitCpu
	}
	return nil
}

func (m *Host) GetNiceCpu() []uint32 {
	if m != nil {
		return m.NiceCpu
	}
	return nil
}

func (m *Host) GetSystemLoad_1() uint32 {
	if m != nil && m.SystemLoad_1 != nil {
		return *m.SystemLoad_1
	}
	return 0
}

func (m *Host) GetSystemLoad_5() uint32 {
	if m != nil && m.SystemLoad_5 != nil {
		return *m.SystemLoad_5
	}
	return 0
}

func (m *Host) GetSystemLoad_15() uint32 {
	if m != nil && m.SystemLoad_15 != nil {
		return *m.SystemLoad_15
	}
	return 0
}

type Process struct {
	Details                    *ProcessDetails           `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
	IsIpv4TransactionServer    *bool                     `protobuf:"varint,3,opt,name=is_ipv4_transaction_server" json:"is_ipv4_transaction_server,omitempty"`
	IsUnixTransactionServer    *bool                     `protobuf:"varint,4,opt,name=is_unix_transaction_server" json:"is_unix_transaction_server,omitempty"`
	IsIpv4TransactionClient    *bool                     `protobuf:"varint,10,opt,name=is_ipv4_transaction_client" json:"is_ipv4_transaction_client,omitempty"`
	IsUnixTransactionClient    *bool                     `protobuf:"varint,11,opt,name=is_unix_transaction_client" json:"is_unix_transaction_client,omitempty"`
	Netrole                    *uint32                   `protobuf:"varint,13,opt,name=netrole" json:"netrole,omitempty"`
	Tcounters                  *TimeCategories           `protobuf:"bytes,5,opt,name=tcounters" json:"tcounters,omitempty"`
	TransactionCounters        *CounterTimeBidirectional `protobuf:"bytes,6,opt,name=transaction_counters" json:"transaction_counters,omitempty"`
	MinTransactionCounters     *CounterTimeBidirectional `protobuf:"bytes,18,opt,name=min_transaction_counters" json:"min_transaction_counters,omitempty"`
	MaxTransactionCounters     *CounterTimeBidirectional `protobuf:"bytes,19,opt,name=max_transaction_counters" json:"max_transaction_counters,omitempty"`
	TransactionProcessingDelay *uint64                   `protobuf:"varint,7,opt,name=transaction_processing_delay" json:"transaction_processing_delay,omitempty"`
	// It's calculated by subtracting outgoing connection time from incoming connection time.
	// NEVER USED optional uint64 merged_server_delay = 14; // the total merged time of all the incoming requests.
	NextTiersDelay   *uint64               `protobuf:"varint,12,opt,name=next_tiers_delay" json:"next_tiers_delay,omitempty"`
	ResourceCounters *ResourceCategories   `protobuf:"bytes,8,opt,name=resource_counters" json:"resource_counters,omitempty"`
	SyscallErrors    *CounterSyscallErrors `protobuf:"bytes,9,opt,name=syscall_errors" json:"syscall_errors,omitempty"`
	Protos           *ProtoInfo            `protobuf:"bytes,20,opt,name=protos" json:"protos,omitempty"`
	StartCount       *uint64               `protobuf:"varint,21,opt,name=start_count" json:"start_count,omitempty"`
	CountProcesses   *uint64               `protobuf:"varint,23,opt,name=count_processes" json:"count_processes,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *Process) Reset()                    { *m = Process{} }
func (m *Process) String() string            { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()               {}
func (*Process) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Process) GetDetails() *ProcessDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Process) GetIsIpv4TransactionServer() bool {
	if m != nil && m.IsIpv4TransactionServer != nil {
		return *m.IsIpv4TransactionServer
	}
	return false
}

func (m *Process) GetIsUnixTransactionServer() bool {
	if m != nil && m.IsUnixTransactionServer != nil {
		return *m.IsUnixTransactionServer
	}
	return false
}

func (m *Process) GetIsIpv4TransactionClient() bool {
	if m != nil && m.IsIpv4TransactionClient != nil {
		return *m.IsIpv4TransactionClient
	}
	return false
}

func (m *Process) GetIsUnixTransactionClient() bool {
	if m != nil && m.IsUnixTransactionClient != nil {
		return *m.IsUnixTransactionClient
	}
	return false
}

func (m *Process) GetNetrole() uint32 {
	if m != nil && m.Netrole != nil {
		return *m.Netrole
	}
	return 0
}

func (m *Process) GetTcounters() *TimeCategories {
	if m != nil {
		return m.Tcounters
	}
	return nil
}

func (m *Process) GetTransactionCounters() *CounterTimeBidirectional {
	if m != nil {
		return m.TransactionCounters
	}
	return nil
}

func (m *Process) GetMinTransactionCounters() *CounterTimeBidirectional {
	if m != nil {
		return m.MinTransactionCounters
	}
	return nil
}

func (m *Process) GetMaxTransactionCounters() *CounterTimeBidirectional {
	if m != nil {
		return m.MaxTransactionCounters
	}
	return nil
}

func (m *Process) GetTransactionProcessingDelay() uint64 {
	if m != nil && m.TransactionProcessingDelay != nil {
		return *m.TransactionProcessingDelay
	}
	return 0
}

func (m *Process) GetNextTiersDelay() uint64 {
	if m != nil && m.NextTiersDelay != nil {
		return *m.NextTiersDelay
	}
	return 0
}

func (m *Process) GetResourceCounters() *ResourceCategories {
	if m != nil {
		return m.ResourceCounters
	}
	return nil
}

func (m *Process) GetSyscallErrors() *CounterSyscallErrors {
	if m != nil {
		return m.SyscallErrors
	}
	return nil
}

func (m *Process) GetProtos() *ProtoInfo {
	if m != nil {
		return m.Protos
	}
	return nil
}

func (m *Process) GetStartCount() uint64 {
	if m != nil && m.StartCount != nil {
		return *m.StartCount
	}
	return 0
}

func (m *Process) GetCountProcesses() uint64 {
	if m != nil && m.CountProcesses != nil {
		return *m.CountProcesses
	}
	return 0
}

//
// PROGRAM
// info for a program, i.e. a collection of processes with the same name and the same creator.
//
type Program struct {
	Procinfo         *Process `protobuf:"bytes,1,req,name=procinfo" json:"procinfo,omitempty"`
	Pids             []uint64 `protobuf:"varint,2,rep,name=pids" json:"pids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Program) Reset()                    { *m = Program{} }
func (m *Program) String() string            { return proto.CompactTextString(m) }
func (*Program) ProtoMessage()               {}
func (*Program) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *Program) GetProcinfo() *Process {
	if m != nil {
		return m.Procinfo
	}
	return nil
}

func (m *Program) GetPids() []uint64 {
	if m != nil {
		return m.Pids
	}
	return nil
}

//
// IPv4 CONNECTION
//
type Ipv4Tuple struct {
	Sip              *uint32 `protobuf:"varint,1,req,name=sip" json:"sip,omitempty"`
	Dip              *uint32 `protobuf:"varint,2,req,name=dip" json:"dip,omitempty"`
	Sport            *uint32 `protobuf:"varint,3,req,name=sport" json:"sport,omitempty"`
	Dport            *uint32 `protobuf:"varint,4,req,name=dport" json:"dport,omitempty"`
	L4Proto          *uint32 `protobuf:"varint,5,req,name=l4proto" json:"l4proto,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Ipv4Tuple) Reset()                    { *m = Ipv4Tuple{} }
func (m *Ipv4Tuple) String() string            { return proto.CompactTextString(m) }
func (*Ipv4Tuple) ProtoMessage()               {}
func (*Ipv4Tuple) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *Ipv4Tuple) GetSip() uint32 {
	if m != nil && m.Sip != nil {
		return *m.Sip
	}
	return 0
}

func (m *Ipv4Tuple) GetDip() uint32 {
	if m != nil && m.Dip != nil {
		return *m.Dip
	}
	return 0
}

func (m *Ipv4Tuple) GetSport() uint32 {
	if m != nil && m.Sport != nil {
		return *m.Sport
	}
	return 0
}

func (m *Ipv4Tuple) GetDport() uint32 {
	if m != nil && m.Dport != nil {
		return *m.Dport
	}
	return 0
}

func (m *Ipv4Tuple) GetL4Proto() uint32 {
	if m != nil && m.L4Proto != nil {
		return *m.L4Proto
	}
	return 0
}

type Ipv4Connection struct {
	Tuple            *Ipv4Tuple            `protobuf:"bytes,1,req,name=tuple" json:"tuple,omitempty"`
	Spid             *uint64               `protobuf:"varint,2,opt,name=spid" json:"spid,omitempty"`
	Dpid             *uint64               `protobuf:"varint,5,opt,name=dpid" json:"dpid,omitempty"`
	Counters         *ConnectionCategories `protobuf:"bytes,8,req,name=counters" json:"counters,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *Ipv4Connection) Reset()                    { *m = Ipv4Connection{} }
func (m *Ipv4Connection) String() string            { return proto.CompactTextString(m) }
func (*Ipv4Connection) ProtoMessage()               {}
func (*Ipv4Connection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *Ipv4Connection) GetTuple() *Ipv4Tuple {
	if m != nil {
		return m.Tuple
	}
	return nil
}

func (m *Ipv4Connection) GetSpid() uint64 {
	if m != nil && m.Spid != nil {
		return *m.Spid
	}
	return 0
}

func (m *Ipv4Connection) GetDpid() uint64 {
	if m != nil && m.Dpid != nil {
		return *m.Dpid
	}
	return 0
}

func (m *Ipv4Connection) GetCounters() *ConnectionCategories {
	if m != nil {
		return m.Counters
	}
	return nil
}

//
// NETWORK INTERFACE
//
type Ipv4NetworkInterface struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Addr             *uint32 `protobuf:"varint,2,req,name=addr" json:"addr,omitempty"`
	Netmask          *uint32 `protobuf:"varint,3,req,name=netmask" json:"netmask,omitempty"`
	Bcast            *uint32 `protobuf:"varint,4,opt,name=bcast" json:"bcast,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Ipv4NetworkInterface) Reset()                    { *m = Ipv4NetworkInterface{} }
func (m *Ipv4NetworkInterface) String() string            { return proto.CompactTextString(m) }
func (*Ipv4NetworkInterface) ProtoMessage()               {}
func (*Ipv4NetworkInterface) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *Ipv4NetworkInterface) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Ipv4NetworkInterface) GetAddr() uint32 {
	if m != nil && m.Addr != nil {
		return *m.Addr
	}
	return 0
}

func (m *Ipv4NetworkInterface) GetNetmask() uint32 {
	if m != nil && m.Netmask != nil {
		return *m.Netmask
	}
	return 0
}

func (m *Ipv4NetworkInterface) GetBcast() uint32 {
	if m != nil && m.Bcast != nil {
		return *m.Bcast
	}
	return 0
}

//
// MOUNTED FILE SYSTEM
//
type MountedFs struct {
	Device           *string `protobuf:"bytes,1,req,name=device" json:"device,omitempty"`
	MountDir         *string `protobuf:"bytes,2,req,name=mount_dir" json:"mount_dir,omitempty"`
	Type             *string `protobuf:"bytes,3,req,name=type" json:"type,omitempty"`
	SizeBytes        *uint64 `protobuf:"varint,4,req,name=size_bytes" json:"size_bytes,omitempty"`
	UsedBytes        *uint64 `protobuf:"varint,5,req,name=used_bytes" json:"used_bytes,omitempty"`
	AvailableBytes   *uint64 `protobuf:"varint,6,req,name=available_bytes" json:"available_bytes,omitempty"`
	TotalInodes      *uint64 `protobuf:"varint,10,opt,name=total_inodes" json:"total_inodes,omitempty"`
	UsedInodes       *uint64 `protobuf:"varint,11,opt,name=used_inodes" json:"used_inodes,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MountedFs) Reset()                    { *m = MountedFs{} }
func (m *MountedFs) String() string            { return proto.CompactTextString(m) }
func (*MountedFs) ProtoMessage()               {}
func (*MountedFs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *MountedFs) GetDevice() string {
	if m != nil && m.Device != nil {
		return *m.Device
	}
	return ""
}

func (m *MountedFs) GetMountDir() string {
	if m != nil && m.MountDir != nil {
		return *m.MountDir
	}
	return ""
}

func (m *MountedFs) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *MountedFs) GetSizeBytes() uint64 {
	if m != nil && m.SizeBytes != nil {
		return *m.SizeBytes
	}
	return 0
}

func (m *MountedFs) GetUsedBytes() uint64 {
	if m != nil && m.UsedBytes != nil {
		return *m.UsedBytes
	}
	return 0
}

func (m *MountedFs) GetAvailableBytes() uint64 {
	if m != nil && m.AvailableBytes != nil {
		return *m.AvailableBytes
	}
	return 0
}

func (m *MountedFs) GetTotalInodes() uint64 {
	if m != nil && m.TotalInodes != nil {
		return *m.TotalInodes
	}
	return 0
}

func (m *MountedFs) GetUsedInodes() uint64 {
	if m != nil && m.UsedInodes != nil {
		return *m.UsedInodes
	}
	return 0
}

//
// TOP FILE STATISTICS
//
type FileStat struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Bytes            *uint32 `protobuf:"varint,2,req,name=bytes" json:"bytes,omitempty"`
	TimeNs           *uint64 `protobuf:"varint,3,req,name=time_ns" json:"time_ns,omitempty"`
	OpenCount        *uint32 `protobuf:"varint,4,req,name=open_count" json:"open_count,omitempty"`
	Errors           *uint32 `protobuf:"varint,5,req,name=errors" json:"errors,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FileStat) Reset()                    { *m = FileStat{} }
func (m *FileStat) String() string            { return proto.CompactTextString(m) }
func (*FileStat) ProtoMessage()               {}
func (*FileStat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *FileStat) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *FileStat) GetBytes() uint32 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *FileStat) GetTimeNs() uint64 {
	if m != nil && m.TimeNs != nil {
		return *m.TimeNs
	}
	return 0
}

func (m *FileStat) GetOpenCount() uint32 {
	if m != nil && m.OpenCount != nil {
		return *m.OpenCount
	}
	return 0
}

func (m *FileStat) GetErrors() uint32 {
	if m != nil && m.Errors != nil {
		return *m.Errors
	}
	return 0
}

type ContainerPortMapping struct {
	HostIp           *uint32 `protobuf:"varint,1,opt,name=host_ip" json:"host_ip,omitempty"`
	HostPort         *uint32 `protobuf:"varint,2,opt,name=host_port" json:"host_port,omitempty"`
	ContainerIp      *uint32 `protobuf:"varint,3,opt,name=container_ip" json:"container_ip,omitempty"`
	ContainerPort    *uint32 `protobuf:"varint,4,opt,name=container_port" json:"container_port,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContainerPortMapping) Reset()                    { *m = ContainerPortMapping{} }
func (m *ContainerPortMapping) String() string            { return proto.CompactTextString(m) }
func (*ContainerPortMapping) ProtoMessage()               {}
func (*ContainerPortMapping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *ContainerPortMapping) GetHostIp() uint32 {
	if m != nil && m.HostIp != nil {
		return *m.HostIp
	}
	return 0
}

func (m *ContainerPortMapping) GetHostPort() uint32 {
	if m != nil && m.HostPort != nil {
		return *m.HostPort
	}
	return 0
}

func (m *ContainerPortMapping) GetContainerIp() uint32 {
	if m != nil && m.ContainerIp != nil {
		return *m.ContainerIp
	}
	return 0
}

func (m *ContainerPortMapping) GetContainerPort() uint32 {
	if m != nil && m.ContainerPort != nil {
		return *m.ContainerPort
	}
	return 0
}

type ContainerLabel struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContainerLabel) Reset()                    { *m = ContainerLabel{} }
func (m *ContainerLabel) String() string            { return proto.CompactTextString(m) }
func (*ContainerLabel) ProtoMessage()               {}
func (*ContainerLabel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *ContainerLabel) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *ContainerLabel) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Container struct {
	Id                         *string                         `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Type                       *ContainerType                  `protobuf:"varint,2,opt,name=type,enum=draiosproto.ContainerType" json:"type,omitempty"`
	Name                       *string                         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Image                      *string                         `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
	Tcounters                  *TimeCategories                 `protobuf:"bytes,5,opt,name=tcounters" json:"tcounters,omitempty"`
	Reqcounters                *TransactionBreakdownCategories `protobuf:"bytes,6,opt,name=reqcounters" json:"reqcounters,omitempty"`
	TransactionCounters        *CounterTimeBidirectional       `protobuf:"bytes,7,opt,name=transaction_counters" json:"transaction_counters,omitempty"`
	MinTransactionCounters     *CounterTimeBidirectional       `protobuf:"bytes,8,opt,name=min_transaction_counters" json:"min_transaction_counters,omitempty"`
	MaxTransactionCounters     *CounterTimeBidirectional       `protobuf:"bytes,9,opt,name=max_transaction_counters" json:"max_transaction_counters,omitempty"`
	TransactionProcessingDelay *uint64                         `protobuf:"varint,10,opt,name=transaction_processing_delay" json:"transaction_processing_delay,omitempty"`
	// It's calculated by subtracting outgoing connection time from incoming connection time.
	// NEVER USED optional uint64 merged_server_delay = 11; // the total merged time of all the incoming requests.
	NextTiersDelay       *uint64                 `protobuf:"varint,12,opt,name=next_tiers_delay" json:"next_tiers_delay,omitempty"`
	ResourceCounters     *ResourceCategories     `protobuf:"bytes,13,opt,name=resource_counters" json:"resource_counters,omitempty"`
	SyscallErrors        *CounterSyscallErrors   `protobuf:"bytes,14,opt,name=syscall_errors" json:"syscall_errors,omitempty"`
	PortMappings         []*ContainerPortMapping `protobuf:"bytes,18,rep,name=port_mappings" json:"port_mappings,omitempty"`
	Protos               *ProtoInfo              `protobuf:"bytes,19,opt,name=protos" json:"protos,omitempty"`
	Labels               []*ContainerLabel       `protobuf:"bytes,20,rep,name=labels" json:"labels,omitempty"`
	Mounts               []*MountedFs            `protobuf:"bytes,21,rep,name=mounts" json:"mounts,omitempty"`
	NetworkByServerports []*NetworkByPort        `protobuf:"bytes,22,rep,name=network_by_serverports" json:"network_by_serverports,omitempty"`
	MesosTaskId          *string                 `protobuf:"bytes,23,opt,name=mesos_task_id" json:"mesos_task_id,omitempty"`
	ImageId              *string                 `protobuf:"bytes,24,opt,name=image_id" json:"image_id,omitempty"`
	XXX_unrecognized     []byte                  `json:"-"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *Container) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Container) GetType() ContainerType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ContainerType_DOCKER
}

func (m *Container) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Container) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *Container) GetTcounters() *TimeCategories {
	if m != nil {
		return m.Tcounters
	}
	return nil
}

func (m *Container) GetReqcounters() *TransactionBreakdownCategories {
	if m != nil {
		return m.Reqcounters
	}
	return nil
}

func (m *Container) GetTransactionCounters() *CounterTimeBidirectional {
	if m != nil {
		return m.TransactionCounters
	}
	return nil
}

func (m *Container) GetMinTransactionCounters() *CounterTimeBidirectional {
	if m != nil {
		return m.MinTransactionCounters
	}
	return nil
}

func (m *Container) GetMaxTransactionCounters() *CounterTimeBidirectional {
	if m != nil {
		return m.MaxTransactionCounters
	}
	return nil
}

func (m *Container) GetTransactionProcessingDelay() uint64 {
	if m != nil && m.TransactionProcessingDelay != nil {
		return *m.TransactionProcessingDelay
	}
	return 0
}

func (m *Container) GetNextTiersDelay() uint64 {
	if m != nil && m.NextTiersDelay != nil {
		return *m.NextTiersDelay
	}
	return 0
}

func (m *Container) GetResourceCounters() *ResourceCategories {
	if m != nil {
		return m.ResourceCounters
	}
	return nil
}

func (m *Container) GetSyscallErrors() *CounterSyscallErrors {
	if m != nil {
		return m.SyscallErrors
	}
	return nil
}

func (m *Container) GetPortMappings() []*ContainerPortMapping {
	if m != nil {
		return m.PortMappings
	}
	return nil
}

func (m *Container) GetProtos() *ProtoInfo {
	if m != nil {
		return m.Protos
	}
	return nil
}

func (m *Container) GetLabels() []*ContainerLabel {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Container) GetMounts() []*MountedFs {
	if m != nil {
		return m.Mounts
	}
	return nil
}

func (m *Container) GetNetworkByServerports() []*NetworkByPort {
	if m != nil {
		return m.NetworkByServerports
	}
	return nil
}

func (m *Container) GetMesosTaskId() string {
	if m != nil && m.MesosTaskId != nil {
		return *m.MesosTaskId
	}
	return ""
}

func (m *Container) GetImageId() string {
	if m != nil && m.ImageId != nil {
		return *m.ImageId
	}
	return ""
}

//
// KUBERNETES
//
type K8SPair struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *K8SPair) Reset()                    { *m = K8SPair{} }
func (m *K8SPair) String() string            { return proto.CompactTextString(m) }
func (*K8SPair) ProtoMessage()               {}
func (*K8SPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *K8SPair) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *K8SPair) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type K8SCommon struct {
	Name             *string    `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Uid              *string    `protobuf:"bytes,2,req,name=uid" json:"uid,omitempty"`
	Namespace        *string    `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Labels           []*K8SPair `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty"`
	Selectors        []*K8SPair `protobuf:"bytes,5,rep,name=selectors" json:"selectors,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *K8SCommon) Reset()                    { *m = K8SCommon{} }
func (m *K8SCommon) String() string            { return proto.CompactTextString(m) }
func (*K8SCommon) ProtoMessage()               {}
func (*K8SCommon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *K8SCommon) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *K8SCommon) GetUid() string {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return ""
}

func (m *K8SCommon) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *K8SCommon) GetLabels() []*K8SPair {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *K8SCommon) GetSelectors() []*K8SPair {
	if m != nil {
		return m.Selectors
	}
	return nil
}

type K8SNamespace struct {
	Common           *K8SCommon `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *K8SNamespace) Reset()                    { *m = K8SNamespace{} }
func (m *K8SNamespace) String() string            { return proto.CompactTextString(m) }
func (*K8SNamespace) ProtoMessage()               {}
func (*K8SNamespace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *K8SNamespace) GetCommon() *K8SCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

type K8SNode struct {
	Common           *K8SCommon `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	HostIps          []string   `protobuf:"bytes,2,rep,name=host_ips" json:"host_ips,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *K8SNode) Reset()                    { *m = K8SNode{} }
func (m *K8SNode) String() string            { return proto.CompactTextString(m) }
func (*K8SNode) ProtoMessage()               {}
func (*K8SNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *K8SNode) GetCommon() *K8SCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *K8SNode) GetHostIps() []string {
	if m != nil {
		return m.HostIps
	}
	return nil
}

type K8SPod struct {
	Common           *K8SCommon `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	ContainerIds     []string   `protobuf:"bytes,2,rep,name=container_ids" json:"container_ids,omitempty"`
	NodeName         *string    `protobuf:"bytes,3,opt,name=node_name" json:"node_name,omitempty"`
	HostIp           *string    `protobuf:"bytes,4,opt,name=host_ip" json:"host_ip,omitempty"`
	InternalIp       *string    `protobuf:"bytes,5,opt,name=internal_ip" json:"internal_ip,omitempty"`
	RestartCount     *uint32    `protobuf:"varint,6,opt,name=restart_count" json:"restart_count,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *K8SPod) Reset()                    { *m = K8SPod{} }
func (m *K8SPod) String() string            { return proto.CompactTextString(m) }
func (*K8SPod) ProtoMessage()               {}
func (*K8SPod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *K8SPod) GetCommon() *K8SCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *K8SPod) GetContainerIds() []string {
	if m != nil {
		return m.ContainerIds
	}
	return nil
}

func (m *K8SPod) GetNodeName() string {
	if m != nil && m.NodeName != nil {
		return *m.NodeName
	}
	return ""
}

func (m *K8SPod) GetHostIp() string {
	if m != nil && m.HostIp != nil {
		return *m.HostIp
	}
	return ""
}

func (m *K8SPod) GetInternalIp() string {
	if m != nil && m.InternalIp != nil {
		return *m.InternalIp
	}
	return ""
}

func (m *K8SPod) GetRestartCount() uint32 {
	if m != nil && m.RestartCount != nil {
		return *m.RestartCount
	}
	return 0
}

type K8SReplicationController struct {
	Common           *K8SCommon `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	ReplicasDesired  *uint32    `protobuf:"varint,2,opt,name=replicas_desired" json:"replicas_desired,omitempty"`
	ReplicasRunning  *uint32    `protobuf:"varint,3,opt,name=replicas_running" json:"replicas_running,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *K8SReplicationController) Reset()                    { *m = K8SReplicationController{} }
func (m *K8SReplicationController) String() string            { return proto.CompactTextString(m) }
func (*K8SReplicationController) ProtoMessage()               {}
func (*K8SReplicationController) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *K8SReplicationController) GetCommon() *K8SCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *K8SReplicationController) GetReplicasDesired() uint32 {
	if m != nil && m.ReplicasDesired != nil {
		return *m.ReplicasDesired
	}
	return 0
}

func (m *K8SReplicationController) GetReplicasRunning() uint32 {
	if m != nil && m.ReplicasRunning != nil {
		return *m.ReplicasRunning
	}
	return 0
}

type K8SReplicaSet struct {
	Common           *K8SCommon `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	ReplicasDesired  *uint32    `protobuf:"varint,2,opt,name=replicas_desired" json:"replicas_desired,omitempty"`
	ReplicasRunning  *uint32    `protobuf:"varint,3,opt,name=replicas_running" json:"replicas_running,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *K8SReplicaSet) Reset()                    { *m = K8SReplicaSet{} }
func (m *K8SReplicaSet) String() string            { return proto.CompactTextString(m) }
func (*K8SReplicaSet) ProtoMessage()               {}
func (*K8SReplicaSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *K8SReplicaSet) GetCommon() *K8SCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *K8SReplicaSet) GetReplicasDesired() uint32 {
	if m != nil && m.ReplicasDesired != nil {
		return *m.ReplicasDesired
	}
	return 0
}

func (m *K8SReplicaSet) GetReplicasRunning() uint32 {
	if m != nil && m.ReplicasRunning != nil {
		return *m.ReplicasRunning
	}
	return 0
}

type K8SService struct {
	Common           *K8SCommon           `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	ClusterIp        *string              `protobuf:"bytes,2,opt,name=cluster_ip" json:"cluster_ip,omitempty"`
	Ports            []*K8SServiceNetPort `protobuf:"bytes,3,rep,name=ports" json:"ports,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *K8SService) Reset()                    { *m = K8SService{} }
func (m *K8SService) String() string            { return proto.CompactTextString(m) }
func (*K8SService) ProtoMessage()               {}
func (*K8SService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *K8SService) GetCommon() *K8SCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *K8SService) GetClusterIp() string {
	if m != nil && m.ClusterIp != nil {
		return *m.ClusterIp
	}
	return ""
}

func (m *K8SService) GetPorts() []*K8SServiceNetPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

type K8SServiceNetPort struct {
	Port             *uint32 `protobuf:"varint,1,req,name=port" json:"port,omitempty"`
	TargetPort       *uint32 `protobuf:"varint,2,req,name=target_port" json:"target_port,omitempty"`
	Protocol         *string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
	NodePort         *uint32 `protobuf:"varint,4,opt,name=node_port" json:"node_port,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *K8SServiceNetPort) Reset()                    { *m = K8SServiceNetPort{} }
func (m *K8SServiceNetPort) String() string            { return proto.CompactTextString(m) }
func (*K8SServiceNetPort) ProtoMessage()               {}
func (*K8SServiceNetPort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51, 0} }

func (m *K8SServiceNetPort) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *K8SServiceNetPort) GetTargetPort() uint32 {
	if m != nil && m.TargetPort != nil {
		return *m.TargetPort
	}
	return 0
}

func (m *K8SServiceNetPort) GetProtocol() string {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return ""
}

func (m *K8SServiceNetPort) GetNodePort() uint32 {
	if m != nil && m.NodePort != nil {
		return *m.NodePort
	}
	return 0
}

type K8SDeployment struct {
	Common           *K8SCommon `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	ReplicasDesired  *uint32    `protobuf:"varint,2,opt,name=replicas_desired" json:"replicas_desired,omitempty"`
	ReplicasRunning  *uint32    `protobuf:"varint,3,opt,name=replicas_running" json:"replicas_running,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *K8SDeployment) Reset()                    { *m = K8SDeployment{} }
func (m *K8SDeployment) String() string            { return proto.CompactTextString(m) }
func (*K8SDeployment) ProtoMessage()               {}
func (*K8SDeployment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *K8SDeployment) GetCommon() *K8SCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *K8SDeployment) GetReplicasDesired() uint32 {
	if m != nil && m.ReplicasDesired != nil {
		return *m.ReplicasDesired
	}
	return 0
}

func (m *K8SDeployment) GetReplicasRunning() uint32 {
	if m != nil && m.ReplicasRunning != nil {
		return *m.ReplicasRunning
	}
	return 0
}

type K8SDaemonset struct {
	Common           *K8SCommon `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	CurrentScheduled *uint32    `protobuf:"varint,2,opt,name=current_scheduled" json:"current_scheduled,omitempty"`
	DesiredScheduled *uint32    `protobuf:"varint,3,opt,name=desired_scheduled" json:"desired_scheduled,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *K8SDaemonset) Reset()                    { *m = K8SDaemonset{} }
func (m *K8SDaemonset) String() string            { return proto.CompactTextString(m) }
func (*K8SDaemonset) ProtoMessage()               {}
func (*K8SDaemonset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *K8SDaemonset) GetCommon() *K8SCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *K8SDaemonset) GetCurrentScheduled() uint32 {
	if m != nil && m.CurrentScheduled != nil {
		return *m.CurrentScheduled
	}
	return 0
}

func (m *K8SDaemonset) GetDesiredScheduled() uint32 {
	if m != nil && m.DesiredScheduled != nil {
		return *m.DesiredScheduled
	}
	return 0
}

type K8SState struct {
	Namespaces       []*K8SNamespace             `protobuf:"bytes,1,rep,name=namespaces" json:"namespaces,omitempty"`
	Nodes            []*K8SNode                  `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
	Pods             []*K8SPod                   `protobuf:"bytes,3,rep,name=pods" json:"pods,omitempty"`
	Controllers      []*K8SReplicationController `protobuf:"bytes,4,rep,name=controllers" json:"controllers,omitempty"`
	Services         []*K8SService               `protobuf:"bytes,5,rep,name=services" json:"services,omitempty"`
	ReplicaSets      []*K8SReplicaSet            `protobuf:"bytes,6,rep,name=replica_sets" json:"replica_sets,omitempty"`
	Deployments      []*K8SDeployment            `protobuf:"bytes,7,rep,name=deployments" json:"deployments,omitempty"`
	Daemonsets       []*K8SDaemonset             `protobuf:"bytes,8,rep,name=daemonsets" json:"daemonsets,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *K8SState) Reset()                    { *m = K8SState{} }
func (m *K8SState) String() string            { return proto.CompactTextString(m) }
func (*K8SState) ProtoMessage()               {}
func (*K8SState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *K8SState) GetNamespaces() []*K8SNamespace {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *K8SState) GetNodes() []*K8SNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *K8SState) GetPods() []*K8SPod {
	if m != nil {
		return m.Pods
	}
	return nil
}

func (m *K8SState) GetControllers() []*K8SReplicationController {
	if m != nil {
		return m.Controllers
	}
	return nil
}

func (m *K8SState) GetServices() []*K8SService {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *K8SState) GetReplicaSets() []*K8SReplicaSet {
	if m != nil {
		return m.ReplicaSets
	}
	return nil
}

func (m *K8SState) GetDeployments() []*K8SDeployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

func (m *K8SState) GetDaemonsets() []*K8SDaemonset {
	if m != nil {
		return m.Daemonsets
	}
	return nil
}

type MesosPair struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MesosPair) Reset()                    { *m = MesosPair{} }
func (m *MesosPair) String() string            { return proto.CompactTextString(m) }
func (*MesosPair) ProtoMessage()               {}
func (*MesosPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *MesosPair) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *MesosPair) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type MesosCommon struct {
	Uid              *string      `protobuf:"bytes,1,req,name=uid" json:"uid,omitempty"`
	Name             *string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Labels           []*MesosPair `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *MesosCommon) Reset()                    { *m = MesosCommon{} }
func (m *MesosCommon) String() string            { return proto.CompactTextString(m) }
func (*MesosCommon) ProtoMessage()               {}
func (*MesosCommon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *MesosCommon) GetUid() string {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return ""
}

func (m *MesosCommon) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MesosCommon) GetLabels() []*MesosPair {
	if m != nil {
		return m.Labels
	}
	return nil
}

type MesosTask struct {
	Common           *MesosCommon `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	SlaveId          *string      `protobuf:"bytes,2,req,name=slave_id" json:"slave_id,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *MesosTask) Reset()                    { *m = MesosTask{} }
func (m *MesosTask) String() string            { return proto.CompactTextString(m) }
func (*MesosTask) ProtoMessage()               {}
func (*MesosTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *MesosTask) GetCommon() *MesosCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *MesosTask) GetSlaveId() string {
	if m != nil && m.SlaveId != nil {
		return *m.SlaveId
	}
	return ""
}

type MarathonApp struct {
	Id               *string  `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	TaskIds          []string `protobuf:"bytes,2,rep,name=task_ids" json:"task_ids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MarathonApp) Reset()                    { *m = MarathonApp{} }
func (m *MarathonApp) String() string            { return proto.CompactTextString(m) }
func (*MarathonApp) ProtoMessage()               {}
func (*MarathonApp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *MarathonApp) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *MarathonApp) GetTaskIds() []string {
	if m != nil {
		return m.TaskIds
	}
	return nil
}

type MarathonGroup struct {
	Id               *string          `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Apps             []*MarathonApp   `protobuf:"bytes,2,rep,name=apps" json:"apps,omitempty"`
	Groups           []*MarathonGroup `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *MarathonGroup) Reset()                    { *m = MarathonGroup{} }
func (m *MarathonGroup) String() string            { return proto.CompactTextString(m) }
func (*MarathonGroup) ProtoMessage()               {}
func (*MarathonGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *MarathonGroup) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *MarathonGroup) GetApps() []*MarathonApp {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *MarathonGroup) GetGroups() []*MarathonGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

type MesosFramework struct {
	Common           *MesosCommon `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	Tasks            []*MesosTask `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *MesosFramework) Reset()                    { *m = MesosFramework{} }
func (m *MesosFramework) String() string            { return proto.CompactTextString(m) }
func (*MesosFramework) ProtoMessage()               {}
func (*MesosFramework) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *MesosFramework) GetCommon() *MesosCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *MesosFramework) GetTasks() []*MesosTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type MesosSlave struct {
	Common           *MesosCommon `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *MesosSlave) Reset()                    { *m = MesosSlave{} }
func (m *MesosSlave) String() string            { return proto.CompactTextString(m) }
func (*MesosSlave) ProtoMessage()               {}
func (*MesosSlave) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *MesosSlave) GetCommon() *MesosCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

type MesosState struct {
	Frameworks       []*MesosFramework `protobuf:"bytes,1,rep,name=frameworks" json:"frameworks,omitempty"`
	Groups           []*MarathonGroup  `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
	Slaves           []*MesosSlave     `protobuf:"bytes,3,rep,name=slaves" json:"slaves,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *MesosState) Reset()                    { *m = MesosState{} }
func (m *MesosState) String() string            { return proto.CompactTextString(m) }
func (*MesosState) ProtoMessage()               {}
func (*MesosState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *MesosState) GetFrameworks() []*MesosFramework {
	if m != nil {
		return m.Frameworks
	}
	return nil
}

func (m *MesosState) GetGroups() []*MarathonGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *MesosState) GetSlaves() []*MesosSlave {
	if m != nil {
		return m.Slaves
	}
	return nil
}

type SwarmPair struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SwarmPair) Reset()                    { *m = SwarmPair{} }
func (m *SwarmPair) String() string            { return proto.CompactTextString(m) }
func (*SwarmPair) ProtoMessage()               {}
func (*SwarmPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *SwarmPair) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *SwarmPair) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type SwarmPort struct {
	Port             *uint32 `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	PublishedPort    *uint32 `protobuf:"varint,2,opt,name=published_port" json:"published_port,omitempty"`
	Protocol         *string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SwarmPort) Reset()                    { *m = SwarmPort{} }
func (m *SwarmPort) String() string            { return proto.CompactTextString(m) }
func (*SwarmPort) ProtoMessage()               {}
func (*SwarmPort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *SwarmPort) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *SwarmPort) GetPublishedPort() uint32 {
	if m != nil && m.PublishedPort != nil {
		return *m.PublishedPort
	}
	return 0
}

func (m *SwarmPort) GetProtocol() string {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return ""
}

type SwarmCommon struct {
	Id               *string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name             *string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Labels           []*SwarmPair `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SwarmCommon) Reset()                    { *m = SwarmCommon{} }
func (m *SwarmCommon) String() string            { return proto.CompactTextString(m) }
func (*SwarmCommon) ProtoMessage()               {}
func (*SwarmCommon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *SwarmCommon) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *SwarmCommon) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SwarmCommon) GetLabels() []*SwarmPair {
	if m != nil {
		return m.Labels
	}
	return nil
}

type SwarmService struct {
	Common     *SwarmCommon `protobuf:"bytes,1,opt,name=common" json:"common,omitempty"`
	VirtualIps []string     `protobuf:"bytes,2,rep,name=virtual_ips" json:"virtual_ips,omitempty"`
	// Ports will be available only for published services
	// internal service don't need it, even if they load
	// balance traffic as well
	Ports            []*SwarmPort `protobuf:"bytes,3,rep,name=ports" json:"ports,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SwarmService) Reset()                    { *m = SwarmService{} }
func (m *SwarmService) String() string            { return proto.CompactTextString(m) }
func (*SwarmService) ProtoMessage()               {}
func (*SwarmService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *SwarmService) GetCommon() *SwarmCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *SwarmService) GetVirtualIps() []string {
	if m != nil {
		return m.VirtualIps
	}
	return nil
}

func (m *SwarmService) GetPorts() []*SwarmPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

type SwarmTask struct {
	Common           *SwarmCommon `protobuf:"bytes,1,opt,name=common" json:"common,omitempty"`
	ServiceId        *string      `protobuf:"bytes,2,opt,name=service_id" json:"service_id,omitempty"`
	NodeId           *string      `protobuf:"bytes,3,opt,name=node_id" json:"node_id,omitempty"`
	ContainerId      *string      `protobuf:"bytes,4,opt,name=container_id" json:"container_id,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SwarmTask) Reset()                    { *m = SwarmTask{} }
func (m *SwarmTask) String() string            { return proto.CompactTextString(m) }
func (*SwarmTask) ProtoMessage()               {}
func (*SwarmTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *SwarmTask) GetCommon() *SwarmCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *SwarmTask) GetServiceId() string {
	if m != nil && m.ServiceId != nil {
		return *m.ServiceId
	}
	return ""
}

func (m *SwarmTask) GetNodeId() string {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return ""
}

func (m *SwarmTask) GetContainerId() string {
	if m != nil && m.ContainerId != nil {
		return *m.ContainerId
	}
	return ""
}

type SwarmNode struct {
	// hostname of the node is inside common.name
	Common           *SwarmCommon `protobuf:"bytes,1,opt,name=common" json:"common,omitempty"`
	Role             *string      `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
	IpAddress        *string      `protobuf:"bytes,3,opt,name=ip_address" json:"ip_address,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SwarmNode) Reset()                    { *m = SwarmNode{} }
func (m *SwarmNode) String() string            { return proto.CompactTextString(m) }
func (*SwarmNode) ProtoMessage()               {}
func (*SwarmNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *SwarmNode) GetCommon() *SwarmCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *SwarmNode) GetRole() string {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return ""
}

func (m *SwarmNode) GetIpAddress() string {
	if m != nil && m.IpAddress != nil {
		return *m.IpAddress
	}
	return ""
}

type SwarmState struct {
	// Every node in the cluster will send the cluster_id
	// it can be used if we'll hit duplicate ip addresses
	// in the cluster
	ClusterId *string `protobuf:"bytes,1,opt,name=cluster_id" json:"cluster_id,omitempty"`
	// This values will be filled only
	// by swarm manager nodes
	Services         []*SwarmService `protobuf:"bytes,2,rep,name=services" json:"services,omitempty"`
	Nodes            []*SwarmNode    `protobuf:"bytes,3,rep,name=nodes" json:"nodes,omitempty"`
	Tasks            []*SwarmTask    `protobuf:"bytes,4,rep,name=tasks" json:"tasks,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SwarmState) Reset()                    { *m = SwarmState{} }
func (m *SwarmState) String() string            { return proto.CompactTextString(m) }
func (*SwarmState) ProtoMessage()               {}
func (*SwarmState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *SwarmState) GetClusterId() string {
	if m != nil && m.ClusterId != nil {
		return *m.ClusterId
	}
	return ""
}

func (m *SwarmState) GetServices() []*SwarmService {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *SwarmState) GetNodes() []*SwarmNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *SwarmState) GetTasks() []*SwarmTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// ENTRY POINT MESSAGE
//
type Metrics struct {
	TimestampNs    *uint64 `protobuf:"varint,1,req,name=timestamp_ns" json:"timestamp_ns,omitempty"`
	MachineId      *string `protobuf:"bytes,2,req,name=machine_id" json:"machine_id,omitempty"`
	CustomerId     *string `protobuf:"bytes,3,opt,name=customer_id" json:"customer_id,omitempty"`
	SamplingRatio  *uint32 `protobuf:"varint,10,opt,name=sampling_ratio" json:"sampling_ratio,omitempty"`
	HostCustomName *string `protobuf:"bytes,11,opt,name=host_custom_name" json:"host_custom_name,omitempty"`
	HostTags       *string `protobuf:"bytes,12,opt,name=host_tags" json:"host_tags,omitempty"`
	// NEVER USED optional string host_custom_map = 13; // This machines's user-set custom map for the draios UI.
	IsHostHidden    *bool      `protobuf:"varint,14,opt,name=is_host_hidden" json:"is_host_hidden,omitempty"`
	HiddenProcesses *string    `protobuf:"bytes,15,opt,name=hidden_processes" json:"hidden_processes,omitempty"`
	Version         *string    `protobuf:"bytes,16,opt,name=version" json:"version,omitempty"`
	InstanceId      *string    `protobuf:"bytes,21,opt,name=instance_id" json:"instance_id,omitempty"`
	Hostinfo        *Host      `protobuf:"bytes,4,opt,name=hostinfo" json:"hostinfo,omitempty"`
	Programs        []*Program `protobuf:"bytes,9,rep,name=programs" json:"programs,omitempty"`
	// NEVER USED repeated process processes = 5; // The list of processes
	Ipv4Connections       []*Ipv4Connection       `protobuf:"bytes,7,rep,name=ipv4_connections" json:"ipv4_connections,omitempty"`
	Ipv4NetworkInterfaces []*Ipv4NetworkInterface `protobuf:"bytes,8,rep,name=ipv4_network_interfaces" json:"ipv4_network_interfaces,omitempty"`
	Commands              []*CommandDetails       `protobuf:"bytes,17,rep,name=commands" json:"commands,omitempty"`
	Mounts                []*MountedFs            `protobuf:"bytes,18,rep,name=mounts" json:"mounts,omitempty"`
	TopFiles              []*FileStat             `protobuf:"bytes,19,rep,name=top_files" json:"top_files,omitempty"`
	Protos                *ProtoInfo              `protobuf:"bytes,20,opt,name=protos" json:"protos,omitempty"`
	Containers            []*Container            `protobuf:"bytes,22,rep,name=containers" json:"containers,omitempty"`
	// NEVER USED (used by back-end) repeated string machine_ids = 23; //machine IDs aggregated for this group
	Kubernetes       *K8SState      `protobuf:"bytes,24,opt,name=kubernetes" json:"kubernetes,omitempty"`
	Mesos            *MesosState    `protobuf:"bytes,25,opt,name=mesos" json:"mesos,omitempty"`
	Events           []*AgentEvent  `protobuf:"bytes,26,rep,name=events" json:"events,omitempty"`
	Falcobl          *FalcoBaseline `protobuf:"bytes,27,opt,name=falcobl" json:"falcobl,omitempty"`
	Swarm            *SwarmState    `protobuf:"bytes,28,opt,name=swarm" json:"swarm,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Metrics) Reset()                    { *m = Metrics{} }
func (m *Metrics) String() string            { return proto.CompactTextString(m) }
func (*Metrics) ProtoMessage()               {}
func (*Metrics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *Metrics) GetTimestampNs() uint64 {
	if m != nil && m.TimestampNs != nil {
		return *m.TimestampNs
	}
	return 0
}

func (m *Metrics) GetMachineId() string {
	if m != nil && m.MachineId != nil {
		return *m.MachineId
	}
	return ""
}

func (m *Metrics) GetCustomerId() string {
	if m != nil && m.CustomerId != nil {
		return *m.CustomerId
	}
	return ""
}

func (m *Metrics) GetSamplingRatio() uint32 {
	if m != nil && m.SamplingRatio != nil {
		return *m.SamplingRatio
	}
	return 0
}

func (m *Metrics) GetHostCustomName() string {
	if m != nil && m.HostCustomName != nil {
		return *m.HostCustomName
	}
	return ""
}

func (m *Metrics) GetHostTags() string {
	if m != nil && m.HostTags != nil {
		return *m.HostTags
	}
	return ""
}

func (m *Metrics) GetIsHostHidden() bool {
	if m != nil && m.IsHostHidden != nil {
		return *m.IsHostHidden
	}
	return false
}

func (m *Metrics) GetHiddenProcesses() string {
	if m != nil && m.HiddenProcesses != nil {
		return *m.HiddenProcesses
	}
	return ""
}

func (m *Metrics) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *Metrics) GetInstanceId() string {
	if m != nil && m.InstanceId != nil {
		return *m.InstanceId
	}
	return ""
}

func (m *Metrics) GetHostinfo() *Host {
	if m != nil {
		return m.Hostinfo
	}
	return nil
}

func (m *Metrics) GetPrograms() []*Program {
	if m != nil {
		return m.Programs
	}
	return nil
}

func (m *Metrics) GetIpv4Connections() []*Ipv4Connection {
	if m != nil {
		return m.Ipv4Connections
	}
	return nil
}

func (m *Metrics) GetIpv4NetworkInterfaces() []*Ipv4NetworkInterface {
	if m != nil {
		return m.Ipv4NetworkInterfaces
	}
	return nil
}

func (m *Metrics) GetCommands() []*CommandDetails {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *Metrics) GetMounts() []*MountedFs {
	if m != nil {
		return m.Mounts
	}
	return nil
}

func (m *Metrics) GetTopFiles() []*FileStat {
	if m != nil {
		return m.TopFiles
	}
	return nil
}

func (m *Metrics) GetProtos() *ProtoInfo {
	if m != nil {
		return m.Protos
	}
	return nil
}

func (m *Metrics) GetContainers() []*Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *Metrics) GetKubernetes() *K8SState {
	if m != nil {
		return m.Kubernetes
	}
	return nil
}

func (m *Metrics) GetMesos() *MesosState {
	if m != nil {
		return m.Mesos
	}
	return nil
}

func (m *Metrics) GetEvents() []*AgentEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Metrics) GetFalcobl() *FalcoBaseline {
	if m != nil {
		return m.Falcobl
	}
	return nil
}

func (m *Metrics) GetSwarm() *SwarmState {
	if m != nil {
		return m.Swarm
	}
	return nil
}

type DumpRequestStart struct {
	TimestampNs      *uint64 `protobuf:"varint,1,req,name=timestamp_ns" json:"timestamp_ns,omitempty"`
	MachineId        *string `protobuf:"bytes,2,req,name=machine_id" json:"machine_id,omitempty"`
	CustomerId       *string `protobuf:"bytes,3,opt,name=customer_id" json:"customer_id,omitempty"`
	DurationNs       *uint64 `protobuf:"varint,4,opt,name=duration_ns" json:"duration_ns,omitempty"`
	Filters          *string `protobuf:"bytes,5,opt,name=filters" json:"filters,omitempty"`
	MaxSize          *uint64 `protobuf:"varint,7,opt,name=max_size" json:"max_size,omitempty"`
	Token            *string `protobuf:"bytes,6,req,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DumpRequestStart) Reset()                    { *m = DumpRequestStart{} }
func (m *DumpRequestStart) String() string            { return proto.CompactTextString(m) }
func (*DumpRequestStart) ProtoMessage()               {}
func (*DumpRequestStart) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *DumpRequestStart) GetTimestampNs() uint64 {
	if m != nil && m.TimestampNs != nil {
		return *m.TimestampNs
	}
	return 0
}

func (m *DumpRequestStart) GetMachineId() string {
	if m != nil && m.MachineId != nil {
		return *m.MachineId
	}
	return ""
}

func (m *DumpRequestStart) GetCustomerId() string {
	if m != nil && m.CustomerId != nil {
		return *m.CustomerId
	}
	return ""
}

func (m *DumpRequestStart) GetDurationNs() uint64 {
	if m != nil && m.DurationNs != nil {
		return *m.DurationNs
	}
	return 0
}

func (m *DumpRequestStart) GetFilters() string {
	if m != nil && m.Filters != nil {
		return *m.Filters
	}
	return ""
}

func (m *DumpRequestStart) GetMaxSize() uint64 {
	if m != nil && m.MaxSize != nil {
		return *m.MaxSize
	}
	return 0
}

func (m *DumpRequestStart) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type DumpRequestStop struct {
	TimestampNs      *uint64 `protobuf:"varint,1,req,name=timestamp_ns" json:"timestamp_ns,omitempty"`
	MachineId        *string `protobuf:"bytes,2,req,name=machine_id" json:"machine_id,omitempty"`
	CustomerId       *string `protobuf:"bytes,3,opt,name=customer_id" json:"customer_id,omitempty"`
	Token            *string `protobuf:"bytes,4,req,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DumpRequestStop) Reset()                    { *m = DumpRequestStop{} }
func (m *DumpRequestStop) String() string            { return proto.CompactTextString(m) }
func (*DumpRequestStop) ProtoMessage()               {}
func (*DumpRequestStop) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *DumpRequestStop) GetTimestampNs() uint64 {
	if m != nil && m.TimestampNs != nil {
		return *m.TimestampNs
	}
	return 0
}

func (m *DumpRequestStop) GetMachineId() string {
	if m != nil && m.MachineId != nil {
		return *m.MachineId
	}
	return ""
}

func (m *DumpRequestStop) GetCustomerId() string {
	if m != nil && m.CustomerId != nil {
		return *m.CustomerId
	}
	return ""
}

func (m *DumpRequestStop) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type DumpResponse struct {
	TimestampNs      *uint64 `protobuf:"varint,1,req,name=timestamp_ns" json:"timestamp_ns,omitempty"`
	MachineId        *string `protobuf:"bytes,2,req,name=machine_id" json:"machine_id,omitempty"`
	CustomerId       *string `protobuf:"bytes,3,opt,name=customer_id" json:"customer_id,omitempty"`
	ChunkNo          *uint32 `protobuf:"varint,7,opt,name=chunk_no" json:"chunk_no,omitempty"`
	FinalChunk       *bool   `protobuf:"varint,8,opt,name=final_chunk" json:"final_chunk,omitempty"`
	KeepAlive        *bool   `protobuf:"varint,9,opt,name=keep_alive" json:"keep_alive,omitempty"`
	Content          []byte  `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	FinalSizeBytes   *uint64 `protobuf:"varint,10,opt,name=final_size_bytes" json:"final_size_bytes,omitempty"`
	Error            *string `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
	Token            *string `protobuf:"bytes,6,req,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DumpResponse) Reset()                    { *m = DumpResponse{} }
func (m *DumpResponse) String() string            { return proto.CompactTextString(m) }
func (*DumpResponse) ProtoMessage()               {}
func (*DumpResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *DumpResponse) GetTimestampNs() uint64 {
	if m != nil && m.TimestampNs != nil {
		return *m.TimestampNs
	}
	return 0
}

func (m *DumpResponse) GetMachineId() string {
	if m != nil && m.MachineId != nil {
		return *m.MachineId
	}
	return ""
}

func (m *DumpResponse) GetCustomerId() string {
	if m != nil && m.CustomerId != nil {
		return *m.CustomerId
	}
	return ""
}

func (m *DumpResponse) GetChunkNo() uint32 {
	if m != nil && m.ChunkNo != nil {
		return *m.ChunkNo
	}
	return 0
}

func (m *DumpResponse) GetFinalChunk() bool {
	if m != nil && m.FinalChunk != nil {
		return *m.FinalChunk
	}
	return false
}

func (m *DumpResponse) GetKeepAlive() bool {
	if m != nil && m.KeepAlive != nil {
		return *m.KeepAlive
	}
	return false
}

func (m *DumpResponse) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *DumpResponse) GetFinalSizeBytes() uint64 {
	if m != nil && m.FinalSizeBytes != nil {
		return *m.FinalSizeBytes
	}
	return 0
}

func (m *DumpResponse) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func (m *DumpResponse) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type SshOpenChannel struct {
	TimestampNs      *uint64 `protobuf:"varint,1,req,name=timestamp_ns" json:"timestamp_ns,omitempty"`
	MachineId        *string `protobuf:"bytes,2,req,name=machine_id" json:"machine_id,omitempty"`
	CustomerId       *string `protobuf:"bytes,3,opt,name=customer_id" json:"customer_id,omitempty"`
	Token            *string `protobuf:"bytes,4,req,name=token" json:"token,omitempty"`
	User             *string `protobuf:"bytes,5,req,name=user" json:"user,omitempty"`
	Password         *string `protobuf:"bytes,6,opt,name=password" json:"password,omitempty"`
	Key              *string `protobuf:"bytes,7,opt,name=key" json:"key,omitempty"`
	Passphrase       *string `protobuf:"bytes,8,opt,name=passphrase" json:"passphrase,omitempty"`
	Port             *uint32 `protobuf:"varint,9,opt,name=port" json:"port,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SshOpenChannel) Reset()                    { *m = SshOpenChannel{} }
func (m *SshOpenChannel) String() string            { return proto.CompactTextString(m) }
func (*SshOpenChannel) ProtoMessage()               {}
func (*SshOpenChannel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *SshOpenChannel) GetTimestampNs() uint64 {
	if m != nil && m.TimestampNs != nil {
		return *m.TimestampNs
	}
	return 0
}

func (m *SshOpenChannel) GetMachineId() string {
	if m != nil && m.MachineId != nil {
		return *m.MachineId
	}
	return ""
}

func (m *SshOpenChannel) GetCustomerId() string {
	if m != nil && m.CustomerId != nil {
		return *m.CustomerId
	}
	return ""
}

func (m *SshOpenChannel) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *SshOpenChannel) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *SshOpenChannel) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *SshOpenChannel) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *SshOpenChannel) GetPassphrase() string {
	if m != nil && m.Passphrase != nil {
		return *m.Passphrase
	}
	return ""
}

func (m *SshOpenChannel) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

type SshData struct {
	TimestampNs      *uint64 `protobuf:"varint,1,req,name=timestamp_ns" json:"timestamp_ns,omitempty"`
	MachineId        *string `protobuf:"bytes,2,req,name=machine_id" json:"machine_id,omitempty"`
	CustomerId       *string `protobuf:"bytes,3,opt,name=customer_id" json:"customer_id,omitempty"`
	Token            *string `protobuf:"bytes,4,req,name=token" json:"token,omitempty"`
	Data             []byte  `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
	Error            *string `protobuf:"bytes,6,opt,name=error" json:"error,omitempty"`
	ExitStatus       *int32  `protobuf:"varint,7,opt,name=exit_status" json:"exit_status,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SshData) Reset()                    { *m = SshData{} }
func (m *SshData) String() string            { return proto.CompactTextString(m) }
func (*SshData) ProtoMessage()               {}
func (*SshData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *SshData) GetTimestampNs() uint64 {
	if m != nil && m.TimestampNs != nil {
		return *m.TimestampNs
	}
	return 0
}

func (m *SshData) GetMachineId() string {
	if m != nil && m.MachineId != nil {
		return *m.MachineId
	}
	return ""
}

func (m *SshData) GetCustomerId() string {
	if m != nil && m.CustomerId != nil {
		return *m.CustomerId
	}
	return ""
}

func (m *SshData) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *SshData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SshData) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func (m *SshData) GetExitStatus() int32 {
	if m != nil && m.ExitStatus != nil {
		return *m.ExitStatus
	}
	return 0
}

type SshCloseChannel struct {
	TimestampNs      *uint64 `protobuf:"varint,1,req,name=timestamp_ns" json:"timestamp_ns,omitempty"`
	MachineId        *string `protobuf:"bytes,2,req,name=machine_id" json:"machine_id,omitempty"`
	CustomerId       *string `protobuf:"bytes,3,opt,name=customer_id" json:"customer_id,omitempty"`
	Token            *string `protobuf:"bytes,4,req,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SshCloseChannel) Reset()                    { *m = SshCloseChannel{} }
func (m *SshCloseChannel) String() string            { return proto.CompactTextString(m) }
func (*SshCloseChannel) ProtoMessage()               {}
func (*SshCloseChannel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *SshCloseChannel) GetTimestampNs() uint64 {
	if m != nil && m.TimestampNs != nil {
		return *m.TimestampNs
	}
	return 0
}

func (m *SshCloseChannel) GetMachineId() string {
	if m != nil && m.MachineId != nil {
		return *m.MachineId
	}
	return ""
}

func (m *SshCloseChannel) GetCustomerId() string {
	if m != nil && m.CustomerId != nil {
		return *m.CustomerId
	}
	return ""
}

func (m *SshCloseChannel) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type AutoUpdateRequest struct {
	TimestampNs      *uint64 `protobuf:"varint,1,req,name=timestamp_ns" json:"timestamp_ns,omitempty"`
	MachineId        *string `protobuf:"bytes,2,req,name=machine_id" json:"machine_id,omitempty"`
	CustomerId       *string `protobuf:"bytes,3,opt,name=customer_id" json:"customer_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AutoUpdateRequest) Reset()                    { *m = AutoUpdateRequest{} }
func (m *AutoUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*AutoUpdateRequest) ProtoMessage()               {}
func (*AutoUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *AutoUpdateRequest) GetTimestampNs() uint64 {
	if m != nil && m.TimestampNs != nil {
		return *m.TimestampNs
	}
	return 0
}

func (m *AutoUpdateRequest) GetMachineId() string {
	if m != nil && m.MachineId != nil {
		return *m.MachineId
	}
	return ""
}

func (m *AutoUpdateRequest) GetCustomerId() string {
	if m != nil && m.CustomerId != nil {
		return *m.CustomerId
	}
	return ""
}

type DirtyShutdownReport struct {
	TimestampNs      *uint64 `protobuf:"varint,1,req,name=timestamp_ns" json:"timestamp_ns,omitempty"`
	MachineId        *string `protobuf:"bytes,2,req,name=machine_id" json:"machine_id,omitempty"`
	CustomerId       *string `protobuf:"bytes,3,opt,name=customer_id" json:"customer_id,omitempty"`
	Log              *string `protobuf:"bytes,4,req,name=log" json:"log,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DirtyShutdownReport) Reset()                    { *m = DirtyShutdownReport{} }
func (m *DirtyShutdownReport) String() string            { return proto.CompactTextString(m) }
func (*DirtyShutdownReport) ProtoMessage()               {}
func (*DirtyShutdownReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *DirtyShutdownReport) GetTimestampNs() uint64 {
	if m != nil && m.TimestampNs != nil {
		return *m.TimestampNs
	}
	return 0
}

func (m *DirtyShutdownReport) GetMachineId() string {
	if m != nil && m.MachineId != nil {
		return *m.MachineId
	}
	return ""
}

func (m *DirtyShutdownReport) GetCustomerId() string {
	if m != nil && m.CustomerId != nil {
		return *m.CustomerId
	}
	return ""
}

func (m *DirtyShutdownReport) GetLog() string {
	if m != nil && m.Log != nil {
		return *m.Log
	}
	return ""
}

type KeyValue struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *KeyValue) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type AgentEvent struct {
	TimestampSec     *uint64     `protobuf:"varint,1,opt,name=timestamp_sec" json:"timestamp_sec,omitempty"`
	Scope            *string     `protobuf:"bytes,2,opt,name=scope" json:"scope,omitempty"`
	Title            *string     `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Description      *string     `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Severity         *uint32     `protobuf:"varint,5,opt,name=severity" json:"severity,omitempty"`
	Tags             []*KeyValue `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *AgentEvent) Reset()                    { *m = AgentEvent{} }
func (m *AgentEvent) String() string            { return proto.CompactTextString(m) }
func (*AgentEvent) ProtoMessage()               {}
func (*AgentEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *AgentEvent) GetTimestampSec() uint64 {
	if m != nil && m.TimestampSec != nil {
		return *m.TimestampSec
	}
	return 0
}

func (m *AgentEvent) GetScope() string {
	if m != nil && m.Scope != nil {
		return *m.Scope
	}
	return ""
}

func (m *AgentEvent) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *AgentEvent) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *AgentEvent) GetSeverity() uint32 {
	if m != nil && m.Severity != nil {
		return *m.Severity
	}
	return 0
}

func (m *AgentEvent) GetTags() []*KeyValue {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ConfigFile struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Content          *string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ConfigFile) Reset()                    { *m = ConfigFile{} }
func (m *ConfigFile) String() string            { return proto.CompactTextString(m) }
func (*ConfigFile) ProtoMessage()               {}
func (*ConfigFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *ConfigFile) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ConfigFile) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

type ConfigData struct {
	ConfigFiles      []*ConfigFile `protobuf:"bytes,1,rep,name=config_files" json:"config_files,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ConfigData) Reset()                    { *m = ConfigData{} }
func (m *ConfigData) String() string            { return proto.CompactTextString(m) }
func (*ConfigData) ProtoMessage()               {}
func (*ConfigData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *ConfigData) GetConfigFiles() []*ConfigFile {
	if m != nil {
		return m.ConfigFiles
	}
	return nil
}

type ErrorMessage struct {
	Type             *ErrorType `protobuf:"varint,1,opt,name=type,enum=draiosproto.ErrorType" json:"type,omitempty"`
	Description      *string    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ErrorMessage) Reset()                    { *m = ErrorMessage{} }
func (m *ErrorMessage) String() string            { return proto.CompactTextString(m) }
func (*ErrorMessage) ProtoMessage()               {}
func (*ErrorMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *ErrorMessage) GetType() ErrorType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ErrorType_ERR_CONN_LIMIT
}

func (m *ErrorMessage) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

//
// FALCO BASELINE
//
type FalcoSubcategory struct {
	Name             *string  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	D                []string `protobuf:"bytes,2,rep,name=d" json:"d,omitempty"`
	Full             *bool    `protobuf:"varint,3,opt,name=full" json:"full,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FalcoSubcategory) Reset()                    { *m = FalcoSubcategory{} }
func (m *FalcoSubcategory) String() string            { return proto.CompactTextString(m) }
func (*FalcoSubcategory) ProtoMessage()               {}
func (*FalcoSubcategory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *FalcoSubcategory) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *FalcoSubcategory) GetD() []string {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *FalcoSubcategory) GetFull() bool {
	if m != nil && m.Full != nil {
		return *m.Full
	}
	return false
}

type FalcoSubcategoryContainer struct {
	Subcats          []*FalcoSubcategory `protobuf:"bytes,1,rep,name=subcats" json:"subcats,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *FalcoSubcategoryContainer) Reset()                    { *m = FalcoSubcategoryContainer{} }
func (m *FalcoSubcategoryContainer) String() string            { return proto.CompactTextString(m) }
func (*FalcoSubcategoryContainer) ProtoMessage()               {}
func (*FalcoSubcategoryContainer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *FalcoSubcategoryContainer) GetSubcats() []*FalcoSubcategory {
	if m != nil {
		return m.Subcats
	}
	return nil
}

type FalcoCategory struct {
	Name             *string                      `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	StartupSubcats   []*FalcoSubcategoryContainer `protobuf:"bytes,2,rep,name=startup_subcats" json:"startup_subcats,omitempty"`
	RegularSubcats   []*FalcoSubcategoryContainer `protobuf:"bytes,3,rep,name=regular_subcats" json:"regular_subcats,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *FalcoCategory) Reset()                    { *m = FalcoCategory{} }
func (m *FalcoCategory) String() string            { return proto.CompactTextString(m) }
func (*FalcoCategory) ProtoMessage()               {}
func (*FalcoCategory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

func (m *FalcoCategory) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *FalcoCategory) GetStartupSubcats() []*FalcoSubcategoryContainer {
	if m != nil {
		return m.StartupSubcats
	}
	return nil
}

func (m *FalcoCategory) GetRegularSubcats() []*FalcoSubcategoryContainer {
	if m != nil {
		return m.RegularSubcats
	}
	return nil
}

type FalcoProg struct {
	Comm             *string          `protobuf:"bytes,1,req,name=comm" json:"comm,omitempty"`
	Exe              *string          `protobuf:"bytes,2,req,name=exe" json:"exe,omitempty"`
	Args             []string         `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	UserId           *uint64          `protobuf:"varint,4,req,name=user_id" json:"user_id,omitempty"`
	ContainerId      *string          `protobuf:"bytes,5,opt,name=container_id" json:"container_id,omitempty"`
	Cats             []*FalcoCategory `protobuf:"bytes,6,rep,name=cats" json:"cats,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *FalcoProg) Reset()                    { *m = FalcoProg{} }
func (m *FalcoProg) String() string            { return proto.CompactTextString(m) }
func (*FalcoProg) ProtoMessage()               {}
func (*FalcoProg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

func (m *FalcoProg) GetComm() string {
	if m != nil && m.Comm != nil {
		return *m.Comm
	}
	return ""
}

func (m *FalcoProg) GetExe() string {
	if m != nil && m.Exe != nil {
		return *m.Exe
	}
	return ""
}

func (m *FalcoProg) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *FalcoProg) GetUserId() uint64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *FalcoProg) GetContainerId() string {
	if m != nil && m.ContainerId != nil {
		return *m.ContainerId
	}
	return ""
}

func (m *FalcoProg) GetCats() []*FalcoCategory {
	if m != nil {
		return m.Cats
	}
	return nil
}

type FalcoContainer struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Name             *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	ImageName        *string `protobuf:"bytes,3,opt,name=image_name" json:"image_name,omitempty"`
	ImageId          *string `protobuf:"bytes,4,opt,name=image_id" json:"image_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FalcoContainer) Reset()                    { *m = FalcoContainer{} }
func (m *FalcoContainer) String() string            { return proto.CompactTextString(m) }
func (*FalcoContainer) ProtoMessage()               {}
func (*FalcoContainer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88} }

func (m *FalcoContainer) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *FalcoContainer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *FalcoContainer) GetImageName() string {
	if m != nil && m.ImageName != nil {
		return *m.ImageName
	}
	return ""
}

func (m *FalcoContainer) GetImageId() string {
	if m != nil && m.ImageId != nil {
		return *m.ImageId
	}
	return ""
}

type FalcoBaseline struct {
	Progs            []*FalcoProg      `protobuf:"bytes,1,rep,name=progs" json:"progs,omitempty"`
	Containers       []*FalcoContainer `protobuf:"bytes,2,rep,name=containers" json:"containers,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *FalcoBaseline) Reset()                    { *m = FalcoBaseline{} }
func (m *FalcoBaseline) String() string            { return proto.CompactTextString(m) }
func (*FalcoBaseline) ProtoMessage()               {}
func (*FalcoBaseline) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

func (m *FalcoBaseline) GetProgs() []*FalcoProg {
	if m != nil {
		return m.Progs
	}
	return nil
}

func (m *FalcoBaseline) GetContainers() []*FalcoContainer {
	if m != nil {
		return m.Containers
	}
	return nil
}

func init() {
	proto.RegisterType((*CounterTime)(nil), "draiosproto.counter_time")
	proto.RegisterType((*CounterTimeBidirectional)(nil), "draiosproto.counter_time_bidirectional")
	proto.RegisterType((*CounterBytes)(nil), "draiosproto.counter_bytes")
	proto.RegisterType((*CounterTimeBytes)(nil), "draiosproto.counter_time_bytes")
	proto.RegisterType((*TimeCategories)(nil), "draiosproto.time_categories")
	proto.RegisterType((*TransactionBreakdownCategories)(nil), "draiosproto.transaction_breakdown_categories")
	proto.RegisterType((*CounterSyscallErrors)(nil), "draiosproto.counter_syscall_errors")
	proto.RegisterType((*ResourceCategories)(nil), "draiosproto.resource_categories")
	proto.RegisterType((*ConnectionCategories)(nil), "draiosproto.connection_categories")
	proto.RegisterType((*ProcessDetails)(nil), "draiosproto.process_details")
	proto.RegisterType((*CommandDetails)(nil), "draiosproto.command_details")
	proto.RegisterType((*CounterProtoEntry)(nil), "draiosproto.counter_proto_entry")
	proto.RegisterType((*UrlDetails)(nil), "draiosproto.url_details")
	proto.RegisterType((*StatusCodeDetails)(nil), "draiosproto.status_code_details")
	proto.RegisterType((*HttpInfo)(nil), "draiosproto.http_info")
	proto.RegisterType((*SqlEntryDetails)(nil), "draiosproto.sql_entry_details")
	proto.RegisterType((*SqlQueryTypeDetails)(nil), "draiosproto.sql_query_type_details")
	proto.RegisterType((*SqlInfo)(nil), "draiosproto.sql_info")
	proto.RegisterType((*MongodbCollectionDetails)(nil), "draiosproto.mongodb_collection_details")
	proto.RegisterType((*MongodbOpTypeDetails)(nil), "draiosproto.mongodb_op_type_details")
	proto.RegisterType((*MongodbInfo)(nil), "draiosproto.mongodb_info")
	proto.RegisterType((*JmxAttribute)(nil), "draiosproto.jmx_attribute")
	proto.RegisterType((*JmxBean)(nil), "draiosproto.jmx_bean")
	proto.RegisterType((*JavaInfo)(nil), "draiosproto.java_info")
	proto.RegisterType((*StatsdTag)(nil), "draiosproto.statsd_tag")
	proto.RegisterType((*StatsdMetric)(nil), "draiosproto.statsd_metric")
	proto.RegisterType((*StatsdInfo)(nil), "draiosproto.statsd_info")
	proto.RegisterType((*AppTag)(nil), "draiosproto.app_tag")
	proto.RegisterType((*AppMetric)(nil), "draiosproto.app_metric")
	proto.RegisterType((*AppCheck)(nil), "draiosproto.app_check")
	proto.RegisterType((*AppInfo)(nil), "draiosproto.app_info")
	proto.RegisterType((*ProtoInfo)(nil), "draiosproto.proto_info")
	proto.RegisterType((*NetworkByPort)(nil), "draiosproto.network_by_port")
	proto.RegisterType((*Host)(nil), "draiosproto.host")
	proto.RegisterType((*Process)(nil), "draiosproto.process")
	proto.RegisterType((*Program)(nil), "draiosproto.program")
	proto.RegisterType((*Ipv4Tuple)(nil), "draiosproto.ipv4tuple")
	proto.RegisterType((*Ipv4Connection)(nil), "draiosproto.ipv4_connection")
	proto.RegisterType((*Ipv4NetworkInterface)(nil), "draiosproto.ipv4_network_interface")
	proto.RegisterType((*MountedFs)(nil), "draiosproto.mounted_fs")
	proto.RegisterType((*FileStat)(nil), "draiosproto.file_stat")
	proto.RegisterType((*ContainerPortMapping)(nil), "draiosproto.container_port_mapping")
	proto.RegisterType((*ContainerLabel)(nil), "draiosproto.container_label")
	proto.RegisterType((*Container)(nil), "draiosproto.container")
	proto.RegisterType((*K8SPair)(nil), "draiosproto.k8s_pair")
	proto.RegisterType((*K8SCommon)(nil), "draiosproto.k8s_common")
	proto.RegisterType((*K8SNamespace)(nil), "draiosproto.k8s_namespace")
	proto.RegisterType((*K8SNode)(nil), "draiosproto.k8s_node")
	proto.RegisterType((*K8SPod)(nil), "draiosproto.k8s_pod")
	proto.RegisterType((*K8SReplicationController)(nil), "draiosproto.k8s_replication_controller")
	proto.RegisterType((*K8SReplicaSet)(nil), "draiosproto.k8s_replica_set")
	proto.RegisterType((*K8SService)(nil), "draiosproto.k8s_service")
	proto.RegisterType((*K8SServiceNetPort)(nil), "draiosproto.k8s_service.net_port")
	proto.RegisterType((*K8SDeployment)(nil), "draiosproto.k8s_deployment")
	proto.RegisterType((*K8SDaemonset)(nil), "draiosproto.k8s_daemonset")
	proto.RegisterType((*K8SState)(nil), "draiosproto.k8s_state")
	proto.RegisterType((*MesosPair)(nil), "draiosproto.mesos_pair")
	proto.RegisterType((*MesosCommon)(nil), "draiosproto.mesos_common")
	proto.RegisterType((*MesosTask)(nil), "draiosproto.mesos_task")
	proto.RegisterType((*MarathonApp)(nil), "draiosproto.marathon_app")
	proto.RegisterType((*MarathonGroup)(nil), "draiosproto.marathon_group")
	proto.RegisterType((*MesosFramework)(nil), "draiosproto.mesos_framework")
	proto.RegisterType((*MesosSlave)(nil), "draiosproto.mesos_slave")
	proto.RegisterType((*MesosState)(nil), "draiosproto.mesos_state")
	proto.RegisterType((*SwarmPair)(nil), "draiosproto.swarm_pair")
	proto.RegisterType((*SwarmPort)(nil), "draiosproto.swarm_port")
	proto.RegisterType((*SwarmCommon)(nil), "draiosproto.swarm_common")
	proto.RegisterType((*SwarmService)(nil), "draiosproto.swarm_service")
	proto.RegisterType((*SwarmTask)(nil), "draiosproto.swarm_task")
	proto.RegisterType((*SwarmNode)(nil), "draiosproto.swarm_node")
	proto.RegisterType((*SwarmState)(nil), "draiosproto.swarm_state")
	proto.RegisterType((*Metrics)(nil), "draiosproto.metrics")
	proto.RegisterType((*DumpRequestStart)(nil), "draiosproto.dump_request_start")
	proto.RegisterType((*DumpRequestStop)(nil), "draiosproto.dump_request_stop")
	proto.RegisterType((*DumpResponse)(nil), "draiosproto.dump_response")
	proto.RegisterType((*SshOpenChannel)(nil), "draiosproto.ssh_open_channel")
	proto.RegisterType((*SshData)(nil), "draiosproto.ssh_data")
	proto.RegisterType((*SshCloseChannel)(nil), "draiosproto.ssh_close_channel")
	proto.RegisterType((*AutoUpdateRequest)(nil), "draiosproto.auto_update_request")
	proto.RegisterType((*DirtyShutdownReport)(nil), "draiosproto.dirty_shutdown_report")
	proto.RegisterType((*KeyValue)(nil), "draiosproto.key_value")
	proto.RegisterType((*AgentEvent)(nil), "draiosproto.agent_event")
	proto.RegisterType((*ConfigFile)(nil), "draiosproto.config_file")
	proto.RegisterType((*ConfigData)(nil), "draiosproto.config_data")
	proto.RegisterType((*ErrorMessage)(nil), "draiosproto.error_message")
	proto.RegisterType((*FalcoSubcategory)(nil), "draiosproto.falco_subcategory")
	proto.RegisterType((*FalcoSubcategoryContainer)(nil), "draiosproto.falco_subcategory_container")
	proto.RegisterType((*FalcoCategory)(nil), "draiosproto.falco_category")
	proto.RegisterType((*FalcoProg)(nil), "draiosproto.falco_prog")
	proto.RegisterType((*FalcoContainer)(nil), "draiosproto.falco_container")
	proto.RegisterType((*FalcoBaseline)(nil), "draiosproto.falco_baseline")
	proto.RegisterEnum("draiosproto.SqlStatementType", SqlStatementType_name, SqlStatementType_value)
	proto.RegisterEnum("draiosproto.MongodbOpType", MongodbOpType_name, MongodbOpType_value)
	proto.RegisterEnum("draiosproto.Unit", Unit_name, Unit_value)
	proto.RegisterEnum("draiosproto.Scale", Scale_name, Scale_value)
	proto.RegisterEnum("draiosproto.JmxMetricType", JmxMetricType_name, JmxMetricType_value)
	proto.RegisterEnum("draiosproto.StatsdMetricType", StatsdMetricType_name, StatsdMetricType_value)
	proto.RegisterEnum("draiosproto.AppMetricType", AppMetricType_name, AppMetricType_value)
	proto.RegisterEnum("draiosproto.AppCheckValue", AppCheckValue_name, AppCheckValue_value)
	proto.RegisterEnum("draiosproto.Networkrole", Networkrole_name, Networkrole_value)
	proto.RegisterEnum("draiosproto.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("draiosproto.ContainerType", ContainerType_name, ContainerType_value)
	proto.RegisterEnum("draiosproto.ErrorType", ErrorType_name, ErrorType_value)
}

func init() { proto.RegisterFile("draios.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 5387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x7b, 0xcd, 0x6f, 0x1b, 0x49,
	0x76, 0xf8, 0xf2, 0x9b, 0x7c, 0xfc, 0x6a, 0xb5, 0x2c, 0x89, 0x96, 0xbd, 0x3b, 0x9e, 0x1e, 0x8f,
	0xad, 0xd1, 0xce, 0x78, 0x67, 0x8c, 0x99, 0xc5, 0xec, 0x17, 0x16, 0x34, 0xc5, 0x91, 0xb9, 0x96,
	0x48, 0x2d, 0x49, 0xcd, 0xac, 0x0f, 0xbf, 0x6d, 0x94, 0xd8, 0x25, 0xaa, 0xad, 0x66, 0x77, 0xbb,
	0x3f, 0x64, 0xeb, 0x97, 0x43, 0x92, 0x43, 0x12, 0x60, 0x83, 0x24, 0xc8, 0x25, 0x40, 0x72, 0x49,
	0x02, 0xe4, 0xb2, 0xa7, 0xfd, 0x53, 0x12, 0xe4, 0x0f, 0x48, 0x6e, 0x09, 0x90, 0x43, 0x90, 0x53,
	0x92, 0x63, 0x50, 0xaf, 0xaa, 0x9a, 0xcd, 0x66, 0xeb, 0x6b, 0xec, 0xd9, 0x3d, 0x49, 0xfd, 0xea,
	0xd5, 0xab, 0x57, 0xaf, 0xde, 0x77, 0x15, 0xa1, 0x66, 0x78, 0xc4, 0x74, 0xfc, 0x47, 0xae, 0xe7,
	0x04, 0x8e, 0x5a, 0xe5, 0x5f, 0xf8, 0xa1, 0xed, 0x42, 0x6d, 0xe2, 0x84, 0x76, 0x40, 0x3d, 0x3d,
	0x30, 0x67, 0x54, 0xad, 0x43, 0x01, 0xbf, 0x5b, 0x99, 0x7b, 0xd9, 0xad, 0xba, 0xda, 0x84, 0x12,
	0x03, 0xeb, 0xb6, 0xdf, 0xca, 0xde, 0xcb, 0x6e, 0xe5, 0xd5, 0x0d, 0x68, 0x22, 0xc0, 0xa5, 0xde,
	0x84, 0xda, 0x01, 0x99, 0xd2, 0x56, 0xee, 0x5e, 0x66, 0xab, 0xae, 0xbd, 0x80, 0xcd, 0x38, 0x21,
	0xfd, 0xc8, 0x34, 0x4c, 0x8f, 0x4e, 0x02, 0xd3, 0xb1, 0x89, 0xa5, 0x2a, 0x50, 0xc6, 0x51, 0xdd,
	0xb4, 0x05, 0xe5, 0x15, 0xa8, 0x70, 0x88, 0x13, 0x06, 0x48, 0xbb, 0xae, 0xaa, 0x00, 0x62, 0x31,
	0x86, 0x96, 0xc3, 0xf5, 0x56, 0xa1, 0x2a, 0x61, 0x0c, 0x31, 0xcf, 0x80, 0xda, 0x73, 0xa8, 0xcb,
	0xb5, 0x8e, 0xce, 0x03, 0xea, 0x5f, 0x8f, 0xbc, 0x02, 0x65, 0xc4, 0x96, 0xc4, 0x11, 0x89, 0x43,
	0x24, 0xe9, 0xba, 0xf6, 0x77, 0x59, 0x50, 0x17, 0xf7, 0x81, 0x0b, 0x2c, 0xb2, 0x96, 0x49, 0x63,
	0x8d, 0xcb, 0x67, 0x0d, 0xea, 0x11, 0x30, 0x38, 0xa1, 0x9e, 0xd8, 0x46, 0x9c, 0xc1, 0xfc, 0x32,
	0x83, 0x05, 0x04, 0xad, 0x42, 0x55, 0x80, 0x70, 0x66, 0x71, 0x89, 0xeb, 0xd2, 0x32, 0xd7, 0x65,
	0x39, 0x53, 0x80, 0x70, 0x66, 0x05, 0x81, 0x9b, 0xa0, 0x26, 0x8e, 0x8a, 0xd1, 0x00, 0x76, 0x5a,
	0xea, 0x1d, 0x58, 0x4d, 0x8e, 0x31, 0x6a, 0x55, 0x1c, 0xfc, 0x36, 0xac, 0x2d, 0x0d, 0x22, 0xdd,
	0x1a, 0x9e, 0xf4, 0xff, 0x14, 0x84, 0x0e, 0x4c, 0x48, 0x40, 0xa7, 0x8e, 0x67, 0x52, 0x5f, 0xdd,
	0x86, 0x52, 0x68, 0x9f, 0xda, 0xce, 0x2b, 0x26, 0x9c, 0xcc, 0x56, 0xf5, 0xf1, 0xed, 0x47, 0x31,
	0x2d, 0x7b, 0xb4, 0xa0, 0x62, 0x5b, 0x50, 0xe0, 0xe4, 0xb2, 0x57, 0x61, 0x3e, 0x84, 0xfc, 0xb1,
	0x69, 0x71, 0x0d, 0xbb, 0x14, 0xf1, 0x01, 0xe4, 0x6c, 0xca, 0x8e, 0xf0, 0x6a, 0x3c, 0xd3, 0x9d,
	0xb4, 0x0a, 0x57, 0xe1, 0x7d, 0x00, 0xc5, 0x19, 0x9d, 0x39, 0xde, 0x79, 0xab, 0x78, 0x15, 0xea,
	0x36, 0x94, 0x5c, 0xcf, 0x99, 0x50, 0xdf, 0x6f, 0x95, 0xae, 0xb1, 0x73, 0xdf, 0xa2, 0xd4, 0x6d,
	0x95, 0xaf, 0xc1, 0x80, 0x7f, 0xee, 0x07, 0x74, 0xd6, 0xaa, 0x5c, 0x07, 0xd5, 0x9c, 0xda, 0xc4,
	0xc2, 0xa3, 0xbd, 0x4a, 0x9e, 0xa1, 0x4f, 0x3d, 0x3c, 0xe6, 0xab, 0x10, 0xd9, 0x5f, 0x3c, 0xf0,
	0x4b, 0x11, 0x3f, 0x86, 0x92, 0xe9, 0xe8, 0x78, 0x48, 0x75, 0xc4, 0x7d, 0xe7, 0x42, 0x5c, 0x61,
	0x49, 0xdf, 0x83, 0xa2, 0xe9, 0xe8, 0xec, 0xb4, 0x1a, 0xd7, 0x9b, 0xf0, 0x09, 0x94, 0x4d, 0x47,
	0x28, 0x60, 0xf3, 0x7a, 0x53, 0x1e, 0x42, 0xfe, 0x15, 0x31, 0x83, 0x96, 0x72, 0x15, 0xfb, 0x1f,
	0x01, 0x88, 0xc3, 0x33, 0xed, 0x69, 0x6b, 0xe5, 0x0a, 0x74, 0xed, 0x5f, 0x32, 0x70, 0x2f, 0xf0,
	0x88, 0xed, 0x13, 0xf4, 0x6b, 0xfa, 0x91, 0x47, 0xc9, 0xa9, 0xe1, 0xbc, 0xb2, 0xe3, 0xa6, 0x70,
	0x7d, 0xf5, 0xfe, 0x2d, 0x08, 0xef, 0x86, 0x1b, 0xfc, 0x83, 0x0c, 0xac, 0x4b, 0x80, 0x7f, 0xee,
	0x4f, 0x88, 0x65, 0xe9, 0xd4, 0xf3, 0x1c, 0xcf, 0x4f, 0x06, 0x06, 0x16, 0x07, 0x1c, 0x97, 0x0f,
	0xea, 0x13, 0xc7, 0xa0, 0x2c, 0x40, 0xe4, 0xb8, 0x13, 0xe7, 0x4e, 0x0c, 0xf7, 0x95, 0x47, 0x87,
	0xb2, 0x01, 0xcd, 0x39, 0x4c, 0x77, 0x5c, 0x6a, 0xa3, 0x09, 0xc6, 0x9c, 0x20, 0xdb, 0x52, 0x11,
	0xbd, 0xcb, 0x6f, 0xf2, 0xb0, 0xea, 0x51, 0xdf, 0x09, 0xbd, 0xc9, 0x82, 0x87, 0x59, 0x87, 0xc6,
	0x84, 0xb8, 0x64, 0x62, 0x06, 0xe7, 0xba, 0x3f, 0x71, 0x3c, 0x8a, 0x8e, 0x06, 0x9d, 0x95, 0x1f,
	0x38, 0x16, 0x65, 0x67, 0xb0, 0x30, 0x8c, 0xe4, 0x54, 0x8d, 0x85, 0x25, 0xdb, 0xe6, 0x81, 0x48,
	0x7f, 0x19, 0xd2, 0x90, 0xea, 0xa1, 0xcf, 0x5c, 0x9a, 0x3b, 0x09, 0xf0, 0x88, 0xea, 0xea, 0x2d,
	0xa8, 0x1d, 0x1b, 0x31, 0x28, 0x06, 0x34, 0x16, 0xfa, 0x26, 0x6e, 0x88, 0x00, 0xbe, 0x8b, 0x7b,
	0xd0, 0xf2, 0xa8, 0x6f, 0x1a, 0xd4, 0x0e, 0x74, 0xee, 0x1d, 0xc4, 0x9c, 0xd3, 0x23, 0xb1, 0x9d,
	0x77, 0x60, 0xe3, 0xcc, 0xf4, 0x82, 0x90, 0x58, 0x4b, 0x08, 0x75, 0x44, 0xb8, 0x0b, 0xb7, 0xfc,
	0x57, 0xc4, 0x5d, 0x1a, 0x6d, 0xe0, 0x68, 0x0b, 0x94, 0x19, 0x79, 0xe1, 0x78, 0xba, 0x4b, 0xa6,
	0xf4, 0x98, 0x84, 0x56, 0xe0, 0xa3, 0xc6, 0xe7, 0x71, 0xc4, 0xb4, 0x17, 0x47, 0x14, 0x1c, 0x51,
	0xa0, 0x7c, 0x6c, 0xe8, 0xfc, 0x64, 0xd6, 0x90, 0x0a, 0x3b, 0x00, 0x37, 0xd4, 0xfd, 0x13, 0xe2,
	0x51, 0xbf, 0xd5, 0x92, 0xeb, 0xce, 0x61, 0xb1, 0x9d, 0xde, 0x96, 0xc7, 0x23, 0x18, 0xb2, 0xcc,
	0x99, 0x19, 0x30, 0x86, 0x36, 0x71, 0x60, 0x0d, 0xea, 0xc8, 0x6e, 0x04, 0xbe, 0x83, 0xe0, 0x4d,
	0x50, 0x19, 0xb5, 0x97, 0xa1, 0x13, 0x10, 0x3d, 0xf4, 0xa9, 0x81, 0xb4, 0xee, 0xa6, 0xed, 0x30,
	0x70, 0x02, 0x62, 0xb1, 0x99, 0xdf, 0x96, 0x22, 0x8c, 0x8f, 0x92, 0x33, 0x62, 0x5a, 0xe4, 0xc8,
	0x42, 0x19, 0x7c, 0x67, 0x51, 0x55, 0x84, 0xda, 0x52, 0xbf, 0xf5, 0x8e, 0x14, 0x01, 0x03, 0xe9,
	0x7e, 0x40, 0xbc, 0x40, 0x6c, 0xf8, 0x1e, 0x1b, 0xd1, 0xfe, 0x33, 0x0b, 0x6b, 0xb1, 0x33, 0x5e,
	0x88, 0x4a, 0x45, 0x9f, 0x7a, 0x67, 0xd4, 0x13, 0x41, 0x69, 0x33, 0x55, 0xf3, 0xb9, 0xa5, 0x6c,
	0x43, 0x71, 0x62, 0x99, 0xd4, 0x0e, 0x84, 0xdd, 0x5e, 0x86, 0xdb, 0x85, 0x5b, 0x71, 0x37, 0x20,
	0x06, 0x7d, 0x11, 0xa7, 0x1e, 0x5e, 0x62, 0x94, 0x0b, 0x49, 0x51, 0x0f, 0x5a, 0x33, 0xd3, 0xd6,
	0x53, 0x49, 0xa9, 0x37, 0x27, 0x45, 0x5e, 0xa7, 0x93, 0x5a, 0xbd, 0x19, 0xa9, 0x7b, 0xd0, 0xb2,
	0x75, 0x32, 0x9d, 0x7a, 0x74, 0x4a, 0x02, 0xca, 0x74, 0x4b, 0x8a, 0xd6, 0xe7, 0x86, 0xa0, 0x1d,
	0x40, 0x53, 0x9c, 0x8e, 0x6e, 0xd0, 0x80, 0x98, 0x96, 0xaf, 0xd6, 0x20, 0x3f, 0x71, 0x66, 0x33,
	0x74, 0x0e, 0x15, 0xb5, 0x0a, 0x39, 0xfa, 0x9a, 0x62, 0x46, 0x54, 0x61, 0x43, 0xc4, 0x9b, 0x32,
	0xe1, 0xe4, 0xb6, 0x2a, 0xcc, 0xd6, 0x26, 0x8e, 0x1d, 0x10, 0xd3, 0xa6, 0x9e, 0x6e, 0x1a, 0x48,
	0xb1, 0xa2, 0x51, 0x76, 0xea, 0xb3, 0x19, 0xb1, 0x8d, 0x88, 0xe2, 0x0a, 0x54, 0x18, 0x73, 0x7e,
	0x40, 0x66, 0xae, 0x48, 0xb8, 0x22, 0x17, 0x94, 0x95, 0xb9, 0xe9, 0x64, 0x66, 0x58, 0xa6, 0x4d,
	0x31, 0xc9, 0x8a, 0x96, 0xcd, 0xe3, 0x87, 0x0a, 0xe0, 0x12, 0x8f, 0xda, 0x01, 0xf2, 0x55, 0xc0,
	0x65, 0x7e, 0x1f, 0x56, 0xe5, 0xc6, 0x51, 0x0c, 0x3a, 0xb5, 0x03, 0xef, 0x5c, 0x6d, 0x40, 0xd1,
	0x66, 0xae, 0xce, 0x17, 0xbe, 0x4d, 0x81, 0x32, 0xca, 0x25, 0x70, 0x64, 0x56, 0x27, 0x21, 0x33,
	0xf2, 0x7a, 0x9e, 0xd0, 0x45, 0x69, 0x19, 0x26, 0xa5, 0x8b, 0x69, 0x59, 0x01, 0x41, 0x4d, 0x28,
	0xd9, 0xdc, 0x7d, 0xf2, 0x64, 0x4e, 0xeb, 0x43, 0x35, 0xf4, 0xac, 0x68, 0x8f, 0x55, 0xc8, 0x85,
	0x9e, 0x25, 0x84, 0xf6, 0x58, 0xa4, 0x88, 0xec, 0xc8, 0xd8, 0xaa, 0xd5, 0xc7, 0xf7, 0x52, 0x8f,
	0x2c, 0xc6, 0xb9, 0xf6, 0x43, 0x58, 0xf5, 0x03, 0x12, 0x84, 0x3e, 0xba, 0xe0, 0x88, 0xee, 0x2a,
	0x54, 0x63, 0x60, 0xb1, 0xab, 0xf9, 0x2e, 0x51, 0x7c, 0xda, 0xbf, 0x67, 0xa0, 0x72, 0x12, 0x04,
	0xae, 0x6e, 0xda, 0xc7, 0x8e, 0xfa, 0x11, 0x54, 0xb9, 0xa9, 0xe8, 0xa1, 0x87, 0x82, 0xc8, 0x6d,
	0x55, 0x1f, 0xb7, 0x16, 0x18, 0x88, 0x73, 0xfe, 0x11, 0x54, 0xb9, 0xb5, 0x70, 0xf4, 0xec, 0x15,
	0xe8, 0x3f, 0x81, 0x55, 0x81, 0x1e, 0xe3, 0x8b, 0xab, 0x44, 0x72, 0x9b, 0x69, 0xfb, 0xf9, 0x09,
	0xac, 0x0a, 0xe6, 0x16, 0xa6, 0xe7, 0xaf, 0x37, 0x5d, 0x3b, 0x84, 0x15, 0xff, 0xa5, 0xc5, 0x45,
	0x16, 0xd7, 0x58, 0x9b, 0xcc, 0xe8, 0x1b, 0x08, 0xff, 0xf7, 0x60, 0x9d, 0x91, 0x7d, 0x19, 0x52,
	0xe6, 0xe8, 0xce, 0x5d, 0x1a, 0x93, 0x4e, 0x9e, 0x7d, 0x23, 0xed, 0x46, 0x22, 0x48, 0xb3, 0x29,
	0x8c, 0x49, 0x3a, 0x63, 0xe2, 0x60, 0x68, 0x5f, 0x6b, 0xf1, 0xff, 0xc8, 0x42, 0x99, 0x91, 0xc2,
	0xc3, 0xfb, 0x3e, 0x34, 0x84, 0x7c, 0x18, 0x33, 0x26, 0x95, 0xe7, 0xf7, 0x9d, 0xa5, 0x95, 0x17,
	0x65, 0xf0, 0x7d, 0x68, 0x88, 0x63, 0x91, 0xf3, 0xb2, 0xd7, 0x9a, 0xf7, 0x53, 0x50, 0x63, 0xeb,
	0xf1, 0xcd, 0xcb, 0xd3, 0x7c, 0x6f, 0x69, 0x6e, 0x8a, 0x80, 0x7e, 0x0a, 0x6a, 0x6c, 0x61, 0x49,
	0x20, 0x7f, 0x7d, 0x02, 0x9f, 0x41, 0x5d, 0x70, 0x10, 0xb0, 0xf8, 0xe1, 0xb7, 0x0a, 0xd7, 0x62,
	0xfc, 0x33, 0xa8, 0x8b, 0x75, 0xc5, 0xb4, 0xe2, 0x75, 0xa6, 0x69, 0xbf, 0x84, 0xcd, 0x99, 0x63,
	0x4f, 0x1d, 0xe3, 0x48, 0x9f, 0x38, 0x96, 0x25, 0x02, 0xcd, 0xdb, 0xd3, 0xa4, 0x57, 0xb0, 0x21,
	0xe9, 0x3b, 0xee, 0xe2, 0x46, 0xb7, 0x20, 0xeb, 0xb8, 0x42, 0x91, 0xee, 0x2e, 0x10, 0x4a, 0xcc,
	0xf8, 0x5a, 0x0b, 0xff, 0x59, 0x16, 0x6a, 0x92, 0x0e, 0x6a, 0xd2, 0x0f, 0xa4, 0x1b, 0xf0, 0x75,
	0xc7, 0x95, 0x6a, 0x74, 0xff, 0xb2, 0x75, 0x23, 0x4e, 0x3f, 0x07, 0x10, 0xb2, 0x65, 0x33, 0xb3,
	0x37, 0x98, 0xd9, 0x89, 0xd4, 0x69, 0x2e, 0x5d, 0xa9, 0x4e, 0x0f, 0x53, 0x29, 0xa4, 0x9c, 0x42,
	0x27, 0x52, 0xa9, 0x38, 0x91, 0xfc, 0x8d, 0x88, 0xb0, 0x04, 0xbf, 0xfe, 0x62, 0xf6, 0x5a, 0x27,
	0x41, 0xe0, 0x99, 0x47, 0x61, 0x40, 0x63, 0x87, 0x9b, 0xd9, 0xaa, 0xb0, 0x08, 0x74, 0x46, 0xac,
	0x90, 0x62, 0x8e, 0x90, 0x61, 0x9f, 0xc4, 0x32, 0x89, 0xcf, 0xc3, 0x8b, 0xba, 0x2d, 0xcc, 0x9e,
	0xd5, 0x81, 0xc9, 0xd3, 0x62, 0x54, 0x67, 0x34, 0xf0, 0xcc, 0x09, 0x3f, 0xad, 0x77, 0x20, 0x1f,
	0xda, 0x66, 0x80, 0x95, 0x60, 0xe3, 0xf1, 0xca, 0xa2, 0xe7, 0xb4, 0xcd, 0x40, 0x7d, 0x17, 0x0a,
	0x2c, 0xff, 0xa6, 0x58, 0x00, 0x36, 0x1e, 0xab, 0x8b, 0x2a, 0xca, 0x46, 0xd4, 0x4f, 0xa0, 0xee,
	0x87, 0x47, 0x11, 0xaf, 0x52, 0x64, 0x9b, 0x4b, 0x0b, 0x47, 0x28, 0xda, 0x53, 0x28, 0x33, 0xc0,
	0x11, 0x25, 0x76, 0x62, 0x6b, 0x8f, 0x00, 0x62, 0x94, 0xb2, 0x57, 0x52, 0xda, 0x85, 0xca, 0x0b,
	0x72, 0x46, 0xb8, 0xda, 0xdc, 0x82, 0x9a, 0xcc, 0x08, 0x62, 0x24, 0xef, 0x43, 0x81, 0x2d, 0x24,
	0xa9, 0xad, 0x2d, 0x51, 0x63, 0xa3, 0xda, 0x16, 0x00, 0xf3, 0x87, 0xbe, 0xa1, 0x07, 0x64, 0xca,
	0x42, 0xe2, 0x29, 0x3d, 0x17, 0xb6, 0xb4, 0x20, 0xee, 0x8a, 0xf6, 0xdf, 0x19, 0xa8, 0x0b, 0x54,
	0x2e, 0xca, 0xc4, 0x16, 0xde, 0x87, 0x7c, 0x40, 0xa6, 0x72, 0xb9, 0x8d, 0xa5, 0xb8, 0x20, 0x96,
	0x90, 0xde, 0x39, 0x87, 0x82, 0x7d, 0x27, 0x0d, 0x2d, 0x7e, 0x52, 0x11, 0x13, 0x79, 0x3c, 0xf3,
	0x2a, 0xe4, 0xfc, 0x90, 0x27, 0x14, 0xf8, 0x31, 0x33, 0x6d, 0x2c, 0x35, 0xf8, 0x07, 0x79, 0x8d,
	0xa7, 0x9f, 0x99, 0xe7, 0x2a, 0x65, 0xfc, 0x6c, 0x40, 0x71, 0x46, 0x0d, 0x93, 0xd8, 0x78, 0x9c,
	0x19, 0x96, 0x59, 0x8b, 0xee, 0x0a, 0xab, 0x88, 0x7e, 0xf0, 0x19, 0xd6, 0xee, 0x4b, 0xe0, 0x1f,
	0x60, 0xa5, 0x9e, 0xd1, 0xda, 0x3c, 0x9e, 0xfb, 0x06, 0x97, 0xf6, 0x63, 0x68, 0x2c, 0xf0, 0x29,
	0xed, 0x74, 0xf3, 0xe2, 0xad, 0x68, 0xef, 0x43, 0x89, 0xb8, 0xee, 0x95, 0x22, 0x3e, 0x07, 0x60,
	0x68, 0xa9, 0xe2, 0x95, 0xea, 0x9d, 0x4d, 0x51, 0xef, 0xf9, 0xa4, 0x84, 0xd0, 0x72, 0xb8, 0x2f,
	0x4d, 0x9c, 0x0c, 0x37, 0xc7, 0x5b, 0x4b, 0x53, 0x03, 0x32, 0xd5, 0x5e, 0x40, 0x85, 0xfd, 0x3b,
	0x39, 0xa1, 0x93, 0xd3, 0xc4, 0xca, 0xdf, 0x8d, 0x33, 0x99, 0xb6, 0x34, 0x4e, 0xd2, 0x11, 0x27,
	0x5a, 0x2b, 0x77, 0xc9, 0x5a, 0x1e, 0x94, 0xd9, 0xbf, 0x97, 0xe8, 0xee, 0x16, 0x94, 0xa4, 0x70,
	0xd3, 0xd4, 0x29, 0x26, 0xa4, 0x07, 0x50, 0xc4, 0xe5, 0xe5, 0x8a, 0xeb, 0xe9, 0xdc, 0x69, 0x7f,
	0x9f, 0xc5, 0x5a, 0x3c, 0x70, 0xf8, 0xb2, 0xf7, 0x21, 0xcf, 0xb2, 0x2f, 0x51, 0x99, 0x2c, 0x4e,
	0x9a, 0xa7, 0x65, 0xf7, 0xa1, 0x30, 0x3b, 0xf7, 0x5f, 0x5a, 0xa2, 0x28, 0x59, 0x5b, 0x0a, 0x54,
	0x88, 0xf5, 0x10, 0xca, 0xae, 0xe3, 0x07, 0x53, 0x8f, 0xca, 0x1a, 0xe4, 0x02, 0xc4, 0x6d, 0x28,
	0x09, 0xef, 0x97, 0xda, 0x2b, 0x5b, 0x08, 0x05, 0xf7, 0x21, 0xcf, 0x0c, 0x5c, 0x34, 0xcb, 0x16,
	0x19, 0x9c, 0x5b, 0xfe, 0x16, 0x14, 0xb9, 0xa2, 0x89, 0x4e, 0x59, 0x2b, 0x4d, 0x07, 0x11, 0x53,
	0x83, 0x1c, 0x71, 0x5d, 0xd1, 0x24, 0x5b, 0x5b, 0x12, 0x12, 0xc3, 0xd1, 0x0e, 0xa1, 0x69, 0xd3,
	0xe0, 0x95, 0xe3, 0x9d, 0xea, 0x47, 0xe7, 0xba, 0xeb, 0x78, 0x01, 0xd3, 0x04, 0xf6, 0x57, 0x24,
	0xb1, 0x9f, 0x2e, 0x05, 0x39, 0x2d, 0x11, 0xe4, 0x52, 0xea, 0x40, 0xed, 0x1f, 0x4b, 0x90, 0x3f,
	0x71, 0xfc, 0x80, 0x65, 0xed, 0xec, 0x6f, 0xec, 0x9c, 0x15, 0x28, 0xdb, 0xe1, 0x4c, 0x9f, 0xb8,
	0xa1, 0x2f, 0xba, 0x01, 0x2b, 0x50, 0x61, 0xd5, 0xad, 0xe5, 0x10, 0x83, 0x1f, 0x69, 0x04, 0xf2,
	0x03, 0x4a, 0xac, 0x56, 0x15, 0x41, 0x1a, 0x6c, 0xba, 0x27, 0xe7, 0xbe, 0x39, 0x99, 0xd7, 0xfa,
	0xbe, 0xf9, 0xff, 0x45, 0xdb, 0x45, 0x54, 0x04, 0xdf, 0x83, 0x4a, 0x10, 0x71, 0xcb, 0xc5, 0xb8,
	0xa8, 0xba, 0xc9, 0x2e, 0xea, 0x13, 0xa8, 0x7a, 0xf4, 0x65, 0x34, 0x85, 0x77, 0xdf, 0x3e, 0x5a,
	0x9c, 0x72, 0x55, 0xfb, 0xe9, 0xa2, 0xda, 0xb4, 0xf8, 0xf6, 0x6a, 0xd3, 0xf5, 0xb7, 0x57, 0x9b,
	0x6e, 0xdc, 0x8c, 0xd4, 0x7d, 0xb8, 0x1b, 0x27, 0x33, 0x6f, 0x6d, 0xe9, 0x06, 0xb5, 0xc8, 0x39,
	0x2a, 0x17, 0xb6, 0x0a, 0x6c, 0xfa, 0x3a, 0xd0, 0x03, 0x93, 0xe5, 0x31, 0x7c, 0xa4, 0x8e, 0x23,
	0x3f, 0x82, 0x95, 0x79, 0x6f, 0x49, 0xf2, 0xc0, 0x9b, 0xb1, 0x8b, 0xc9, 0x52, 0x5a, 0x07, 0xea,
	0x47, 0xd0, 0x58, 0xec, 0x89, 0x89, 0xde, 0xec, 0x7b, 0xa9, 0xdc, 0x27, 0xda, 0x67, 0x9f, 0x43,
	0x93, 0xbe, 0x0e, 0xa8, 0x67, 0x13, 0x4b, 0x17, 0x2d, 0x3c, 0xb8, 0x5e, 0x0b, 0xef, 0xc7, 0xb0,
	0x1e, 0xb3, 0x09, 0x9e, 0x28, 0x31, 0x8b, 0xf0, 0x5b, 0x2d, 0xf4, 0x37, 0x8b, 0x2a, 0x95, 0x34,
	0x1f, 0x05, 0xca, 0x4c, 0x75, 0x4d, 0xc3, 0xa2, 0xad, 0xdb, 0xa8, 0xb9, 0x0d, 0x28, 0x86, 0x2e,
	0x76, 0x77, 0xdf, 0x45, 0x99, 0xa8, 0x00, 0xbc, 0xd5, 0xcc, 0x8c, 0xa0, 0xa5, 0x21, 0x8e, 0x02,
	0xe5, 0xd0, 0x67, 0xf9, 0x98, 0x1b, 0xb6, 0xde, 0x43, 0xc8, 0xbb, 0x70, 0x5b, 0xa8, 0x39, 0x2f,
	0x72, 0x17, 0x5a, 0x37, 0xf7, 0x25, 0x21, 0xd3, 0x79, 0x45, 0xcc, 0x00, 0xa7, 0xbd, 0x2f, 0x09,
	0xd9, 0x26, 0x13, 0xa3, 0x1b, 0xb6, 0x1e, 0x20, 0x64, 0x0d, 0xea, 0x62, 0x39, 0x66, 0x61, 0xfa,
	0x27, 0xad, 0x0f, 0xa2, 0x56, 0x53, 0x0c, 0xfc, 0x59, 0x6b, 0x1b, 0xc1, 0xeb, 0x28, 0xf3, 0x39,
	0xf6, 0x67, 0xad, 0xef, 0x62, 0x0b, 0xe2, 0x7f, 0x0b, 0x51, 0xdb, 0x5d, 0xfd, 0x08, 0x4a, 0x22,
	0x7f, 0x13, 0x5e, 0x72, 0x51, 0x22, 0xc9, 0x56, 0x85, 0x06, 0x9b, 0xa6, 0xaf, 0x9b, 0xee, 0xd9,
	0xa7, 0x0b, 0x2a, 0x29, 0x1a, 0x45, 0xcc, 0x7d, 0x96, 0x05, 0x4e, 0x68, 0x9b, 0xaf, 0xd3, 0x70,
	0xf2, 0x31, 0x9c, 0x25, 0x3a, 0xa2, 0x89, 0x04, 0x97, 0xd1, 0x11, 0x38, 0x55, 0xc4, 0xc1, 0x26,
	0x41, 0xe0, 0x39, 0xa2, 0x0b, 0x5c, 0xbf, 0xb9, 0xdb, 0xf8, 0x2d, 0x98, 0xfc, 0xef, 0xae, 0x1d,
	0xf5, 0xf5, 0x4d, 0xbe, 0xf6, 0x3b, 0x36, 0xf9, 0x87, 0x50, 0xc4, 0x71, 0xbf, 0x75, 0x0b, 0x27,
	0x6d, 0x24, 0xd5, 0x52, 0xa6, 0x02, 0xbc, 0x5d, 0x13, 0x75, 0x35, 0xd7, 0x90, 0xef, 0x94, 0x46,
	0xe8, 0x06, 0xb6, 0x3b, 0x7f, 0x8a, 0x9a, 0x3f, 0xf5, 0xc8, 0x4c, 0x7d, 0x00, 0x65, 0x36, 0xca,
	0x88, 0x60, 0x7c, 0x4c, 0xa6, 0x3b, 0xd2, 0x42, 0x58, 0x0c, 0x35, 0x0d, 0x9e, 0xc9, 0xe4, 0xb5,
	0x31, 0x54, 0x98, 0xd6, 0x06, 0xa1, 0x6b, 0x51, 0x4c, 0x67, 0x4d, 0x57, 0x44, 0xd7, 0x2a, 0xe4,
	0x0c, 0xd3, 0x15, 0xed, 0xb5, 0x3a, 0x14, 0x7c, 0x8c, 0xbc, 0x39, 0xf9, 0x69, 0xe0, 0x67, 0x5e,
	0x36, 0xdf, 0xac, 0x4f, 0x71, 0x15, 0x7e, 0x79, 0xa9, 0xfd, 0x2a, 0x03, 0x4d, 0x34, 0x86, 0x79,
	0x08, 0x56, 0xdf, 0x87, 0x02, 0xae, 0x22, 0x98, 0x5b, 0xcc, 0x21, 0xe6, 0x3c, 0xd4, 0x20, 0xef,
	0xbb, 0xa6, 0x81, 0xd6, 0x9b, 0x67, 0x5f, 0x06, 0xfb, 0x2a, 0xe0, 0x57, 0x3c, 0xe0, 0x97, 0xaf,
	0x1d, 0xf0, 0xc7, 0xb0, 0x8e, 0xbc, 0x48, 0x6f, 0x68, 0x32, 0x02, 0xc7, 0x64, 0x42, 0x13, 0xc5,
	0x7a, 0x0d, 0xf2, 0xc4, 0x30, 0xbc, 0x79, 0x43, 0xd1, 0xa6, 0xc1, 0x8c, 0xf8, 0xa7, 0xf3, 0x3d,
	0x1f, 0x4d, 0x88, 0x2f, 0x2e, 0x00, 0xb4, 0x5f, 0x67, 0x00, 0x66, 0xc8, 0x8c, 0xa1, 0x1f, 0xfb,
	0xcc, 0x91, 0x1a, 0xf4, 0xcc, 0x9c, 0x48, 0x62, 0x2b, 0x50, 0xc1, 0x51, 0xdd, 0x30, 0xbd, 0x79,
	0xef, 0x53, 0x94, 0x1a, 0xa2, 0x25, 0xb9, 0x94, 0x23, 0xa8, 0x00, 0xd8, 0x41, 0xe7, 0xb0, 0x82,
	0xbc, 0x63, 0x9f, 0xbb, 0x57, 0x3e, 0x50, 0xc4, 0x81, 0x5b, 0x50, 0xe3, 0x0d, 0x75, 0xd3, 0xc6,
	0x06, 0x18, 0xa0, 0x88, 0x56, 0xa1, 0x8a, 0x24, 0x04, 0xb0, 0x8a, 0x5a, 0xf2, 0xff, 0xa0, 0x82,
	0x97, 0x2d, 0x2c, 0x03, 0x4b, 0x6c, 0x9a, 0xed, 0xea, 0x9c, 0x17, 0x79, 0x89, 0x2b, 0xfe, 0x9c,
	0x64, 0xc9, 0x71, 0xa9, 0xb0, 0x58, 0x71, 0xdc, 0x0d, 0x28, 0x0a, 0x03, 0xe0, 0xa7, 0xfd, 0x02,
	0xd6, 0xe7, 0x6d, 0x5c, 0xa6, 0x16, 0xfa, 0x8c, 0xb8, 0xae, 0x69, 0x4f, 0x19, 0x39, 0x96, 0x62,
	0xe9, 0xa6, 0x2b, 0x2e, 0x68, 0x56, 0xa0, 0x82, 0x00, 0x54, 0x9e, 0xe8, 0xc2, 0x25, 0xd6, 0x04,
	0x76, 0xc5, 0x85, 0xcb, 0x3a, 0x34, 0x16, 0x69, 0x0a, 0xb1, 0x7f, 0xc4, 0x2c, 0x41, 0xc2, 0x2d,
	0x72, 0x44, 0xad, 0x4b, 0x4b, 0x98, 0x3f, 0x2f, 0x41, 0x25, 0xc2, 0x57, 0x01, 0xb2, 0xa6, 0x21,
	0x10, 0x3f, 0x58, 0x28, 0x60, 0xee, 0x24, 0xf5, 0x48, 0xac, 0x80, 0xf5, 0x8b, 0x94, 0x58, 0x4e,
	0x96, 0xfd, 0xe6, 0x8c, 0x4c, 0x79, 0x09, 0x58, 0x79, 0xe3, 0xbc, 0xae, 0xf8, 0x36, 0xf3, 0xba,
	0xd2, 0xdb, 0x73, 0xf2, 0xe5, 0xb7, 0xe7, 0xe4, 0x2b, 0x6f, 0xd7, 0xc9, 0xc3, 0xd7, 0x71, 0xf2,
	0xf5, 0xaf, 0xed, 0xe4, 0x1b, 0xd7, 0x77, 0xf2, 0x3f, 0x84, 0x7a, 0x5c, 0xfd, 0x59, 0xa4, 0xcc,
	0xa5, 0xcc, 0x4d, 0x35, 0x95, 0x79, 0x80, 0x58, 0xbd, 0x3c, 0x40, 0x7c, 0x08, 0x45, 0xd4, 0x7b,
	0x16, 0x49, 0x96, 0x53, 0xbe, 0xa4, 0x71, 0x3c, 0x84, 0x22, 0xfa, 0x21, 0xbf, 0xb5, 0x96, 0x52,
	0xb9, 0xc6, 0x1c, 0xd8, 0xc5, 0x99, 0xe5, 0xfa, 0x35, 0x32, 0xcb, 0x35, 0xa8, 0xcf, 0xa8, 0xef,
	0xf8, 0x7a, 0x40, 0xfc, 0x53, 0xdd, 0x34, 0x30, 0x3c, 0x61, 0x41, 0x85, 0xb6, 0xc2, 0x20, 0x2d,
	0x34, 0xc8, 0x07, 0x50, 0x3e, 0xfd, 0xdc, 0xd7, 0x5d, 0x62, 0x7a, 0x17, 0x1a, 0x6e, 0x76, 0xab,
	0xa2, 0xfd, 0x69, 0x06, 0x80, 0x21, 0x4e, 0x9c, 0xd9, 0xcc, 0xb1, 0x13, 0x4e, 0xab, 0x0a, 0xb9,
	0x10, 0x43, 0x84, 0xf0, 0xb4, 0x6c, 0xc8, 0x77, 0xc9, 0x44, 0x9a, 0xe8, 0xfb, 0x91, 0x88, 0xf2,
	0x29, 0xcd, 0xa6, 0x68, 0xfd, 0x2d, 0xa8, 0xf8, 0xd4, 0xa2, 0x93, 0x80, 0xbb, 0xb2, 0x8b, 0x31,
	0xb5, 0xcf, 0xa1, 0xce, 0xfe, 0x8f, 0xd6, 0x61, 0x62, 0xe5, 0x9c, 0x89, 0x68, 0xb6, 0xb1, 0x34,
	0x8f, 0x0f, 0x6b, 0x5d, 0xbe, 0x5f, 0xe6, 0x8d, 0xaf, 0x3d, 0x49, 0x56, 0xa6, 0xba, 0x29, 0x7a,
	0xa7, 0x15, 0xed, 0xaf, 0x33, 0x50, 0x42, 0x6e, 0x1c, 0xe3, 0xfa, 0x64, 0xd6, 0xa0, 0x1e, 0xbf,
	0x5e, 0x13, 0xb4, 0x50, 0x60, 0x8e, 0x41, 0xf5, 0x98, 0x4f, 0x8b, 0xf9, 0x69, 0xee, 0xd5, 0x56,
	0xa1, 0x8a, 0x61, 0x12, 0x2b, 0x14, 0x57, 0xb4, 0x34, 0xd7, 0xa0, 0xee, 0xd1, 0x78, 0x72, 0xc2,
	0x2f, 0xe9, 0xcf, 0x61, 0x93, 0x2d, 0xea, 0x51, 0xd7, 0x32, 0x27, 0x44, 0x98, 0xbe, 0xcd, 0x92,
	0x58, 0x8b, 0x7a, 0xd7, 0xe7, 0xb6, 0x05, 0x8a, 0x20, 0xc1, 0xcc, 0xd9, 0x37, 0x3d, 0x6a, 0x88,
	0x08, 0x11, 0x1f, 0xf1, 0x42, 0xdb, 0x36, 0xed, 0xa9, 0x78, 0x67, 0x66, 0x43, 0x33, 0xb6, 0xb4,
	0xee, 0xd3, 0xe0, 0x9b, 0x5d, 0xef, 0x9f, 0x32, 0x50, 0x65, 0x24, 0x98, 0x79, 0x98, 0x37, 0x50,
	0x03, 0xbc, 0x87, 0xb7, 0x42, 0x3f, 0xe0, 0x21, 0x0e, 0x63, 0x93, 0xfa, 0x31, 0x14, 0xb8, 0x81,
	0xf1, 0x56, 0xd1, 0xbb, 0x4b, 0x73, 0xc5, 0x2a, 0xcc, 0xd8, 0xd0, 0xca, 0x36, 0x87, 0x50, 0x96,
	0xff, 0x27, 0x5a, 0x21, 0xab, 0x50, 0x0d, 0x88, 0x37, 0xa5, 0x51, 0x64, 0x15, 0x57, 0x97, 0x48,
	0x6c, 0xe2, 0x58, 0xe2, 0x9c, 0xe5, 0xd1, 0xc7, 0x02, 0xea, 0x0c, 0x1a, 0x6c, 0x2d, 0x83, 0xba,
	0x96, 0x73, 0x3e, 0xa3, 0x76, 0xf0, 0x4d, 0x9f, 0x18, 0x5a, 0x92, 0x41, 0xe8, 0xcc, 0xb1, 0x6f,
	0x74, 0x5e, 0xb7, 0x61, 0x65, 0x12, 0x7a, 0x1e, 0xde, 0x1b, 0x4e, 0x4e, 0xa8, 0x11, 0x5a, 0xd1,
	0x72, 0xb7, 0x61, 0x45, 0xac, 0x1f, 0x1b, 0xe2, 0xeb, 0xfd, 0x51, 0x0e, 0x2a, 0x28, 0xcb, 0x80,
	0x04, 0x54, 0x7d, 0x04, 0x10, 0xd9, 0x70, 0x7a, 0xa3, 0x74, 0xd1, 0xcc, 0xef, 0x43, 0xc1, 0x8e,
	0x9e, 0xb3, 0xa4, 0x79, 0x07, 0xb4, 0x6b, 0x8d, 0x1d, 0x85, 0x91, 0xde, 0x64, 0x94, 0x46, 0xfb,
	0x63, 0xa8, 0xce, 0x8d, 0x22, 0xfd, 0x2a, 0xe2, 0x12, 0x23, 0xda, 0x86, 0xb2, 0x50, 0x06, 0xe9,
	0xa8, 0x5a, 0x17, 0x69, 0x8b, 0xfa, 0x18, 0x6a, 0x31, 0x7b, 0x90, 0xb7, 0x5a, 0x77, 0x2f, 0x5a,
	0x0a, 0x8d, 0xe6, 0x63, 0xa8, 0xce, 0x15, 0x80, 0xa5, 0x11, 0x6c, 0xca, 0x9d, 0xa5, 0x29, 0x31,
	0x25, 0x79, 0x04, 0x10, 0x9d, 0x21, 0x4b, 0x16, 0xd2, 0x25, 0x19, 0xa1, 0x68, 0x5b, 0x00, 0x3c,
	0x40, 0x5c, 0xe9, 0xf9, 0x87, 0x50, 0xe3, 0x98, 0xe2, 0xdc, 0x85, 0xb3, 0x8f, 0x72, 0x74, 0x74,
	0x5b, 0xdc, 0x82, 0x1e, 0x46, 0x7e, 0x3e, 0x97, 0x16, 0xdc, 0xa2, 0xf5, 0xb4, 0x9e, 0x5c, 0x9d,
	0x85, 0x27, 0xf5, 0x83, 0x84, 0xca, 0xdd, 0x4e, 0x99, 0x36, 0xf7, 0xc4, 0xbe, 0x45, 0xce, 0x30,
	0x80, 0x71, 0xf6, 0x3e, 0x84, 0xda, 0x8c, 0x78, 0x24, 0x38, 0x71, 0x6c, 0x9d, 0xb8, 0xee, 0x42,
	0x4e, 0xa9, 0x40, 0x59, 0xc4, 0x3f, 0xe9, 0xb7, 0x3d, 0x68, 0x44, 0xd8, 0x53, 0xcf, 0x09, 0x17,
	0xf1, 0x1f, 0x42, 0x9e, 0xb8, 0xd1, 0xfd, 0x58, 0x82, 0x8d, 0xf8, 0x22, 0xdf, 0x85, 0x22, 0xce,
	0x96, 0x1b, 0xbd, 0x93, 0x8e, 0x8a, 0x38, 0x9a, 0x01, 0x4d, 0xbe, 0x87, 0x63, 0x8f, 0xcc, 0x28,
	0x0b, 0xd3, 0x37, 0xd9, 0xf1, 0x03, 0x28, 0xb0, 0x3d, 0xa4, 0x77, 0xba, 0xe7, 0x42, 0xd4, 0x3e,
	0x87, 0x2a, 0xff, 0x42, 0xf9, 0xdc, 0x60, 0x05, 0xed, 0xaf, 0x32, 0xd1, 0x54, 0x34, 0xca, 0x8f,
	0x01, 0x22, 0x4e, 0xa5, 0x51, 0xde, 0x4d, 0x99, 0x3e, 0xdf, 0xce, 0x5c, 0x1c, 0xd9, 0x2b, 0xc5,
	0x81, 0x4d, 0x69, 0xc6, 0xa2, 0x94, 0x5d, 0x2b, 0x85, 0x34, 0x22, 0xe0, 0xe5, 0xd3, 0x2b, 0xe2,
	0xcd, 0xae, 0xd6, 0xd1, 0x9d, 0x08, 0x73, 0xd1, 0x15, 0x8b, 0xca, 0xc5, 0x0d, 0x8f, 0x2c, 0xd3,
	0x3f, 0xa1, 0x46, 0xbc, 0xce, 0x59, 0xf2, 0xc6, 0xda, 0xcf, 0xa1, 0xc6, 0xa9, 0x08, 0xd1, 0x4b,
	0xd5, 0xc8, 0xdc, 0x50, 0xd1, 0xe7, 0x4c, 0x6b, 0xaf, 0xf0, 0x91, 0x96, 0x37, 0x8b, 0xbc, 0x41,
	0xfc, 0x5c, 0x96, 0x7b, 0xfc, 0x0b, 0xcb, 0xaf, 0x42, 0x55, 0x3e, 0x58, 0x8b, 0x12, 0x0f, 0xa6,
	0x0e, 0xf1, 0x20, 0x95, 0xba, 0xb0, 0xe3, 0x05, 0x9a, 0x27, 0x25, 0xb2, 0x64, 0x61, 0x57, 0xac,
	0xca, 0xea, 0x60, 0xce, 0xab, 0x2e, 0xaa, 0x7e, 0x4c, 0x47, 0x30, 0x4c, 0x99, 0x86, 0x88, 0x5b,
	0xe9, 0x0f, 0x85, 0x9e, 0xcb, 0x35, 0xd1, 0x0b, 0xdf, 0x60, 0xcd, 0x1a, 0xe4, 0xb1, 0xc5, 0xc6,
	0x57, 0x53, 0x01, 0x4c, 0x57, 0x67, 0xa5, 0x3f, 0xf5, 0x7d, 0x71, 0x34, 0x7f, 0x9b, 0x81, 0xaa,
	0x10, 0x24, 0xea, 0x68, 0x3c, 0x7e, 0xcb, 0x23, 0xfa, 0x30, 0xe6, 0x94, 0xd3, 0xae, 0x48, 0x17,
	0x0f, 0xe2, 0x81, 0x0c, 0x25, 0x17, 0x0b, 0x12, 0xb7, 0x11, 0xd9, 0x5f, 0xfe, 0x42, 0x3c, 0xb4,
	0xbf, 0x7f, 0x2d, 0x46, 0x97, 0x52, 0xd8, 0x0a, 0x90, 0xcf, 0xa3, 0x58, 0xe9, 0x9e, 0x91, 0xa5,
	0xfb, 0x8c, 0x4c, 0x4e, 0x4c, 0x7b, 0xee, 0xbd, 0xf0, 0x55, 0x79, 0xe8, 0x07, 0xce, 0x8c, 0x6f,
	0x84, 0x4b, 0x77, 0x1d, 0x1a, 0x3e, 0x99, 0xb9, 0x16, 0x2b, 0xb1, 0x3c, 0x16, 0x7b, 0xc4, 0xbb,
	0xf0, 0x16, 0x28, 0x98, 0x15, 0xf2, 0x19, 0x3c, 0x5f, 0xac, 0xca, 0x3c, 0x02, 0x47, 0xf0, 0x6e,
	0xad, 0x26, 0x89, 0x98, 0xbe, 0x8e, 0xd0, 0x13, 0xd3, 0x30, 0xa8, 0x8d, 0x85, 0x53, 0x19, 0x89,
	0xe0, 0x77, 0xac, 0x77, 0xd5, 0x94, 0xa7, 0x7c, 0x46, 0x3d, 0xdf, 0x74, 0x6c, 0x7c, 0xbe, 0x28,
	0x92, 0x4e, 0x3f, 0x20, 0x36, 0xd7, 0x85, 0x35, 0x04, 0xbe, 0xc7, 0x73, 0x61, 0x6c, 0x6b, 0xf1,
	0x6b, 0xaa, 0xc5, 0xfb, 0x71, 0xbc, 0xca, 0xe1, 0xbd, 0xaf, 0xa9, 0x47, 0x66, 0xac, 0xda, 0xcc,
	0xa5, 0xf5, 0xbe, 0xb0, 0x47, 0xf6, 0x7d, 0x50, 0x12, 0x6d, 0x29, 0x19, 0xec, 0xee, 0x2e, 0xb5,
	0xa3, 0xe2, 0xbd, 0xab, 0x1d, 0xd8, 0x48, 0x6f, 0x21, 0xc9, 0xd0, 0xf7, 0xde, 0xf2, 0xf4, 0xe5,
	0x76, 0xd3, 0x23, 0x28, 0x8b, 0x87, 0x6d, 0x7e, 0x6b, 0x25, 0xb5, 0x76, 0x5b, 0x7c, 0xf5, 0x36,
	0xaf, 0xdd, 0xd4, 0xcb, 0x6b, 0xb7, 0x0f, 0xa0, 0x12, 0x38, 0x2e, 0x3e, 0xa8, 0x65, 0xe5, 0xe3,
	0xf2, 0xc5, 0xe3, 0xbc, 0xfb, 0x73, 0xed, 0x3e, 0xe4, 0x36, 0x40, 0x64, 0x72, 0xb2, 0x06, 0x5c,
	0x4f, 0x2f, 0x35, 0x19, 0xee, 0x69, 0x78, 0x44, 0x3d, 0x9b, 0x06, 0xe2, 0x95, 0x69, 0x12, 0x77,
	0x9e, 0x82, 0x3d, 0x84, 0x02, 0xfa, 0x5c, 0x7c, 0x6e, 0x7a, 0x81, 0x37, 0x46, 0xc4, 0x2d, 0x28,
	0xd2, 0x33, 0x4c, 0x47, 0x36, 0x53, 0xfc, 0x36, 0x99, 0xb2, 0x44, 0x10, 0x11, 0xd4, 0x0f, 0xa1,
	0x74, 0x4c, 0xac, 0x89, 0x73, 0x64, 0xe1, 0x9b, 0xd4, 0x64, 0x3c, 0xc0, 0x31, 0xfd, 0x88, 0xf8,
	0xd4, 0x32, 0x6d, 0x64, 0x00, 0xcd, 0x08, 0xdf, 0xa8, 0x2e, 0xdd, 0x51, 0xce, 0x6d, 0x5e, 0xfb,
	0x9b, 0x0c, 0xa8, 0x46, 0x38, 0x73, 0x75, 0x8f, 0xbe, 0x0c, 0xa9, 0x1f, 0xf0, 0xd7, 0xa6, 0x6f,
	0x6a, 0x6c, 0xab, 0x50, 0x35, 0x42, 0x8f, 0x67, 0x78, 0xe2, 0x11, 0x25, 0xbe, 0x0d, 0x3c, 0x36,
	0xad, 0xa8, 0x85, 0x84, 0x99, 0xc4, 0x8c, 0xbc, 0xc6, 0x5b, 0x44, 0xd1, 0xd4, 0xae, 0x43, 0x21,
	0x70, 0x4e, 0xa9, 0x8d, 0xdd, 0xbf, 0x8a, 0x46, 0x60, 0x25, 0xc1, 0x9b, 0xe3, 0xbe, 0x29, 0x6b,
	0xd1, 0x12, 0xf8, 0x68, 0x52, 0xfb, 0xe7, 0x0c, 0xd4, 0xc5, 0x1a, 0xbe, 0xcb, 0xb2, 0xb8, 0x37,
	0xa5, 0xaf, 0x40, 0x79, 0x72, 0x12, 0xda, 0xa7, 0xba, 0xed, 0xe0, 0xa6, 0xb0, 0x6c, 0x39, 0x36,
	0x59, 0x8d, 0x89, 0x70, 0xec, 0x39, 0x95, 0x19, 0xbd, 0x53, 0x4a, 0x5d, 0x9d, 0x58, 0xe6, 0x19,
	0x7f, 0xf1, 0x82, 0xf7, 0x22, 0x4c, 0xdd, 0xa8, 0xcd, 0xcb, 0x96, 0x1a, 0x73, 0x2b, 0x7c, 0x66,
	0xac, 0x89, 0x0a, 0x52, 0x50, 0xd8, 0x8e, 0x11, 0x92, 0x4c, 0xc8, 0xed, 0x37, 0x19, 0x50, 0x7c,
	0xff, 0x44, 0xe7, 0x4d, 0xcd, 0x13, 0x62, 0xdb, 0xd4, 0x7a, 0xbb, 0x72, 0x63, 0xd1, 0x05, 0x7f,
	0x58, 0x51, 0x90, 0x39, 0xa1, 0x4b, 0x7c, 0xff, 0x95, 0xe3, 0xf1, 0x5b, 0xf1, 0x8a, 0x4c, 0x2c,
	0x4a, 0x32, 0xf8, 0xb0, 0x61, 0xf7, 0xc4, 0x23, 0x3e, 0x45, 0x01, 0x54, 0xa2, 0x7c, 0xa2, 0x82,
	0x15, 0xcc, 0xaf, 0x32, 0x50, 0x66, 0x1c, 0x1b, 0x24, 0x20, 0x6f, 0x9f, 0x53, 0x46, 0x15, 0x25,
	0x55, 0x9b, 0x0b, 0xae, 0x28, 0x15, 0x95, 0xbe, 0x36, 0xe5, 0x23, 0x4d, 0x64, 0xb7, 0xc0, 0xd4,
	0x8e, 0xf1, 0x32, 0xb1, 0x1c, 0x9f, 0x7e, 0x33, 0xe2, 0xd3, 0xc6, 0xb0, 0x4a, 0xc2, 0xc0, 0xd1,
	0x43, 0xd7, 0x20, 0x01, 0x95, 0x0a, 0xfe, 0x86, 0x8b, 0x68, 0x13, 0x58, 0x33, 0x4c, 0x2f, 0x38,
	0xd7, 0xfd, 0x93, 0x30, 0xc0, 0x76, 0xaa, 0x47, 0x31, 0x79, 0x7b, 0x43, 0xe6, 0xab, 0x90, 0xb3,
	0x9c, 0xa9, 0x60, 0xfd, 0x21, 0x54, 0x4e, 0xe9, 0xb9, 0x78, 0x7a, 0x72, 0x59, 0xfe, 0xf8, 0x17,
	0x19, 0xa8, 0xc6, 0x3d, 0x98, 0xf8, 0xa1, 0x18, 0x67, 0xc2, 0xa7, 0x13, 0xcc, 0x30, 0x50, 0x95,
	0xfd, 0x89, 0xe3, 0xca, 0x44, 0x85, 0x09, 0xca, 0x0c, 0x2c, 0x1a, 0xf3, 0x24, 0xd4, 0x9f, 0x78,
	0xa6, 0xcb, 0x9c, 0x89, 0x68, 0xdc, 0xb0, 0x82, 0x85, 0x9e, 0x51, 0xcf, 0x0c, 0xce, 0xc5, 0xef,
	0x10, 0xee, 0x8b, 0x27, 0x30, 0xc5, 0x14, 0x17, 0x1e, 0x71, 0xab, 0x7d, 0x88, 0xf5, 0xe9, 0xb1,
	0x39, 0xc5, 0x28, 0x92, 0x78, 0x72, 0x13, 0xb3, 0x3e, 0xde, 0x56, 0xff, 0x49, 0x84, 0x8d, 0x5a,
	0xf9, 0x08, 0xd3, 0x33, 0x39, 0x39, 0xfd, 0xc1, 0x70, 0x0c, 0x41, 0x7b, 0x06, 0x75, 0xfe, 0x5b,
	0x91, 0x19, 0xf5, 0x7d, 0x32, 0xa5, 0xf8, 0x58, 0x8b, 0xbf, 0x91, 0xcd, 0x6c, 0x35, 0x12, 0x31,
	0x89, 0x63, 0x62, 0x23, 0x3e, 0xb1, 0x63, 0xce, 0xcb, 0x0f, 0x61, 0x85, 0x7b, 0x78, 0x3f, 0x3c,
	0x12, 0x8d, 0xdc, 0xf3, 0x44, 0xbf, 0xb0, 0x02, 0x19, 0x43, 0xe4, 0xb3, 0x35, 0xc8, 0x1f, 0x87,
	0x16, 0xcf, 0xc0, 0xcb, 0x5a, 0x1f, 0xee, 0x2c, 0xcd, 0xd5, 0xe7, 0x71, 0xed, 0x7b, 0x50, 0xe2,
	0x03, 0xe9, 0x6f, 0x68, 0x97, 0xa6, 0x6a, 0xff, 0x90, 0x81, 0x06, 0x87, 0x5e, 0xc0, 0x49, 0x1b,
	0x9a, 0x18, 0x45, 0x42, 0x57, 0x97, 0x94, 0x79, 0xea, 0xb8, 0x75, 0x39, 0xe5, 0x18, 0x53, 0x6d,
	0x68, 0x7a, 0x74, 0x1a, 0x5a, 0xc4, 0x8b, 0x48, 0xe4, 0x6e, 0x46, 0x42, 0xfb, 0x93, 0x0c, 0x00,
	0x1f, 0x67, 0x89, 0xd1, 0xf5, 0xdf, 0xeb, 0x37, 0xa1, 0x84, 0x2f, 0x01, 0x30, 0x03, 0x17, 0x77,
	0x50, 0x0b, 0x79, 0x39, 0x77, 0xb9, 0x1f, 0x40, 0x1e, 0xd9, 0x2a, 0xa6, 0x14, 0x67, 0x8b, 0xd2,
	0xd1, 0x7e, 0x0e, 0x4d, 0x01, 0x49, 0xbd, 0xa4, 0x99, 0x57, 0x41, 0xe2, 0xca, 0x8c, 0x77, 0x93,
	0x63, 0x9d, 0xcb, 0x78, 0x87, 0x99, 0x57, 0x05, 0x2f, 0xe4, 0x11, 0x44, 0x11, 0x9f, 0xd5, 0x30,
	0x9e, 0x33, 0x95, 0x87, 0xb8, 0x91, 0xc2, 0x10, 0xca, 0xe1, 0xe3, 0x85, 0x94, 0x27, 0x9b, 0x92,
	0xa1, 0x25, 0x78, 0xdd, 0xfe, 0xb7, 0x0c, 0xa8, 0x29, 0x6f, 0xb8, 0x6b, 0x50, 0x1e, 0x0d, 0x0e,
	0xf4, 0xfe, 0xa0, 0xdf, 0x55, 0xbe, 0xa5, 0x36, 0x00, 0xd8, 0xd7, 0xa8, 0xbb, 0xd7, 0xed, 0x8c,
	0x95, 0x8c, 0xfc, 0xee, 0xf5, 0x47, 0xdd, 0xe1, 0x58, 0xc9, 0xaa, 0x55, 0x28, 0xf1, 0xf1, 0xb1,
	0x92, 0x93, 0x83, 0x9d, 0x61, 0xb7, 0x3d, 0xee, 0x2a, 0x79, 0xf9, 0xbd, 0xd3, 0xdd, 0xeb, 0x8e,
	0xbb, 0x4a, 0x41, 0x92, 0xde, 0x19, 0x0e, 0x0e, 0x94, 0xa2, 0xda, 0x84, 0x2a, 0xfb, 0x1a, 0x76,
	0x0f, 0xf6, 0xda, 0x9d, 0xae, 0x52, 0x92, 0xe8, 0x87, 0x07, 0x3b, 0x6c, 0x7a, 0x59, 0xd2, 0x3e,
	0x1c, 0x75, 0x95, 0x8a, 0x9c, 0x3b, 0x7a, 0x3a, 0xf8, 0x4a, 0x01, 0xf9, 0xb5, 0x37, 0xe8, 0x3c,
	0x53, 0xaa, 0xd1, 0xc4, 0x3e, 0x7e, 0xb3, 0x60, 0x50, 0x61, 0xdf, 0xed, 0xbd, 0x71, 0x77, 0xa8,
	0xd4, 0xb7, 0xff, 0x38, 0x07, 0xcd, 0xe4, 0x1b, 0xe3, 0x55, 0x68, 0xee, 0x0f, 0xfa, 0xbb, 0x83,
	0x9d, 0x27, 0xfa, 0x7c, 0xb3, 0x6b, 0xb0, 0x12, 0x03, 0x8a, 0x3d, 0x66, 0x12, 0x60, 0xc1, 0x5e,
	0x36, 0x01, 0x16, 0x9b, 0xcc, 0xa9, 0x1b, 0xb0, 0x1a, 0x03, 0xef, 0x76, 0xc7, 0xfa, 0xfe, 0x60,
	0xc8, 0xa4, 0x71, 0x07, 0x36, 0x62, 0x03, 0xcf, 0x7a, 0x7b, 0x7b, 0x7a, 0xe7, 0x70, 0x38, 0x1a,
	0x0c, 0x47, 0x4a, 0x21, 0xc1, 0xcf, 0x17, 0xbd, 0xfe, 0x8e, 0x52, 0x54, 0x5b, 0x70, 0x2b, 0x06,
	0x6c, 0xef, 0xee, 0x0e, 0xbb, 0xbb, 0x6c, 0xed, 0x92, 0xba, 0x0e, 0x6a, 0x6c, 0xa4, 0x33, 0xd8,
	0xdf, 0x6f, 0xf7, 0x77, 0x94, 0xb2, 0x7a, 0x0b, 0x94, 0x05, 0xf8, 0x61, 0x7f, 0xac, 0x54, 0x12,
	0x2c, 0xed, 0xf4, 0x46, 0xe3, 0x5e, 0xbf, 0x33, 0x56, 0x40, 0xbd, 0x0d, 0x6b, 0xb1, 0x81, 0xfd,
	0x36, 0x3b, 0x8d, 0x9d, 0xc3, 0x4e, 0x57, 0xa9, 0x2e, 0x6d, 0x63, 0xa0, 0xf7, 0xbb, 0xed, 0xa1,
	0x52, 0x4b, 0xcc, 0x61, 0x03, 0xa3, 0x6e, 0x7b, 0xd8, 0x79, 0xaa, 0xd4, 0xd5, 0xef, 0xc0, 0x66,
	0x62, 0x13, 0x7a, 0xbb, 0xbf, 0xa3, 0xef, 0x0f, 0x76, 0x7a, 0x5f, 0x3c, 0x57, 0x1a, 0xdb, 0xbb,
	0xfc, 0xa9, 0x30, 0x3b, 0x9f, 0xc3, 0x7e, 0x6f, 0x2c, 0xc5, 0xde, 0x84, 0x2a, 0x7e, 0x8e, 0xba,
	0x9d, 0x41, 0x7f, 0x47, 0xc9, 0x44, 0xe3, 0x4f, 0x9e, 0xa3, 0xa0, 0x15, 0xa8, 0xe1, 0xe7, 0x41,
	0x77, 0xd8, 0xe9, 0xf6, 0xc7, 0x4a, 0x6e, 0xfb, 0x2f, 0xb3, 0xe2, 0x4d, 0x31, 0x1e, 0x7d, 0xa7,
	0xbd, 0xd7, 0x8d, 0xd1, 0xe2, 0xdf, 0xfb, 0xbd, 0xbd, 0xbd, 0x9e, 0x92, 0x89, 0x03, 0x3a, 0xc3,
	0x81, 0x92, 0x8d, 0xcd, 0x68, 0xf7, 0x07, 0x4a, 0x8e, 0x51, 0x97, 0x08, 0xfd, 0xc3, 0x48, 0x6d,
	0x11, 0xf2, 0x74, 0x70, 0x38, 0x54, 0x0a, 0xa8, 0x4e, 0xf8, 0xbd, 0xd3, 0x7e, 0xae, 0x14, 0xe7,
	0xc3, 0xcf, 0x7a, 0x7b, 0x03, 0xa1, 0xb6, 0x9c, 0x40, 0x77, 0xb7, 0xad, 0x94, 0xe7, 0xdf, 0xbb,
	0xbd, 0xdd, 0xb6, 0x52, 0x99, 0x7f, 0x8f, 0xbb, 0xc3, 0xb6, 0x02, 0xf1, 0xf9, 0x4f, 0x7a, 0x42,
	0x7b, 0xc5, 0xfc, 0x27, 0x3d, 0xa5, 0x16, 0x9f, 0xff, 0xa4, 0xa7, 0xd4, 0xe3, 0xf3, 0x9f, 0xf4,
	0x94, 0x06, 0xd3, 0x3b, 0xfe, 0x2d, 0xe4, 0xa1, 0x7f, 0xac, 0x7f, 0xa2, 0x34, 0xb7, 0x7b, 0xd0,
	0x4c, 0x3e, 0xcd, 0xbe, 0x03, 0x1b, 0x3f, 0xdb, 0xff, 0x85, 0xbe, 0xdf, 0x1d, 0x0f, 0x7b, 0x1d,
	0x7d, 0xfc, 0xfc, 0xa0, 0xcb, 0x55, 0xa2, 0x3b, 0x54, 0x32, 0xec, 0x1c, 0x93, 0x83, 0xbb, 0xed,
	0xc3, 0xdd, 0xae, 0x92, 0xdd, 0xfe, 0x25, 0xa8, 0x29, 0xcf, 0x87, 0x99, 0xa0, 0xc6, 0xed, 0xf1,
	0x68, 0x47, 0xe8, 0x55, 0x86, 0x69, 0x9b, 0x80, 0x3c, 0xed, 0x8d, 0xc6, 0x83, 0xdd, 0x61, 0x7b,
	0x9f, 0x1f, 0x97, 0x80, 0x72, 0x7a, 0xdc, 0x2f, 0x70, 0x08, 0xf3, 0x13, 0xf9, 0xed, 0x2f, 0xa0,
	0x99, 0x7c, 0x66, 0x7b, 0x1b, 0xd6, 0xda, 0x07, 0x07, 0x29, 0xdc, 0x64, 0x98, 0x15, 0x24, 0x87,
	0x86, 0x68, 0x81, 0xdb, 0x7f, 0x98, 0xe1, 0x84, 0xe2, 0x8f, 0x66, 0xd7, 0x41, 0x65, 0xd8, 0x9d,
	0xa7, 0xdd, 0xce, 0x33, 0xfd, 0xcb, 0xf6, 0xde, 0x61, 0x57, 0x1f, 0x3c, 0x53, 0xbe, 0xc5, 0x64,
	0x91, 0x84, 0x7f, 0xd5, 0x1e, 0xf6, 0x7b, 0xfd, 0x5d, 0x25, 0xa3, 0xde, 0x85, 0x56, 0x72, 0xb0,
	0x33, 0xec, 0x8d, 0x7b, 0x9d, 0xf6, 0x9e, 0x92, 0x4d, 0x9b, 0x7a, 0xd8, 0x7f, 0xd6, 0x1f, 0x7c,
	0xd5, 0x57, 0x72, 0xdb, 0xbf, 0xce, 0x40, 0x55, 0x54, 0xcb, 0x9e, 0x63, 0x51, 0xb5, 0x0c, 0x79,
	0xa1, 0x8a, 0x2d, 0xb8, 0xd5, 0x1b, 0x31, 0x17, 0xd5, 0xde, 0xd3, 0x7b, 0x07, 0x5f, 0x7e, 0xaa,
	0x8f, 0xba, 0xc3, 0x2f, 0xa5, 0xe8, 0x7b, 0x23, 0x7d, 0xd8, 0xdd, 0x1f, 0x8c, 0xbb, 0x0b, 0x43,
	0x59, 0x55, 0x85, 0x46, 0x6f, 0xa4, 0x1f, 0xf6, 0x7b, 0xbf, 0x90, 0xb0, 0xfc, 0x32, 0xa1, 0xce,
	0x5e, 0x8f, 0xd9, 0x41, 0x39, 0x85, 0x90, 0x18, 0x52, 0xe2, 0x84, 0x04, 0xec, 0xde, 0xf6, 0x7f,
	0x65, 0xb0, 0x3d, 0x8d, 0x3f, 0x9a, 0x44, 0xa9, 0x57, 0xa1, 0xc4, 0xc5, 0x3a, 0x52, 0x32, 0x4c,
	0x72, 0x3b, 0x87, 0xfb, 0xcc, 0x05, 0xfc, 0xfc, 0xb0, 0x3b, 0x1a, 0xeb, 0xa3, 0x71, 0x1b, 0x5d,
	0xfc, 0x1a, 0xac, 0x24, 0xe0, 0x83, 0x03, 0x25, 0xaf, 0xae, 0x40, 0x5d, 0x80, 0x47, 0x07, 0x83,
	0xfe, 0x88, 0x9d, 0x33, 0xd3, 0x87, 0xd1, 0x53, 0x7d, 0x70, 0xd0, 0xed, 0xeb, 0x9d, 0xa7, 0xed,
	0x7e, 0xbf, 0xbb, 0xa7, 0x14, 0x51, 0x5f, 0x47, 0x4f, 0xf5, 0xce, 0xde, 0x60, 0xd4, 0x8d, 0xc0,
	0x25, 0x74, 0xe1, 0xa3, 0xa7, 0xfa, 0x4e, 0x7b, 0xcc, 0x8c, 0x66, 0x03, 0x56, 0xdb, 0x87, 0xe3,
	0x81, 0xf0, 0xae, 0x72, 0x2d, 0xa5, 0xc2, 0xb6, 0xb8, 0xd3, 0x1b, 0x8e, 0x9f, 0xeb, 0xa3, 0xa7,
	0x87, 0xe3, 0x9d, 0xc1, 0x57, 0x7d, 0x16, 0x30, 0x06, 0x43, 0xe6, 0xbd, 0x9a, 0x50, 0xed, 0x0c,
	0xfa, 0x5f, 0xf4, 0x76, 0x39, 0x91, 0x2a, 0x63, 0xa9, 0x3b, 0x1c, 0x0e, 0x86, 0xfa, 0x7e, 0x77,
	0x34, 0x6a, 0xef, 0x76, 0x95, 0xda, 0xf6, 0xcf, 0xe2, 0x4f, 0x31, 0x70, 0xcf, 0x00, 0xc5, 0x9d,
	0x41, 0xe7, 0x19, 0x1e, 0x44, 0x09, 0x72, 0x7b, 0xbf, 0xe8, 0x28, 0x59, 0x46, 0x6a, 0xaf, 0xf7,
	0xe4, 0xcb, 0xde, 0x70, 0xac, 0x33, 0x40, 0x4e, 0xad, 0x40, 0x61, 0xbf, 0x3b, 0x1a, 0x8c, 0x94,
	0x3c, 0x43, 0x1a, 0x3e, 0x1b, 0x2b, 0x85, 0xed, 0xaf, 0x00, 0x62, 0xf9, 0x9c, 0x0a, 0x8d, 0xee,
	0x70, 0xa8, 0x77, 0x06, 0xfd, 0xbe, 0xbe, 0xd7, 0xdb, 0xef, 0x8d, 0xb9, 0x1e, 0x31, 0x58, 0xaf,
	0xff, 0x65, 0x7b, 0xaf, 0xb7, 0xa3, 0x77, 0x0e, 0x47, 0xe3, 0xc1, 0x7e, 0x77, 0xa8, 0x3f, 0xeb,
	0x3e, 0x57, 0xb2, 0x6c, 0x8f, 0x6c, 0x74, 0xe7, 0xf0, 0x60, 0xaf, 0xd7, 0x61, 0xbb, 0x6c, 0xef,
	0xa2, 0x3b, 0x7b, 0x72, 0x1f, 0x6e, 0x4f, 0x9c, 0x99, 0x08, 0xd6, 0x8f, 0x66, 0x8e, 0x41, 0x2d,
	0xde, 0xcd, 0x38, 0x0a, 0x8f, 0x9f, 0x14, 0xda, 0x2c, 0xd7, 0x7e, 0x9a, 0xf9, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x0a, 0x44, 0xb0, 0x39, 0xfc, 0x42, 0x00, 0x00,
}
