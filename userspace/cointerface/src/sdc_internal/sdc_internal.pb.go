// Code generated by protoc-gen-gogo.
// source: sdc_internal.proto
// DO NOT EDIT!

/*
	Package sdc_internal is a generated protocol buffer package.

	It is generated from these files:
		sdc_internal.proto

	It has these top-level messages:
		ContainerMounts
		MountedFsResponse
		ContainerInfo
		MountedFsRequest
		Ping
		Pong
		DockerCommand
		DockerCommandResult
*/
package sdc_internal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import draiosproto "draiosproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CointerfaceMessageType int32

const (
	CointerfaceMessageType_PING                  CointerfaceMessageType = 1
	CointerfaceMessageType_PONG                  CointerfaceMessageType = 2
	CointerfaceMessageType_DOCKER_COMMAND        CointerfaceMessageType = 3
	CointerfaceMessageType_DOCKER_COMMAND_RESULT CointerfaceMessageType = 4
)

var CointerfaceMessageType_name = map[int32]string{
	1: "PING",
	2: "PONG",
	3: "DOCKER_COMMAND",
	4: "DOCKER_COMMAND_RESULT",
}
var CointerfaceMessageType_value = map[string]int32{
	"PING":                  1,
	"PONG":                  2,
	"DOCKER_COMMAND":        3,
	"DOCKER_COMMAND_RESULT": 4,
}

func (x CointerfaceMessageType) Enum() *CointerfaceMessageType {
	p := new(CointerfaceMessageType)
	*p = x
	return p
}
func (x CointerfaceMessageType) String() string {
	return proto.EnumName(CointerfaceMessageType_name, int32(x))
}
func (x *CointerfaceMessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CointerfaceMessageType_value, data, "CointerfaceMessageType")
	if err != nil {
		return err
	}
	*x = CointerfaceMessageType(value)
	return nil
}
func (CointerfaceMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSdcInternal, []int{0}
}

type DockerCmdType int32

const (
	DockerCmdType_STOP    DockerCmdType = 1
	DockerCmdType_PAUSE   DockerCmdType = 2
	DockerCmdType_UNPAUSE DockerCmdType = 3
)

var DockerCmdType_name = map[int32]string{
	1: "STOP",
	2: "PAUSE",
	3: "UNPAUSE",
}
var DockerCmdType_value = map[string]int32{
	"STOP":    1,
	"PAUSE":   2,
	"UNPAUSE": 3,
}

func (x DockerCmdType) Enum() *DockerCmdType {
	p := new(DockerCmdType)
	*p = x
	return p
}
func (x DockerCmdType) String() string {
	return proto.EnumName(DockerCmdType_name, int32(x))
}
func (x *DockerCmdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DockerCmdType_value, data, "DockerCmdType")
	if err != nil {
		return err
	}
	*x = DockerCmdType(value)
	return nil
}
func (DockerCmdType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSdcInternal, []int{1} }

type ContainerMounts struct {
	ContainerId      *string                  `protobuf:"bytes,1,req,name=container_id" json:"container_id,omitempty"`
	Mounts           []*draiosproto.MountedFs `protobuf:"bytes,2,rep,name=mounts" json:"mounts,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *ContainerMounts) Reset()                    { *m = ContainerMounts{} }
func (m *ContainerMounts) String() string            { return proto.CompactTextString(m) }
func (*ContainerMounts) ProtoMessage()               {}
func (*ContainerMounts) Descriptor() ([]byte, []int) { return fileDescriptorSdcInternal, []int{0} }

func (m *ContainerMounts) GetContainerId() string {
	if m != nil && m.ContainerId != nil {
		return *m.ContainerId
	}
	return ""
}

func (m *ContainerMounts) GetMounts() []*draiosproto.MountedFs {
	if m != nil {
		return m.Mounts
	}
	return nil
}

type MountedFsResponse struct {
	Containers       []*ContainerMounts `protobuf:"bytes,1,rep,name=containers" json:"containers,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *MountedFsResponse) Reset()                    { *m = MountedFsResponse{} }
func (m *MountedFsResponse) String() string            { return proto.CompactTextString(m) }
func (*MountedFsResponse) ProtoMessage()               {}
func (*MountedFsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSdcInternal, []int{1} }

func (m *MountedFsResponse) GetContainers() []*ContainerMounts {
	if m != nil {
		return m.Containers
	}
	return nil
}

type ContainerInfo struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Pid              *uint64 `protobuf:"varint,2,req,name=pid" json:"pid,omitempty"`
	Vpid             *uint64 `protobuf:"varint,3,req,name=vpid" json:"vpid,omitempty"`
	Root             *string `protobuf:"bytes,4,req,name=root" json:"root,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContainerInfo) Reset()                    { *m = ContainerInfo{} }
func (m *ContainerInfo) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfo) ProtoMessage()               {}
func (*ContainerInfo) Descriptor() ([]byte, []int) { return fileDescriptorSdcInternal, []int{2} }

func (m *ContainerInfo) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ContainerInfo) GetPid() uint64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *ContainerInfo) GetVpid() uint64 {
	if m != nil && m.Vpid != nil {
		return *m.Vpid
	}
	return 0
}

func (m *ContainerInfo) GetRoot() string {
	if m != nil && m.Root != nil {
		return *m.Root
	}
	return ""
}

type MountedFsRequest struct {
	Containers       []*ContainerInfo `protobuf:"bytes,1,rep,name=containers" json:"containers,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *MountedFsRequest) Reset()                    { *m = MountedFsRequest{} }
func (m *MountedFsRequest) String() string            { return proto.CompactTextString(m) }
func (*MountedFsRequest) ProtoMessage()               {}
func (*MountedFsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSdcInternal, []int{3} }

func (m *MountedFsRequest) GetContainers() []*ContainerInfo {
	if m != nil {
		return m.Containers
	}
	return nil
}

type Ping struct {
	Token            *int64 `protobuf:"varint,1,req,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptorSdcInternal, []int{4} }

func (m *Ping) GetToken() int64 {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return 0
}

type Pong struct {
	Token            *int64  `protobuf:"varint,1,req,name=token" json:"token,omitempty"`
	Pid              *int32  `protobuf:"varint,2,req,name=pid" json:"pid,omitempty"`
	MemoryUsed       *uint64 `protobuf:"varint,3,req,name=memory_used" json:"memory_used,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptorSdcInternal, []int{5} }

func (m *Pong) GetToken() int64 {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return 0
}

func (m *Pong) GetPid() int32 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *Pong) GetMemoryUsed() uint64 {
	if m != nil && m.MemoryUsed != nil {
		return *m.MemoryUsed
	}
	return 0
}

type DockerCommand struct {
	Cmd *DockerCmdType `protobuf:"varint,1,req,name=cmd,enum=sdc_internal.DockerCmdType" json:"cmd,omitempty"`
	// Making optional in case other later commands want to work with images
	ContainerId      *string `protobuf:"bytes,2,opt,name=container_id" json:"container_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DockerCommand) Reset()                    { *m = DockerCommand{} }
func (m *DockerCommand) String() string            { return proto.CompactTextString(m) }
func (*DockerCommand) ProtoMessage()               {}
func (*DockerCommand) Descriptor() ([]byte, []int) { return fileDescriptorSdcInternal, []int{6} }

func (m *DockerCommand) GetCmd() DockerCmdType {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return DockerCmdType_STOP
}

func (m *DockerCommand) GetContainerId() string {
	if m != nil && m.ContainerId != nil {
		return *m.ContainerId
	}
	return ""
}

type DockerCommandResult struct {
	Successful       *bool   `protobuf:"varint,1,req,name=successful" json:"successful,omitempty"`
	Errstr           *string `protobuf:"bytes,2,opt,name=errstr" json:"errstr,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DockerCommandResult) Reset()                    { *m = DockerCommandResult{} }
func (m *DockerCommandResult) String() string            { return proto.CompactTextString(m) }
func (*DockerCommandResult) ProtoMessage()               {}
func (*DockerCommandResult) Descriptor() ([]byte, []int) { return fileDescriptorSdcInternal, []int{7} }

func (m *DockerCommandResult) GetSuccessful() bool {
	if m != nil && m.Successful != nil {
		return *m.Successful
	}
	return false
}

func (m *DockerCommandResult) GetErrstr() string {
	if m != nil && m.Errstr != nil {
		return *m.Errstr
	}
	return ""
}

func init() {
	proto.RegisterType((*ContainerMounts)(nil), "sdc_internal.container_mounts")
	proto.RegisterType((*MountedFsResponse)(nil), "sdc_internal.mounted_fs_response")
	proto.RegisterType((*ContainerInfo)(nil), "sdc_internal.container_info")
	proto.RegisterType((*MountedFsRequest)(nil), "sdc_internal.mounted_fs_request")
	proto.RegisterType((*Ping)(nil), "sdc_internal.ping")
	proto.RegisterType((*Pong)(nil), "sdc_internal.pong")
	proto.RegisterType((*DockerCommand)(nil), "sdc_internal.docker_command")
	proto.RegisterType((*DockerCommandResult)(nil), "sdc_internal.docker_command_result")
	proto.RegisterEnum("sdc_internal.CointerfaceMessageType", CointerfaceMessageType_name, CointerfaceMessageType_value)
	proto.RegisterEnum("sdc_internal.DockerCmdType", DockerCmdType_name, DockerCmdType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CoInterface service

type CoInterfaceClient interface {
	PerformDockerCommand(ctx context.Context, in *DockerCommand, opts ...grpc.CallOption) (*DockerCommandResult, error)
	PerformPing(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
}

type coInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewCoInterfaceClient(cc *grpc.ClientConn) CoInterfaceClient {
	return &coInterfaceClient{cc}
}

func (c *coInterfaceClient) PerformDockerCommand(ctx context.Context, in *DockerCommand, opts ...grpc.CallOption) (*DockerCommandResult, error) {
	out := new(DockerCommandResult)
	err := grpc.Invoke(ctx, "/sdc_internal.CoInterface/PerformDockerCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coInterfaceClient) PerformPing(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/sdc_internal.CoInterface/PerformPing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CoInterface service

type CoInterfaceServer interface {
	PerformDockerCommand(context.Context, *DockerCommand) (*DockerCommandResult, error)
	PerformPing(context.Context, *Ping) (*Pong, error)
}

func RegisterCoInterfaceServer(s *grpc.Server, srv CoInterfaceServer) {
	s.RegisterService(&_CoInterface_serviceDesc, srv)
}

func _CoInterface_PerformDockerCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoInterfaceServer).PerformDockerCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdc_internal.CoInterface/PerformDockerCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoInterfaceServer).PerformDockerCommand(ctx, req.(*DockerCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoInterface_PerformPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoInterfaceServer).PerformPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdc_internal.CoInterface/PerformPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoInterfaceServer).PerformPing(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sdc_internal.CoInterface",
	HandlerType: (*CoInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PerformDockerCommand",
			Handler:    _CoInterface_PerformDockerCommand_Handler,
		},
		{
			MethodName: "PerformPing",
			Handler:    _CoInterface_PerformPing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdc_internal.proto",
}

func (m *ContainerMounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerMounts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ContainerId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSdcInternal(dAtA, i, uint64(len(*m.ContainerId)))
		i += copy(dAtA[i:], *m.ContainerId)
	}
	if len(m.Mounts) > 0 {
		for _, msg := range m.Mounts {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSdcInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MountedFsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MountedFsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Containers) > 0 {
		for _, msg := range m.Containers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSdcInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ContainerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSdcInternal(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Pid == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSdcInternal(dAtA, i, uint64(*m.Pid))
	}
	if m.Vpid == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSdcInternal(dAtA, i, uint64(*m.Vpid))
	}
	if m.Root == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSdcInternal(dAtA, i, uint64(len(*m.Root)))
		i += copy(dAtA[i:], *m.Root)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MountedFsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MountedFsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Containers) > 0 {
		for _, msg := range m.Containers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSdcInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSdcInternal(dAtA, i, uint64(*m.Token))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Pong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSdcInternal(dAtA, i, uint64(*m.Token))
	}
	if m.Pid == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSdcInternal(dAtA, i, uint64(*m.Pid))
	}
	if m.MemoryUsed == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSdcInternal(dAtA, i, uint64(*m.MemoryUsed))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DockerCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cmd == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSdcInternal(dAtA, i, uint64(*m.Cmd))
	}
	if m.ContainerId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSdcInternal(dAtA, i, uint64(len(*m.ContainerId)))
		i += copy(dAtA[i:], *m.ContainerId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DockerCommandResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerCommandResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Successful == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		if *m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Errstr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSdcInternal(dAtA, i, uint64(len(*m.Errstr)))
		i += copy(dAtA[i:], *m.Errstr)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64SdcInternal(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32SdcInternal(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSdcInternal(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ContainerMounts) Size() (n int) {
	var l int
	_ = l
	if m.ContainerId != nil {
		l = len(*m.ContainerId)
		n += 1 + l + sovSdcInternal(uint64(l))
	}
	if len(m.Mounts) > 0 {
		for _, e := range m.Mounts {
			l = e.Size()
			n += 1 + l + sovSdcInternal(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MountedFsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Containers) > 0 {
		for _, e := range m.Containers {
			l = e.Size()
			n += 1 + l + sovSdcInternal(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovSdcInternal(uint64(l))
	}
	if m.Pid != nil {
		n += 1 + sovSdcInternal(uint64(*m.Pid))
	}
	if m.Vpid != nil {
		n += 1 + sovSdcInternal(uint64(*m.Vpid))
	}
	if m.Root != nil {
		l = len(*m.Root)
		n += 1 + l + sovSdcInternal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MountedFsRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Containers) > 0 {
		for _, e := range m.Containers {
			l = e.Size()
			n += 1 + l + sovSdcInternal(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ping) Size() (n int) {
	var l int
	_ = l
	if m.Token != nil {
		n += 1 + sovSdcInternal(uint64(*m.Token))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Pong) Size() (n int) {
	var l int
	_ = l
	if m.Token != nil {
		n += 1 + sovSdcInternal(uint64(*m.Token))
	}
	if m.Pid != nil {
		n += 1 + sovSdcInternal(uint64(*m.Pid))
	}
	if m.MemoryUsed != nil {
		n += 1 + sovSdcInternal(uint64(*m.MemoryUsed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DockerCommand) Size() (n int) {
	var l int
	_ = l
	if m.Cmd != nil {
		n += 1 + sovSdcInternal(uint64(*m.Cmd))
	}
	if m.ContainerId != nil {
		l = len(*m.ContainerId)
		n += 1 + l + sovSdcInternal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DockerCommandResult) Size() (n int) {
	var l int
	_ = l
	if m.Successful != nil {
		n += 2
	}
	if m.Errstr != nil {
		l = len(*m.Errstr)
		n += 1 + l + sovSdcInternal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSdcInternal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSdcInternal(x uint64) (n int) {
	return sovSdcInternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContainerMounts) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSdcInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: container_mounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: container_mounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSdcInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ContainerId = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSdcInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mounts = append(m.Mounts, &draiosproto.MountedFs{})
			if err := m.Mounts[len(m.Mounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSdcInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSdcInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MountedFsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSdcInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: mounted_fs_response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: mounted_fs_response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Containers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSdcInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Containers = append(m.Containers, &ContainerMounts{})
			if err := m.Containers[len(m.Containers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSdcInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSdcInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSdcInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: container_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: container_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSdcInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pid = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vpid", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vpid = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSdcInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Root = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipSdcInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSdcInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MountedFsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSdcInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: mounted_fs_request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: mounted_fs_request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Containers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSdcInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Containers = append(m.Containers, &ContainerInfo{})
			if err := m.Containers[len(m.Containers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSdcInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSdcInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ping) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSdcInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Token = &v
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipSdcInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSdcInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pong) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSdcInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: pong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: pong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Token = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pid = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryUsed", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemoryUsed = &v
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipSdcInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSdcInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerCommand) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSdcInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: docker_command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: docker_command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var v DockerCmdType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (DockerCmdType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cmd = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSdcInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ContainerId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSdcInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSdcInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerCommandResult) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSdcInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: docker_command_result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: docker_command_result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Successful = &b
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errstr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSdcInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Errstr = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSdcInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSdcInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSdcInternal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSdcInternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSdcInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSdcInternal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSdcInternal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSdcInternal(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSdcInternal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSdcInternal   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sdc_internal.proto", fileDescriptorSdcInternal) }

var fileDescriptorSdcInternal = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0x3f, 0x29, 0xed, 0x38, 0x98, 0x68, 0xda, 0x88, 0x10, 0x95, 0x28, 0x32, 0x07,
	0xaa, 0x1c, 0x22, 0x14, 0x0e, 0x3d, 0x70, 0x2a, 0x49, 0x80, 0x08, 0x9a, 0x98, 0xa4, 0x39, 0x21,
	0x64, 0x59, 0xf6, 0xa6, 0xb2, 0x1a, 0xef, 0x9a, 0xdd, 0x35, 0x52, 0xdf, 0x84, 0x3b, 0x2f, 0xc3,
	0x91, 0x47, 0x40, 0xf0, 0x22, 0xac, 0xed, 0xa4, 0x8d, 0xd3, 0xc2, 0x61, 0xa5, 0x9d, 0x6f, 0x76,
	0x7f, 0xf3, 0xcd, 0x0c, 0xa0, 0x08, 0x03, 0x2f, 0xa2, 0x92, 0x70, 0xea, 0xaf, 0x7a, 0x09, 0x67,
	0x92, 0x61, 0x6d, 0x5b, 0x6b, 0xd5, 0x42, 0xee, 0x47, 0x4c, 0x14, 0x39, 0xe7, 0x23, 0xd4, 0x03,
	0x46, 0xa5, 0x1f, 0x51, 0xc2, 0xbd, 0x98, 0xa5, 0x54, 0x0a, 0x3c, 0x82, 0xda, 0xad, 0x16, 0x85,
	0x4d, 0xad, 0xa3, 0x9f, 0x1c, 0xe0, 0x73, 0xd8, 0x2b, 0xf2, 0x4d, 0xbd, 0x63, 0x9c, 0x58, 0xfd,
	0xc7, 0xbd, 0x02, 0x94, 0x73, 0x7a, 0x79, 0x8a, 0x84, 0xde, 0x52, 0x38, 0x63, 0x38, 0xbc, 0x8d,
	0x3c, 0x4e, 0x44, 0xc2, 0xa8, 0x20, 0xd8, 0x07, 0xb8, 0xa1, 0x0a, 0xc5, 0xcc, 0x18, 0xed, 0x5e,
	0xc9, 0xee, 0xae, 0x13, 0x67, 0x04, 0xf6, 0x96, 0x13, 0xba, 0x64, 0x08, 0xa0, 0xdf, 0x38, 0xb2,
	0xc0, 0x48, 0x54, 0xa0, 0xab, 0xc0, 0xc4, 0x1a, 0x98, 0x5f, 0xb3, 0xc8, 0xd8, 0x44, 0x9c, 0x31,
	0xd9, 0x34, 0xb3, 0x87, 0xce, 0x1b, 0xc0, 0x92, 0xa3, 0x2f, 0x29, 0x11, 0x12, 0x5f, 0xdc, 0x63,
	0xe8, 0xf8, 0x5f, 0x86, 0xb2, 0xe2, 0x4e, 0x03, 0xcc, 0x24, 0xa2, 0x97, 0xf8, 0x10, 0xaa, 0x92,
	0x5d, 0x11, 0x9a, 0xfb, 0x30, 0x9c, 0x53, 0x25, 0xb3, 0x3b, 0xf2, 0xb6, 0xbd, 0x2a, 0x1e, 0x82,
	0x15, 0x93, 0x98, 0xf1, 0x6b, 0x2f, 0x15, 0x64, 0xed, 0xd2, 0x99, 0x81, 0x1d, 0xb2, 0xe0, 0x4a,
	0xe1, 0x03, 0x16, 0xc7, 0x3e, 0x0d, 0xb1, 0x0b, 0x46, 0x10, 0x17, 0xfd, 0xd9, 0xfd, 0xa7, 0x65,
	0x33, 0x9b, 0xa7, 0x71, 0xe8, 0xc9, 0xeb, 0x84, 0xdc, 0x59, 0x93, 0xde, 0xd1, 0x54, 0xaf, 0xaf,
	0xa0, 0x51, 0x66, 0x66, 0x1b, 0x48, 0x57, 0x12, 0xd5, 0xe8, 0x44, 0x1a, 0x04, 0x44, 0x88, 0x65,
	0xba, 0xca, 0x2b, 0xec, 0xa3, 0x0d, 0x7b, 0x84, 0x73, 0x21, 0x79, 0xf1, 0xb9, 0xfb, 0x19, 0x9a,
	0x01, 0xcb, 0x0b, 0x2e, 0xfd, 0x80, 0x78, 0xb1, 0x7a, 0xec, 0x5f, 0x92, 0xa2, 0xdc, 0x3e, 0x98,
	0xee, 0x78, 0xf2, 0xb6, 0xae, 0xe5, 0xb7, 0xa9, 0xba, 0xe9, 0x8a, 0x69, 0x0f, 0xa7, 0x83, 0xf7,
	0xa3, 0x99, 0x37, 0x98, 0x9e, 0x9f, 0x9f, 0x4d, 0x86, 0x75, 0x03, 0x9f, 0x40, 0xa3, 0xac, 0x79,
	0xb3, 0xd1, 0x7c, 0xf1, 0xe1, 0xa2, 0x6e, 0x76, 0x5f, 0xc2, 0xa3, 0xdd, 0x26, 0x14, 0x6b, 0x7e,
	0x31, 0x75, 0x15, 0xf5, 0x00, 0xaa, 0xee, 0xd9, 0x62, 0x3e, 0x52, 0x58, 0x0b, 0x1e, 0x2c, 0x26,
	0x45, 0x60, 0xf4, 0xbf, 0x6b, 0x60, 0x0d, 0xd8, 0x78, 0x63, 0x0a, 0x3f, 0xc1, 0x91, 0xab, 0xae,
	0x8c, 0xc7, 0xc3, 0x9c, 0x35, 0x58, 0x8f, 0xee, 0xf8, 0xfe, 0x69, 0x15, 0xd9, 0xd6, 0xb3, 0xff,
	0x65, 0xd7, 0x23, 0x72, 0x2a, 0x78, 0x0a, 0xd6, 0x1a, 0xee, 0x66, 0x8b, 0xc6, 0xf2, 0xaf, 0x6c,
	0xf9, 0xad, 0x5d, 0x4d, 0x6d, 0xde, 0xa9, 0xbc, 0xc6, 0x1f, 0xbf, 0xdb, 0xda, 0x4f, 0x75, 0x7e,
	0xa9, 0xf3, 0xed, 0x4f, 0xbb, 0xf2, 0x4e, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x43, 0x7d, 0xa5,
	0xe1, 0x8c, 0x03, 0x00, 0x00,
}
