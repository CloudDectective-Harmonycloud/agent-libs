// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: sdc_internal.proto

#include "sdc_internal.pb.h"
#include "sdc_internal.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace sdc_internal {

static const char* CoInterface_method_names[] = {
  "/sdc_internal.CoInterface/PerformDockerCommand",
  "/sdc_internal.CoInterface/PerformPing",
  "/sdc_internal.CoInterface/PerformSwarmState",
};

std::unique_ptr< CoInterface::Stub> CoInterface::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< CoInterface::Stub> stub(new CoInterface::Stub(channel));
  return stub;
}

CoInterface::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PerformDockerCommand_(CoInterface_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PerformPing_(CoInterface_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PerformSwarmState_(CoInterface_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CoInterface::Stub::PerformDockerCommand(::grpc::ClientContext* context, const ::sdc_internal::docker_command& request, ::sdc_internal::docker_command_result* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PerformDockerCommand_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sdc_internal::docker_command_result>* CoInterface::Stub::AsyncPerformDockerCommandRaw(::grpc::ClientContext* context, const ::sdc_internal::docker_command& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::sdc_internal::docker_command_result>(channel_.get(), cq, rpcmethod_PerformDockerCommand_, context, request);
}

::grpc::Status CoInterface::Stub::PerformPing(::grpc::ClientContext* context, const ::sdc_internal::ping& request, ::sdc_internal::pong* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PerformPing_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sdc_internal::pong>* CoInterface::Stub::AsyncPerformPingRaw(::grpc::ClientContext* context, const ::sdc_internal::ping& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::sdc_internal::pong>(channel_.get(), cq, rpcmethod_PerformPing_, context, request);
}

::grpc::Status CoInterface::Stub::PerformSwarmState(::grpc::ClientContext* context, const ::sdc_internal::swarm_state_command& request, ::sdc_internal::swarm_state_result* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PerformSwarmState_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sdc_internal::swarm_state_result>* CoInterface::Stub::AsyncPerformSwarmStateRaw(::grpc::ClientContext* context, const ::sdc_internal::swarm_state_command& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::sdc_internal::swarm_state_result>(channel_.get(), cq, rpcmethod_PerformSwarmState_, context, request);
}

CoInterface::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      CoInterface_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CoInterface::Service, ::sdc_internal::docker_command, ::sdc_internal::docker_command_result>(
          std::mem_fn(&CoInterface::Service::PerformDockerCommand), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CoInterface_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CoInterface::Service, ::sdc_internal::ping, ::sdc_internal::pong>(
          std::mem_fn(&CoInterface::Service::PerformPing), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CoInterface_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CoInterface::Service, ::sdc_internal::swarm_state_command, ::sdc_internal::swarm_state_result>(
          std::mem_fn(&CoInterface::Service::PerformSwarmState), this)));
}

CoInterface::Service::~Service() {
}

::grpc::Status CoInterface::Service::PerformDockerCommand(::grpc::ServerContext* context, const ::sdc_internal::docker_command* request, ::sdc_internal::docker_command_result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoInterface::Service::PerformPing(::grpc::ServerContext* context, const ::sdc_internal::ping* request, ::sdc_internal::pong* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoInterface::Service::PerformSwarmState(::grpc::ServerContext* context, const ::sdc_internal::swarm_state_command* request, ::sdc_internal::swarm_state_result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sdc_internal

