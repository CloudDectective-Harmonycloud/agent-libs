// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: draios.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "draios.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace draiosproto {

namespace {

const ::google::protobuf::Descriptor* counter_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* counter_percentile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_percentile_reflection_ = NULL;
const ::google::protobuf::Descriptor* counter_time_bidirectional_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_time_bidirectional_reflection_ = NULL;
const ::google::protobuf::Descriptor* counter_bytes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_bytes_reflection_ = NULL;
const ::google::protobuf::Descriptor* counter_time_bytes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_time_bytes_reflection_ = NULL;
const ::google::protobuf::Descriptor* time_categories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  time_categories_reflection_ = NULL;
const ::google::protobuf::Descriptor* transaction_breakdown_categories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  transaction_breakdown_categories_reflection_ = NULL;
const ::google::protobuf::Descriptor* counter_syscall_errors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_syscall_errors_reflection_ = NULL;
const ::google::protobuf::Descriptor* resource_categories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  resource_categories_reflection_ = NULL;
const ::google::protobuf::Descriptor* connection_categories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  connection_categories_reflection_ = NULL;
const ::google::protobuf::Descriptor* process_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  process_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* command_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  command_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* counter_proto_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_proto_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* url_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  url_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* status_code_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  status_code_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* http_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  http_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* sql_entry_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_entry_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* sql_query_type_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_query_type_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* sql_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* mongodb_collection_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mongodb_collection_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* mongodb_op_type_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mongodb_op_type_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* mongodb_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mongodb_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* jmx_attribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  jmx_attribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* jmx_bean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  jmx_bean_reflection_ = NULL;
const ::google::protobuf::Descriptor* java_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  java_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* statsd_tag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statsd_tag_reflection_ = NULL;
const ::google::protobuf::Descriptor* statsd_metric_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statsd_metric_reflection_ = NULL;
const ::google::protobuf::Descriptor* statsd_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statsd_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* app_tag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  app_tag_reflection_ = NULL;
const ::google::protobuf::Descriptor* app_metric_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  app_metric_reflection_ = NULL;
const ::google::protobuf::Descriptor* app_check_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  app_check_reflection_ = NULL;
const ::google::protobuf::Descriptor* app_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  app_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* network_by_port_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  network_by_port_reflection_ = NULL;
const ::google::protobuf::Descriptor* host_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  host_reflection_ = NULL;
const ::google::protobuf::Descriptor* process_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  process_reflection_ = NULL;
const ::google::protobuf::Descriptor* program_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  program_reflection_ = NULL;
const ::google::protobuf::Descriptor* ipv4tuple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ipv4tuple_reflection_ = NULL;
const ::google::protobuf::Descriptor* ipv4_connection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ipv4_connection_reflection_ = NULL;
const ::google::protobuf::Descriptor* ipv4_network_interface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ipv4_network_interface_reflection_ = NULL;
const ::google::protobuf::Descriptor* mounted_fs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mounted_fs_reflection_ = NULL;
const ::google::protobuf::Descriptor* file_stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  file_stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* container_port_mapping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  container_port_mapping_reflection_ = NULL;
const ::google::protobuf::Descriptor* container_label_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  container_label_reflection_ = NULL;
const ::google::protobuf::Descriptor* container_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  container_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_common_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_common_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_namespace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_namespace_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_node_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_pod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_pod_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_replication_controller_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_replication_controller_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_replica_set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_replica_set_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_service_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_service_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_service_net_port_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_service_net_port_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_deployment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_deployment_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_daemonset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_daemonset_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* mesos_pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mesos_pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* mesos_common_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mesos_common_reflection_ = NULL;
const ::google::protobuf::Descriptor* mesos_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mesos_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* marathon_app_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marathon_app_reflection_ = NULL;
const ::google::protobuf::Descriptor* marathon_group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marathon_group_reflection_ = NULL;
const ::google::protobuf::Descriptor* mesos_framework_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mesos_framework_reflection_ = NULL;
const ::google::protobuf::Descriptor* mesos_slave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mesos_slave_reflection_ = NULL;
const ::google::protobuf::Descriptor* mesos_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mesos_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* metrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  metrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* dump_request_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dump_request_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* dump_request_stop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dump_request_stop_reflection_ = NULL;
const ::google::protobuf::Descriptor* dump_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dump_response_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssh_open_channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssh_open_channel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssh_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssh_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssh_close_channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssh_close_channel_reflection_ = NULL;
const ::google::protobuf::Descriptor* auto_update_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auto_update_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* dirty_shutdown_report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dirty_shutdown_report_reflection_ = NULL;
const ::google::protobuf::Descriptor* key_value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  key_value_reflection_ = NULL;
const ::google::protobuf::Descriptor* agent_event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  agent_event_reflection_ = NULL;
const ::google::protobuf::Descriptor* config_file_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  config_file_reflection_ = NULL;
const ::google::protobuf::Descriptor* config_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  config_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* falco_subcategory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  falco_subcategory_reflection_ = NULL;
const ::google::protobuf::Descriptor* falco_subcategory_container_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  falco_subcategory_container_reflection_ = NULL;
const ::google::protobuf::Descriptor* falco_category_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  falco_category_reflection_ = NULL;
const ::google::protobuf::Descriptor* falco_prog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  falco_prog_reflection_ = NULL;
const ::google::protobuf::Descriptor* falco_container_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  falco_container_reflection_ = NULL;
const ::google::protobuf::Descriptor* falco_baseline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  falco_baseline_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* sql_statement_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* mongodb_op_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* unit_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* scale_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* jmx_metric_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* statsd_metric_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* app_metric_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* app_check_value_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* networkrole_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* message_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* container_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_draios_2eproto() {
  protobuf_AddDesc_draios_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "draios.proto");
  GOOGLE_CHECK(file != NULL);
  counter_time_descriptor_ = file->message_type(0);
  static const int counter_time_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time, time_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time, time_percentage_),
  };
  counter_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      counter_time_descriptor_,
      counter_time::default_instance_,
      counter_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(counter_time));
  counter_percentile_descriptor_ = file->message_type(1);
  static const int counter_percentile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_percentile, percentile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_percentile, value_),
  };
  counter_percentile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      counter_percentile_descriptor_,
      counter_percentile::default_instance_,
      counter_percentile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_percentile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_percentile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(counter_percentile));
  counter_time_bidirectional_descriptor_ = file->message_type(2);
  static const int counter_time_bidirectional_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, count_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, count_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, time_ns_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, time_ns_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, percentile_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, percentile_out_),
  };
  counter_time_bidirectional_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      counter_time_bidirectional_descriptor_,
      counter_time_bidirectional::default_instance_,
      counter_time_bidirectional_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(counter_time_bidirectional));
  counter_bytes_descriptor_ = file->message_type(3);
  static const int counter_bytes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, count_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, count_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, bytes_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, bytes_out_),
  };
  counter_bytes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      counter_bytes_descriptor_,
      counter_bytes::default_instance_,
      counter_bytes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(counter_bytes));
  counter_time_bytes_descriptor_ = file->message_type(4);
  static const int counter_time_bytes_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_ns_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_ns_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_ns_other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, count_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, count_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, count_other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, bytes_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, bytes_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, bytes_other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_percentage_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_percentage_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_percentage_other_),
  };
  counter_time_bytes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      counter_time_bytes_descriptor_,
      counter_time_bytes::default_instance_,
      counter_time_bytes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(counter_time_bytes));
  time_categories_descriptor_ = file->message_type(5);
  static const int time_categories_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, unknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, ipc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, sleep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, system_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, io_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, io_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, io_other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, wait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, processing_),
  };
  time_categories_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      time_categories_descriptor_,
      time_categories::default_instance_,
      time_categories_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(time_categories));
  transaction_breakdown_categories_descriptor_ = file->message_type(6);
  static const int transaction_breakdown_categories_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, io_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, io_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, processing_),
  };
  transaction_breakdown_categories_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      transaction_breakdown_categories_descriptor_,
      transaction_breakdown_categories::default_instance_,
      transaction_breakdown_categories_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(transaction_breakdown_categories));
  counter_syscall_errors_descriptor_ = file->message_type(7);
  static const int counter_syscall_errors_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, top_error_codes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, count_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, count_file_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, count_net_),
  };
  counter_syscall_errors_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      counter_syscall_errors_descriptor_,
      counter_syscall_errors::default_instance_,
      counter_syscall_errors_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(counter_syscall_errors));
  resource_categories_descriptor_ = file->message_type(8);
  static const int resource_categories_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, capacity_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, stolen_capacity_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, connection_queue_usage_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, fd_usage_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, cpu_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, resident_memory_usage_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, virtual_memory_usage_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, swap_memory_usage_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, major_pagefaults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, minor_pagefaults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, fd_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, cpu_shares_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, cpu_shares_usage_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, memory_limit_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, swap_limit_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, cpu_quota_used_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, swap_memory_total_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, swap_memory_available_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, count_processes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, proc_start_count_),
  };
  resource_categories_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      resource_categories_descriptor_,
      resource_categories::default_instance_,
      resource_categories_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(resource_categories));
  connection_categories_descriptor_ = file->message_type(9);
  static const int connection_categories_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, min_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, max_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, n_aggregated_connections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, percentile_),
  };
  connection_categories_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      connection_categories_descriptor_,
      connection_categories::default_instance_,
      connection_categories_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(connection_categories));
  process_details_descriptor_ = file->message_type(10);
  static const int process_details_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, comm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, exe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, container_id_),
  };
  process_details_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      process_details_descriptor_,
      process_details::default_instance_,
      process_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(process_details));
  command_details_descriptor_ = file->message_type(11);
  static const int command_details_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command_details, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command_details, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command_details, cmdline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command_details, exe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command_details, parentcomm_),
  };
  command_details_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      command_details_descriptor_,
      command_details::default_instance_,
      command_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command_details, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command_details, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(command_details));
  counter_proto_entry_descriptor_ = file->message_type(12);
  static const int counter_proto_entry_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, ncalls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, time_tot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, time_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, bytes_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, bytes_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, nerrors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, percentile_),
  };
  counter_proto_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      counter_proto_entry_descriptor_,
      counter_proto_entry::default_instance_,
      counter_proto_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(counter_proto_entry));
  url_details_descriptor_ = file->message_type(13);
  static const int url_details_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_details, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_details, counters_),
  };
  url_details_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      url_details_descriptor_,
      url_details::default_instance_,
      url_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_details, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_details, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(url_details));
  status_code_details_descriptor_ = file->message_type(14);
  static const int status_code_details_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(status_code_details, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(status_code_details, ncalls_),
  };
  status_code_details_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      status_code_details_descriptor_,
      status_code_details::default_instance_,
      status_code_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(status_code_details, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(status_code_details, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(status_code_details));
  http_info_descriptor_ = file->message_type(15);
  static const int http_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(http_info, server_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(http_info, client_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(http_info, client_status_codes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(http_info, server_status_codes_),
  };
  http_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      http_info_descriptor_,
      http_info::default_instance_,
      http_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(http_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(http_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(http_info));
  sql_entry_details_descriptor_ = file->message_type(16);
  static const int sql_entry_details_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_entry_details, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_entry_details, counters_),
  };
  sql_entry_details_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sql_entry_details_descriptor_,
      sql_entry_details::default_instance_,
      sql_entry_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_entry_details, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_entry_details, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sql_entry_details));
  sql_query_type_details_descriptor_ = file->message_type(17);
  static const int sql_query_type_details_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_query_type_details, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_query_type_details, counters_),
  };
  sql_query_type_details_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sql_query_type_details_descriptor_,
      sql_query_type_details::default_instance_,
      sql_query_type_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_query_type_details, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_query_type_details, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sql_query_type_details));
  sql_info_descriptor_ = file->message_type(18);
  static const int sql_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, server_queries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, client_queries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, server_query_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, client_query_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, server_tables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, client_tables_),
  };
  sql_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sql_info_descriptor_,
      sql_info::default_instance_,
      sql_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sql_info));
  mongodb_collection_details_descriptor_ = file->message_type(19);
  static const int mongodb_collection_details_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_collection_details, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_collection_details, counters_),
  };
  mongodb_collection_details_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mongodb_collection_details_descriptor_,
      mongodb_collection_details::default_instance_,
      mongodb_collection_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_collection_details, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_collection_details, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mongodb_collection_details));
  mongodb_op_type_details_descriptor_ = file->message_type(20);
  static const int mongodb_op_type_details_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_op_type_details, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_op_type_details, counters_),
  };
  mongodb_op_type_details_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mongodb_op_type_details_descriptor_,
      mongodb_op_type_details::default_instance_,
      mongodb_op_type_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_op_type_details, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_op_type_details, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mongodb_op_type_details));
  mongodb_info_descriptor_ = file->message_type(21);
  static const int mongodb_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_info, servers_ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_info, client_ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_info, server_collections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_info, client_collections_),
  };
  mongodb_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mongodb_info_descriptor_,
      mongodb_info::default_instance_,
      mongodb_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mongodb_info));
  jmx_attribute_descriptor_ = file->message_type(22);
  static const int jmx_attribute_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, subattributes_),
  };
  jmx_attribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      jmx_attribute_descriptor_,
      jmx_attribute::default_instance_,
      jmx_attribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(jmx_attribute));
  jmx_bean_descriptor_ = file->message_type(23);
  static const int jmx_bean_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_bean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_bean, attributes_),
  };
  jmx_bean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      jmx_bean_descriptor_,
      jmx_bean::default_instance_,
      jmx_bean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_bean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_bean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(jmx_bean));
  java_info_descriptor_ = file->message_type(24);
  static const int java_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(java_info, process_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(java_info, beans_),
  };
  java_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      java_info_descriptor_,
      java_info::default_instance_,
      java_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(java_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(java_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(java_info));
  statsd_tag_descriptor_ = file->message_type(25);
  static const int statsd_tag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_tag, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_tag, value_),
  };
  statsd_tag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      statsd_tag_descriptor_,
      statsd_tag::default_instance_,
      statsd_tag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_tag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_tag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(statsd_tag));
  statsd_metric_descriptor_ = file->message_type(26);
  static const int statsd_metric_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, median_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, percentile_95_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, percentile_99_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, percentile_),
  };
  statsd_metric_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      statsd_metric_descriptor_,
      statsd_metric::default_instance_,
      statsd_metric_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(statsd_metric));
  statsd_info_descriptor_ = file->message_type(27);
  static const int statsd_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_info, statsd_metrics_),
  };
  statsd_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      statsd_info_descriptor_,
      statsd_info::default_instance_,
      statsd_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(statsd_info));
  app_tag_descriptor_ = file->message_type(28);
  static const int app_tag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_tag, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_tag, value_),
  };
  app_tag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      app_tag_descriptor_,
      app_tag::default_instance_,
      app_tag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_tag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_tag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(app_tag));
  app_metric_descriptor_ = file->message_type(29);
  static const int app_metric_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_metric, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_metric, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_metric, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_metric, tags_),
  };
  app_metric_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      app_metric_descriptor_,
      app_metric::default_instance_,
      app_metric_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_metric, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_metric, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(app_metric));
  app_check_descriptor_ = file->message_type(30);
  static const int app_check_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_check, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_check, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_check, tags_),
  };
  app_check_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      app_check_descriptor_,
      app_check::default_instance_,
      app_check_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_check, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_check, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(app_check));
  app_info_descriptor_ = file->message_type(31);
  static const int app_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_info, process_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_info, metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_info, checks_),
  };
  app_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      app_info_descriptor_,
      app_info::default_instance_,
      app_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(app_info));
  proto_info_descriptor_ = file->message_type(32);
  static const int proto_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, http_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, mysql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, postgres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, mongodb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, java_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, statsd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, app_),
  };
  proto_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_info_descriptor_,
      proto_info::default_instance_,
      proto_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_info));
  network_by_port_descriptor_ = file->message_type(33);
  static const int network_by_port_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(network_by_port, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(network_by_port, counters_),
  };
  network_by_port_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      network_by_port_descriptor_,
      network_by_port::default_instance_,
      network_by_port_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(network_by_port, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(network_by_port, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(network_by_port));
  host_descriptor_ = file->message_type(34);
  static const int host_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, num_cpus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, cpu_loads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, cpu_steal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, physical_memory_size_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, tcounters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, reqcounters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, min_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, max_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, transaction_processing_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, next_tiers_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, resource_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, syscall_errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, external_io_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, network_by_serverports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, cpu_idle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, system_cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, user_cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, memory_bytes_available_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, iowait_cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, nice_cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, system_load_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, system_load_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, system_load_15_),
  };
  host_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      host_descriptor_,
      host::default_instance_,
      host_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(host));
  process_descriptor_ = file->message_type(35);
  static const int process_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, is_ipv4_transaction_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, is_unix_transaction_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, is_ipv4_transaction_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, is_unix_transaction_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, netrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, tcounters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, min_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, max_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, transaction_processing_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, next_tiers_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, resource_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, syscall_errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, protos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, start_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, count_processes_),
  };
  process_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      process_descriptor_,
      process::default_instance_,
      process_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(process));
  program_descriptor_ = file->message_type(36);
  static const int program_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(program, procinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(program, pids_),
  };
  program_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      program_descriptor_,
      program::default_instance_,
      program_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(program, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(program, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(program));
  ipv4tuple_descriptor_ = file->message_type(37);
  static const int ipv4tuple_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, sip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, dip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, sport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, dport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, l4proto_),
  };
  ipv4tuple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ipv4tuple_descriptor_,
      ipv4tuple::default_instance_,
      ipv4tuple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ipv4tuple));
  ipv4_connection_descriptor_ = file->message_type(38);
  static const int ipv4_connection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, tuple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, spid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, dpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, counters_),
  };
  ipv4_connection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ipv4_connection_descriptor_,
      ipv4_connection::default_instance_,
      ipv4_connection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ipv4_connection));
  ipv4_network_interface_descriptor_ = file->message_type(39);
  static const int ipv4_network_interface_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, netmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, bcast_),
  };
  ipv4_network_interface_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ipv4_network_interface_descriptor_,
      ipv4_network_interface::default_instance_,
      ipv4_network_interface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ipv4_network_interface));
  mounted_fs_descriptor_ = file->message_type(40);
  static const int mounted_fs_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, mount_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, size_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, used_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, available_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, total_inodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, used_inodes_),
  };
  mounted_fs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mounted_fs_descriptor_,
      mounted_fs::default_instance_,
      mounted_fs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mounted_fs));
  file_stat_descriptor_ = file->message_type(41);
  static const int file_stat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_stat, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_stat, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_stat, time_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_stat, open_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_stat, errors_),
  };
  file_stat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      file_stat_descriptor_,
      file_stat::default_instance_,
      file_stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_stat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_stat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(file_stat));
  container_port_mapping_descriptor_ = file->message_type(42);
  static const int container_port_mapping_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_port_mapping, host_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_port_mapping, host_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_port_mapping, container_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_port_mapping, container_port_),
  };
  container_port_mapping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      container_port_mapping_descriptor_,
      container_port_mapping::default_instance_,
      container_port_mapping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_port_mapping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_port_mapping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(container_port_mapping));
  container_label_descriptor_ = file->message_type(43);
  static const int container_label_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_label, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_label, value_),
  };
  container_label_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      container_label_descriptor_,
      container_label::default_instance_,
      container_label_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_label, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_label, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(container_label));
  container_descriptor_ = file->message_type(44);
  static const int container_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, tcounters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, reqcounters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, min_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, max_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, transaction_processing_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, next_tiers_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, resource_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, syscall_errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, port_mappings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, protos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, mounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, network_by_serverports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, mesos_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, image_id_),
  };
  container_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      container_descriptor_,
      container::default_instance_,
      container_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(container));
  k8s_pair_descriptor_ = file->message_type(45);
  static const int k8s_pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pair, value_),
  };
  k8s_pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      k8s_pair_descriptor_,
      k8s_pair::default_instance_,
      k8s_pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(k8s_pair));
  k8s_common_descriptor_ = file->message_type(46);
  static const int k8s_common_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_common, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_common, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_common, namespace__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_common, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_common, selectors_),
  };
  k8s_common_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      k8s_common_descriptor_,
      k8s_common::default_instance_,
      k8s_common_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_common, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_common, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(k8s_common));
  k8s_namespace_descriptor_ = file->message_type(47);
  static const int k8s_namespace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_namespace, common_),
  };
  k8s_namespace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      k8s_namespace_descriptor_,
      k8s_namespace::default_instance_,
      k8s_namespace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_namespace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_namespace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(k8s_namespace));
  k8s_node_descriptor_ = file->message_type(48);
  static const int k8s_node_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_node, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_node, host_ips_),
  };
  k8s_node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      k8s_node_descriptor_,
      k8s_node::default_instance_,
      k8s_node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(k8s_node));
  k8s_pod_descriptor_ = file->message_type(49);
  static const int k8s_pod_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, container_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, host_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, internal_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, restart_count_),
  };
  k8s_pod_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      k8s_pod_descriptor_,
      k8s_pod::default_instance_,
      k8s_pod_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(k8s_pod));
  k8s_replication_controller_descriptor_ = file->message_type(50);
  static const int k8s_replication_controller_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replication_controller, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replication_controller, replicas_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replication_controller, replicas_running_),
  };
  k8s_replication_controller_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      k8s_replication_controller_descriptor_,
      k8s_replication_controller::default_instance_,
      k8s_replication_controller_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replication_controller, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replication_controller, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(k8s_replication_controller));
  k8s_replica_set_descriptor_ = file->message_type(51);
  static const int k8s_replica_set_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replica_set, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replica_set, replicas_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replica_set, replicas_running_),
  };
  k8s_replica_set_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      k8s_replica_set_descriptor_,
      k8s_replica_set::default_instance_,
      k8s_replica_set_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replica_set, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replica_set, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(k8s_replica_set));
  k8s_service_descriptor_ = file->message_type(52);
  static const int k8s_service_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service, cluster_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service, ports_),
  };
  k8s_service_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      k8s_service_descriptor_,
      k8s_service::default_instance_,
      k8s_service_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(k8s_service));
  k8s_service_net_port_descriptor_ = k8s_service_descriptor_->nested_type(0);
  static const int k8s_service_net_port_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service_net_port, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service_net_port, target_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service_net_port, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service_net_port, node_port_),
  };
  k8s_service_net_port_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      k8s_service_net_port_descriptor_,
      k8s_service_net_port::default_instance_,
      k8s_service_net_port_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service_net_port, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service_net_port, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(k8s_service_net_port));
  k8s_deployment_descriptor_ = file->message_type(53);
  static const int k8s_deployment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_deployment, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_deployment, replicas_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_deployment, replicas_running_),
  };
  k8s_deployment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      k8s_deployment_descriptor_,
      k8s_deployment::default_instance_,
      k8s_deployment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_deployment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_deployment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(k8s_deployment));
  k8s_daemonset_descriptor_ = file->message_type(54);
  static const int k8s_daemonset_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_daemonset, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_daemonset, current_scheduled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_daemonset, desired_scheduled_),
  };
  k8s_daemonset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      k8s_daemonset_descriptor_,
      k8s_daemonset::default_instance_,
      k8s_daemonset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_daemonset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_daemonset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(k8s_daemonset));
  k8s_state_descriptor_ = file->message_type(55);
  static const int k8s_state_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, namespaces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, pods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, controllers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, services_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, replica_sets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, deployments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, daemonsets_),
  };
  k8s_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      k8s_state_descriptor_,
      k8s_state::default_instance_,
      k8s_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(k8s_state));
  mesos_pair_descriptor_ = file->message_type(56);
  static const int mesos_pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_pair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_pair, value_),
  };
  mesos_pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mesos_pair_descriptor_,
      mesos_pair::default_instance_,
      mesos_pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mesos_pair));
  mesos_common_descriptor_ = file->message_type(57);
  static const int mesos_common_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_common, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_common, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_common, labels_),
  };
  mesos_common_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mesos_common_descriptor_,
      mesos_common::default_instance_,
      mesos_common_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_common, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_common, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mesos_common));
  mesos_task_descriptor_ = file->message_type(58);
  static const int mesos_task_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_task, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_task, slave_id_),
  };
  mesos_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mesos_task_descriptor_,
      mesos_task::default_instance_,
      mesos_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mesos_task));
  marathon_app_descriptor_ = file->message_type(59);
  static const int marathon_app_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_app, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_app, task_ids_),
  };
  marathon_app_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      marathon_app_descriptor_,
      marathon_app::default_instance_,
      marathon_app_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_app, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_app, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(marathon_app));
  marathon_group_descriptor_ = file->message_type(60);
  static const int marathon_group_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_group, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_group, apps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_group, groups_),
  };
  marathon_group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      marathon_group_descriptor_,
      marathon_group::default_instance_,
      marathon_group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(marathon_group));
  mesos_framework_descriptor_ = file->message_type(61);
  static const int mesos_framework_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_framework, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_framework, tasks_),
  };
  mesos_framework_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mesos_framework_descriptor_,
      mesos_framework::default_instance_,
      mesos_framework_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_framework, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_framework, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mesos_framework));
  mesos_slave_descriptor_ = file->message_type(62);
  static const int mesos_slave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_slave, common_),
  };
  mesos_slave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mesos_slave_descriptor_,
      mesos_slave::default_instance_,
      mesos_slave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_slave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_slave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mesos_slave));
  mesos_state_descriptor_ = file->message_type(63);
  static const int mesos_state_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_state, frameworks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_state, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_state, slaves_),
  };
  mesos_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mesos_state_descriptor_,
      mesos_state::default_instance_,
      mesos_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mesos_state));
  metrics_descriptor_ = file->message_type(64);
  static const int metrics_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, sampling_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, host_custom_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, host_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, is_host_hidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, hidden_processes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, hostinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, programs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, ipv4_connections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, ipv4_network_interfaces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, commands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, mounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, top_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, protos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, containers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, kubernetes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, mesos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, falcobl_),
  };
  metrics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      metrics_descriptor_,
      metrics::default_instance_,
      metrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(metrics));
  dump_request_start_descriptor_ = file->message_type(65);
  static const int dump_request_start_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, duration_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, filters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, token_),
  };
  dump_request_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dump_request_start_descriptor_,
      dump_request_start::default_instance_,
      dump_request_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dump_request_start));
  dump_request_stop_descriptor_ = file->message_type(66);
  static const int dump_request_stop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_stop, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_stop, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_stop, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_stop, token_),
  };
  dump_request_stop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dump_request_stop_descriptor_,
      dump_request_stop::default_instance_,
      dump_request_stop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_stop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_stop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dump_request_stop));
  dump_response_descriptor_ = file->message_type(67);
  static const int dump_response_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, chunk_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, final_chunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, keep_alive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, final_size_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, token_),
  };
  dump_response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dump_response_descriptor_,
      dump_response::default_instance_,
      dump_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dump_response));
  ssh_open_channel_descriptor_ = file->message_type(68);
  static const int ssh_open_channel_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, passphrase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, port_),
  };
  ssh_open_channel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssh_open_channel_descriptor_,
      ssh_open_channel::default_instance_,
      ssh_open_channel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssh_open_channel));
  ssh_data_descriptor_ = file->message_type(69);
  static const int ssh_data_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, exit_status_),
  };
  ssh_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssh_data_descriptor_,
      ssh_data::default_instance_,
      ssh_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssh_data));
  ssh_close_channel_descriptor_ = file->message_type(70);
  static const int ssh_close_channel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, token_),
  };
  ssh_close_channel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssh_close_channel_descriptor_,
      ssh_close_channel::default_instance_,
      ssh_close_channel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssh_close_channel));
  auto_update_request_descriptor_ = file->message_type(71);
  static const int auto_update_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_update_request, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_update_request, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_update_request, customer_id_),
  };
  auto_update_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auto_update_request_descriptor_,
      auto_update_request::default_instance_,
      auto_update_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_update_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_update_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auto_update_request));
  dirty_shutdown_report_descriptor_ = file->message_type(72);
  static const int dirty_shutdown_report_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dirty_shutdown_report, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dirty_shutdown_report, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dirty_shutdown_report, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dirty_shutdown_report, log_),
  };
  dirty_shutdown_report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dirty_shutdown_report_descriptor_,
      dirty_shutdown_report::default_instance_,
      dirty_shutdown_report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dirty_shutdown_report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dirty_shutdown_report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dirty_shutdown_report));
  key_value_descriptor_ = file->message_type(73);
  static const int key_value_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(key_value, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(key_value, value_),
  };
  key_value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      key_value_descriptor_,
      key_value::default_instance_,
      key_value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(key_value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(key_value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(key_value));
  agent_event_descriptor_ = file->message_type(74);
  static const int agent_event_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, timestamp_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, tags_),
  };
  agent_event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      agent_event_descriptor_,
      agent_event::default_instance_,
      agent_event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(agent_event));
  config_file_descriptor_ = file->message_type(75);
  static const int config_file_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_file, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_file, content_),
  };
  config_file_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      config_file_descriptor_,
      config_file::default_instance_,
      config_file_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_file, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_file, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(config_file));
  config_data_descriptor_ = file->message_type(76);
  static const int config_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_data, config_files_),
  };
  config_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      config_data_descriptor_,
      config_data::default_instance_,
      config_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(config_data));
  falco_subcategory_descriptor_ = file->message_type(77);
  static const int falco_subcategory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory, full_),
  };
  falco_subcategory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      falco_subcategory_descriptor_,
      falco_subcategory::default_instance_,
      falco_subcategory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(falco_subcategory));
  falco_subcategory_container_descriptor_ = file->message_type(78);
  static const int falco_subcategory_container_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory_container, subcats_),
  };
  falco_subcategory_container_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      falco_subcategory_container_descriptor_,
      falco_subcategory_container::default_instance_,
      falco_subcategory_container_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory_container, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory_container, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(falco_subcategory_container));
  falco_category_descriptor_ = file->message_type(79);
  static const int falco_category_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_category, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_category, startup_subcats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_category, regular_subcats_),
  };
  falco_category_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      falco_category_descriptor_,
      falco_category::default_instance_,
      falco_category_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_category, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_category, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(falco_category));
  falco_prog_descriptor_ = file->message_type(80);
  static const int falco_prog_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, comm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, exe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, cats_),
  };
  falco_prog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      falco_prog_descriptor_,
      falco_prog::default_instance_,
      falco_prog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(falco_prog));
  falco_container_descriptor_ = file->message_type(81);
  static const int falco_container_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_container, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_container, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_container, image_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_container, image_id_),
  };
  falco_container_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      falco_container_descriptor_,
      falco_container::default_instance_,
      falco_container_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_container, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_container, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(falco_container));
  falco_baseline_descriptor_ = file->message_type(82);
  static const int falco_baseline_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_baseline, progs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_baseline, containers_),
  };
  falco_baseline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      falco_baseline_descriptor_,
      falco_baseline::default_instance_,
      falco_baseline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_baseline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_baseline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(falco_baseline));
  sql_statement_type_descriptor_ = file->enum_type(0);
  mongodb_op_type_descriptor_ = file->enum_type(1);
  unit_descriptor_ = file->enum_type(2);
  scale_descriptor_ = file->enum_type(3);
  jmx_metric_type_descriptor_ = file->enum_type(4);
  statsd_metric_type_descriptor_ = file->enum_type(5);
  app_metric_type_descriptor_ = file->enum_type(6);
  app_check_value_descriptor_ = file->enum_type(7);
  networkrole_descriptor_ = file->enum_type(8);
  message_type_descriptor_ = file->enum_type(9);
  container_type_descriptor_ = file->enum_type(10);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_draios_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    counter_time_descriptor_, &counter_time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    counter_percentile_descriptor_, &counter_percentile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    counter_time_bidirectional_descriptor_, &counter_time_bidirectional::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    counter_bytes_descriptor_, &counter_bytes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    counter_time_bytes_descriptor_, &counter_time_bytes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    time_categories_descriptor_, &time_categories::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    transaction_breakdown_categories_descriptor_, &transaction_breakdown_categories::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    counter_syscall_errors_descriptor_, &counter_syscall_errors::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    resource_categories_descriptor_, &resource_categories::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    connection_categories_descriptor_, &connection_categories::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    process_details_descriptor_, &process_details::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    command_details_descriptor_, &command_details::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    counter_proto_entry_descriptor_, &counter_proto_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    url_details_descriptor_, &url_details::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    status_code_details_descriptor_, &status_code_details::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    http_info_descriptor_, &http_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sql_entry_details_descriptor_, &sql_entry_details::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sql_query_type_details_descriptor_, &sql_query_type_details::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sql_info_descriptor_, &sql_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mongodb_collection_details_descriptor_, &mongodb_collection_details::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mongodb_op_type_details_descriptor_, &mongodb_op_type_details::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mongodb_info_descriptor_, &mongodb_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    jmx_attribute_descriptor_, &jmx_attribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    jmx_bean_descriptor_, &jmx_bean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    java_info_descriptor_, &java_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    statsd_tag_descriptor_, &statsd_tag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    statsd_metric_descriptor_, &statsd_metric::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    statsd_info_descriptor_, &statsd_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    app_tag_descriptor_, &app_tag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    app_metric_descriptor_, &app_metric::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    app_check_descriptor_, &app_check::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    app_info_descriptor_, &app_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_info_descriptor_, &proto_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    network_by_port_descriptor_, &network_by_port::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    host_descriptor_, &host::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    process_descriptor_, &process::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    program_descriptor_, &program::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ipv4tuple_descriptor_, &ipv4tuple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ipv4_connection_descriptor_, &ipv4_connection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ipv4_network_interface_descriptor_, &ipv4_network_interface::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mounted_fs_descriptor_, &mounted_fs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    file_stat_descriptor_, &file_stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    container_port_mapping_descriptor_, &container_port_mapping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    container_label_descriptor_, &container_label::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    container_descriptor_, &container::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    k8s_pair_descriptor_, &k8s_pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    k8s_common_descriptor_, &k8s_common::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    k8s_namespace_descriptor_, &k8s_namespace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    k8s_node_descriptor_, &k8s_node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    k8s_pod_descriptor_, &k8s_pod::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    k8s_replication_controller_descriptor_, &k8s_replication_controller::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    k8s_replica_set_descriptor_, &k8s_replica_set::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    k8s_service_descriptor_, &k8s_service::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    k8s_service_net_port_descriptor_, &k8s_service_net_port::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    k8s_deployment_descriptor_, &k8s_deployment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    k8s_daemonset_descriptor_, &k8s_daemonset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    k8s_state_descriptor_, &k8s_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mesos_pair_descriptor_, &mesos_pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mesos_common_descriptor_, &mesos_common::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mesos_task_descriptor_, &mesos_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    marathon_app_descriptor_, &marathon_app::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    marathon_group_descriptor_, &marathon_group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mesos_framework_descriptor_, &mesos_framework::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mesos_slave_descriptor_, &mesos_slave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mesos_state_descriptor_, &mesos_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    metrics_descriptor_, &metrics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dump_request_start_descriptor_, &dump_request_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dump_request_stop_descriptor_, &dump_request_stop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dump_response_descriptor_, &dump_response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssh_open_channel_descriptor_, &ssh_open_channel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssh_data_descriptor_, &ssh_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssh_close_channel_descriptor_, &ssh_close_channel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auto_update_request_descriptor_, &auto_update_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dirty_shutdown_report_descriptor_, &dirty_shutdown_report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    key_value_descriptor_, &key_value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    agent_event_descriptor_, &agent_event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    config_file_descriptor_, &config_file::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    config_data_descriptor_, &config_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    falco_subcategory_descriptor_, &falco_subcategory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    falco_subcategory_container_descriptor_, &falco_subcategory_container::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    falco_category_descriptor_, &falco_category::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    falco_prog_descriptor_, &falco_prog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    falco_container_descriptor_, &falco_container::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    falco_baseline_descriptor_, &falco_baseline::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_draios_2eproto() {
  delete counter_time::default_instance_;
  delete counter_time_reflection_;
  delete counter_percentile::default_instance_;
  delete counter_percentile_reflection_;
  delete counter_time_bidirectional::default_instance_;
  delete counter_time_bidirectional_reflection_;
  delete counter_bytes::default_instance_;
  delete counter_bytes_reflection_;
  delete counter_time_bytes::default_instance_;
  delete counter_time_bytes_reflection_;
  delete time_categories::default_instance_;
  delete time_categories_reflection_;
  delete transaction_breakdown_categories::default_instance_;
  delete transaction_breakdown_categories_reflection_;
  delete counter_syscall_errors::default_instance_;
  delete counter_syscall_errors_reflection_;
  delete resource_categories::default_instance_;
  delete resource_categories_reflection_;
  delete connection_categories::default_instance_;
  delete connection_categories_reflection_;
  delete process_details::default_instance_;
  delete process_details_reflection_;
  delete command_details::default_instance_;
  delete command_details_reflection_;
  delete counter_proto_entry::default_instance_;
  delete counter_proto_entry_reflection_;
  delete url_details::default_instance_;
  delete url_details_reflection_;
  delete status_code_details::default_instance_;
  delete status_code_details_reflection_;
  delete http_info::default_instance_;
  delete http_info_reflection_;
  delete sql_entry_details::default_instance_;
  delete sql_entry_details_reflection_;
  delete sql_query_type_details::default_instance_;
  delete sql_query_type_details_reflection_;
  delete sql_info::default_instance_;
  delete sql_info_reflection_;
  delete mongodb_collection_details::default_instance_;
  delete mongodb_collection_details_reflection_;
  delete mongodb_op_type_details::default_instance_;
  delete mongodb_op_type_details_reflection_;
  delete mongodb_info::default_instance_;
  delete mongodb_info_reflection_;
  delete jmx_attribute::default_instance_;
  delete jmx_attribute_reflection_;
  delete jmx_bean::default_instance_;
  delete jmx_bean_reflection_;
  delete java_info::default_instance_;
  delete java_info_reflection_;
  delete statsd_tag::default_instance_;
  delete statsd_tag_reflection_;
  delete statsd_metric::default_instance_;
  delete statsd_metric_reflection_;
  delete statsd_info::default_instance_;
  delete statsd_info_reflection_;
  delete app_tag::default_instance_;
  delete app_tag_reflection_;
  delete app_metric::default_instance_;
  delete app_metric_reflection_;
  delete app_check::default_instance_;
  delete app_check_reflection_;
  delete app_info::default_instance_;
  delete app_info_reflection_;
  delete proto_info::default_instance_;
  delete proto_info_reflection_;
  delete network_by_port::default_instance_;
  delete network_by_port_reflection_;
  delete host::default_instance_;
  delete host_reflection_;
  delete process::default_instance_;
  delete process_reflection_;
  delete program::default_instance_;
  delete program_reflection_;
  delete ipv4tuple::default_instance_;
  delete ipv4tuple_reflection_;
  delete ipv4_connection::default_instance_;
  delete ipv4_connection_reflection_;
  delete ipv4_network_interface::default_instance_;
  delete ipv4_network_interface_reflection_;
  delete mounted_fs::default_instance_;
  delete mounted_fs_reflection_;
  delete file_stat::default_instance_;
  delete file_stat_reflection_;
  delete container_port_mapping::default_instance_;
  delete container_port_mapping_reflection_;
  delete container_label::default_instance_;
  delete container_label_reflection_;
  delete container::default_instance_;
  delete container_reflection_;
  delete k8s_pair::default_instance_;
  delete k8s_pair_reflection_;
  delete k8s_common::default_instance_;
  delete k8s_common_reflection_;
  delete k8s_namespace::default_instance_;
  delete k8s_namespace_reflection_;
  delete k8s_node::default_instance_;
  delete k8s_node_reflection_;
  delete k8s_pod::default_instance_;
  delete k8s_pod_reflection_;
  delete k8s_replication_controller::default_instance_;
  delete k8s_replication_controller_reflection_;
  delete k8s_replica_set::default_instance_;
  delete k8s_replica_set_reflection_;
  delete k8s_service::default_instance_;
  delete k8s_service_reflection_;
  delete k8s_service_net_port::default_instance_;
  delete k8s_service_net_port_reflection_;
  delete k8s_deployment::default_instance_;
  delete k8s_deployment_reflection_;
  delete k8s_daemonset::default_instance_;
  delete k8s_daemonset_reflection_;
  delete k8s_state::default_instance_;
  delete k8s_state_reflection_;
  delete mesos_pair::default_instance_;
  delete mesos_pair_reflection_;
  delete mesos_common::default_instance_;
  delete mesos_common_reflection_;
  delete mesos_task::default_instance_;
  delete mesos_task_reflection_;
  delete marathon_app::default_instance_;
  delete marathon_app_reflection_;
  delete marathon_group::default_instance_;
  delete marathon_group_reflection_;
  delete mesos_framework::default_instance_;
  delete mesos_framework_reflection_;
  delete mesos_slave::default_instance_;
  delete mesos_slave_reflection_;
  delete mesos_state::default_instance_;
  delete mesos_state_reflection_;
  delete metrics::default_instance_;
  delete metrics_reflection_;
  delete dump_request_start::default_instance_;
  delete dump_request_start_reflection_;
  delete dump_request_stop::default_instance_;
  delete dump_request_stop_reflection_;
  delete dump_response::default_instance_;
  delete dump_response_reflection_;
  delete ssh_open_channel::default_instance_;
  delete ssh_open_channel_reflection_;
  delete ssh_data::default_instance_;
  delete ssh_data_reflection_;
  delete ssh_close_channel::default_instance_;
  delete ssh_close_channel_reflection_;
  delete auto_update_request::default_instance_;
  delete auto_update_request_reflection_;
  delete dirty_shutdown_report::default_instance_;
  delete dirty_shutdown_report_reflection_;
  delete key_value::default_instance_;
  delete key_value_reflection_;
  delete agent_event::default_instance_;
  delete agent_event_reflection_;
  delete config_file::default_instance_;
  delete config_file_reflection_;
  delete config_data::default_instance_;
  delete config_data_reflection_;
  delete falco_subcategory::default_instance_;
  delete falco_subcategory_reflection_;
  delete falco_subcategory_container::default_instance_;
  delete falco_subcategory_container_reflection_;
  delete falco_category::default_instance_;
  delete falco_category_reflection_;
  delete falco_prog::default_instance_;
  delete falco_prog_reflection_;
  delete falco_container::default_instance_;
  delete falco_container_reflection_;
  delete falco_baseline::default_instance_;
  delete falco_baseline_reflection_;
}

void protobuf_AddDesc_draios_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014draios.proto\022\013draiosproto\"G\n\014counter_t"
    "ime\022\r\n\005count\030\001 \002(\r\022\017\n\007time_ns\030\002 \002(\004\022\027\n\017t"
    "ime_percentage\030\003 \001(\r\"7\n\022counter_percenti"
    "le\022\022\n\npercentile\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\"\333\001"
    "\n\032counter_time_bidirectional\022\020\n\010count_in"
    "\030\001 \002(\r\022\021\n\tcount_out\030\002 \002(\r\022\022\n\ntime_ns_in\030"
    "\003 \002(\004\022\023\n\013time_ns_out\030\004 \002(\004\0226\n\rpercentile"
    "_in\030\005 \003(\0132\037.draiosproto.counter_percenti"
    "le\0227\n\016percentile_out\030\006 \003(\0132\037.draiosproto"
    ".counter_percentile\"Y\n\rcounter_bytes\022\020\n\010"
    "count_in\030\001 \002(\r\022\021\n\tcount_out\030\002 \002(\r\022\020\n\010byt"
    "es_in\030\003 \002(\r\022\021\n\tbytes_out\030\004 \002(\r\"\240\002\n\022count"
    "er_time_bytes\022\022\n\ntime_ns_in\030\001 \002(\004\022\023\n\013tim"
    "e_ns_out\030\002 \002(\004\022\025\n\rtime_ns_other\030\003 \002(\004\022\020\n"
    "\010count_in\030\004 \002(\r\022\021\n\tcount_out\030\005 \002(\r\022\023\n\013co"
    "unt_other\030\006 \002(\r\022\020\n\010bytes_in\030\007 \002(\r\022\021\n\tbyt"
    "es_out\030\010 \002(\r\022\023\n\013bytes_other\030\t \002(\r\022\032\n\022tim"
    "e_percentage_in\030\n \001(\r\022\033\n\023time_percentage"
    "_out\030\013 \001(\r\022\035\n\025time_percentage_other\030\014 \001("
    "\r\"\367\005\n\017time_categories\022*\n\007unknown\030\001 \001(\0132\031"
    ".draiosproto.counter_time\022(\n\005other\030\002 \001(\013"
    "2\031.draiosproto.counter_time\022\'\n\004file\030\003 \001("
    "\0132\031.draiosproto.counter_time\022&\n\003net\030\004 \001("
    "\0132\031.draiosproto.counter_time\022&\n\003ipc\030\005 \001("
    "\0132\031.draiosproto.counter_time\022)\n\006memory\030\006"
    " \001(\0132\031.draiosproto.counter_time\022*\n\007proce"
    "ss\030\007 \001(\0132\031.draiosproto.counter_time\022(\n\005s"
    "leep\030\010 \001(\0132\031.draiosproto.counter_time\022)\n"
    "\006system\030\t \001(\0132\031.draiosproto.counter_time"
    "\022)\n\006signal\030\n \001(\0132\031.draiosproto.counter_t"
    "ime\022\'\n\004user\030\013 \001(\0132\031.draiosproto.counter_"
    "time\022\'\n\004time\030\014 \001(\0132\031.draiosproto.counter"
    "_time\0220\n\007io_file\030\r \001(\0132\037.draiosproto.cou"
    "nter_time_bytes\022/\n\006io_net\030\016 \001(\0132\037.draios"
    "proto.counter_time_bytes\0221\n\010io_other\030\017 \001"
    "(\0132\037.draiosproto.counter_time_bytes\022\'\n\004w"
    "ait\030\020 \001(\0132\031.draiosproto.counter_time\022-\n\n"
    "processing\030\021 \001(\0132\031.draiosproto.counter_t"
    "ime\"\336\001\n transaction_breakdown_categories"
    "\022(\n\005other\030\002 \001(\0132\031.draiosproto.counter_ti"
    "me\0220\n\007io_file\030\r \001(\0132\037.draiosproto.counte"
    "r_time_bytes\022/\n\006io_net\030\016 \001(\0132\037.draiospro"
    "to.counter_time_bytes\022-\n\nprocessing\030\021 \001("
    "\0132\031.draiosproto.counter_time\"\200\001\n\026counter"
    "_syscall_errors\022\r\n\005count\030\001 \002(\r\022\027\n\017top_er"
    "ror_codes\030\002 \003(\r\022\022\n\ncount_file\030\004 \001(\r\022\027\n\017c"
    "ount_file_open\030\005 \001(\r\022\021\n\tcount_net\030\006 \001(\r\""
    "\257\004\n\023resource_categories\022\026\n\016capacity_scor"
    "e\030\001 \001(\r\022\035\n\025stolen_capacity_score\030\006 \001(\r\022\""
    "\n\032connection_queue_usage_pct\030\002 \001(\r\022\024\n\014fd"
    "_usage_pct\030\003 \001(\r\022\017\n\007cpu_pct\030\004 \001(\r\022 \n\030res"
    "ident_memory_usage_kb\030\005 \001(\r\022\037\n\027virtual_m"
    "emory_usage_kb\030\r \001(\r\022\034\n\024swap_memory_usag"
    "e_kb\030\016 \001(\r\022\030\n\020major_pagefaults\030\017 \001(\004\022\030\n\020"
    "minor_pagefaults\030\020 \001(\004\022\020\n\010fd_count\030\025 \001(\r"
    "\022\022\n\ncpu_shares\030\030 \001(\r\022\034\n\024cpu_shares_usage"
    "_pct\030\031 \001(\r\022\027\n\017memory_limit_kb\030\032 \001(\r\022\025\n\rs"
    "wap_limit_kb\030\033 \001(\r\022\032\n\022cpu_quota_used_pct"
    "\030\034 \001(\r\022\034\n\024swap_memory_total_kb\030\035 \001(\r\022 \n\030"
    "swap_memory_available_kb\030\036 \001(\r\022\027\n\017count_"
    "processes\030\037 \001(\004\022\030\n\020proc_start_count\030  \001("
    "\004\"\243\003\n\025connection_categories\022*\n\006server\030\001 "
    "\001(\0132\032.draiosproto.counter_bytes\022*\n\006clien"
    "t\030\002 \001(\0132\032.draiosproto.counter_bytes\022E\n\024t"
    "ransaction_counters\030\003 \001(\0132\'.draiosproto."
    "counter_time_bidirectional\022I\n\030min_transa"
    "ction_counters\030\022 \001(\0132\'.draiosproto.count"
    "er_time_bidirectional\022I\n\030max_transaction"
    "_counters\030\023 \001(\0132\'.draiosproto.counter_ti"
    "me_bidirectional\022 \n\030n_aggregated_connect"
    "ions\030\004 \001(\r\0223\n\npercentile\030\005 \003(\0132\037.draiosp"
    "roto.counter_percentile\"P\n\017process_detai"
    "ls\022\014\n\004comm\030\001 \002(\t\022\013\n\003exe\030\002 \002(\t\022\014\n\004args\030\003 "
    "\003(\t\022\024\n\014container_id\030\004 \001(\t\"e\n\017command_det"
    "ails\022\021\n\ttimestamp\030\001 \002(\004\022\r\n\005count\030\002 \002(\r\022\017"
    "\n\007cmdline\030\003 \002(\t\022\013\n\003exe\030\004 \002(\t\022\022\n\nparentco"
    "mm\030\005 \001(\t\"\264\001\n\023counter_proto_entry\022\016\n\006ncal"
    "ls\030\001 \002(\r\022\020\n\010time_tot\030\002 \002(\004\022\020\n\010time_max\030\003"
    " \002(\004\022\020\n\010bytes_in\030\004 \002(\004\022\021\n\tbytes_out\030\005 \002("
    "\004\022\017\n\007nerrors\030\006 \002(\r\0223\n\npercentile\030\007 \003(\0132\037"
    ".draiosproto.counter_percentile\"N\n\013url_d"
    "etails\022\013\n\003url\030\001 \002(\t\0222\n\010counters\030\002 \002(\0132 ."
    "draiosproto.counter_proto_entry\":\n\023statu"
    "s_code_details\022\023\n\013status_code\030\001 \002(\r\022\016\n\006n"
    "calls\030\002 \002(\r\"\347\001\n\thttp_info\022-\n\013server_urls"
    "\030\001 \003(\0132\030.draiosproto.url_details\022-\n\013clie"
    "nt_urls\030\002 \003(\0132\030.draiosproto.url_details\022"
    "=\n\023client_status_codes\030\003 \003(\0132 .draiospro"
    "to.status_code_details\022=\n\023server_status_"
    "codes\030\004 \003(\0132 .draiosproto.status_code_de"
    "tails\"U\n\021sql_entry_details\022\014\n\004name\030\001 \002(\t"
    "\0222\n\010counters\030\002 \002(\0132 .draiosproto.counter"
    "_proto_entry\"{\n\026sql_query_type_details\022-"
    "\n\004type\030\001 \002(\0162\037.draiosproto.sql_statement"
    "_type\0222\n\010counters\030\002 \002(\0132 .draiosproto.co"
    "unter_proto_entry\"\352\002\n\010sql_info\0226\n\016server"
    "_queries\030\001 \003(\0132\036.draiosproto.sql_entry_d"
    "etails\0226\n\016client_queries\030\002 \003(\0132\036.draiosp"
    "roto.sql_entry_details\022\?\n\022server_query_t"
    "ypes\030\003 \003(\0132#.draiosproto.sql_query_type_"
    "details\022\?\n\022client_query_types\030\004 \003(\0132#.dr"
    "aiosproto.sql_query_type_details\0225\n\rserv"
    "er_tables\030\005 \003(\0132\036.draiosproto.sql_entry_"
    "details\0225\n\rclient_tables\030\006 \003(\0132\036.draiosp"
    "roto.sql_entry_details\"^\n\032mongodb_collec"
    "tion_details\022\014\n\004name\030\001 \002(\t\0222\n\010counters\030\002"
    " \002(\0132 .draiosproto.counter_proto_entry\"w"
    "\n\027mongodb_op_type_details\022(\n\002op\030\001 \002(\0162\034."
    "draiosproto.mongodb_op_type\0222\n\010counters\030"
    "\002 \002(\0132 .draiosproto.counter_proto_entry\""
    "\215\002\n\014mongodb_info\0229\n\013servers_ops\030\001 \003(\0132$."
    "draiosproto.mongodb_op_type_details\0228\n\nc"
    "lient_ops\030\002 \003(\0132$.draiosproto.mongodb_op"
    "_type_details\022C\n\022server_collections\030\003 \003("
    "\0132\'.draiosproto.mongodb_collection_detai"
    "ls\022C\n\022client_collections\030\004 \003(\0132\'.draiosp"
    "roto.mongodb_collection_details\"\336\001\n\rjmx_"
    "attribute\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\001\022\r"
    "\n\005alias\030\005 \001(\t\022*\n\004type\030\007 \001(\0162\034.draiosprot"
    "o.jmx_metric_type\022\037\n\004unit\030\010 \001(\0162\021.draios"
    "proto.unit\022!\n\005scale\030\t \001(\0162\022.draiosproto."
    "scale\0221\n\rsubattributes\030\003 \003(\0132\032.draiospro"
    "to.jmx_attribute\"H\n\010jmx_bean\022\014\n\004name\030\001 \001"
    "(\t\022.\n\nattributes\030\002 \003(\0132\032.draiosproto.jmx"
    "_attribute\"G\n\tjava_info\022\024\n\014process_name\030"
    "\001 \001(\t\022$\n\005beans\030\002 \003(\0132\025.draiosproto.jmx_b"
    "ean\"(\n\nstatsd_tag\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030"
    "\002 \001(\t\"\253\002\n\rstatsd_metric\022\014\n\004name\030\001 \001(\t\022%\n"
    "\004tags\030\002 \003(\0132\027.draiosproto.statsd_tag\022-\n\004"
    "type\030\003 \001(\0162\037.draiosproto.statsd_metric_t"
    "ype\022\r\n\005value\030\004 \001(\001\022\013\n\003sum\030\005 \001(\001\022\013\n\003min\030\006"
    " \001(\001\022\013\n\003max\030\007 \001(\001\022\r\n\005count\030\010 \001(\001\022\016\n\006medi"
    "an\030\t \001(\001\022\025\n\rpercentile_95\030\n \001(\001\022\025\n\rperce"
    "ntile_99\030\013 \001(\001\0223\n\npercentile\030\014 \003(\0132\037.dra"
    "iosproto.counter_percentile\"A\n\013statsd_in"
    "fo\0222\n\016statsd_metrics\030\001 \003(\0132\032.draiosproto"
    ".statsd_metric\"%\n\007app_tag\022\013\n\003key\030\001 \002(\t\022\r"
    "\n\005value\030\002 \001(\t\"y\n\napp_metric\022\014\n\004name\030\001 \001("
    "\t\022*\n\004type\030\002 \001(\0162\034.draiosproto.app_metric"
    "_type\022\r\n\005value\030\003 \001(\001\022\"\n\004tags\030\004 \003(\0132\024.dra"
    "iosproto.app_tag\"j\n\tapp_check\022\014\n\004name\030\001 "
    "\001(\t\022+\n\005value\030\002 \001(\0162\034.draiosproto.app_che"
    "ck_value\022\"\n\004tags\030\003 \003(\0132\024.draiosproto.app"
    "_tag\"r\n\010app_info\022\024\n\014process_name\030\001 \001(\t\022("
    "\n\007metrics\030\002 \003(\0132\027.draiosproto.app_metric"
    "\022&\n\006checks\030\003 \003(\0132\026.draiosproto.app_check"
    "\"\241\002\n\nproto_info\022$\n\004http\030\001 \001(\0132\026.draiospr"
    "oto.http_info\022$\n\005mysql\030\002 \001(\0132\025.draiospro"
    "to.sql_info\022\'\n\010postgres\030\003 \001(\0132\025.draiospr"
    "oto.sql_info\022*\n\007mongodb\030\004 \001(\0132\031.draiospr"
    "oto.mongodb_info\022$\n\004java\030\005 \001(\0132\026.draiosp"
    "roto.java_info\022(\n\006statsd\030\006 \001(\0132\030.draiosp"
    "roto.statsd_info\022\"\n\003app\030\007 \001(\0132\025.draiospr"
    "oto.app_info\"U\n\017network_by_port\022\014\n\004port\030"
    "\001 \002(\r\0224\n\010counters\030\002 \002(\0132\".draiosproto.co"
    "nnection_categories\"\317\007\n\004host\022\020\n\010hostname"
    "\030\001 \001(\t\022\020\n\010num_cpus\030\002 \001(\r\022\021\n\tcpu_loads\030\003 "
    "\003(\r\022\021\n\tcpu_steal\030\013 \003(\r\022\"\n\032physical_memor"
    "y_size_bytes\030\004 \002(\004\022/\n\ttcounters\030\005 \001(\0132\034."
    "draiosproto.time_categories\022B\n\013reqcounte"
    "rs\030\014 \001(\0132-.draiosproto.transaction_break"
    "down_categories\022E\n\024transaction_counters\030"
    "\006 \001(\0132\'.draiosproto.counter_time_bidirec"
    "tional\022I\n\030min_transaction_counters\030\026 \001(\013"
    "2\'.draiosproto.counter_time_bidirectiona"
    "l\022I\n\030max_transaction_counters\030\027 \001(\0132\'.dr"
    "aiosproto.counter_time_bidirectional\022$\n\034"
    "transaction_processing_delay\030\007 \001(\004\022\030\n\020ne"
    "xt_tiers_delay\030\r \001(\004\022;\n\021resource_counter"
    "s\030\010 \001(\0132 .draiosproto.resource_categorie"
    "s\022;\n\016syscall_errors\030\t \001(\0132#.draiosproto."
    "counter_syscall_errors\0228\n\017external_io_ne"
    "t\030\n \001(\0132\037.draiosproto.counter_time_bytes"
    "\022<\n\026network_by_serverports\030\030 \003(\0132\034.draio"
    "sproto.network_by_port\022\020\n\010cpu_idle\030\031 \003(\r"
    "\022\016\n\006uptime\030! \001(\004\022\022\n\nsystem_cpu\030\" \003(\r\022\020\n\010"
    "user_cpu\030# \003(\r\022!\n\031memory_bytes_available"
    "_kb\030$ \001(\004\022\022\n\niowait_cpu\030% \003(\r\022\020\n\010nice_cp"
    "u\030& \003(\r\022\025\n\rsystem_load_1\030) \001(\r\022\025\n\rsystem"
    "_load_5\030* \001(\r\022\026\n\016system_load_15\030+ \001(\r\"\370\005"
    "\n\007process\022-\n\007details\030\002 \001(\0132\034.draiosproto"
    ".process_details\022\"\n\032is_ipv4_transaction_"
    "server\030\003 \001(\010\022\"\n\032is_unix_transaction_serv"
    "er\030\004 \001(\010\022\"\n\032is_ipv4_transaction_client\030\n"
    " \001(\010\022\"\n\032is_unix_transaction_client\030\013 \001(\010"
    "\022\017\n\007netrole\030\r \001(\r\022/\n\ttcounters\030\005 \001(\0132\034.d"
    "raiosproto.time_categories\022E\n\024transactio"
    "n_counters\030\006 \001(\0132\'.draiosproto.counter_t"
    "ime_bidirectional\022I\n\030min_transaction_cou"
    "nters\030\022 \001(\0132\'.draiosproto.counter_time_b"
    "idirectional\022I\n\030max_transaction_counters"
    "\030\023 \001(\0132\'.draiosproto.counter_time_bidire"
    "ctional\022$\n\034transaction_processing_delay\030"
    "\007 \001(\004\022\030\n\020next_tiers_delay\030\014 \001(\004\022;\n\021resou"
    "rce_counters\030\010 \001(\0132 .draiosproto.resourc"
    "e_categories\022;\n\016syscall_errors\030\t \001(\0132#.d"
    "raiosproto.counter_syscall_errors\022\'\n\006pro"
    "tos\030\024 \001(\0132\027.draiosproto.proto_info\022\023\n\013st"
    "art_count\030\025 \001(\004\022\027\n\017count_processes\030\027 \001(\004"
    "\"\?\n\007program\022&\n\010procinfo\030\001 \002(\0132\024.draiospr"
    "oto.process\022\014\n\004pids\030\002 \003(\004\"T\n\tipv4tuple\022\013"
    "\n\003sip\030\001 \002(\r\022\013\n\003dip\030\002 \002(\r\022\r\n\005sport\030\003 \002(\r\022"
    "\r\n\005dport\030\004 \002(\r\022\017\n\007l4proto\030\005 \002(\r\"\212\001\n\017ipv4"
    "_connection\022%\n\005tuple\030\001 \002(\0132\026.draiosproto"
    ".ipv4tuple\022\014\n\004spid\030\002 \001(\004\022\014\n\004dpid\030\005 \001(\004\0224"
    "\n\010counters\030\010 \002(\0132\".draiosproto.connectio"
    "n_categories\"T\n\026ipv4_network_interface\022\014"
    "\n\004name\030\001 \002(\t\022\014\n\004addr\030\002 \002(\r\022\017\n\007netmask\030\003 "
    "\002(\r\022\r\n\005bcast\030\004 \001(\r\"\251\001\n\nmounted_fs\022\016\n\006dev"
    "ice\030\001 \002(\t\022\021\n\tmount_dir\030\002 \002(\t\022\014\n\004type\030\003 \002"
    "(\t\022\022\n\nsize_bytes\030\004 \002(\004\022\022\n\nused_bytes\030\005 \002"
    "(\004\022\027\n\017available_bytes\030\006 \002(\004\022\024\n\014total_ino"
    "des\030\n \001(\004\022\023\n\013used_inodes\030\013 \001(\004\"]\n\tfile_s"
    "tat\022\014\n\004name\030\001 \002(\t\022\r\n\005bytes\030\002 \002(\r\022\017\n\007time"
    "_ns\030\003 \002(\004\022\022\n\nopen_count\030\004 \002(\r\022\016\n\006errors\030"
    "\005 \002(\r\"j\n\026container_port_mapping\022\017\n\007host_"
    "ip\030\001 \001(\r\022\021\n\thost_port\030\002 \001(\r\022\024\n\014container"
    "_ip\030\003 \001(\r\022\026\n\016container_port\030\004 \001(\r\"-\n\017con"
    "tainer_label\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \001(\t"
    "\"\216\007\n\tcontainer\022\n\n\002id\030\001 \002(\t\022)\n\004type\030\002 \001(\016"
    "2\033.draiosproto.container_type\022\014\n\004name\030\003 "
    "\001(\t\022\r\n\005image\030\004 \001(\t\022/\n\ttcounters\030\005 \001(\0132\034."
    "draiosproto.time_categories\022B\n\013reqcounte"
    "rs\030\006 \001(\0132-.draiosproto.transaction_break"
    "down_categories\022E\n\024transaction_counters\030"
    "\007 \001(\0132\'.draiosproto.counter_time_bidirec"
    "tional\022I\n\030min_transaction_counters\030\010 \001(\013"
    "2\'.draiosproto.counter_time_bidirectiona"
    "l\022I\n\030max_transaction_counters\030\t \001(\0132\'.dr"
    "aiosproto.counter_time_bidirectional\022$\n\034"
    "transaction_processing_delay\030\n \001(\004\022\030\n\020ne"
    "xt_tiers_delay\030\014 \001(\004\022;\n\021resource_counter"
    "s\030\r \001(\0132 .draiosproto.resource_categorie"
    "s\022;\n\016syscall_errors\030\016 \001(\0132#.draiosproto."
    "counter_syscall_errors\022:\n\rport_mappings\030"
    "\022 \003(\0132#.draiosproto.container_port_mappi"
    "ng\022\'\n\006protos\030\023 \001(\0132\027.draiosproto.proto_i"
    "nfo\022,\n\006labels\030\024 \003(\0132\034.draiosproto.contai"
    "ner_label\022\'\n\006mounts\030\025 \003(\0132\027.draiosproto."
    "mounted_fs\022<\n\026network_by_serverports\030\026 \003"
    "(\0132\034.draiosproto.network_by_port\022\025\n\rmeso"
    "s_task_id\030\027 \001(\t\022\020\n\010image_id\030\030 \001(\t\"&\n\010k8s"
    "_pair\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\213\001\n\nk8"
    "s_common\022\014\n\004name\030\001 \002(\t\022\013\n\003uid\030\002 \002(\t\022\021\n\tn"
    "amespace\030\003 \001(\t\022%\n\006labels\030\004 \003(\0132\025.draiosp"
    "roto.k8s_pair\022(\n\tselectors\030\005 \003(\0132\025.draio"
    "sproto.k8s_pair\"8\n\rk8s_namespace\022\'\n\006comm"
    "on\030\001 \002(\0132\027.draiosproto.k8s_common\"E\n\010k8s"
    "_node\022\'\n\006common\030\001 \002(\0132\027.draiosproto.k8s_"
    "common\022\020\n\010host_ips\030\002 \003(\t\"\231\001\n\007k8s_pod\022\'\n\006"
    "common\030\001 \002(\0132\027.draiosproto.k8s_common\022\025\n"
    "\rcontainer_ids\030\002 \003(\t\022\021\n\tnode_name\030\003 \001(\t\022"
    "\017\n\007host_ip\030\004 \001(\t\022\023\n\013internal_ip\030\005 \001(\t\022\025\n"
    "\rrestart_count\030\006 \001(\r\"y\n\032k8s_replication_"
    "controller\022\'\n\006common\030\001 \002(\0132\027.draiosproto"
    ".k8s_common\022\030\n\020replicas_desired\030\002 \001(\r\022\030\n"
    "\020replicas_running\030\003 \001(\r\"n\n\017k8s_replica_s"
    "et\022\'\n\006common\030\001 \002(\0132\027.draiosproto.k8s_com"
    "mon\022\030\n\020replicas_desired\030\002 \001(\r\022\030\n\020replica"
    "s_running\030\003 \001(\r\"\320\001\n\013k8s_service\022\'\n\006commo"
    "n\030\001 \002(\0132\027.draiosproto.k8s_common\022\022\n\nclus"
    "ter_ip\030\002 \001(\t\0220\n\005ports\030\003 \003(\0132!.draiosprot"
    "o.k8s_service.net_port\032R\n\010net_port\022\014\n\004po"
    "rt\030\001 \002(\r\022\023\n\013target_port\030\002 \002(\r\022\020\n\010protoco"
    "l\030\003 \001(\t\022\021\n\tnode_port\030\004 \001(\r\"m\n\016k8s_deploy"
    "ment\022\'\n\006common\030\001 \002(\0132\027.draiosproto.k8s_c"
    "ommon\022\030\n\020replicas_desired\030\002 \001(\r\022\030\n\020repli"
    "cas_running\030\003 \001(\r\"n\n\rk8s_daemonset\022\'\n\006co"
    "mmon\030\001 \002(\0132\027.draiosproto.k8s_common\022\031\n\021c"
    "urrent_scheduled\030\002 \001(\r\022\031\n\021desired_schedu"
    "led\030\003 \001(\r\"\205\003\n\tk8s_state\022.\n\nnamespaces\030\001 "
    "\003(\0132\032.draiosproto.k8s_namespace\022$\n\005nodes"
    "\030\002 \003(\0132\025.draiosproto.k8s_node\022\"\n\004pods\030\003 "
    "\003(\0132\024.draiosproto.k8s_pod\022<\n\013controllers"
    "\030\004 \003(\0132\'.draiosproto.k8s_replication_con"
    "troller\022*\n\010services\030\005 \003(\0132\030.draiosproto."
    "k8s_service\0222\n\014replica_sets\030\006 \003(\0132\034.drai"
    "osproto.k8s_replica_set\0220\n\013deployments\030\007"
    " \003(\0132\033.draiosproto.k8s_deployment\022.\n\ndae"
    "monsets\030\010 \003(\0132\032.draiosproto.k8s_daemonse"
    "t\"(\n\nmesos_pair\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 "
    "\002(\t\"R\n\014mesos_common\022\013\n\003uid\030\001 \002(\t\022\014\n\004name"
    "\030\002 \001(\t\022\'\n\006labels\030\003 \003(\0132\027.draiosproto.mes"
    "os_pair\"I\n\nmesos_task\022)\n\006common\030\001 \002(\0132\031."
    "draiosproto.mesos_common\022\020\n\010slave_id\030\002 \002"
    "(\t\",\n\014marathon_app\022\n\n\002id\030\001 \002(\t\022\020\n\010task_i"
    "ds\030\002 \003(\t\"r\n\016marathon_group\022\n\n\002id\030\001 \002(\t\022\'"
    "\n\004apps\030\002 \003(\0132\031.draiosproto.marathon_app\022"
    "+\n\006groups\030\003 \003(\0132\033.draiosproto.marathon_g"
    "roup\"d\n\017mesos_framework\022)\n\006common\030\001 \002(\0132"
    "\031.draiosproto.mesos_common\022&\n\005tasks\030\002 \003("
    "\0132\027.draiosproto.mesos_task\"8\n\013mesos_slav"
    "e\022)\n\006common\030\001 \002(\0132\031.draiosproto.mesos_co"
    "mmon\"\226\001\n\013mesos_state\0220\n\nframeworks\030\001 \003(\013"
    "2\034.draiosproto.mesos_framework\022+\n\006groups"
    "\030\002 \003(\0132\033.draiosproto.marathon_group\022(\n\006s"
    "laves\030\003 \003(\0132\030.draiosproto.mesos_slave\"\266\006"
    "\n\007metrics\022\024\n\014timestamp_ns\030\001 \002(\004\022\022\n\nmachi"
    "ne_id\030\002 \002(\t\022\023\n\013customer_id\030\003 \001(\t\022\026\n\016samp"
    "ling_ratio\030\n \001(\r\022\030\n\020host_custom_name\030\013 \001"
    "(\t\022\021\n\thost_tags\030\014 \001(\t\022\026\n\016is_host_hidden\030"
    "\016 \001(\010\022\030\n\020hidden_processes\030\017 \001(\t\022\017\n\007versi"
    "on\030\020 \001(\t\022\023\n\013instance_id\030\025 \001(\t\022#\n\010hostinf"
    "o\030\004 \001(\0132\021.draiosproto.host\022&\n\010programs\030\t"
    " \003(\0132\024.draiosproto.program\0226\n\020ipv4_conne"
    "ctions\030\007 \003(\0132\034.draiosproto.ipv4_connecti"
    "on\022D\n\027ipv4_network_interfaces\030\010 \003(\0132#.dr"
    "aiosproto.ipv4_network_interface\022.\n\010comm"
    "ands\030\021 \003(\0132\034.draiosproto.command_details"
    "\022\'\n\006mounts\030\022 \003(\0132\027.draiosproto.mounted_f"
    "s\022)\n\ttop_files\030\023 \003(\0132\026.draiosproto.file_"
    "stat\022\'\n\006protos\030\024 \001(\0132\027.draiosproto.proto"
    "_info\022*\n\ncontainers\030\026 \003(\0132\026.draiosproto."
    "container\022*\n\nkubernetes\030\030 \001(\0132\026.draiospr"
    "oto.k8s_state\022\'\n\005mesos\030\031 \001(\0132\030.draiospro"
    "to.mesos_state\022(\n\006events\030\032 \003(\0132\030.draiosp"
    "roto.agent_event\022,\n\007falcobl\030\033 \001(\0132\033.drai"
    "osproto.falco_baseline\"\232\001\n\022dump_request_"
    "start\022\024\n\014timestamp_ns\030\001 \002(\004\022\022\n\nmachine_i"
    "d\030\002 \002(\t\022\023\n\013customer_id\030\003 \001(\t\022\023\n\013duration"
    "_ns\030\004 \001(\004\022\017\n\007filters\030\005 \001(\t\022\020\n\010max_size\030\007"
    " \001(\004\022\r\n\005token\030\006 \002(\t\"a\n\021dump_request_stop"
    "\022\024\n\014timestamp_ns\030\001 \002(\004\022\022\n\nmachine_id\030\002 \002"
    "(\t\022\023\n\013customer_id\030\003 \001(\t\022\r\n\005token\030\004 \002(\t\"\322"
    "\001\n\rdump_response\022\024\n\014timestamp_ns\030\001 \002(\004\022\022"
    "\n\nmachine_id\030\002 \002(\t\022\023\n\013customer_id\030\003 \001(\t\022"
    "\020\n\010chunk_no\030\007 \001(\r\022\023\n\013final_chunk\030\010 \001(\010\022\022"
    "\n\nkeep_alive\030\t \001(\010\022\017\n\007content\030\004 \001(\014\022\030\n\020f"
    "inal_size_bytes\030\n \001(\004\022\r\n\005error\030\005 \001(\t\022\r\n\005"
    "token\030\006 \002(\t\"\257\001\n\020ssh_open_channel\022\024\n\014time"
    "stamp_ns\030\001 \002(\004\022\022\n\nmachine_id\030\002 \002(\t\022\023\n\013cu"
    "stomer_id\030\003 \001(\t\022\r\n\005token\030\004 \002(\t\022\014\n\004user\030\005"
    " \002(\t\022\020\n\010password\030\006 \001(\t\022\013\n\003key\030\007 \001(\t\022\022\n\np"
    "assphrase\030\010 \001(\t\022\014\n\004port\030\t \001(\r\"\212\001\n\010ssh_da"
    "ta\022\024\n\014timestamp_ns\030\001 \002(\004\022\022\n\nmachine_id\030\002"
    " \002(\t\022\023\n\013customer_id\030\003 \001(\t\022\r\n\005token\030\004 \002(\t"
    "\022\014\n\004data\030\005 \001(\014\022\r\n\005error\030\006 \001(\t\022\023\n\013exit_st"
    "atus\030\007 \001(\005\"a\n\021ssh_close_channel\022\024\n\014times"
    "tamp_ns\030\001 \002(\004\022\022\n\nmachine_id\030\002 \002(\t\022\023\n\013cus"
    "tomer_id\030\003 \001(\t\022\r\n\005token\030\004 \002(\t\"T\n\023auto_up"
    "date_request\022\024\n\014timestamp_ns\030\001 \002(\004\022\022\n\nma"
    "chine_id\030\002 \002(\t\022\023\n\013customer_id\030\003 \001(\t\"c\n\025d"
    "irty_shutdown_report\022\024\n\014timestamp_ns\030\001 \002"
    "(\004\022\022\n\nmachine_id\030\002 \002(\t\022\023\n\013customer_id\030\003 "
    "\001(\t\022\013\n\003log\030\004 \002(\t\"\'\n\tkey_value\022\013\n\003key\030\001 \002"
    "(\t\022\r\n\005value\030\002 \002(\t\"\217\001\n\013agent_event\022\025\n\rtim"
    "estamp_sec\030\001 \001(\004\022\r\n\005scope\030\002 \001(\t\022\r\n\005title"
    "\030\003 \001(\t\022\023\n\013description\030\004 \001(\t\022\020\n\010severity\030"
    "\005 \001(\r\022$\n\004tags\030\006 \003(\0132\026.draiosproto.key_va"
    "lue\",\n\013config_file\022\014\n\004name\030\001 \001(\t\022\017\n\007cont"
    "ent\030\002 \001(\t\"=\n\013config_data\022.\n\014config_files"
    "\030\001 \003(\0132\030.draiosproto.config_file\":\n\021falc"
    "o_subcategory\022\014\n\004name\030\001 \002(\t\022\t\n\001d\030\002 \003(\t\022\014"
    "\n\004full\030\003 \001(\010\"N\n\033falco_subcategory_contai"
    "ner\022/\n\007subcats\030\001 \003(\0132\036.draiosproto.falco"
    "_subcategory\"\244\001\n\016falco_category\022\014\n\004name\030"
    "\001 \002(\t\022A\n\017startup_subcats\030\002 \003(\0132(.draiosp"
    "roto.falco_subcategory_container\022A\n\017regu"
    "lar_subcats\030\003 \003(\0132(.draiosproto.falco_su"
    "bcategory_container\"\207\001\n\nfalco_prog\022\014\n\004co"
    "mm\030\001 \002(\t\022\013\n\003exe\030\002 \002(\t\022\014\n\004args\030\003 \003(\t\022\017\n\007u"
    "ser_id\030\004 \002(\004\022\024\n\014container_id\030\005 \001(\t\022)\n\004ca"
    "ts\030\006 \003(\0132\033.draiosproto.falco_category\"Q\n"
    "\017falco_container\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \002"
    "(\t\022\022\n\nimage_name\030\003 \001(\t\022\020\n\010image_id\030\004 \001(\t"
    "\"j\n\016falco_baseline\022&\n\005progs\030\001 \003(\0132\027.drai"
    "osproto.falco_prog\0220\n\ncontainers\030\002 \003(\0132\034"
    ".draiosproto.falco_container*\346\001\n\022sql_sta"
    "tement_type\022\014\n\010SOP_NONE\020\000\022\016\n\nSOP_SELECT\020"
    "\001\022\016\n\nSOP_INSERT\020\002\022\013\n\007SOP_SET\020\003\022\016\n\nSOP_CR"
    "EATE\020\004\022\016\n\nSOP_DELETE\020\005\022\014\n\010SOP_DROP\020\006\022\017\n\013"
    "SOP_REPLACE\020\007\022\016\n\nSOP_UPDATE\020\010\022\013\n\007SOP_USE"
    "\020\t\022\014\n\010SOP_SHOW\020\n\022\014\n\010SOP_LOCK\020\013\022\016\n\nSOP_UN"
    "LOCK\020\014\022\r\n\tSOP_ALTER\020\r*\206\003\n\017mongodb_op_typ"
    "e\022\023\n\017MONGODB_OP_NONE\020\000\022\025\n\021MONGODB_OP_INS"
    "ERT\020\001\022\025\n\021MONGODB_OP_UPDATE\020\002\022\025\n\021MONGODB_"
    "OP_DELETE\020\003\022\027\n\023MONGODB_OP_GET_MORE\020\004\022\033\n\027"
    "MONGODB_OP_KILL_CURSORS\020\005\022\023\n\017MONGODB_OP_"
    "FIND\020\006\022\030\n\024MONGODB_OP_AGGREGATE\020\007\022\026\n\022MONG"
    "ODB_OP_COMMAND\020\010\022\024\n\020MONGODB_OP_COUNT\020\t\022\027"
    "\n\023MONGODB_OP_DISTINCT\020\n\022\031\n\025MONGODB_OP_MA"
    "P_REDUCE\020\013\022\027\n\023MONGODB_OP_GEO_NEAR\020\014\022\031\n\025M"
    "ONGODB_OP_GEO_SEARCH\020\r\022\036\n\032MONGODB_OP_FIN"
    "D_AND_MODIFY\020\016*G\n\004unit\022\r\n\tUNIT_NONE\020\000\022\017\n"
    "\013UNIT_SECOND\020\001\022\r\n\tUNIT_BYTE\020\002\022\020\n\014UNIT_PE"
    "RCENT\020\003*\221\002\n\005scale\022\016\n\nSCALE_NONE\020\000\022\017\n\013SCA"
    "LE_MILLI\020\001\022\017\n\013SCALE_MICRO\020\002\022\016\n\nSCALE_NAN"
    "O\020\003\022\020\n\014SCALE_MINUTE\020\004\022\016\n\nSCALE_HOUR\020\005\022\r\n"
    "\tSCALE_DAY\020\006\022\016\n\nSCALE_KILO\020\007\022\016\n\nSCALE_ME"
    "GA\020\010\022\016\n\nSCALE_GIGA\020\t\022\016\n\nSCALE_TERA\020\n\022\016\n\n"
    "SCALE_KIBI\020\013\022\016\n\nSCALE_MEBI\020\014\022\016\n\nSCALE_GI"
    "BI\020\r\022\016\n\nSCALE_TEBI\020\016\022\025\n\021SCALE_PERCENT_0_"
    "1\020\017*I\n\017jmx_metric_type\022\033\n\027JMX_METRIC_TYP"
    "E_COUNTER\020\001\022\031\n\025JMX_METRIC_TYPE_GAUGE\020\002*^"
    "\n\022statsd_metric_type\022\020\n\014STATSD_COUNT\020\001\022\024"
    "\n\020STATSD_HISTOGRAM\020\002\022\020\n\014STATSD_GAUGE\020\003\022\016"
    "\n\nSTATSD_SET\020\004*F\n\017app_metric_type\022\031\n\025APP"
    "_METRIC_TYPE_GAUGE\020\001\022\030\n\024APP_METRIC_TYPE_"
    "RATE\020\002*\201\001\n\017app_check_value\022\026\n\022APP_CHECK_"
    "VALUE_OK\020\000\022\033\n\027APP_CHECK_VALUE_WARNING\020\001\022"
    "\034\n\030APP_CHECK_VALUE_CRITICAL\020\002\022\033\n\027APP_CHE"
    "CK_VALUE_UNKNOWN\020\003*\251\001\n\013networkrole\022\010\n\004NO"
    "NE\020\000\022\030\n\024IS_LOCAL_IPV4_SERVER\020\001\022\031\n\025IS_REM"
    "OTE_IPV4_SERVER\020\002\022\022\n\016IS_UNIX_SERVER\020\004\022\030\n"
    "\024IS_LOCAL_IPV4_CLIENT\020\010\022\031\n\025IS_REMOTE_IPV"
    "4_CLIENT\020\020\022\022\n\016IS_UNIX_CLIENT\020 *\335\001\n\014messa"
    "ge_type\022\013\n\007METRICS\020\001\022\026\n\022DUMP_REQUEST_STA"
    "RT\020\002\022\025\n\021DUMP_REQUEST_STOP\020\004\022\021\n\rDUMP_RESP"
    "ONSE\020\003\022\024\n\020SSH_OPEN_CHANNEL\020\006\022\025\n\021SSH_CLOS"
    "E_CHANNEL\020\007\022\014\n\010SSH_DATA\020\010\022\027\n\023AUTO_UPDATE"
    "_REQUEST\020\t\022\031\n\025DIRTY_SHUTDOWN_REPORT\020\n\022\017\n"
    "\013CONFIG_DATA\020\013*J\n\016container_type\022\n\n\006DOCK"
    "ER\020\001\022\007\n\003LXC\020\002\022\017\n\013LIBVIRT_LXC\020\003\022\t\n\005MESOS\020"
    "\004\022\007\n\003RKT\020\005B$\n\031com.draios.model.protobufB"
    "\005AgentH\001", 16568);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "draios.proto", &protobuf_RegisterTypes);
  counter_time::default_instance_ = new counter_time();
  counter_percentile::default_instance_ = new counter_percentile();
  counter_time_bidirectional::default_instance_ = new counter_time_bidirectional();
  counter_bytes::default_instance_ = new counter_bytes();
  counter_time_bytes::default_instance_ = new counter_time_bytes();
  time_categories::default_instance_ = new time_categories();
  transaction_breakdown_categories::default_instance_ = new transaction_breakdown_categories();
  counter_syscall_errors::default_instance_ = new counter_syscall_errors();
  resource_categories::default_instance_ = new resource_categories();
  connection_categories::default_instance_ = new connection_categories();
  process_details::default_instance_ = new process_details();
  command_details::default_instance_ = new command_details();
  counter_proto_entry::default_instance_ = new counter_proto_entry();
  url_details::default_instance_ = new url_details();
  status_code_details::default_instance_ = new status_code_details();
  http_info::default_instance_ = new http_info();
  sql_entry_details::default_instance_ = new sql_entry_details();
  sql_query_type_details::default_instance_ = new sql_query_type_details();
  sql_info::default_instance_ = new sql_info();
  mongodb_collection_details::default_instance_ = new mongodb_collection_details();
  mongodb_op_type_details::default_instance_ = new mongodb_op_type_details();
  mongodb_info::default_instance_ = new mongodb_info();
  jmx_attribute::default_instance_ = new jmx_attribute();
  jmx_bean::default_instance_ = new jmx_bean();
  java_info::default_instance_ = new java_info();
  statsd_tag::default_instance_ = new statsd_tag();
  statsd_metric::default_instance_ = new statsd_metric();
  statsd_info::default_instance_ = new statsd_info();
  app_tag::default_instance_ = new app_tag();
  app_metric::default_instance_ = new app_metric();
  app_check::default_instance_ = new app_check();
  app_info::default_instance_ = new app_info();
  proto_info::default_instance_ = new proto_info();
  network_by_port::default_instance_ = new network_by_port();
  host::default_instance_ = new host();
  process::default_instance_ = new process();
  program::default_instance_ = new program();
  ipv4tuple::default_instance_ = new ipv4tuple();
  ipv4_connection::default_instance_ = new ipv4_connection();
  ipv4_network_interface::default_instance_ = new ipv4_network_interface();
  mounted_fs::default_instance_ = new mounted_fs();
  file_stat::default_instance_ = new file_stat();
  container_port_mapping::default_instance_ = new container_port_mapping();
  container_label::default_instance_ = new container_label();
  container::default_instance_ = new container();
  k8s_pair::default_instance_ = new k8s_pair();
  k8s_common::default_instance_ = new k8s_common();
  k8s_namespace::default_instance_ = new k8s_namespace();
  k8s_node::default_instance_ = new k8s_node();
  k8s_pod::default_instance_ = new k8s_pod();
  k8s_replication_controller::default_instance_ = new k8s_replication_controller();
  k8s_replica_set::default_instance_ = new k8s_replica_set();
  k8s_service::default_instance_ = new k8s_service();
  k8s_service_net_port::default_instance_ = new k8s_service_net_port();
  k8s_deployment::default_instance_ = new k8s_deployment();
  k8s_daemonset::default_instance_ = new k8s_daemonset();
  k8s_state::default_instance_ = new k8s_state();
  mesos_pair::default_instance_ = new mesos_pair();
  mesos_common::default_instance_ = new mesos_common();
  mesos_task::default_instance_ = new mesos_task();
  marathon_app::default_instance_ = new marathon_app();
  marathon_group::default_instance_ = new marathon_group();
  mesos_framework::default_instance_ = new mesos_framework();
  mesos_slave::default_instance_ = new mesos_slave();
  mesos_state::default_instance_ = new mesos_state();
  metrics::default_instance_ = new metrics();
  dump_request_start::default_instance_ = new dump_request_start();
  dump_request_stop::default_instance_ = new dump_request_stop();
  dump_response::default_instance_ = new dump_response();
  ssh_open_channel::default_instance_ = new ssh_open_channel();
  ssh_data::default_instance_ = new ssh_data();
  ssh_close_channel::default_instance_ = new ssh_close_channel();
  auto_update_request::default_instance_ = new auto_update_request();
  dirty_shutdown_report::default_instance_ = new dirty_shutdown_report();
  key_value::default_instance_ = new key_value();
  agent_event::default_instance_ = new agent_event();
  config_file::default_instance_ = new config_file();
  config_data::default_instance_ = new config_data();
  falco_subcategory::default_instance_ = new falco_subcategory();
  falco_subcategory_container::default_instance_ = new falco_subcategory_container();
  falco_category::default_instance_ = new falco_category();
  falco_prog::default_instance_ = new falco_prog();
  falco_container::default_instance_ = new falco_container();
  falco_baseline::default_instance_ = new falco_baseline();
  counter_time::default_instance_->InitAsDefaultInstance();
  counter_percentile::default_instance_->InitAsDefaultInstance();
  counter_time_bidirectional::default_instance_->InitAsDefaultInstance();
  counter_bytes::default_instance_->InitAsDefaultInstance();
  counter_time_bytes::default_instance_->InitAsDefaultInstance();
  time_categories::default_instance_->InitAsDefaultInstance();
  transaction_breakdown_categories::default_instance_->InitAsDefaultInstance();
  counter_syscall_errors::default_instance_->InitAsDefaultInstance();
  resource_categories::default_instance_->InitAsDefaultInstance();
  connection_categories::default_instance_->InitAsDefaultInstance();
  process_details::default_instance_->InitAsDefaultInstance();
  command_details::default_instance_->InitAsDefaultInstance();
  counter_proto_entry::default_instance_->InitAsDefaultInstance();
  url_details::default_instance_->InitAsDefaultInstance();
  status_code_details::default_instance_->InitAsDefaultInstance();
  http_info::default_instance_->InitAsDefaultInstance();
  sql_entry_details::default_instance_->InitAsDefaultInstance();
  sql_query_type_details::default_instance_->InitAsDefaultInstance();
  sql_info::default_instance_->InitAsDefaultInstance();
  mongodb_collection_details::default_instance_->InitAsDefaultInstance();
  mongodb_op_type_details::default_instance_->InitAsDefaultInstance();
  mongodb_info::default_instance_->InitAsDefaultInstance();
  jmx_attribute::default_instance_->InitAsDefaultInstance();
  jmx_bean::default_instance_->InitAsDefaultInstance();
  java_info::default_instance_->InitAsDefaultInstance();
  statsd_tag::default_instance_->InitAsDefaultInstance();
  statsd_metric::default_instance_->InitAsDefaultInstance();
  statsd_info::default_instance_->InitAsDefaultInstance();
  app_tag::default_instance_->InitAsDefaultInstance();
  app_metric::default_instance_->InitAsDefaultInstance();
  app_check::default_instance_->InitAsDefaultInstance();
  app_info::default_instance_->InitAsDefaultInstance();
  proto_info::default_instance_->InitAsDefaultInstance();
  network_by_port::default_instance_->InitAsDefaultInstance();
  host::default_instance_->InitAsDefaultInstance();
  process::default_instance_->InitAsDefaultInstance();
  program::default_instance_->InitAsDefaultInstance();
  ipv4tuple::default_instance_->InitAsDefaultInstance();
  ipv4_connection::default_instance_->InitAsDefaultInstance();
  ipv4_network_interface::default_instance_->InitAsDefaultInstance();
  mounted_fs::default_instance_->InitAsDefaultInstance();
  file_stat::default_instance_->InitAsDefaultInstance();
  container_port_mapping::default_instance_->InitAsDefaultInstance();
  container_label::default_instance_->InitAsDefaultInstance();
  container::default_instance_->InitAsDefaultInstance();
  k8s_pair::default_instance_->InitAsDefaultInstance();
  k8s_common::default_instance_->InitAsDefaultInstance();
  k8s_namespace::default_instance_->InitAsDefaultInstance();
  k8s_node::default_instance_->InitAsDefaultInstance();
  k8s_pod::default_instance_->InitAsDefaultInstance();
  k8s_replication_controller::default_instance_->InitAsDefaultInstance();
  k8s_replica_set::default_instance_->InitAsDefaultInstance();
  k8s_service::default_instance_->InitAsDefaultInstance();
  k8s_service_net_port::default_instance_->InitAsDefaultInstance();
  k8s_deployment::default_instance_->InitAsDefaultInstance();
  k8s_daemonset::default_instance_->InitAsDefaultInstance();
  k8s_state::default_instance_->InitAsDefaultInstance();
  mesos_pair::default_instance_->InitAsDefaultInstance();
  mesos_common::default_instance_->InitAsDefaultInstance();
  mesos_task::default_instance_->InitAsDefaultInstance();
  marathon_app::default_instance_->InitAsDefaultInstance();
  marathon_group::default_instance_->InitAsDefaultInstance();
  mesos_framework::default_instance_->InitAsDefaultInstance();
  mesos_slave::default_instance_->InitAsDefaultInstance();
  mesos_state::default_instance_->InitAsDefaultInstance();
  metrics::default_instance_->InitAsDefaultInstance();
  dump_request_start::default_instance_->InitAsDefaultInstance();
  dump_request_stop::default_instance_->InitAsDefaultInstance();
  dump_response::default_instance_->InitAsDefaultInstance();
  ssh_open_channel::default_instance_->InitAsDefaultInstance();
  ssh_data::default_instance_->InitAsDefaultInstance();
  ssh_close_channel::default_instance_->InitAsDefaultInstance();
  auto_update_request::default_instance_->InitAsDefaultInstance();
  dirty_shutdown_report::default_instance_->InitAsDefaultInstance();
  key_value::default_instance_->InitAsDefaultInstance();
  agent_event::default_instance_->InitAsDefaultInstance();
  config_file::default_instance_->InitAsDefaultInstance();
  config_data::default_instance_->InitAsDefaultInstance();
  falco_subcategory::default_instance_->InitAsDefaultInstance();
  falco_subcategory_container::default_instance_->InitAsDefaultInstance();
  falco_category::default_instance_->InitAsDefaultInstance();
  falco_prog::default_instance_->InitAsDefaultInstance();
  falco_container::default_instance_->InitAsDefaultInstance();
  falco_baseline::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_draios_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_draios_2eproto {
  StaticDescriptorInitializer_draios_2eproto() {
    protobuf_AddDesc_draios_2eproto();
  }
} static_descriptor_initializer_draios_2eproto_;
const ::google::protobuf::EnumDescriptor* sql_statement_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_statement_type_descriptor_;
}
bool sql_statement_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* mongodb_op_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mongodb_op_type_descriptor_;
}
bool mongodb_op_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* unit_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_descriptor_;
}
bool unit_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* scale_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scale_descriptor_;
}
bool scale_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* jmx_metric_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return jmx_metric_type_descriptor_;
}
bool jmx_metric_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* statsd_metric_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statsd_metric_type_descriptor_;
}
bool statsd_metric_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* app_metric_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return app_metric_type_descriptor_;
}
bool app_metric_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* app_check_value_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return app_check_value_descriptor_;
}
bool app_check_value_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* networkrole_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return networkrole_descriptor_;
}
bool networkrole_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* message_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return message_type_descriptor_;
}
bool message_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* container_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return container_type_descriptor_;
}
bool container_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int counter_time::kCountFieldNumber;
const int counter_time::kTimeNsFieldNumber;
const int counter_time::kTimePercentageFieldNumber;
#endif  // !_MSC_VER

counter_time::counter_time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void counter_time::InitAsDefaultInstance() {
}

counter_time::counter_time(const counter_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void counter_time::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  time_ns_ = GOOGLE_ULONGLONG(0);
  time_percentage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

counter_time::~counter_time() {
  SharedDtor();
}

void counter_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void counter_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_time_descriptor_;
}

const counter_time& counter_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

counter_time* counter_time::default_instance_ = NULL;

counter_time* counter_time::New() const {
  return new counter_time;
}

void counter_time::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
    time_ns_ = GOOGLE_ULONGLONG(0);
    time_percentage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool counter_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_ns;
        break;
      }

      // required uint64 time_ns = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_)));
          set_has_time_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_percentage;
        break;
      }

      // optional uint32 time_percentage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_percentage_)));
          set_has_time_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void counter_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // required uint64 time_ns = 2;
  if (has_time_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time_ns(), output);
  }

  // optional uint32 time_percentage = 3;
  if (has_time_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_percentage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* counter_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // required uint64 time_ns = 2;
  if (has_time_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time_ns(), target);
  }

  // optional uint32 time_percentage = 3;
  if (has_time_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_percentage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int counter_time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint64 time_ns = 2;
    if (has_time_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_ns());
    }

    // optional uint32 time_percentage = 3;
    if (has_time_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_percentage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const counter_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const counter_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void counter_time::MergeFrom(const counter_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_time_ns()) {
      set_time_ns(from.time_ns());
    }
    if (from.has_time_percentage()) {
      set_time_percentage(from.time_percentage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void counter_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_time::CopyFrom(const counter_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool counter_time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void counter_time::Swap(counter_time* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(time_ns_, other->time_ns_);
    std::swap(time_percentage_, other->time_percentage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata counter_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_time_descriptor_;
  metadata.reflection = counter_time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int counter_percentile::kPercentileFieldNumber;
const int counter_percentile::kValueFieldNumber;
#endif  // !_MSC_VER

counter_percentile::counter_percentile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void counter_percentile::InitAsDefaultInstance() {
}

counter_percentile::counter_percentile(const counter_percentile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void counter_percentile::SharedCtor() {
  _cached_size_ = 0;
  percentile_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

counter_percentile::~counter_percentile() {
  SharedDtor();
}

void counter_percentile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void counter_percentile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_percentile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_percentile_descriptor_;
}

const counter_percentile& counter_percentile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

counter_percentile* counter_percentile::default_instance_ = NULL;

counter_percentile* counter_percentile::New() const {
  return new counter_percentile;
}

void counter_percentile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    percentile_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool counter_percentile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 percentile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &percentile_)));
          set_has_percentile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void counter_percentile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 percentile = 1;
  if (has_percentile()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->percentile(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* counter_percentile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 percentile = 1;
  if (has_percentile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->percentile(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int counter_percentile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 percentile = 1;
    if (has_percentile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->percentile());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_percentile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const counter_percentile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const counter_percentile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void counter_percentile::MergeFrom(const counter_percentile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_percentile()) {
      set_percentile(from.percentile());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void counter_percentile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_percentile::CopyFrom(const counter_percentile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool counter_percentile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void counter_percentile::Swap(counter_percentile* other) {
  if (other != this) {
    std::swap(percentile_, other->percentile_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata counter_percentile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_percentile_descriptor_;
  metadata.reflection = counter_percentile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int counter_time_bidirectional::kCountInFieldNumber;
const int counter_time_bidirectional::kCountOutFieldNumber;
const int counter_time_bidirectional::kTimeNsInFieldNumber;
const int counter_time_bidirectional::kTimeNsOutFieldNumber;
const int counter_time_bidirectional::kPercentileInFieldNumber;
const int counter_time_bidirectional::kPercentileOutFieldNumber;
#endif  // !_MSC_VER

counter_time_bidirectional::counter_time_bidirectional()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void counter_time_bidirectional::InitAsDefaultInstance() {
}

counter_time_bidirectional::counter_time_bidirectional(const counter_time_bidirectional& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void counter_time_bidirectional::SharedCtor() {
  _cached_size_ = 0;
  count_in_ = 0u;
  count_out_ = 0u;
  time_ns_in_ = GOOGLE_ULONGLONG(0);
  time_ns_out_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

counter_time_bidirectional::~counter_time_bidirectional() {
  SharedDtor();
}

void counter_time_bidirectional::SharedDtor() {
  if (this != default_instance_) {
  }
}

void counter_time_bidirectional::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_time_bidirectional::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_time_bidirectional_descriptor_;
}

const counter_time_bidirectional& counter_time_bidirectional::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

counter_time_bidirectional* counter_time_bidirectional::default_instance_ = NULL;

counter_time_bidirectional* counter_time_bidirectional::New() const {
  return new counter_time_bidirectional;
}

void counter_time_bidirectional::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_in_ = 0u;
    count_out_ = 0u;
    time_ns_in_ = GOOGLE_ULONGLONG(0);
    time_ns_out_ = GOOGLE_ULONGLONG(0);
  }
  percentile_in_.Clear();
  percentile_out_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool counter_time_bidirectional::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count_in = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_in_)));
          set_has_count_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_out;
        break;
      }

      // required uint32 count_out = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_out_)));
          set_has_count_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_ns_in;
        break;
      }

      // required uint64 time_ns_in = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_ns_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_in_)));
          set_has_time_ns_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time_ns_out;
        break;
      }

      // required uint64 time_ns_out = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_ns_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_out_)));
          set_has_time_ns_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_percentile_in;
        break;
      }

      // repeated .draiosproto.counter_percentile percentile_in = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_percentile_in:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_percentile_in()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_percentile_in;
        if (input->ExpectTag(50)) goto parse_percentile_out;
        break;
      }

      // repeated .draiosproto.counter_percentile percentile_out = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_percentile_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_percentile_out()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_percentile_out;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void counter_time_bidirectional::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count_in = 1;
  if (has_count_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count_in(), output);
  }

  // required uint32 count_out = 2;
  if (has_count_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count_out(), output);
  }

  // required uint64 time_ns_in = 3;
  if (has_time_ns_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_ns_in(), output);
  }

  // required uint64 time_ns_out = 4;
  if (has_time_ns_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time_ns_out(), output);
  }

  // repeated .draiosproto.counter_percentile percentile_in = 5;
  for (int i = 0; i < this->percentile_in_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->percentile_in(i), output);
  }

  // repeated .draiosproto.counter_percentile percentile_out = 6;
  for (int i = 0; i < this->percentile_out_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->percentile_out(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* counter_time_bidirectional::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count_in = 1;
  if (has_count_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count_in(), target);
  }

  // required uint32 count_out = 2;
  if (has_count_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count_out(), target);
  }

  // required uint64 time_ns_in = 3;
  if (has_time_ns_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time_ns_in(), target);
  }

  // required uint64 time_ns_out = 4;
  if (has_time_ns_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time_ns_out(), target);
  }

  // repeated .draiosproto.counter_percentile percentile_in = 5;
  for (int i = 0; i < this->percentile_in_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->percentile_in(i), target);
  }

  // repeated .draiosproto.counter_percentile percentile_out = 6;
  for (int i = 0; i < this->percentile_out_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->percentile_out(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int counter_time_bidirectional::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count_in = 1;
    if (has_count_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_in());
    }

    // required uint32 count_out = 2;
    if (has_count_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_out());
    }

    // required uint64 time_ns_in = 3;
    if (has_time_ns_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_ns_in());
    }

    // required uint64 time_ns_out = 4;
    if (has_time_ns_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_ns_out());
    }

  }
  // repeated .draiosproto.counter_percentile percentile_in = 5;
  total_size += 1 * this->percentile_in_size();
  for (int i = 0; i < this->percentile_in_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->percentile_in(i));
  }

  // repeated .draiosproto.counter_percentile percentile_out = 6;
  total_size += 1 * this->percentile_out_size();
  for (int i = 0; i < this->percentile_out_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->percentile_out(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_time_bidirectional::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const counter_time_bidirectional* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const counter_time_bidirectional*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void counter_time_bidirectional::MergeFrom(const counter_time_bidirectional& from) {
  GOOGLE_CHECK_NE(&from, this);
  percentile_in_.MergeFrom(from.percentile_in_);
  percentile_out_.MergeFrom(from.percentile_out_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count_in()) {
      set_count_in(from.count_in());
    }
    if (from.has_count_out()) {
      set_count_out(from.count_out());
    }
    if (from.has_time_ns_in()) {
      set_time_ns_in(from.time_ns_in());
    }
    if (from.has_time_ns_out()) {
      set_time_ns_out(from.time_ns_out());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void counter_time_bidirectional::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_time_bidirectional::CopyFrom(const counter_time_bidirectional& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool counter_time_bidirectional::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < percentile_in_size(); i++) {
    if (!this->percentile_in(i).IsInitialized()) return false;
  }
  for (int i = 0; i < percentile_out_size(); i++) {
    if (!this->percentile_out(i).IsInitialized()) return false;
  }
  return true;
}

void counter_time_bidirectional::Swap(counter_time_bidirectional* other) {
  if (other != this) {
    std::swap(count_in_, other->count_in_);
    std::swap(count_out_, other->count_out_);
    std::swap(time_ns_in_, other->time_ns_in_);
    std::swap(time_ns_out_, other->time_ns_out_);
    percentile_in_.Swap(&other->percentile_in_);
    percentile_out_.Swap(&other->percentile_out_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata counter_time_bidirectional::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_time_bidirectional_descriptor_;
  metadata.reflection = counter_time_bidirectional_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int counter_bytes::kCountInFieldNumber;
const int counter_bytes::kCountOutFieldNumber;
const int counter_bytes::kBytesInFieldNumber;
const int counter_bytes::kBytesOutFieldNumber;
#endif  // !_MSC_VER

counter_bytes::counter_bytes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void counter_bytes::InitAsDefaultInstance() {
}

counter_bytes::counter_bytes(const counter_bytes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void counter_bytes::SharedCtor() {
  _cached_size_ = 0;
  count_in_ = 0u;
  count_out_ = 0u;
  bytes_in_ = 0u;
  bytes_out_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

counter_bytes::~counter_bytes() {
  SharedDtor();
}

void counter_bytes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void counter_bytes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_bytes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_bytes_descriptor_;
}

const counter_bytes& counter_bytes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

counter_bytes* counter_bytes::default_instance_ = NULL;

counter_bytes* counter_bytes::New() const {
  return new counter_bytes;
}

void counter_bytes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_in_ = 0u;
    count_out_ = 0u;
    bytes_in_ = 0u;
    bytes_out_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool counter_bytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count_in = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_in_)));
          set_has_count_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_out;
        break;
      }

      // required uint32 count_out = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_out_)));
          set_has_count_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bytes_in;
        break;
      }

      // required uint32 bytes_in = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_in_)));
          set_has_bytes_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bytes_out;
        break;
      }

      // required uint32 bytes_out = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_out_)));
          set_has_bytes_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void counter_bytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count_in = 1;
  if (has_count_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count_in(), output);
  }

  // required uint32 count_out = 2;
  if (has_count_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count_out(), output);
  }

  // required uint32 bytes_in = 3;
  if (has_bytes_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bytes_in(), output);
  }

  // required uint32 bytes_out = 4;
  if (has_bytes_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bytes_out(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* counter_bytes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count_in = 1;
  if (has_count_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count_in(), target);
  }

  // required uint32 count_out = 2;
  if (has_count_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count_out(), target);
  }

  // required uint32 bytes_in = 3;
  if (has_bytes_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bytes_in(), target);
  }

  // required uint32 bytes_out = 4;
  if (has_bytes_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bytes_out(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int counter_bytes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count_in = 1;
    if (has_count_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_in());
    }

    // required uint32 count_out = 2;
    if (has_count_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_out());
    }

    // required uint32 bytes_in = 3;
    if (has_bytes_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_in());
    }

    // required uint32 bytes_out = 4;
    if (has_bytes_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_out());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_bytes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const counter_bytes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const counter_bytes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void counter_bytes::MergeFrom(const counter_bytes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count_in()) {
      set_count_in(from.count_in());
    }
    if (from.has_count_out()) {
      set_count_out(from.count_out());
    }
    if (from.has_bytes_in()) {
      set_bytes_in(from.bytes_in());
    }
    if (from.has_bytes_out()) {
      set_bytes_out(from.bytes_out());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void counter_bytes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_bytes::CopyFrom(const counter_bytes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool counter_bytes::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void counter_bytes::Swap(counter_bytes* other) {
  if (other != this) {
    std::swap(count_in_, other->count_in_);
    std::swap(count_out_, other->count_out_);
    std::swap(bytes_in_, other->bytes_in_);
    std::swap(bytes_out_, other->bytes_out_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata counter_bytes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_bytes_descriptor_;
  metadata.reflection = counter_bytes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int counter_time_bytes::kTimeNsInFieldNumber;
const int counter_time_bytes::kTimeNsOutFieldNumber;
const int counter_time_bytes::kTimeNsOtherFieldNumber;
const int counter_time_bytes::kCountInFieldNumber;
const int counter_time_bytes::kCountOutFieldNumber;
const int counter_time_bytes::kCountOtherFieldNumber;
const int counter_time_bytes::kBytesInFieldNumber;
const int counter_time_bytes::kBytesOutFieldNumber;
const int counter_time_bytes::kBytesOtherFieldNumber;
const int counter_time_bytes::kTimePercentageInFieldNumber;
const int counter_time_bytes::kTimePercentageOutFieldNumber;
const int counter_time_bytes::kTimePercentageOtherFieldNumber;
#endif  // !_MSC_VER

counter_time_bytes::counter_time_bytes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void counter_time_bytes::InitAsDefaultInstance() {
}

counter_time_bytes::counter_time_bytes(const counter_time_bytes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void counter_time_bytes::SharedCtor() {
  _cached_size_ = 0;
  time_ns_in_ = GOOGLE_ULONGLONG(0);
  time_ns_out_ = GOOGLE_ULONGLONG(0);
  time_ns_other_ = GOOGLE_ULONGLONG(0);
  count_in_ = 0u;
  count_out_ = 0u;
  count_other_ = 0u;
  bytes_in_ = 0u;
  bytes_out_ = 0u;
  bytes_other_ = 0u;
  time_percentage_in_ = 0u;
  time_percentage_out_ = 0u;
  time_percentage_other_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

counter_time_bytes::~counter_time_bytes() {
  SharedDtor();
}

void counter_time_bytes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void counter_time_bytes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_time_bytes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_time_bytes_descriptor_;
}

const counter_time_bytes& counter_time_bytes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

counter_time_bytes* counter_time_bytes::default_instance_ = NULL;

counter_time_bytes* counter_time_bytes::New() const {
  return new counter_time_bytes;
}

void counter_time_bytes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ns_in_ = GOOGLE_ULONGLONG(0);
    time_ns_out_ = GOOGLE_ULONGLONG(0);
    time_ns_other_ = GOOGLE_ULONGLONG(0);
    count_in_ = 0u;
    count_out_ = 0u;
    count_other_ = 0u;
    bytes_in_ = 0u;
    bytes_out_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bytes_other_ = 0u;
    time_percentage_in_ = 0u;
    time_percentage_out_ = 0u;
    time_percentage_other_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool counter_time_bytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time_ns_in = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_in_)));
          set_has_time_ns_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_ns_out;
        break;
      }

      // required uint64 time_ns_out = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_ns_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_out_)));
          set_has_time_ns_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_ns_other;
        break;
      }

      // required uint64 time_ns_other = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_ns_other:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_other_)));
          set_has_time_ns_other();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count_in;
        break;
      }

      // required uint32 count_in = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_in_)));
          set_has_count_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count_out;
        break;
      }

      // required uint32 count_out = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_out_)));
          set_has_count_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count_other;
        break;
      }

      // required uint32 count_other = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_other:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_other_)));
          set_has_count_other();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bytes_in;
        break;
      }

      // required uint32 bytes_in = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_in_)));
          set_has_bytes_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bytes_out;
        break;
      }

      // required uint32 bytes_out = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_out_)));
          set_has_bytes_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bytes_other;
        break;
      }

      // required uint32 bytes_other = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_other:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_other_)));
          set_has_bytes_other();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_time_percentage_in;
        break;
      }

      // optional uint32 time_percentage_in = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_percentage_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_percentage_in_)));
          set_has_time_percentage_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_time_percentage_out;
        break;
      }

      // optional uint32 time_percentage_out = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_percentage_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_percentage_out_)));
          set_has_time_percentage_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_time_percentage_other;
        break;
      }

      // optional uint32 time_percentage_other = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_percentage_other:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_percentage_other_)));
          set_has_time_percentage_other();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void counter_time_bytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 time_ns_in = 1;
  if (has_time_ns_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_ns_in(), output);
  }

  // required uint64 time_ns_out = 2;
  if (has_time_ns_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time_ns_out(), output);
  }

  // required uint64 time_ns_other = 3;
  if (has_time_ns_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_ns_other(), output);
  }

  // required uint32 count_in = 4;
  if (has_count_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count_in(), output);
  }

  // required uint32 count_out = 5;
  if (has_count_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count_out(), output);
  }

  // required uint32 count_other = 6;
  if (has_count_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count_other(), output);
  }

  // required uint32 bytes_in = 7;
  if (has_bytes_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bytes_in(), output);
  }

  // required uint32 bytes_out = 8;
  if (has_bytes_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bytes_out(), output);
  }

  // required uint32 bytes_other = 9;
  if (has_bytes_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->bytes_other(), output);
  }

  // optional uint32 time_percentage_in = 10;
  if (has_time_percentage_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->time_percentage_in(), output);
  }

  // optional uint32 time_percentage_out = 11;
  if (has_time_percentage_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->time_percentage_out(), output);
  }

  // optional uint32 time_percentage_other = 12;
  if (has_time_percentage_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->time_percentage_other(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* counter_time_bytes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 time_ns_in = 1;
  if (has_time_ns_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_ns_in(), target);
  }

  // required uint64 time_ns_out = 2;
  if (has_time_ns_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time_ns_out(), target);
  }

  // required uint64 time_ns_other = 3;
  if (has_time_ns_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time_ns_other(), target);
  }

  // required uint32 count_in = 4;
  if (has_count_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count_in(), target);
  }

  // required uint32 count_out = 5;
  if (has_count_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count_out(), target);
  }

  // required uint32 count_other = 6;
  if (has_count_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count_other(), target);
  }

  // required uint32 bytes_in = 7;
  if (has_bytes_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bytes_in(), target);
  }

  // required uint32 bytes_out = 8;
  if (has_bytes_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bytes_out(), target);
  }

  // required uint32 bytes_other = 9;
  if (has_bytes_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->bytes_other(), target);
  }

  // optional uint32 time_percentage_in = 10;
  if (has_time_percentage_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->time_percentage_in(), target);
  }

  // optional uint32 time_percentage_out = 11;
  if (has_time_percentage_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->time_percentage_out(), target);
  }

  // optional uint32 time_percentage_other = 12;
  if (has_time_percentage_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->time_percentage_other(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int counter_time_bytes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time_ns_in = 1;
    if (has_time_ns_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_ns_in());
    }

    // required uint64 time_ns_out = 2;
    if (has_time_ns_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_ns_out());
    }

    // required uint64 time_ns_other = 3;
    if (has_time_ns_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_ns_other());
    }

    // required uint32 count_in = 4;
    if (has_count_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_in());
    }

    // required uint32 count_out = 5;
    if (has_count_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_out());
    }

    // required uint32 count_other = 6;
    if (has_count_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_other());
    }

    // required uint32 bytes_in = 7;
    if (has_bytes_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_in());
    }

    // required uint32 bytes_out = 8;
    if (has_bytes_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_out());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 bytes_other = 9;
    if (has_bytes_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_other());
    }

    // optional uint32 time_percentage_in = 10;
    if (has_time_percentage_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_percentage_in());
    }

    // optional uint32 time_percentage_out = 11;
    if (has_time_percentage_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_percentage_out());
    }

    // optional uint32 time_percentage_other = 12;
    if (has_time_percentage_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_percentage_other());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_time_bytes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const counter_time_bytes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const counter_time_bytes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void counter_time_bytes::MergeFrom(const counter_time_bytes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_ns_in()) {
      set_time_ns_in(from.time_ns_in());
    }
    if (from.has_time_ns_out()) {
      set_time_ns_out(from.time_ns_out());
    }
    if (from.has_time_ns_other()) {
      set_time_ns_other(from.time_ns_other());
    }
    if (from.has_count_in()) {
      set_count_in(from.count_in());
    }
    if (from.has_count_out()) {
      set_count_out(from.count_out());
    }
    if (from.has_count_other()) {
      set_count_other(from.count_other());
    }
    if (from.has_bytes_in()) {
      set_bytes_in(from.bytes_in());
    }
    if (from.has_bytes_out()) {
      set_bytes_out(from.bytes_out());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bytes_other()) {
      set_bytes_other(from.bytes_other());
    }
    if (from.has_time_percentage_in()) {
      set_time_percentage_in(from.time_percentage_in());
    }
    if (from.has_time_percentage_out()) {
      set_time_percentage_out(from.time_percentage_out());
    }
    if (from.has_time_percentage_other()) {
      set_time_percentage_other(from.time_percentage_other());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void counter_time_bytes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_time_bytes::CopyFrom(const counter_time_bytes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool counter_time_bytes::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void counter_time_bytes::Swap(counter_time_bytes* other) {
  if (other != this) {
    std::swap(time_ns_in_, other->time_ns_in_);
    std::swap(time_ns_out_, other->time_ns_out_);
    std::swap(time_ns_other_, other->time_ns_other_);
    std::swap(count_in_, other->count_in_);
    std::swap(count_out_, other->count_out_);
    std::swap(count_other_, other->count_other_);
    std::swap(bytes_in_, other->bytes_in_);
    std::swap(bytes_out_, other->bytes_out_);
    std::swap(bytes_other_, other->bytes_other_);
    std::swap(time_percentage_in_, other->time_percentage_in_);
    std::swap(time_percentage_out_, other->time_percentage_out_);
    std::swap(time_percentage_other_, other->time_percentage_other_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata counter_time_bytes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_time_bytes_descriptor_;
  metadata.reflection = counter_time_bytes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int time_categories::kUnknownFieldNumber;
const int time_categories::kOtherFieldNumber;
const int time_categories::kFileFieldNumber;
const int time_categories::kNetFieldNumber;
const int time_categories::kIpcFieldNumber;
const int time_categories::kMemoryFieldNumber;
const int time_categories::kProcessFieldNumber;
const int time_categories::kSleepFieldNumber;
const int time_categories::kSystemFieldNumber;
const int time_categories::kSignalFieldNumber;
const int time_categories::kUserFieldNumber;
const int time_categories::kTimeFieldNumber;
const int time_categories::kIoFileFieldNumber;
const int time_categories::kIoNetFieldNumber;
const int time_categories::kIoOtherFieldNumber;
const int time_categories::kWaitFieldNumber;
const int time_categories::kProcessingFieldNumber;
#endif  // !_MSC_VER

time_categories::time_categories()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void time_categories::InitAsDefaultInstance() {
  unknown_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  other_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  file_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  net_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  ipc_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  memory_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  process_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  sleep_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  system_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  signal_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  user_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  time_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  io_file_ = const_cast< ::draiosproto::counter_time_bytes*>(&::draiosproto::counter_time_bytes::default_instance());
  io_net_ = const_cast< ::draiosproto::counter_time_bytes*>(&::draiosproto::counter_time_bytes::default_instance());
  io_other_ = const_cast< ::draiosproto::counter_time_bytes*>(&::draiosproto::counter_time_bytes::default_instance());
  wait_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  processing_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
}

time_categories::time_categories(const time_categories& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void time_categories::SharedCtor() {
  _cached_size_ = 0;
  unknown_ = NULL;
  other_ = NULL;
  file_ = NULL;
  net_ = NULL;
  ipc_ = NULL;
  memory_ = NULL;
  process_ = NULL;
  sleep_ = NULL;
  system_ = NULL;
  signal_ = NULL;
  user_ = NULL;
  time_ = NULL;
  io_file_ = NULL;
  io_net_ = NULL;
  io_other_ = NULL;
  wait_ = NULL;
  processing_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

time_categories::~time_categories() {
  SharedDtor();
}

void time_categories::SharedDtor() {
  if (this != default_instance_) {
    delete unknown_;
    delete other_;
    delete file_;
    delete net_;
    delete ipc_;
    delete memory_;
    delete process_;
    delete sleep_;
    delete system_;
    delete signal_;
    delete user_;
    delete time_;
    delete io_file_;
    delete io_net_;
    delete io_other_;
    delete wait_;
    delete processing_;
  }
}

void time_categories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* time_categories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return time_categories_descriptor_;
}

const time_categories& time_categories::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

time_categories* time_categories::default_instance_ = NULL;

time_categories* time_categories::New() const {
  return new time_categories;
}

void time_categories::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unknown()) {
      if (unknown_ != NULL) unknown_->::draiosproto::counter_time::Clear();
    }
    if (has_other()) {
      if (other_ != NULL) other_->::draiosproto::counter_time::Clear();
    }
    if (has_file()) {
      if (file_ != NULL) file_->::draiosproto::counter_time::Clear();
    }
    if (has_net()) {
      if (net_ != NULL) net_->::draiosproto::counter_time::Clear();
    }
    if (has_ipc()) {
      if (ipc_ != NULL) ipc_->::draiosproto::counter_time::Clear();
    }
    if (has_memory()) {
      if (memory_ != NULL) memory_->::draiosproto::counter_time::Clear();
    }
    if (has_process()) {
      if (process_ != NULL) process_->::draiosproto::counter_time::Clear();
    }
    if (has_sleep()) {
      if (sleep_ != NULL) sleep_->::draiosproto::counter_time::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_system()) {
      if (system_ != NULL) system_->::draiosproto::counter_time::Clear();
    }
    if (has_signal()) {
      if (signal_ != NULL) signal_->::draiosproto::counter_time::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::draiosproto::counter_time::Clear();
    }
    if (has_time()) {
      if (time_ != NULL) time_->::draiosproto::counter_time::Clear();
    }
    if (has_io_file()) {
      if (io_file_ != NULL) io_file_->::draiosproto::counter_time_bytes::Clear();
    }
    if (has_io_net()) {
      if (io_net_ != NULL) io_net_->::draiosproto::counter_time_bytes::Clear();
    }
    if (has_io_other()) {
      if (io_other_ != NULL) io_other_->::draiosproto::counter_time_bytes::Clear();
    }
    if (has_wait()) {
      if (wait_ != NULL) wait_->::draiosproto::counter_time::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_processing()) {
      if (processing_ != NULL) processing_->::draiosproto::counter_time::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool time_categories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .draiosproto.counter_time unknown = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unknown()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_other;
        break;
      }

      // optional .draiosproto.counter_time other = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file;
        break;
      }

      // optional .draiosproto.counter_time file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_net;
        break;
      }

      // optional .draiosproto.counter_time net = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ipc;
        break;
      }

      // optional .draiosproto.counter_time ipc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_memory;
        break;
      }

      // optional .draiosproto.counter_time memory = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_process;
        break;
      }

      // optional .draiosproto.counter_time process = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_process()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sleep;
        break;
      }

      // optional .draiosproto.counter_time sleep = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sleep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sleep()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_system;
        break;
      }

      // optional .draiosproto.counter_time system = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_signal;
        break;
      }

      // optional .draiosproto.counter_time signal = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_user;
        break;
      }

      // optional .draiosproto.counter_time user = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_time;
        break;
      }

      // optional .draiosproto.counter_time time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_io_file;
        break;
      }

      // optional .draiosproto.counter_time_bytes io_file = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_io_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_io_net;
        break;
      }

      // optional .draiosproto.counter_time_bytes io_net = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_io_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_net()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_io_other;
        break;
      }

      // optional .draiosproto.counter_time_bytes io_other = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_io_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_other()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_wait;
        break;
      }

      // optional .draiosproto.counter_time wait = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wait()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_processing;
        break;
      }

      // optional .draiosproto.counter_time processing = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void time_categories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .draiosproto.counter_time unknown = 1;
  if (has_unknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unknown(), output);
  }

  // optional .draiosproto.counter_time other = 2;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->other(), output);
  }

  // optional .draiosproto.counter_time file = 3;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->file(), output);
  }

  // optional .draiosproto.counter_time net = 4;
  if (has_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->net(), output);
  }

  // optional .draiosproto.counter_time ipc = 5;
  if (has_ipc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ipc(), output);
  }

  // optional .draiosproto.counter_time memory = 6;
  if (has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->memory(), output);
  }

  // optional .draiosproto.counter_time process = 7;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->process(), output);
  }

  // optional .draiosproto.counter_time sleep = 8;
  if (has_sleep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sleep(), output);
  }

  // optional .draiosproto.counter_time system = 9;
  if (has_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->system(), output);
  }

  // optional .draiosproto.counter_time signal = 10;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->signal(), output);
  }

  // optional .draiosproto.counter_time user = 11;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->user(), output);
  }

  // optional .draiosproto.counter_time time = 12;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->time(), output);
  }

  // optional .draiosproto.counter_time_bytes io_file = 13;
  if (has_io_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->io_file(), output);
  }

  // optional .draiosproto.counter_time_bytes io_net = 14;
  if (has_io_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->io_net(), output);
  }

  // optional .draiosproto.counter_time_bytes io_other = 15;
  if (has_io_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->io_other(), output);
  }

  // optional .draiosproto.counter_time wait = 16;
  if (has_wait()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->wait(), output);
  }

  // optional .draiosproto.counter_time processing = 17;
  if (has_processing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->processing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* time_categories::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .draiosproto.counter_time unknown = 1;
  if (has_unknown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unknown(), target);
  }

  // optional .draiosproto.counter_time other = 2;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->other(), target);
  }

  // optional .draiosproto.counter_time file = 3;
  if (has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->file(), target);
  }

  // optional .draiosproto.counter_time net = 4;
  if (has_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->net(), target);
  }

  // optional .draiosproto.counter_time ipc = 5;
  if (has_ipc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ipc(), target);
  }

  // optional .draiosproto.counter_time memory = 6;
  if (has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->memory(), target);
  }

  // optional .draiosproto.counter_time process = 7;
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->process(), target);
  }

  // optional .draiosproto.counter_time sleep = 8;
  if (has_sleep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->sleep(), target);
  }

  // optional .draiosproto.counter_time system = 9;
  if (has_system()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->system(), target);
  }

  // optional .draiosproto.counter_time signal = 10;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->signal(), target);
  }

  // optional .draiosproto.counter_time user = 11;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->user(), target);
  }

  // optional .draiosproto.counter_time time = 12;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->time(), target);
  }

  // optional .draiosproto.counter_time_bytes io_file = 13;
  if (has_io_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->io_file(), target);
  }

  // optional .draiosproto.counter_time_bytes io_net = 14;
  if (has_io_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->io_net(), target);
  }

  // optional .draiosproto.counter_time_bytes io_other = 15;
  if (has_io_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->io_other(), target);
  }

  // optional .draiosproto.counter_time wait = 16;
  if (has_wait()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->wait(), target);
  }

  // optional .draiosproto.counter_time processing = 17;
  if (has_processing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->processing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int time_categories::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .draiosproto.counter_time unknown = 1;
    if (has_unknown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unknown());
    }

    // optional .draiosproto.counter_time other = 2;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other());
    }

    // optional .draiosproto.counter_time file = 3;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }

    // optional .draiosproto.counter_time net = 4;
    if (has_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->net());
    }

    // optional .draiosproto.counter_time ipc = 5;
    if (has_ipc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ipc());
    }

    // optional .draiosproto.counter_time memory = 6;
    if (has_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memory());
    }

    // optional .draiosproto.counter_time process = 7;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->process());
    }

    // optional .draiosproto.counter_time sleep = 8;
    if (has_sleep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sleep());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .draiosproto.counter_time system = 9;
    if (has_system()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->system());
    }

    // optional .draiosproto.counter_time signal = 10;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal());
    }

    // optional .draiosproto.counter_time user = 11;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .draiosproto.counter_time time = 12;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // optional .draiosproto.counter_time_bytes io_file = 13;
    if (has_io_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->io_file());
    }

    // optional .draiosproto.counter_time_bytes io_net = 14;
    if (has_io_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->io_net());
    }

    // optional .draiosproto.counter_time_bytes io_other = 15;
    if (has_io_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->io_other());
    }

    // optional .draiosproto.counter_time wait = 16;
    if (has_wait()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wait());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .draiosproto.counter_time processing = 17;
    if (has_processing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->processing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void time_categories::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const time_categories* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const time_categories*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void time_categories::MergeFrom(const time_categories& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unknown()) {
      mutable_unknown()->::draiosproto::counter_time::MergeFrom(from.unknown());
    }
    if (from.has_other()) {
      mutable_other()->::draiosproto::counter_time::MergeFrom(from.other());
    }
    if (from.has_file()) {
      mutable_file()->::draiosproto::counter_time::MergeFrom(from.file());
    }
    if (from.has_net()) {
      mutable_net()->::draiosproto::counter_time::MergeFrom(from.net());
    }
    if (from.has_ipc()) {
      mutable_ipc()->::draiosproto::counter_time::MergeFrom(from.ipc());
    }
    if (from.has_memory()) {
      mutable_memory()->::draiosproto::counter_time::MergeFrom(from.memory());
    }
    if (from.has_process()) {
      mutable_process()->::draiosproto::counter_time::MergeFrom(from.process());
    }
    if (from.has_sleep()) {
      mutable_sleep()->::draiosproto::counter_time::MergeFrom(from.sleep());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_system()) {
      mutable_system()->::draiosproto::counter_time::MergeFrom(from.system());
    }
    if (from.has_signal()) {
      mutable_signal()->::draiosproto::counter_time::MergeFrom(from.signal());
    }
    if (from.has_user()) {
      mutable_user()->::draiosproto::counter_time::MergeFrom(from.user());
    }
    if (from.has_time()) {
      mutable_time()->::draiosproto::counter_time::MergeFrom(from.time());
    }
    if (from.has_io_file()) {
      mutable_io_file()->::draiosproto::counter_time_bytes::MergeFrom(from.io_file());
    }
    if (from.has_io_net()) {
      mutable_io_net()->::draiosproto::counter_time_bytes::MergeFrom(from.io_net());
    }
    if (from.has_io_other()) {
      mutable_io_other()->::draiosproto::counter_time_bytes::MergeFrom(from.io_other());
    }
    if (from.has_wait()) {
      mutable_wait()->::draiosproto::counter_time::MergeFrom(from.wait());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_processing()) {
      mutable_processing()->::draiosproto::counter_time::MergeFrom(from.processing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void time_categories::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void time_categories::CopyFrom(const time_categories& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool time_categories::IsInitialized() const {

  if (has_unknown()) {
    if (!this->unknown().IsInitialized()) return false;
  }
  if (has_other()) {
    if (!this->other().IsInitialized()) return false;
  }
  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  if (has_net()) {
    if (!this->net().IsInitialized()) return false;
  }
  if (has_ipc()) {
    if (!this->ipc().IsInitialized()) return false;
  }
  if (has_memory()) {
    if (!this->memory().IsInitialized()) return false;
  }
  if (has_process()) {
    if (!this->process().IsInitialized()) return false;
  }
  if (has_sleep()) {
    if (!this->sleep().IsInitialized()) return false;
  }
  if (has_system()) {
    if (!this->system().IsInitialized()) return false;
  }
  if (has_signal()) {
    if (!this->signal().IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  if (has_io_file()) {
    if (!this->io_file().IsInitialized()) return false;
  }
  if (has_io_net()) {
    if (!this->io_net().IsInitialized()) return false;
  }
  if (has_io_other()) {
    if (!this->io_other().IsInitialized()) return false;
  }
  if (has_wait()) {
    if (!this->wait().IsInitialized()) return false;
  }
  if (has_processing()) {
    if (!this->processing().IsInitialized()) return false;
  }
  return true;
}

void time_categories::Swap(time_categories* other) {
  if (other != this) {
    std::swap(unknown_, other->unknown_);
    std::swap(other_, other->other_);
    std::swap(file_, other->file_);
    std::swap(net_, other->net_);
    std::swap(ipc_, other->ipc_);
    std::swap(memory_, other->memory_);
    std::swap(process_, other->process_);
    std::swap(sleep_, other->sleep_);
    std::swap(system_, other->system_);
    std::swap(signal_, other->signal_);
    std::swap(user_, other->user_);
    std::swap(time_, other->time_);
    std::swap(io_file_, other->io_file_);
    std::swap(io_net_, other->io_net_);
    std::swap(io_other_, other->io_other_);
    std::swap(wait_, other->wait_);
    std::swap(processing_, other->processing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata time_categories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = time_categories_descriptor_;
  metadata.reflection = time_categories_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int transaction_breakdown_categories::kOtherFieldNumber;
const int transaction_breakdown_categories::kIoFileFieldNumber;
const int transaction_breakdown_categories::kIoNetFieldNumber;
const int transaction_breakdown_categories::kProcessingFieldNumber;
#endif  // !_MSC_VER

transaction_breakdown_categories::transaction_breakdown_categories()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void transaction_breakdown_categories::InitAsDefaultInstance() {
  other_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  io_file_ = const_cast< ::draiosproto::counter_time_bytes*>(&::draiosproto::counter_time_bytes::default_instance());
  io_net_ = const_cast< ::draiosproto::counter_time_bytes*>(&::draiosproto::counter_time_bytes::default_instance());
  processing_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
}

transaction_breakdown_categories::transaction_breakdown_categories(const transaction_breakdown_categories& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void transaction_breakdown_categories::SharedCtor() {
  _cached_size_ = 0;
  other_ = NULL;
  io_file_ = NULL;
  io_net_ = NULL;
  processing_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

transaction_breakdown_categories::~transaction_breakdown_categories() {
  SharedDtor();
}

void transaction_breakdown_categories::SharedDtor() {
  if (this != default_instance_) {
    delete other_;
    delete io_file_;
    delete io_net_;
    delete processing_;
  }
}

void transaction_breakdown_categories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* transaction_breakdown_categories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return transaction_breakdown_categories_descriptor_;
}

const transaction_breakdown_categories& transaction_breakdown_categories::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

transaction_breakdown_categories* transaction_breakdown_categories::default_instance_ = NULL;

transaction_breakdown_categories* transaction_breakdown_categories::New() const {
  return new transaction_breakdown_categories;
}

void transaction_breakdown_categories::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_other()) {
      if (other_ != NULL) other_->::draiosproto::counter_time::Clear();
    }
    if (has_io_file()) {
      if (io_file_ != NULL) io_file_->::draiosproto::counter_time_bytes::Clear();
    }
    if (has_io_net()) {
      if (io_net_ != NULL) io_net_->::draiosproto::counter_time_bytes::Clear();
    }
    if (has_processing()) {
      if (processing_ != NULL) processing_->::draiosproto::counter_time::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool transaction_breakdown_categories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .draiosproto.counter_time other = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_io_file;
        break;
      }

      // optional .draiosproto.counter_time_bytes io_file = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_io_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_io_net;
        break;
      }

      // optional .draiosproto.counter_time_bytes io_net = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_io_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_net()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_processing;
        break;
      }

      // optional .draiosproto.counter_time processing = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void transaction_breakdown_categories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .draiosproto.counter_time other = 2;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->other(), output);
  }

  // optional .draiosproto.counter_time_bytes io_file = 13;
  if (has_io_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->io_file(), output);
  }

  // optional .draiosproto.counter_time_bytes io_net = 14;
  if (has_io_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->io_net(), output);
  }

  // optional .draiosproto.counter_time processing = 17;
  if (has_processing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->processing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* transaction_breakdown_categories::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .draiosproto.counter_time other = 2;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->other(), target);
  }

  // optional .draiosproto.counter_time_bytes io_file = 13;
  if (has_io_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->io_file(), target);
  }

  // optional .draiosproto.counter_time_bytes io_net = 14;
  if (has_io_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->io_net(), target);
  }

  // optional .draiosproto.counter_time processing = 17;
  if (has_processing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->processing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int transaction_breakdown_categories::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .draiosproto.counter_time other = 2;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other());
    }

    // optional .draiosproto.counter_time_bytes io_file = 13;
    if (has_io_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->io_file());
    }

    // optional .draiosproto.counter_time_bytes io_net = 14;
    if (has_io_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->io_net());
    }

    // optional .draiosproto.counter_time processing = 17;
    if (has_processing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->processing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void transaction_breakdown_categories::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const transaction_breakdown_categories* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const transaction_breakdown_categories*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void transaction_breakdown_categories::MergeFrom(const transaction_breakdown_categories& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_other()) {
      mutable_other()->::draiosproto::counter_time::MergeFrom(from.other());
    }
    if (from.has_io_file()) {
      mutable_io_file()->::draiosproto::counter_time_bytes::MergeFrom(from.io_file());
    }
    if (from.has_io_net()) {
      mutable_io_net()->::draiosproto::counter_time_bytes::MergeFrom(from.io_net());
    }
    if (from.has_processing()) {
      mutable_processing()->::draiosproto::counter_time::MergeFrom(from.processing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void transaction_breakdown_categories::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transaction_breakdown_categories::CopyFrom(const transaction_breakdown_categories& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_breakdown_categories::IsInitialized() const {

  if (has_other()) {
    if (!this->other().IsInitialized()) return false;
  }
  if (has_io_file()) {
    if (!this->io_file().IsInitialized()) return false;
  }
  if (has_io_net()) {
    if (!this->io_net().IsInitialized()) return false;
  }
  if (has_processing()) {
    if (!this->processing().IsInitialized()) return false;
  }
  return true;
}

void transaction_breakdown_categories::Swap(transaction_breakdown_categories* other) {
  if (other != this) {
    std::swap(other_, other->other_);
    std::swap(io_file_, other->io_file_);
    std::swap(io_net_, other->io_net_);
    std::swap(processing_, other->processing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata transaction_breakdown_categories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = transaction_breakdown_categories_descriptor_;
  metadata.reflection = transaction_breakdown_categories_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int counter_syscall_errors::kCountFieldNumber;
const int counter_syscall_errors::kTopErrorCodesFieldNumber;
const int counter_syscall_errors::kCountFileFieldNumber;
const int counter_syscall_errors::kCountFileOpenFieldNumber;
const int counter_syscall_errors::kCountNetFieldNumber;
#endif  // !_MSC_VER

counter_syscall_errors::counter_syscall_errors()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void counter_syscall_errors::InitAsDefaultInstance() {
}

counter_syscall_errors::counter_syscall_errors(const counter_syscall_errors& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void counter_syscall_errors::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  count_file_ = 0u;
  count_file_open_ = 0u;
  count_net_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

counter_syscall_errors::~counter_syscall_errors() {
  SharedDtor();
}

void counter_syscall_errors::SharedDtor() {
  if (this != default_instance_) {
  }
}

void counter_syscall_errors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_syscall_errors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_syscall_errors_descriptor_;
}

const counter_syscall_errors& counter_syscall_errors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

counter_syscall_errors* counter_syscall_errors::default_instance_ = NULL;

counter_syscall_errors* counter_syscall_errors::New() const {
  return new counter_syscall_errors;
}

void counter_syscall_errors::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
    count_file_ = 0u;
    count_file_open_ = 0u;
    count_net_ = 0u;
  }
  top_error_codes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool counter_syscall_errors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_top_error_codes;
        break;
      }

      // repeated uint32 top_error_codes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_error_codes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_top_error_codes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_top_error_codes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_top_error_codes;
        if (input->ExpectTag(32)) goto parse_count_file;
        break;
      }

      // optional uint32 count_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_file_)));
          set_has_count_file();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count_file_open;
        break;
      }

      // optional uint32 count_file_open = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_file_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_file_open_)));
          set_has_count_file_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count_net;
        break;
      }

      // optional uint32 count_net = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_net:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_net_)));
          set_has_count_net();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void counter_syscall_errors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated uint32 top_error_codes = 2;
  for (int i = 0; i < this->top_error_codes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->top_error_codes(i), output);
  }

  // optional uint32 count_file = 4;
  if (has_count_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count_file(), output);
  }

  // optional uint32 count_file_open = 5;
  if (has_count_file_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count_file_open(), output);
  }

  // optional uint32 count_net = 6;
  if (has_count_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count_net(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* counter_syscall_errors::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated uint32 top_error_codes = 2;
  for (int i = 0; i < this->top_error_codes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->top_error_codes(i), target);
  }

  // optional uint32 count_file = 4;
  if (has_count_file()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count_file(), target);
  }

  // optional uint32 count_file_open = 5;
  if (has_count_file_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count_file_open(), target);
  }

  // optional uint32 count_net = 6;
  if (has_count_net()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count_net(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int counter_syscall_errors::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 count_file = 4;
    if (has_count_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_file());
    }

    // optional uint32 count_file_open = 5;
    if (has_count_file_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_file_open());
    }

    // optional uint32 count_net = 6;
    if (has_count_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_net());
    }

  }
  // repeated uint32 top_error_codes = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->top_error_codes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->top_error_codes(i));
    }
    total_size += 1 * this->top_error_codes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_syscall_errors::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const counter_syscall_errors* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const counter_syscall_errors*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void counter_syscall_errors::MergeFrom(const counter_syscall_errors& from) {
  GOOGLE_CHECK_NE(&from, this);
  top_error_codes_.MergeFrom(from.top_error_codes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_count_file()) {
      set_count_file(from.count_file());
    }
    if (from.has_count_file_open()) {
      set_count_file_open(from.count_file_open());
    }
    if (from.has_count_net()) {
      set_count_net(from.count_net());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void counter_syscall_errors::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_syscall_errors::CopyFrom(const counter_syscall_errors& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool counter_syscall_errors::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void counter_syscall_errors::Swap(counter_syscall_errors* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    top_error_codes_.Swap(&other->top_error_codes_);
    std::swap(count_file_, other->count_file_);
    std::swap(count_file_open_, other->count_file_open_);
    std::swap(count_net_, other->count_net_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata counter_syscall_errors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_syscall_errors_descriptor_;
  metadata.reflection = counter_syscall_errors_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int resource_categories::kCapacityScoreFieldNumber;
const int resource_categories::kStolenCapacityScoreFieldNumber;
const int resource_categories::kConnectionQueueUsagePctFieldNumber;
const int resource_categories::kFdUsagePctFieldNumber;
const int resource_categories::kCpuPctFieldNumber;
const int resource_categories::kResidentMemoryUsageKbFieldNumber;
const int resource_categories::kVirtualMemoryUsageKbFieldNumber;
const int resource_categories::kSwapMemoryUsageKbFieldNumber;
const int resource_categories::kMajorPagefaultsFieldNumber;
const int resource_categories::kMinorPagefaultsFieldNumber;
const int resource_categories::kFdCountFieldNumber;
const int resource_categories::kCpuSharesFieldNumber;
const int resource_categories::kCpuSharesUsagePctFieldNumber;
const int resource_categories::kMemoryLimitKbFieldNumber;
const int resource_categories::kSwapLimitKbFieldNumber;
const int resource_categories::kCpuQuotaUsedPctFieldNumber;
const int resource_categories::kSwapMemoryTotalKbFieldNumber;
const int resource_categories::kSwapMemoryAvailableKbFieldNumber;
const int resource_categories::kCountProcessesFieldNumber;
const int resource_categories::kProcStartCountFieldNumber;
#endif  // !_MSC_VER

resource_categories::resource_categories()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void resource_categories::InitAsDefaultInstance() {
}

resource_categories::resource_categories(const resource_categories& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void resource_categories::SharedCtor() {
  _cached_size_ = 0;
  capacity_score_ = 0u;
  stolen_capacity_score_ = 0u;
  connection_queue_usage_pct_ = 0u;
  fd_usage_pct_ = 0u;
  cpu_pct_ = 0u;
  resident_memory_usage_kb_ = 0u;
  virtual_memory_usage_kb_ = 0u;
  swap_memory_usage_kb_ = 0u;
  major_pagefaults_ = GOOGLE_ULONGLONG(0);
  minor_pagefaults_ = GOOGLE_ULONGLONG(0);
  fd_count_ = 0u;
  cpu_shares_ = 0u;
  cpu_shares_usage_pct_ = 0u;
  memory_limit_kb_ = 0u;
  swap_limit_kb_ = 0u;
  cpu_quota_used_pct_ = 0u;
  swap_memory_total_kb_ = 0u;
  swap_memory_available_kb_ = 0u;
  count_processes_ = GOOGLE_ULONGLONG(0);
  proc_start_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

resource_categories::~resource_categories() {
  SharedDtor();
}

void resource_categories::SharedDtor() {
  if (this != default_instance_) {
  }
}

void resource_categories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* resource_categories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return resource_categories_descriptor_;
}

const resource_categories& resource_categories::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

resource_categories* resource_categories::default_instance_ = NULL;

resource_categories* resource_categories::New() const {
  return new resource_categories;
}

void resource_categories::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    capacity_score_ = 0u;
    stolen_capacity_score_ = 0u;
    connection_queue_usage_pct_ = 0u;
    fd_usage_pct_ = 0u;
    cpu_pct_ = 0u;
    resident_memory_usage_kb_ = 0u;
    virtual_memory_usage_kb_ = 0u;
    swap_memory_usage_kb_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    major_pagefaults_ = GOOGLE_ULONGLONG(0);
    minor_pagefaults_ = GOOGLE_ULONGLONG(0);
    fd_count_ = 0u;
    cpu_shares_ = 0u;
    cpu_shares_usage_pct_ = 0u;
    memory_limit_kb_ = 0u;
    swap_limit_kb_ = 0u;
    cpu_quota_used_pct_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    swap_memory_total_kb_ = 0u;
    swap_memory_available_kb_ = 0u;
    count_processes_ = GOOGLE_ULONGLONG(0);
    proc_start_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool resource_categories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 capacity_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_score_)));
          set_has_capacity_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_connection_queue_usage_pct;
        break;
      }

      // optional uint32 connection_queue_usage_pct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connection_queue_usage_pct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connection_queue_usage_pct_)));
          set_has_connection_queue_usage_pct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fd_usage_pct;
        break;
      }

      // optional uint32 fd_usage_pct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd_usage_pct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fd_usage_pct_)));
          set_has_fd_usage_pct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cpu_pct;
        break;
      }

      // optional uint32 cpu_pct = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_pct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_pct_)));
          set_has_cpu_pct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resident_memory_usage_kb;
        break;
      }

      // optional uint32 resident_memory_usage_kb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resident_memory_usage_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resident_memory_usage_kb_)));
          set_has_resident_memory_usage_kb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stolen_capacity_score;
        break;
      }

      // optional uint32 stolen_capacity_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stolen_capacity_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stolen_capacity_score_)));
          set_has_stolen_capacity_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_virtual_memory_usage_kb;
        break;
      }

      // optional uint32 virtual_memory_usage_kb = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_virtual_memory_usage_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &virtual_memory_usage_kb_)));
          set_has_virtual_memory_usage_kb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_swap_memory_usage_kb;
        break;
      }

      // optional uint32 swap_memory_usage_kb = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swap_memory_usage_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swap_memory_usage_kb_)));
          set_has_swap_memory_usage_kb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_major_pagefaults;
        break;
      }

      // optional uint64 major_pagefaults = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_major_pagefaults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &major_pagefaults_)));
          set_has_major_pagefaults();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_minor_pagefaults;
        break;
      }

      // optional uint64 minor_pagefaults = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor_pagefaults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minor_pagefaults_)));
          set_has_minor_pagefaults();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fd_count;
        break;
      }

      // optional uint32 fd_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fd_count_)));
          set_has_fd_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_cpu_shares;
        break;
      }

      // optional uint32 cpu_shares = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_shares:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_shares_)));
          set_has_cpu_shares();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_cpu_shares_usage_pct;
        break;
      }

      // optional uint32 cpu_shares_usage_pct = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_shares_usage_pct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_shares_usage_pct_)));
          set_has_cpu_shares_usage_pct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_memory_limit_kb;
        break;
      }

      // optional uint32 memory_limit_kb = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memory_limit_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memory_limit_kb_)));
          set_has_memory_limit_kb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_swap_limit_kb;
        break;
      }

      // optional uint32 swap_limit_kb = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swap_limit_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swap_limit_kb_)));
          set_has_swap_limit_kb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_cpu_quota_used_pct;
        break;
      }

      // optional uint32 cpu_quota_used_pct = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_quota_used_pct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_quota_used_pct_)));
          set_has_cpu_quota_used_pct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_swap_memory_total_kb;
        break;
      }

      // optional uint32 swap_memory_total_kb = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swap_memory_total_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swap_memory_total_kb_)));
          set_has_swap_memory_total_kb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_swap_memory_available_kb;
        break;
      }

      // optional uint32 swap_memory_available_kb = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swap_memory_available_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swap_memory_available_kb_)));
          set_has_swap_memory_available_kb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_count_processes;
        break;
      }

      // optional uint64 count_processes = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_processes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_processes_)));
          set_has_count_processes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_proc_start_count;
        break;
      }

      // optional uint64 proc_start_count = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_start_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_start_count_)));
          set_has_proc_start_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void resource_categories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 capacity_score = 1;
  if (has_capacity_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->capacity_score(), output);
  }

  // optional uint32 connection_queue_usage_pct = 2;
  if (has_connection_queue_usage_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->connection_queue_usage_pct(), output);
  }

  // optional uint32 fd_usage_pct = 3;
  if (has_fd_usage_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fd_usage_pct(), output);
  }

  // optional uint32 cpu_pct = 4;
  if (has_cpu_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cpu_pct(), output);
  }

  // optional uint32 resident_memory_usage_kb = 5;
  if (has_resident_memory_usage_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resident_memory_usage_kb(), output);
  }

  // optional uint32 stolen_capacity_score = 6;
  if (has_stolen_capacity_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stolen_capacity_score(), output);
  }

  // optional uint32 virtual_memory_usage_kb = 13;
  if (has_virtual_memory_usage_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->virtual_memory_usage_kb(), output);
  }

  // optional uint32 swap_memory_usage_kb = 14;
  if (has_swap_memory_usage_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->swap_memory_usage_kb(), output);
  }

  // optional uint64 major_pagefaults = 15;
  if (has_major_pagefaults()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->major_pagefaults(), output);
  }

  // optional uint64 minor_pagefaults = 16;
  if (has_minor_pagefaults()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->minor_pagefaults(), output);
  }

  // optional uint32 fd_count = 21;
  if (has_fd_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->fd_count(), output);
  }

  // optional uint32 cpu_shares = 24;
  if (has_cpu_shares()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->cpu_shares(), output);
  }

  // optional uint32 cpu_shares_usage_pct = 25;
  if (has_cpu_shares_usage_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->cpu_shares_usage_pct(), output);
  }

  // optional uint32 memory_limit_kb = 26;
  if (has_memory_limit_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->memory_limit_kb(), output);
  }

  // optional uint32 swap_limit_kb = 27;
  if (has_swap_limit_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->swap_limit_kb(), output);
  }

  // optional uint32 cpu_quota_used_pct = 28;
  if (has_cpu_quota_used_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->cpu_quota_used_pct(), output);
  }

  // optional uint32 swap_memory_total_kb = 29;
  if (has_swap_memory_total_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->swap_memory_total_kb(), output);
  }

  // optional uint32 swap_memory_available_kb = 30;
  if (has_swap_memory_available_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->swap_memory_available_kb(), output);
  }

  // optional uint64 count_processes = 31;
  if (has_count_processes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->count_processes(), output);
  }

  // optional uint64 proc_start_count = 32;
  if (has_proc_start_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->proc_start_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* resource_categories::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 capacity_score = 1;
  if (has_capacity_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->capacity_score(), target);
  }

  // optional uint32 connection_queue_usage_pct = 2;
  if (has_connection_queue_usage_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->connection_queue_usage_pct(), target);
  }

  // optional uint32 fd_usage_pct = 3;
  if (has_fd_usage_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fd_usage_pct(), target);
  }

  // optional uint32 cpu_pct = 4;
  if (has_cpu_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cpu_pct(), target);
  }

  // optional uint32 resident_memory_usage_kb = 5;
  if (has_resident_memory_usage_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resident_memory_usage_kb(), target);
  }

  // optional uint32 stolen_capacity_score = 6;
  if (has_stolen_capacity_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stolen_capacity_score(), target);
  }

  // optional uint32 virtual_memory_usage_kb = 13;
  if (has_virtual_memory_usage_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->virtual_memory_usage_kb(), target);
  }

  // optional uint32 swap_memory_usage_kb = 14;
  if (has_swap_memory_usage_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->swap_memory_usage_kb(), target);
  }

  // optional uint64 major_pagefaults = 15;
  if (has_major_pagefaults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->major_pagefaults(), target);
  }

  // optional uint64 minor_pagefaults = 16;
  if (has_minor_pagefaults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->minor_pagefaults(), target);
  }

  // optional uint32 fd_count = 21;
  if (has_fd_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->fd_count(), target);
  }

  // optional uint32 cpu_shares = 24;
  if (has_cpu_shares()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->cpu_shares(), target);
  }

  // optional uint32 cpu_shares_usage_pct = 25;
  if (has_cpu_shares_usage_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->cpu_shares_usage_pct(), target);
  }

  // optional uint32 memory_limit_kb = 26;
  if (has_memory_limit_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->memory_limit_kb(), target);
  }

  // optional uint32 swap_limit_kb = 27;
  if (has_swap_limit_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->swap_limit_kb(), target);
  }

  // optional uint32 cpu_quota_used_pct = 28;
  if (has_cpu_quota_used_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->cpu_quota_used_pct(), target);
  }

  // optional uint32 swap_memory_total_kb = 29;
  if (has_swap_memory_total_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->swap_memory_total_kb(), target);
  }

  // optional uint32 swap_memory_available_kb = 30;
  if (has_swap_memory_available_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->swap_memory_available_kb(), target);
  }

  // optional uint64 count_processes = 31;
  if (has_count_processes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->count_processes(), target);
  }

  // optional uint64 proc_start_count = 32;
  if (has_proc_start_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->proc_start_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int resource_categories::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 capacity_score = 1;
    if (has_capacity_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capacity_score());
    }

    // optional uint32 stolen_capacity_score = 6;
    if (has_stolen_capacity_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stolen_capacity_score());
    }

    // optional uint32 connection_queue_usage_pct = 2;
    if (has_connection_queue_usage_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connection_queue_usage_pct());
    }

    // optional uint32 fd_usage_pct = 3;
    if (has_fd_usage_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fd_usage_pct());
    }

    // optional uint32 cpu_pct = 4;
    if (has_cpu_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_pct());
    }

    // optional uint32 resident_memory_usage_kb = 5;
    if (has_resident_memory_usage_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resident_memory_usage_kb());
    }

    // optional uint32 virtual_memory_usage_kb = 13;
    if (has_virtual_memory_usage_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->virtual_memory_usage_kb());
    }

    // optional uint32 swap_memory_usage_kb = 14;
    if (has_swap_memory_usage_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->swap_memory_usage_kb());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 major_pagefaults = 15;
    if (has_major_pagefaults()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->major_pagefaults());
    }

    // optional uint64 minor_pagefaults = 16;
    if (has_minor_pagefaults()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->minor_pagefaults());
    }

    // optional uint32 fd_count = 21;
    if (has_fd_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fd_count());
    }

    // optional uint32 cpu_shares = 24;
    if (has_cpu_shares()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_shares());
    }

    // optional uint32 cpu_shares_usage_pct = 25;
    if (has_cpu_shares_usage_pct()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_shares_usage_pct());
    }

    // optional uint32 memory_limit_kb = 26;
    if (has_memory_limit_kb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memory_limit_kb());
    }

    // optional uint32 swap_limit_kb = 27;
    if (has_swap_limit_kb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->swap_limit_kb());
    }

    // optional uint32 cpu_quota_used_pct = 28;
    if (has_cpu_quota_used_pct()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_quota_used_pct());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 swap_memory_total_kb = 29;
    if (has_swap_memory_total_kb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->swap_memory_total_kb());
    }

    // optional uint32 swap_memory_available_kb = 30;
    if (has_swap_memory_available_kb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->swap_memory_available_kb());
    }

    // optional uint64 count_processes = 31;
    if (has_count_processes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count_processes());
    }

    // optional uint64 proc_start_count = 32;
    if (has_proc_start_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_start_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void resource_categories::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const resource_categories* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const resource_categories*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void resource_categories::MergeFrom(const resource_categories& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_capacity_score()) {
      set_capacity_score(from.capacity_score());
    }
    if (from.has_stolen_capacity_score()) {
      set_stolen_capacity_score(from.stolen_capacity_score());
    }
    if (from.has_connection_queue_usage_pct()) {
      set_connection_queue_usage_pct(from.connection_queue_usage_pct());
    }
    if (from.has_fd_usage_pct()) {
      set_fd_usage_pct(from.fd_usage_pct());
    }
    if (from.has_cpu_pct()) {
      set_cpu_pct(from.cpu_pct());
    }
    if (from.has_resident_memory_usage_kb()) {
      set_resident_memory_usage_kb(from.resident_memory_usage_kb());
    }
    if (from.has_virtual_memory_usage_kb()) {
      set_virtual_memory_usage_kb(from.virtual_memory_usage_kb());
    }
    if (from.has_swap_memory_usage_kb()) {
      set_swap_memory_usage_kb(from.swap_memory_usage_kb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_major_pagefaults()) {
      set_major_pagefaults(from.major_pagefaults());
    }
    if (from.has_minor_pagefaults()) {
      set_minor_pagefaults(from.minor_pagefaults());
    }
    if (from.has_fd_count()) {
      set_fd_count(from.fd_count());
    }
    if (from.has_cpu_shares()) {
      set_cpu_shares(from.cpu_shares());
    }
    if (from.has_cpu_shares_usage_pct()) {
      set_cpu_shares_usage_pct(from.cpu_shares_usage_pct());
    }
    if (from.has_memory_limit_kb()) {
      set_memory_limit_kb(from.memory_limit_kb());
    }
    if (from.has_swap_limit_kb()) {
      set_swap_limit_kb(from.swap_limit_kb());
    }
    if (from.has_cpu_quota_used_pct()) {
      set_cpu_quota_used_pct(from.cpu_quota_used_pct());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_swap_memory_total_kb()) {
      set_swap_memory_total_kb(from.swap_memory_total_kb());
    }
    if (from.has_swap_memory_available_kb()) {
      set_swap_memory_available_kb(from.swap_memory_available_kb());
    }
    if (from.has_count_processes()) {
      set_count_processes(from.count_processes());
    }
    if (from.has_proc_start_count()) {
      set_proc_start_count(from.proc_start_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void resource_categories::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void resource_categories::CopyFrom(const resource_categories& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool resource_categories::IsInitialized() const {

  return true;
}

void resource_categories::Swap(resource_categories* other) {
  if (other != this) {
    std::swap(capacity_score_, other->capacity_score_);
    std::swap(stolen_capacity_score_, other->stolen_capacity_score_);
    std::swap(connection_queue_usage_pct_, other->connection_queue_usage_pct_);
    std::swap(fd_usage_pct_, other->fd_usage_pct_);
    std::swap(cpu_pct_, other->cpu_pct_);
    std::swap(resident_memory_usage_kb_, other->resident_memory_usage_kb_);
    std::swap(virtual_memory_usage_kb_, other->virtual_memory_usage_kb_);
    std::swap(swap_memory_usage_kb_, other->swap_memory_usage_kb_);
    std::swap(major_pagefaults_, other->major_pagefaults_);
    std::swap(minor_pagefaults_, other->minor_pagefaults_);
    std::swap(fd_count_, other->fd_count_);
    std::swap(cpu_shares_, other->cpu_shares_);
    std::swap(cpu_shares_usage_pct_, other->cpu_shares_usage_pct_);
    std::swap(memory_limit_kb_, other->memory_limit_kb_);
    std::swap(swap_limit_kb_, other->swap_limit_kb_);
    std::swap(cpu_quota_used_pct_, other->cpu_quota_used_pct_);
    std::swap(swap_memory_total_kb_, other->swap_memory_total_kb_);
    std::swap(swap_memory_available_kb_, other->swap_memory_available_kb_);
    std::swap(count_processes_, other->count_processes_);
    std::swap(proc_start_count_, other->proc_start_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata resource_categories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = resource_categories_descriptor_;
  metadata.reflection = resource_categories_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int connection_categories::kServerFieldNumber;
const int connection_categories::kClientFieldNumber;
const int connection_categories::kTransactionCountersFieldNumber;
const int connection_categories::kMinTransactionCountersFieldNumber;
const int connection_categories::kMaxTransactionCountersFieldNumber;
const int connection_categories::kNAggregatedConnectionsFieldNumber;
const int connection_categories::kPercentileFieldNumber;
#endif  // !_MSC_VER

connection_categories::connection_categories()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void connection_categories::InitAsDefaultInstance() {
  server_ = const_cast< ::draiosproto::counter_bytes*>(&::draiosproto::counter_bytes::default_instance());
  client_ = const_cast< ::draiosproto::counter_bytes*>(&::draiosproto::counter_bytes::default_instance());
  transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
  min_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
  max_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
}

connection_categories::connection_categories(const connection_categories& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void connection_categories::SharedCtor() {
  _cached_size_ = 0;
  server_ = NULL;
  client_ = NULL;
  transaction_counters_ = NULL;
  min_transaction_counters_ = NULL;
  max_transaction_counters_ = NULL;
  n_aggregated_connections_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

connection_categories::~connection_categories() {
  SharedDtor();
}

void connection_categories::SharedDtor() {
  if (this != default_instance_) {
    delete server_;
    delete client_;
    delete transaction_counters_;
    delete min_transaction_counters_;
    delete max_transaction_counters_;
  }
}

void connection_categories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* connection_categories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connection_categories_descriptor_;
}

const connection_categories& connection_categories::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

connection_categories* connection_categories::default_instance_ = NULL;

connection_categories* connection_categories::New() const {
  return new connection_categories;
}

void connection_categories::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server()) {
      if (server_ != NULL) server_->::draiosproto::counter_bytes::Clear();
    }
    if (has_client()) {
      if (client_ != NULL) client_->::draiosproto::counter_bytes::Clear();
    }
    if (has_transaction_counters()) {
      if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    if (has_min_transaction_counters()) {
      if (min_transaction_counters_ != NULL) min_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    if (has_max_transaction_counters()) {
      if (max_transaction_counters_ != NULL) max_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    n_aggregated_connections_ = 0u;
  }
  percentile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool connection_categories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .draiosproto.counter_bytes server = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client;
        break;
      }

      // optional .draiosproto.counter_bytes client = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional transaction_counters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_n_aggregated_connections;
        break;
      }

      // optional uint32 n_aggregated_connections = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n_aggregated_connections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_aggregated_connections_)));
          set_has_n_aggregated_connections();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_percentile;
        break;
      }

      // repeated .draiosproto.counter_percentile percentile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_percentile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_percentile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_percentile;
        if (input->ExpectTag(146)) goto parse_min_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_min_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_max_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void connection_categories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .draiosproto.counter_bytes server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server(), output);
  }

  // optional .draiosproto.counter_bytes client = 2;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client(), output);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 3;
  if (has_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transaction_counters(), output);
  }

  // optional uint32 n_aggregated_connections = 4;
  if (has_n_aggregated_connections()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->n_aggregated_connections(), output);
  }

  // repeated .draiosproto.counter_percentile percentile = 5;
  for (int i = 0; i < this->percentile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->percentile(i), output);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
  if (has_min_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->min_transaction_counters(), output);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
  if (has_max_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->max_transaction_counters(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* connection_categories::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .draiosproto.counter_bytes server = 1;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server(), target);
  }

  // optional .draiosproto.counter_bytes client = 2;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->client(), target);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 3;
  if (has_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transaction_counters(), target);
  }

  // optional uint32 n_aggregated_connections = 4;
  if (has_n_aggregated_connections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->n_aggregated_connections(), target);
  }

  // repeated .draiosproto.counter_percentile percentile = 5;
  for (int i = 0; i < this->percentile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->percentile(i), target);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
  if (has_min_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->min_transaction_counters(), target);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
  if (has_max_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->max_transaction_counters(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int connection_categories::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .draiosproto.counter_bytes server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server());
    }

    // optional .draiosproto.counter_bytes client = 2;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client());
    }

    // optional .draiosproto.counter_time_bidirectional transaction_counters = 3;
    if (has_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_counters());
    }

    // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
    if (has_min_transaction_counters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_transaction_counters());
    }

    // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
    if (has_max_transaction_counters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_transaction_counters());
    }

    // optional uint32 n_aggregated_connections = 4;
    if (has_n_aggregated_connections()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_aggregated_connections());
    }

  }
  // repeated .draiosproto.counter_percentile percentile = 5;
  total_size += 1 * this->percentile_size();
  for (int i = 0; i < this->percentile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->percentile(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void connection_categories::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const connection_categories* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const connection_categories*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void connection_categories::MergeFrom(const connection_categories& from) {
  GOOGLE_CHECK_NE(&from, this);
  percentile_.MergeFrom(from.percentile_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      mutable_server()->::draiosproto::counter_bytes::MergeFrom(from.server());
    }
    if (from.has_client()) {
      mutable_client()->::draiosproto::counter_bytes::MergeFrom(from.client());
    }
    if (from.has_transaction_counters()) {
      mutable_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.transaction_counters());
    }
    if (from.has_min_transaction_counters()) {
      mutable_min_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.min_transaction_counters());
    }
    if (from.has_max_transaction_counters()) {
      mutable_max_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.max_transaction_counters());
    }
    if (from.has_n_aggregated_connections()) {
      set_n_aggregated_connections(from.n_aggregated_connections());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void connection_categories::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void connection_categories::CopyFrom(const connection_categories& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool connection_categories::IsInitialized() const {

  if (has_server()) {
    if (!this->server().IsInitialized()) return false;
  }
  if (has_client()) {
    if (!this->client().IsInitialized()) return false;
  }
  if (has_transaction_counters()) {
    if (!this->transaction_counters().IsInitialized()) return false;
  }
  if (has_min_transaction_counters()) {
    if (!this->min_transaction_counters().IsInitialized()) return false;
  }
  if (has_max_transaction_counters()) {
    if (!this->max_transaction_counters().IsInitialized()) return false;
  }
  for (int i = 0; i < percentile_size(); i++) {
    if (!this->percentile(i).IsInitialized()) return false;
  }
  return true;
}

void connection_categories::Swap(connection_categories* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(client_, other->client_);
    std::swap(transaction_counters_, other->transaction_counters_);
    std::swap(min_transaction_counters_, other->min_transaction_counters_);
    std::swap(max_transaction_counters_, other->max_transaction_counters_);
    std::swap(n_aggregated_connections_, other->n_aggregated_connections_);
    percentile_.Swap(&other->percentile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata connection_categories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = connection_categories_descriptor_;
  metadata.reflection = connection_categories_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int process_details::kCommFieldNumber;
const int process_details::kExeFieldNumber;
const int process_details::kArgsFieldNumber;
const int process_details::kContainerIdFieldNumber;
#endif  // !_MSC_VER

process_details::process_details()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void process_details::InitAsDefaultInstance() {
}

process_details::process_details(const process_details& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void process_details::SharedCtor() {
  _cached_size_ = 0;
  comm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  container_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

process_details::~process_details() {
  SharedDtor();
}

void process_details::SharedDtor() {
  if (comm_ != &::google::protobuf::internal::kEmptyString) {
    delete comm_;
  }
  if (exe_ != &::google::protobuf::internal::kEmptyString) {
    delete exe_;
  }
  if (container_id_ != &::google::protobuf::internal::kEmptyString) {
    delete container_id_;
  }
  if (this != default_instance_) {
  }
}

void process_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* process_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return process_details_descriptor_;
}

const process_details& process_details::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

process_details* process_details::default_instance_ = NULL;

process_details* process_details::New() const {
  return new process_details;
}

void process_details::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_comm()) {
      if (comm_ != &::google::protobuf::internal::kEmptyString) {
        comm_->clear();
      }
    }
    if (has_exe()) {
      if (exe_ != &::google::protobuf::internal::kEmptyString) {
        exe_->clear();
      }
    }
    if (has_container_id()) {
      if (container_id_ != &::google::protobuf::internal::kEmptyString) {
        container_id_->clear();
      }
    }
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool process_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string comm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comm().data(), this->comm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exe;
        break;
      }

      // required string exe = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exe().data(), this->exe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }

      // repeated string args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args(this->args_size() - 1).data(),
            this->args(this->args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        if (input->ExpectTag(34)) goto parse_container_id;
        break;
      }

      // optional string container_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->container_id().data(), this->container_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void process_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string comm = 1;
  if (has_comm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comm().data(), this->comm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->comm(), output);
  }

  // required string exe = 2;
  if (has_exe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exe().data(), this->exe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->exe(), output);
  }

  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->args(i).data(), this->args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->args(i), output);
  }

  // optional string container_id = 4;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->container_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* process_details::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string comm = 1;
  if (has_comm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comm().data(), this->comm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->comm(), target);
  }

  // required string exe = 2;
  if (has_exe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exe().data(), this->exe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exe(), target);
  }

  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->args(i), target);
  }

  // optional string container_id = 4;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->container_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int process_details::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string comm = 1;
    if (has_comm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comm());
    }

    // required string exe = 2;
    if (has_exe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exe());
    }

    // optional string container_id = 4;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->container_id());
    }

  }
  // repeated string args = 3;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void process_details::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const process_details* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const process_details*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void process_details::MergeFrom(const process_details& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comm()) {
      set_comm(from.comm());
    }
    if (from.has_exe()) {
      set_exe(from.exe());
    }
    if (from.has_container_id()) {
      set_container_id(from.container_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void process_details::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void process_details::CopyFrom(const process_details& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool process_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void process_details::Swap(process_details* other) {
  if (other != this) {
    std::swap(comm_, other->comm_);
    std::swap(exe_, other->exe_);
    args_.Swap(&other->args_);
    std::swap(container_id_, other->container_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata process_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = process_details_descriptor_;
  metadata.reflection = process_details_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int command_details::kTimestampFieldNumber;
const int command_details::kCountFieldNumber;
const int command_details::kCmdlineFieldNumber;
const int command_details::kExeFieldNumber;
const int command_details::kParentcommFieldNumber;
#endif  // !_MSC_VER

command_details::command_details()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void command_details::InitAsDefaultInstance() {
}

command_details::command_details(const command_details& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void command_details::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  cmdline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parentcomm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

command_details::~command_details() {
  SharedDtor();
}

void command_details::SharedDtor() {
  if (cmdline_ != &::google::protobuf::internal::kEmptyString) {
    delete cmdline_;
  }
  if (exe_ != &::google::protobuf::internal::kEmptyString) {
    delete exe_;
  }
  if (parentcomm_ != &::google::protobuf::internal::kEmptyString) {
    delete parentcomm_;
  }
  if (this != default_instance_) {
  }
}

void command_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return command_details_descriptor_;
}

const command_details& command_details::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

command_details* command_details::default_instance_ = NULL;

command_details* command_details::New() const {
  return new command_details;
}

void command_details::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    count_ = 0u;
    if (has_cmdline()) {
      if (cmdline_ != &::google::protobuf::internal::kEmptyString) {
        cmdline_->clear();
      }
    }
    if (has_exe()) {
      if (exe_ != &::google::protobuf::internal::kEmptyString) {
        exe_->clear();
      }
    }
    if (has_parentcomm()) {
      if (parentcomm_ != &::google::protobuf::internal::kEmptyString) {
        parentcomm_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool command_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cmdline;
        break;
      }

      // required string cmdline = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmdline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmdline().data(), this->cmdline().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_exe;
        break;
      }

      // required string exe = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exe().data(), this->exe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_parentcomm;
        break;
      }

      // optional string parentcomm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parentcomm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentcomm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parentcomm().data(), this->parentcomm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void command_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required string cmdline = 3;
  if (has_cmdline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmdline().data(), this->cmdline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cmdline(), output);
  }

  // required string exe = 4;
  if (has_exe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exe().data(), this->exe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->exe(), output);
  }

  // optional string parentcomm = 5;
  if (has_parentcomm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentcomm().data(), this->parentcomm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->parentcomm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* command_details::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required string cmdline = 3;
  if (has_cmdline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmdline().data(), this->cmdline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cmdline(), target);
  }

  // required string exe = 4;
  if (has_exe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exe().data(), this->exe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exe(), target);
  }

  // optional string parentcomm = 5;
  if (has_parentcomm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentcomm().data(), this->parentcomm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->parentcomm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int command_details::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required string cmdline = 3;
    if (has_cmdline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmdline());
    }

    // required string exe = 4;
    if (has_exe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exe());
    }

    // optional string parentcomm = 5;
    if (has_parentcomm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentcomm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_details::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const command_details* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const command_details*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void command_details::MergeFrom(const command_details& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_cmdline()) {
      set_cmdline(from.cmdline());
    }
    if (from.has_exe()) {
      set_exe(from.exe());
    }
    if (from.has_parentcomm()) {
      set_parentcomm(from.parentcomm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void command_details::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_details::CopyFrom(const command_details& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void command_details::Swap(command_details* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(count_, other->count_);
    std::swap(cmdline_, other->cmdline_);
    std::swap(exe_, other->exe_);
    std::swap(parentcomm_, other->parentcomm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata command_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = command_details_descriptor_;
  metadata.reflection = command_details_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int counter_proto_entry::kNcallsFieldNumber;
const int counter_proto_entry::kTimeTotFieldNumber;
const int counter_proto_entry::kTimeMaxFieldNumber;
const int counter_proto_entry::kBytesInFieldNumber;
const int counter_proto_entry::kBytesOutFieldNumber;
const int counter_proto_entry::kNerrorsFieldNumber;
const int counter_proto_entry::kPercentileFieldNumber;
#endif  // !_MSC_VER

counter_proto_entry::counter_proto_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void counter_proto_entry::InitAsDefaultInstance() {
}

counter_proto_entry::counter_proto_entry(const counter_proto_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void counter_proto_entry::SharedCtor() {
  _cached_size_ = 0;
  ncalls_ = 0u;
  time_tot_ = GOOGLE_ULONGLONG(0);
  time_max_ = GOOGLE_ULONGLONG(0);
  bytes_in_ = GOOGLE_ULONGLONG(0);
  bytes_out_ = GOOGLE_ULONGLONG(0);
  nerrors_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

counter_proto_entry::~counter_proto_entry() {
  SharedDtor();
}

void counter_proto_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void counter_proto_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_proto_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_proto_entry_descriptor_;
}

const counter_proto_entry& counter_proto_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

counter_proto_entry* counter_proto_entry::default_instance_ = NULL;

counter_proto_entry* counter_proto_entry::New() const {
  return new counter_proto_entry;
}

void counter_proto_entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ncalls_ = 0u;
    time_tot_ = GOOGLE_ULONGLONG(0);
    time_max_ = GOOGLE_ULONGLONG(0);
    bytes_in_ = GOOGLE_ULONGLONG(0);
    bytes_out_ = GOOGLE_ULONGLONG(0);
    nerrors_ = 0u;
  }
  percentile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool counter_proto_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ncalls = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ncalls_)));
          set_has_ncalls();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_tot;
        break;
      }

      // required uint64 time_tot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_tot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_tot_)));
          set_has_time_tot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_max;
        break;
      }

      // required uint64 time_max = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_max_)));
          set_has_time_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bytes_in;
        break;
      }

      // required uint64 bytes_in = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_in_)));
          set_has_bytes_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bytes_out;
        break;
      }

      // required uint64 bytes_out = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_out_)));
          set_has_bytes_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nerrors;
        break;
      }

      // required uint32 nerrors = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nerrors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nerrors_)));
          set_has_nerrors();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_percentile;
        break;
      }

      // repeated .draiosproto.counter_percentile percentile = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_percentile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_percentile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_percentile;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void counter_proto_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ncalls = 1;
  if (has_ncalls()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ncalls(), output);
  }

  // required uint64 time_tot = 2;
  if (has_time_tot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time_tot(), output);
  }

  // required uint64 time_max = 3;
  if (has_time_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_max(), output);
  }

  // required uint64 bytes_in = 4;
  if (has_bytes_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bytes_in(), output);
  }

  // required uint64 bytes_out = 5;
  if (has_bytes_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bytes_out(), output);
  }

  // required uint32 nerrors = 6;
  if (has_nerrors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nerrors(), output);
  }

  // repeated .draiosproto.counter_percentile percentile = 7;
  for (int i = 0; i < this->percentile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->percentile(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* counter_proto_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ncalls = 1;
  if (has_ncalls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ncalls(), target);
  }

  // required uint64 time_tot = 2;
  if (has_time_tot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time_tot(), target);
  }

  // required uint64 time_max = 3;
  if (has_time_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time_max(), target);
  }

  // required uint64 bytes_in = 4;
  if (has_bytes_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bytes_in(), target);
  }

  // required uint64 bytes_out = 5;
  if (has_bytes_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->bytes_out(), target);
  }

  // required uint32 nerrors = 6;
  if (has_nerrors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->nerrors(), target);
  }

  // repeated .draiosproto.counter_percentile percentile = 7;
  for (int i = 0; i < this->percentile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->percentile(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int counter_proto_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ncalls = 1;
    if (has_ncalls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ncalls());
    }

    // required uint64 time_tot = 2;
    if (has_time_tot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_tot());
    }

    // required uint64 time_max = 3;
    if (has_time_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_max());
    }

    // required uint64 bytes_in = 4;
    if (has_bytes_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_in());
    }

    // required uint64 bytes_out = 5;
    if (has_bytes_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_out());
    }

    // required uint32 nerrors = 6;
    if (has_nerrors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nerrors());
    }

  }
  // repeated .draiosproto.counter_percentile percentile = 7;
  total_size += 1 * this->percentile_size();
  for (int i = 0; i < this->percentile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->percentile(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_proto_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const counter_proto_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const counter_proto_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void counter_proto_entry::MergeFrom(const counter_proto_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  percentile_.MergeFrom(from.percentile_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ncalls()) {
      set_ncalls(from.ncalls());
    }
    if (from.has_time_tot()) {
      set_time_tot(from.time_tot());
    }
    if (from.has_time_max()) {
      set_time_max(from.time_max());
    }
    if (from.has_bytes_in()) {
      set_bytes_in(from.bytes_in());
    }
    if (from.has_bytes_out()) {
      set_bytes_out(from.bytes_out());
    }
    if (from.has_nerrors()) {
      set_nerrors(from.nerrors());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void counter_proto_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_proto_entry::CopyFrom(const counter_proto_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool counter_proto_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < percentile_size(); i++) {
    if (!this->percentile(i).IsInitialized()) return false;
  }
  return true;
}

void counter_proto_entry::Swap(counter_proto_entry* other) {
  if (other != this) {
    std::swap(ncalls_, other->ncalls_);
    std::swap(time_tot_, other->time_tot_);
    std::swap(time_max_, other->time_max_);
    std::swap(bytes_in_, other->bytes_in_);
    std::swap(bytes_out_, other->bytes_out_);
    std::swap(nerrors_, other->nerrors_);
    percentile_.Swap(&other->percentile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata counter_proto_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_proto_entry_descriptor_;
  metadata.reflection = counter_proto_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int url_details::kUrlFieldNumber;
const int url_details::kCountersFieldNumber;
#endif  // !_MSC_VER

url_details::url_details()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void url_details::InitAsDefaultInstance() {
  counters_ = const_cast< ::draiosproto::counter_proto_entry*>(&::draiosproto::counter_proto_entry::default_instance());
}

url_details::url_details(const url_details& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void url_details::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  counters_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

url_details::~url_details() {
  SharedDtor();
}

void url_details::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
    delete counters_;
  }
}

void url_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* url_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return url_details_descriptor_;
}

const url_details& url_details::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

url_details* url_details::default_instance_ = NULL;

url_details* url_details::New() const {
  return new url_details;
}

void url_details::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_counters()) {
      if (counters_ != NULL) counters_->::draiosproto::counter_proto_entry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool url_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_counters;
        break;
      }

      // required .draiosproto.counter_proto_entry counters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void url_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->counters(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* url_details::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->counters(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int url_details::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // required .draiosproto.counter_proto_entry counters = 2;
    if (has_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counters());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void url_details::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const url_details* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const url_details*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void url_details::MergeFrom(const url_details& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_counters()) {
      mutable_counters()->::draiosproto::counter_proto_entry::MergeFrom(from.counters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void url_details::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void url_details::CopyFrom(const url_details& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool url_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_counters()) {
    if (!this->counters().IsInitialized()) return false;
  }
  return true;
}

void url_details::Swap(url_details* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(counters_, other->counters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata url_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = url_details_descriptor_;
  metadata.reflection = url_details_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int status_code_details::kStatusCodeFieldNumber;
const int status_code_details::kNcallsFieldNumber;
#endif  // !_MSC_VER

status_code_details::status_code_details()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void status_code_details::InitAsDefaultInstance() {
}

status_code_details::status_code_details(const status_code_details& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void status_code_details::SharedCtor() {
  _cached_size_ = 0;
  status_code_ = 0u;
  ncalls_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

status_code_details::~status_code_details() {
  SharedDtor();
}

void status_code_details::SharedDtor() {
  if (this != default_instance_) {
  }
}

void status_code_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* status_code_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return status_code_details_descriptor_;
}

const status_code_details& status_code_details::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

status_code_details* status_code_details::default_instance_ = NULL;

status_code_details* status_code_details::New() const {
  return new status_code_details;
}

void status_code_details::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_code_ = 0u;
    ncalls_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool status_code_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_code_)));
          set_has_status_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ncalls;
        break;
      }

      // required uint32 ncalls = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ncalls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ncalls_)));
          set_has_ncalls();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void status_code_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 status_code = 1;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status_code(), output);
  }

  // required uint32 ncalls = 2;
  if (has_ncalls()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ncalls(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* status_code_details::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 status_code = 1;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status_code(), target);
  }

  // required uint32 ncalls = 2;
  if (has_ncalls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ncalls(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int status_code_details::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 status_code = 1;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_code());
    }

    // required uint32 ncalls = 2;
    if (has_ncalls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ncalls());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void status_code_details::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const status_code_details* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const status_code_details*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void status_code_details::MergeFrom(const status_code_details& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_ncalls()) {
      set_ncalls(from.ncalls());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void status_code_details::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void status_code_details::CopyFrom(const status_code_details& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool status_code_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void status_code_details::Swap(status_code_details* other) {
  if (other != this) {
    std::swap(status_code_, other->status_code_);
    std::swap(ncalls_, other->ncalls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata status_code_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = status_code_details_descriptor_;
  metadata.reflection = status_code_details_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int http_info::kServerUrlsFieldNumber;
const int http_info::kClientUrlsFieldNumber;
const int http_info::kClientStatusCodesFieldNumber;
const int http_info::kServerStatusCodesFieldNumber;
#endif  // !_MSC_VER

http_info::http_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void http_info::InitAsDefaultInstance() {
}

http_info::http_info(const http_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void http_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

http_info::~http_info() {
  SharedDtor();
}

void http_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void http_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* http_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return http_info_descriptor_;
}

const http_info& http_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

http_info* http_info::default_instance_ = NULL;

http_info* http_info::New() const {
  return new http_info;
}

void http_info::Clear() {
  server_urls_.Clear();
  client_urls_.Clear();
  client_status_codes_.Clear();
  server_status_codes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool http_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.url_details server_urls = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_urls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_server_urls;
        if (input->ExpectTag(18)) goto parse_client_urls;
        break;
      }

      // repeated .draiosproto.url_details client_urls = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_urls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client_urls;
        if (input->ExpectTag(26)) goto parse_client_status_codes;
        break;
      }

      // repeated .draiosproto.status_code_details client_status_codes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_status_codes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_status_codes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_client_status_codes;
        if (input->ExpectTag(34)) goto parse_server_status_codes;
        break;
      }

      // repeated .draiosproto.status_code_details server_status_codes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_status_codes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_status_codes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_status_codes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void http_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .draiosproto.url_details server_urls = 1;
  for (int i = 0; i < this->server_urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_urls(i), output);
  }

  // repeated .draiosproto.url_details client_urls = 2;
  for (int i = 0; i < this->client_urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client_urls(i), output);
  }

  // repeated .draiosproto.status_code_details client_status_codes = 3;
  for (int i = 0; i < this->client_status_codes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->client_status_codes(i), output);
  }

  // repeated .draiosproto.status_code_details server_status_codes = 4;
  for (int i = 0; i < this->server_status_codes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->server_status_codes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* http_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .draiosproto.url_details server_urls = 1;
  for (int i = 0; i < this->server_urls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_urls(i), target);
  }

  // repeated .draiosproto.url_details client_urls = 2;
  for (int i = 0; i < this->client_urls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->client_urls(i), target);
  }

  // repeated .draiosproto.status_code_details client_status_codes = 3;
  for (int i = 0; i < this->client_status_codes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->client_status_codes(i), target);
  }

  // repeated .draiosproto.status_code_details server_status_codes = 4;
  for (int i = 0; i < this->server_status_codes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->server_status_codes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int http_info::ByteSize() const {
  int total_size = 0;

  // repeated .draiosproto.url_details server_urls = 1;
  total_size += 1 * this->server_urls_size();
  for (int i = 0; i < this->server_urls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_urls(i));
  }

  // repeated .draiosproto.url_details client_urls = 2;
  total_size += 1 * this->client_urls_size();
  for (int i = 0; i < this->client_urls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->client_urls(i));
  }

  // repeated .draiosproto.status_code_details client_status_codes = 3;
  total_size += 1 * this->client_status_codes_size();
  for (int i = 0; i < this->client_status_codes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->client_status_codes(i));
  }

  // repeated .draiosproto.status_code_details server_status_codes = 4;
  total_size += 1 * this->server_status_codes_size();
  for (int i = 0; i < this->server_status_codes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_status_codes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void http_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const http_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const http_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void http_info::MergeFrom(const http_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_urls_.MergeFrom(from.server_urls_);
  client_urls_.MergeFrom(from.client_urls_);
  client_status_codes_.MergeFrom(from.client_status_codes_);
  server_status_codes_.MergeFrom(from.server_status_codes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void http_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void http_info::CopyFrom(const http_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool http_info::IsInitialized() const {

  for (int i = 0; i < server_urls_size(); i++) {
    if (!this->server_urls(i).IsInitialized()) return false;
  }
  for (int i = 0; i < client_urls_size(); i++) {
    if (!this->client_urls(i).IsInitialized()) return false;
  }
  for (int i = 0; i < client_status_codes_size(); i++) {
    if (!this->client_status_codes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < server_status_codes_size(); i++) {
    if (!this->server_status_codes(i).IsInitialized()) return false;
  }
  return true;
}

void http_info::Swap(http_info* other) {
  if (other != this) {
    server_urls_.Swap(&other->server_urls_);
    client_urls_.Swap(&other->client_urls_);
    client_status_codes_.Swap(&other->client_status_codes_);
    server_status_codes_.Swap(&other->server_status_codes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata http_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = http_info_descriptor_;
  metadata.reflection = http_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sql_entry_details::kNameFieldNumber;
const int sql_entry_details::kCountersFieldNumber;
#endif  // !_MSC_VER

sql_entry_details::sql_entry_details()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sql_entry_details::InitAsDefaultInstance() {
  counters_ = const_cast< ::draiosproto::counter_proto_entry*>(&::draiosproto::counter_proto_entry::default_instance());
}

sql_entry_details::sql_entry_details(const sql_entry_details& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sql_entry_details::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  counters_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sql_entry_details::~sql_entry_details() {
  SharedDtor();
}

void sql_entry_details::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete counters_;
  }
}

void sql_entry_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_entry_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_entry_details_descriptor_;
}

const sql_entry_details& sql_entry_details::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

sql_entry_details* sql_entry_details::default_instance_ = NULL;

sql_entry_details* sql_entry_details::New() const {
  return new sql_entry_details;
}

void sql_entry_details::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_counters()) {
      if (counters_ != NULL) counters_->::draiosproto::counter_proto_entry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sql_entry_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_counters;
        break;
      }

      // required .draiosproto.counter_proto_entry counters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sql_entry_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->counters(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sql_entry_details::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->counters(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sql_entry_details::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .draiosproto.counter_proto_entry counters = 2;
    if (has_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counters());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_entry_details::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sql_entry_details* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sql_entry_details*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sql_entry_details::MergeFrom(const sql_entry_details& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_counters()) {
      mutable_counters()->::draiosproto::counter_proto_entry::MergeFrom(from.counters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sql_entry_details::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_entry_details::CopyFrom(const sql_entry_details& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_entry_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_counters()) {
    if (!this->counters().IsInitialized()) return false;
  }
  return true;
}

void sql_entry_details::Swap(sql_entry_details* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(counters_, other->counters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sql_entry_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_entry_details_descriptor_;
  metadata.reflection = sql_entry_details_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sql_query_type_details::kTypeFieldNumber;
const int sql_query_type_details::kCountersFieldNumber;
#endif  // !_MSC_VER

sql_query_type_details::sql_query_type_details()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sql_query_type_details::InitAsDefaultInstance() {
  counters_ = const_cast< ::draiosproto::counter_proto_entry*>(&::draiosproto::counter_proto_entry::default_instance());
}

sql_query_type_details::sql_query_type_details(const sql_query_type_details& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sql_query_type_details::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  counters_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sql_query_type_details::~sql_query_type_details() {
  SharedDtor();
}

void sql_query_type_details::SharedDtor() {
  if (this != default_instance_) {
    delete counters_;
  }
}

void sql_query_type_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_query_type_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_query_type_details_descriptor_;
}

const sql_query_type_details& sql_query_type_details::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

sql_query_type_details* sql_query_type_details::default_instance_ = NULL;

sql_query_type_details* sql_query_type_details::New() const {
  return new sql_query_type_details;
}

void sql_query_type_details::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_counters()) {
      if (counters_ != NULL) counters_->::draiosproto::counter_proto_entry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sql_query_type_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.sql_statement_type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::sql_statement_type_IsValid(value)) {
            set_type(static_cast< ::draiosproto::sql_statement_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_counters;
        break;
      }

      // required .draiosproto.counter_proto_entry counters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sql_query_type_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.sql_statement_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->counters(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sql_query_type_details::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.sql_statement_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->counters(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sql_query_type_details::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.sql_statement_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .draiosproto.counter_proto_entry counters = 2;
    if (has_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counters());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_query_type_details::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sql_query_type_details* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sql_query_type_details*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sql_query_type_details::MergeFrom(const sql_query_type_details& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_counters()) {
      mutable_counters()->::draiosproto::counter_proto_entry::MergeFrom(from.counters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sql_query_type_details::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_query_type_details::CopyFrom(const sql_query_type_details& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_query_type_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_counters()) {
    if (!this->counters().IsInitialized()) return false;
  }
  return true;
}

void sql_query_type_details::Swap(sql_query_type_details* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(counters_, other->counters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sql_query_type_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_query_type_details_descriptor_;
  metadata.reflection = sql_query_type_details_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sql_info::kServerQueriesFieldNumber;
const int sql_info::kClientQueriesFieldNumber;
const int sql_info::kServerQueryTypesFieldNumber;
const int sql_info::kClientQueryTypesFieldNumber;
const int sql_info::kServerTablesFieldNumber;
const int sql_info::kClientTablesFieldNumber;
#endif  // !_MSC_VER

sql_info::sql_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sql_info::InitAsDefaultInstance() {
}

sql_info::sql_info(const sql_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sql_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sql_info::~sql_info() {
  SharedDtor();
}

void sql_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sql_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_info_descriptor_;
}

const sql_info& sql_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

sql_info* sql_info::default_instance_ = NULL;

sql_info* sql_info::New() const {
  return new sql_info;
}

void sql_info::Clear() {
  server_queries_.Clear();
  client_queries_.Clear();
  server_query_types_.Clear();
  client_query_types_.Clear();
  server_tables_.Clear();
  client_tables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sql_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.sql_entry_details server_queries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_queries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_queries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_server_queries;
        if (input->ExpectTag(18)) goto parse_client_queries;
        break;
      }

      // repeated .draiosproto.sql_entry_details client_queries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_queries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_queries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client_queries;
        if (input->ExpectTag(26)) goto parse_server_query_types;
        break;
      }

      // repeated .draiosproto.sql_query_type_details server_query_types = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_query_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_query_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_query_types;
        if (input->ExpectTag(34)) goto parse_client_query_types;
        break;
      }

      // repeated .draiosproto.sql_query_type_details client_query_types = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_query_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_query_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_client_query_types;
        if (input->ExpectTag(42)) goto parse_server_tables;
        break;
      }

      // repeated .draiosproto.sql_entry_details server_tables = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_server_tables;
        if (input->ExpectTag(50)) goto parse_client_tables;
        break;
      }

      // repeated .draiosproto.sql_entry_details client_tables = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_client_tables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sql_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .draiosproto.sql_entry_details server_queries = 1;
  for (int i = 0; i < this->server_queries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_queries(i), output);
  }

  // repeated .draiosproto.sql_entry_details client_queries = 2;
  for (int i = 0; i < this->client_queries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client_queries(i), output);
  }

  // repeated .draiosproto.sql_query_type_details server_query_types = 3;
  for (int i = 0; i < this->server_query_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->server_query_types(i), output);
  }

  // repeated .draiosproto.sql_query_type_details client_query_types = 4;
  for (int i = 0; i < this->client_query_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->client_query_types(i), output);
  }

  // repeated .draiosproto.sql_entry_details server_tables = 5;
  for (int i = 0; i < this->server_tables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->server_tables(i), output);
  }

  // repeated .draiosproto.sql_entry_details client_tables = 6;
  for (int i = 0; i < this->client_tables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->client_tables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sql_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .draiosproto.sql_entry_details server_queries = 1;
  for (int i = 0; i < this->server_queries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_queries(i), target);
  }

  // repeated .draiosproto.sql_entry_details client_queries = 2;
  for (int i = 0; i < this->client_queries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->client_queries(i), target);
  }

  // repeated .draiosproto.sql_query_type_details server_query_types = 3;
  for (int i = 0; i < this->server_query_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->server_query_types(i), target);
  }

  // repeated .draiosproto.sql_query_type_details client_query_types = 4;
  for (int i = 0; i < this->client_query_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->client_query_types(i), target);
  }

  // repeated .draiosproto.sql_entry_details server_tables = 5;
  for (int i = 0; i < this->server_tables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->server_tables(i), target);
  }

  // repeated .draiosproto.sql_entry_details client_tables = 6;
  for (int i = 0; i < this->client_tables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->client_tables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sql_info::ByteSize() const {
  int total_size = 0;

  // repeated .draiosproto.sql_entry_details server_queries = 1;
  total_size += 1 * this->server_queries_size();
  for (int i = 0; i < this->server_queries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_queries(i));
  }

  // repeated .draiosproto.sql_entry_details client_queries = 2;
  total_size += 1 * this->client_queries_size();
  for (int i = 0; i < this->client_queries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->client_queries(i));
  }

  // repeated .draiosproto.sql_query_type_details server_query_types = 3;
  total_size += 1 * this->server_query_types_size();
  for (int i = 0; i < this->server_query_types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_query_types(i));
  }

  // repeated .draiosproto.sql_query_type_details client_query_types = 4;
  total_size += 1 * this->client_query_types_size();
  for (int i = 0; i < this->client_query_types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->client_query_types(i));
  }

  // repeated .draiosproto.sql_entry_details server_tables = 5;
  total_size += 1 * this->server_tables_size();
  for (int i = 0; i < this->server_tables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_tables(i));
  }

  // repeated .draiosproto.sql_entry_details client_tables = 6;
  total_size += 1 * this->client_tables_size();
  for (int i = 0; i < this->client_tables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->client_tables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sql_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sql_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sql_info::MergeFrom(const sql_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_queries_.MergeFrom(from.server_queries_);
  client_queries_.MergeFrom(from.client_queries_);
  server_query_types_.MergeFrom(from.server_query_types_);
  client_query_types_.MergeFrom(from.client_query_types_);
  server_tables_.MergeFrom(from.server_tables_);
  client_tables_.MergeFrom(from.client_tables_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sql_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_info::CopyFrom(const sql_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_info::IsInitialized() const {

  for (int i = 0; i < server_queries_size(); i++) {
    if (!this->server_queries(i).IsInitialized()) return false;
  }
  for (int i = 0; i < client_queries_size(); i++) {
    if (!this->client_queries(i).IsInitialized()) return false;
  }
  for (int i = 0; i < server_query_types_size(); i++) {
    if (!this->server_query_types(i).IsInitialized()) return false;
  }
  for (int i = 0; i < client_query_types_size(); i++) {
    if (!this->client_query_types(i).IsInitialized()) return false;
  }
  for (int i = 0; i < server_tables_size(); i++) {
    if (!this->server_tables(i).IsInitialized()) return false;
  }
  for (int i = 0; i < client_tables_size(); i++) {
    if (!this->client_tables(i).IsInitialized()) return false;
  }
  return true;
}

void sql_info::Swap(sql_info* other) {
  if (other != this) {
    server_queries_.Swap(&other->server_queries_);
    client_queries_.Swap(&other->client_queries_);
    server_query_types_.Swap(&other->server_query_types_);
    client_query_types_.Swap(&other->client_query_types_);
    server_tables_.Swap(&other->server_tables_);
    client_tables_.Swap(&other->client_tables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sql_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_info_descriptor_;
  metadata.reflection = sql_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mongodb_collection_details::kNameFieldNumber;
const int mongodb_collection_details::kCountersFieldNumber;
#endif  // !_MSC_VER

mongodb_collection_details::mongodb_collection_details()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mongodb_collection_details::InitAsDefaultInstance() {
  counters_ = const_cast< ::draiosproto::counter_proto_entry*>(&::draiosproto::counter_proto_entry::default_instance());
}

mongodb_collection_details::mongodb_collection_details(const mongodb_collection_details& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mongodb_collection_details::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  counters_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mongodb_collection_details::~mongodb_collection_details() {
  SharedDtor();
}

void mongodb_collection_details::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete counters_;
  }
}

void mongodb_collection_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mongodb_collection_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mongodb_collection_details_descriptor_;
}

const mongodb_collection_details& mongodb_collection_details::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

mongodb_collection_details* mongodb_collection_details::default_instance_ = NULL;

mongodb_collection_details* mongodb_collection_details::New() const {
  return new mongodb_collection_details;
}

void mongodb_collection_details::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_counters()) {
      if (counters_ != NULL) counters_->::draiosproto::counter_proto_entry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mongodb_collection_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_counters;
        break;
      }

      // required .draiosproto.counter_proto_entry counters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mongodb_collection_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->counters(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mongodb_collection_details::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->counters(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mongodb_collection_details::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .draiosproto.counter_proto_entry counters = 2;
    if (has_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counters());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mongodb_collection_details::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mongodb_collection_details* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mongodb_collection_details*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mongodb_collection_details::MergeFrom(const mongodb_collection_details& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_counters()) {
      mutable_counters()->::draiosproto::counter_proto_entry::MergeFrom(from.counters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mongodb_collection_details::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongodb_collection_details::CopyFrom(const mongodb_collection_details& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongodb_collection_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_counters()) {
    if (!this->counters().IsInitialized()) return false;
  }
  return true;
}

void mongodb_collection_details::Swap(mongodb_collection_details* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(counters_, other->counters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mongodb_collection_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mongodb_collection_details_descriptor_;
  metadata.reflection = mongodb_collection_details_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mongodb_op_type_details::kOpFieldNumber;
const int mongodb_op_type_details::kCountersFieldNumber;
#endif  // !_MSC_VER

mongodb_op_type_details::mongodb_op_type_details()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mongodb_op_type_details::InitAsDefaultInstance() {
  counters_ = const_cast< ::draiosproto::counter_proto_entry*>(&::draiosproto::counter_proto_entry::default_instance());
}

mongodb_op_type_details::mongodb_op_type_details(const mongodb_op_type_details& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mongodb_op_type_details::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  counters_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mongodb_op_type_details::~mongodb_op_type_details() {
  SharedDtor();
}

void mongodb_op_type_details::SharedDtor() {
  if (this != default_instance_) {
    delete counters_;
  }
}

void mongodb_op_type_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mongodb_op_type_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mongodb_op_type_details_descriptor_;
}

const mongodb_op_type_details& mongodb_op_type_details::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

mongodb_op_type_details* mongodb_op_type_details::default_instance_ = NULL;

mongodb_op_type_details* mongodb_op_type_details::New() const {
  return new mongodb_op_type_details;
}

void mongodb_op_type_details::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
    if (has_counters()) {
      if (counters_ != NULL) counters_->::draiosproto::counter_proto_entry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mongodb_op_type_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.mongodb_op_type op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::mongodb_op_type_IsValid(value)) {
            set_op(static_cast< ::draiosproto::mongodb_op_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_counters;
        break;
      }

      // required .draiosproto.counter_proto_entry counters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mongodb_op_type_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.mongodb_op_type op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->counters(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mongodb_op_type_details::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.mongodb_op_type op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->counters(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mongodb_op_type_details::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.mongodb_op_type op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

    // required .draiosproto.counter_proto_entry counters = 2;
    if (has_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counters());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mongodb_op_type_details::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mongodb_op_type_details* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mongodb_op_type_details*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mongodb_op_type_details::MergeFrom(const mongodb_op_type_details& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_counters()) {
      mutable_counters()->::draiosproto::counter_proto_entry::MergeFrom(from.counters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mongodb_op_type_details::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongodb_op_type_details::CopyFrom(const mongodb_op_type_details& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongodb_op_type_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_counters()) {
    if (!this->counters().IsInitialized()) return false;
  }
  return true;
}

void mongodb_op_type_details::Swap(mongodb_op_type_details* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(counters_, other->counters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mongodb_op_type_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mongodb_op_type_details_descriptor_;
  metadata.reflection = mongodb_op_type_details_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mongodb_info::kServersOpsFieldNumber;
const int mongodb_info::kClientOpsFieldNumber;
const int mongodb_info::kServerCollectionsFieldNumber;
const int mongodb_info::kClientCollectionsFieldNumber;
#endif  // !_MSC_VER

mongodb_info::mongodb_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mongodb_info::InitAsDefaultInstance() {
}

mongodb_info::mongodb_info(const mongodb_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mongodb_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mongodb_info::~mongodb_info() {
  SharedDtor();
}

void mongodb_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mongodb_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mongodb_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mongodb_info_descriptor_;
}

const mongodb_info& mongodb_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

mongodb_info* mongodb_info::default_instance_ = NULL;

mongodb_info* mongodb_info::New() const {
  return new mongodb_info;
}

void mongodb_info::Clear() {
  servers_ops_.Clear();
  client_ops_.Clear();
  server_collections_.Clear();
  client_collections_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mongodb_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.mongodb_op_type_details servers_ops = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers_ops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers_ops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_servers_ops;
        if (input->ExpectTag(18)) goto parse_client_ops;
        break;
      }

      // repeated .draiosproto.mongodb_op_type_details client_ops = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_ops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client_ops;
        if (input->ExpectTag(26)) goto parse_server_collections;
        break;
      }

      // repeated .draiosproto.mongodb_collection_details server_collections = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_collections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_collections()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_collections;
        if (input->ExpectTag(34)) goto parse_client_collections;
        break;
      }

      // repeated .draiosproto.mongodb_collection_details client_collections = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_collections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_collections()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_client_collections;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mongodb_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .draiosproto.mongodb_op_type_details servers_ops = 1;
  for (int i = 0; i < this->servers_ops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers_ops(i), output);
  }

  // repeated .draiosproto.mongodb_op_type_details client_ops = 2;
  for (int i = 0; i < this->client_ops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client_ops(i), output);
  }

  // repeated .draiosproto.mongodb_collection_details server_collections = 3;
  for (int i = 0; i < this->server_collections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->server_collections(i), output);
  }

  // repeated .draiosproto.mongodb_collection_details client_collections = 4;
  for (int i = 0; i < this->client_collections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->client_collections(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mongodb_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .draiosproto.mongodb_op_type_details servers_ops = 1;
  for (int i = 0; i < this->servers_ops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->servers_ops(i), target);
  }

  // repeated .draiosproto.mongodb_op_type_details client_ops = 2;
  for (int i = 0; i < this->client_ops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->client_ops(i), target);
  }

  // repeated .draiosproto.mongodb_collection_details server_collections = 3;
  for (int i = 0; i < this->server_collections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->server_collections(i), target);
  }

  // repeated .draiosproto.mongodb_collection_details client_collections = 4;
  for (int i = 0; i < this->client_collections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->client_collections(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mongodb_info::ByteSize() const {
  int total_size = 0;

  // repeated .draiosproto.mongodb_op_type_details servers_ops = 1;
  total_size += 1 * this->servers_ops_size();
  for (int i = 0; i < this->servers_ops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers_ops(i));
  }

  // repeated .draiosproto.mongodb_op_type_details client_ops = 2;
  total_size += 1 * this->client_ops_size();
  for (int i = 0; i < this->client_ops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->client_ops(i));
  }

  // repeated .draiosproto.mongodb_collection_details server_collections = 3;
  total_size += 1 * this->server_collections_size();
  for (int i = 0; i < this->server_collections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_collections(i));
  }

  // repeated .draiosproto.mongodb_collection_details client_collections = 4;
  total_size += 1 * this->client_collections_size();
  for (int i = 0; i < this->client_collections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->client_collections(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mongodb_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mongodb_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mongodb_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mongodb_info::MergeFrom(const mongodb_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_ops_.MergeFrom(from.servers_ops_);
  client_ops_.MergeFrom(from.client_ops_);
  server_collections_.MergeFrom(from.server_collections_);
  client_collections_.MergeFrom(from.client_collections_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mongodb_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongodb_info::CopyFrom(const mongodb_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongodb_info::IsInitialized() const {

  for (int i = 0; i < servers_ops_size(); i++) {
    if (!this->servers_ops(i).IsInitialized()) return false;
  }
  for (int i = 0; i < client_ops_size(); i++) {
    if (!this->client_ops(i).IsInitialized()) return false;
  }
  for (int i = 0; i < server_collections_size(); i++) {
    if (!this->server_collections(i).IsInitialized()) return false;
  }
  for (int i = 0; i < client_collections_size(); i++) {
    if (!this->client_collections(i).IsInitialized()) return false;
  }
  return true;
}

void mongodb_info::Swap(mongodb_info* other) {
  if (other != this) {
    servers_ops_.Swap(&other->servers_ops_);
    client_ops_.Swap(&other->client_ops_);
    server_collections_.Swap(&other->server_collections_);
    client_collections_.Swap(&other->client_collections_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mongodb_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mongodb_info_descriptor_;
  metadata.reflection = mongodb_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int jmx_attribute::kNameFieldNumber;
const int jmx_attribute::kValueFieldNumber;
const int jmx_attribute::kAliasFieldNumber;
const int jmx_attribute::kTypeFieldNumber;
const int jmx_attribute::kUnitFieldNumber;
const int jmx_attribute::kScaleFieldNumber;
const int jmx_attribute::kSubattributesFieldNumber;
#endif  // !_MSC_VER

jmx_attribute::jmx_attribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void jmx_attribute::InitAsDefaultInstance() {
}

jmx_attribute::jmx_attribute(const jmx_attribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void jmx_attribute::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  unit_ = 0;
  scale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

jmx_attribute::~jmx_attribute() {
  SharedDtor();
}

void jmx_attribute::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (alias_ != &::google::protobuf::internal::kEmptyString) {
    delete alias_;
  }
  if (this != default_instance_) {
  }
}

void jmx_attribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* jmx_attribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return jmx_attribute_descriptor_;
}

const jmx_attribute& jmx_attribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

jmx_attribute* jmx_attribute::default_instance_ = NULL;

jmx_attribute* jmx_attribute::New() const {
  return new jmx_attribute;
}

void jmx_attribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = 0;
    if (has_alias()) {
      if (alias_ != &::google::protobuf::internal::kEmptyString) {
        alias_->clear();
      }
    }
    type_ = 1;
    unit_ = 0;
    scale_ = 0;
  }
  subattributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool jmx_attribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // optional double value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subattributes;
        break;
      }

      // repeated .draiosproto.jmx_attribute subattributes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subattributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subattributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subattributes;
        if (input->ExpectTag(42)) goto parse_alias;
        break;
      }

      // optional string alias = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional .draiosproto.jmx_metric_type type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::jmx_metric_type_IsValid(value)) {
            set_type(static_cast< ::draiosproto::jmx_metric_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_unit;
        break;
      }

      // optional .draiosproto.unit unit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::unit_IsValid(value)) {
            set_unit(static_cast< ::draiosproto::unit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_scale;
        break;
      }

      // optional .draiosproto.scale scale = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scale:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::scale_IsValid(value)) {
            set_scale(static_cast< ::draiosproto::scale >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void jmx_attribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  // repeated .draiosproto.jmx_attribute subattributes = 3;
  for (int i = 0; i < this->subattributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subattributes(i), output);
  }

  // optional string alias = 5;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->alias(), output);
  }

  // optional .draiosproto.jmx_metric_type type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // optional .draiosproto.unit unit = 8;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->unit(), output);
  }

  // optional .draiosproto.scale scale = 9;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* jmx_attribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  // repeated .draiosproto.jmx_attribute subattributes = 3;
  for (int i = 0; i < this->subattributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->subattributes(i), target);
  }

  // optional string alias = 5;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->alias(), target);
  }

  // optional .draiosproto.jmx_metric_type type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  // optional .draiosproto.unit unit = 8;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->unit(), target);
  }

  // optional .draiosproto.scale scale = 9;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int jmx_attribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional string alias = 5;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional .draiosproto.jmx_metric_type type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .draiosproto.unit unit = 8;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
    }

    // optional .draiosproto.scale scale = 9;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scale());
    }

  }
  // repeated .draiosproto.jmx_attribute subattributes = 3;
  total_size += 1 * this->subattributes_size();
  for (int i = 0; i < this->subattributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subattributes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void jmx_attribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const jmx_attribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const jmx_attribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void jmx_attribute::MergeFrom(const jmx_attribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  subattributes_.MergeFrom(from.subattributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_alias()) {
      set_alias(from.alias());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void jmx_attribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void jmx_attribute::CopyFrom(const jmx_attribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool jmx_attribute::IsInitialized() const {

  return true;
}

void jmx_attribute::Swap(jmx_attribute* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(alias_, other->alias_);
    std::swap(type_, other->type_);
    std::swap(unit_, other->unit_);
    std::swap(scale_, other->scale_);
    subattributes_.Swap(&other->subattributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata jmx_attribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = jmx_attribute_descriptor_;
  metadata.reflection = jmx_attribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int jmx_bean::kNameFieldNumber;
const int jmx_bean::kAttributesFieldNumber;
#endif  // !_MSC_VER

jmx_bean::jmx_bean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void jmx_bean::InitAsDefaultInstance() {
}

jmx_bean::jmx_bean(const jmx_bean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void jmx_bean::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

jmx_bean::~jmx_bean() {
  SharedDtor();
}

void jmx_bean::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void jmx_bean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* jmx_bean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return jmx_bean_descriptor_;
}

const jmx_bean& jmx_bean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

jmx_bean* jmx_bean::default_instance_ = NULL;

jmx_bean* jmx_bean::New() const {
  return new jmx_bean;
}

void jmx_bean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool jmx_bean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attributes;
        break;
      }

      // repeated .draiosproto.jmx_attribute attributes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attributes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void jmx_bean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .draiosproto.jmx_attribute attributes = 2;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attributes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* jmx_bean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .draiosproto.jmx_attribute attributes = 2;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attributes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int jmx_bean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .draiosproto.jmx_attribute attributes = 2;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void jmx_bean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const jmx_bean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const jmx_bean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void jmx_bean::MergeFrom(const jmx_bean& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void jmx_bean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void jmx_bean::CopyFrom(const jmx_bean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool jmx_bean::IsInitialized() const {

  return true;
}

void jmx_bean::Swap(jmx_bean* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    attributes_.Swap(&other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata jmx_bean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = jmx_bean_descriptor_;
  metadata.reflection = jmx_bean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int java_info::kProcessNameFieldNumber;
const int java_info::kBeansFieldNumber;
#endif  // !_MSC_VER

java_info::java_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void java_info::InitAsDefaultInstance() {
}

java_info::java_info(const java_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void java_info::SharedCtor() {
  _cached_size_ = 0;
  process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

java_info::~java_info() {
  SharedDtor();
}

void java_info::SharedDtor() {
  if (process_name_ != &::google::protobuf::internal::kEmptyString) {
    delete process_name_;
  }
  if (this != default_instance_) {
  }
}

void java_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* java_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return java_info_descriptor_;
}

const java_info& java_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

java_info* java_info::default_instance_ = NULL;

java_info* java_info::New() const {
  return new java_info;
}

void java_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_process_name()) {
      if (process_name_ != &::google::protobuf::internal::kEmptyString) {
        process_name_->clear();
      }
    }
  }
  beans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool java_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string process_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_beans;
        break;
      }

      // repeated .draiosproto.jmx_bean beans = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_beans;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void java_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string process_name = 1;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->process_name(), output);
  }

  // repeated .draiosproto.jmx_bean beans = 2;
  for (int i = 0; i < this->beans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->beans(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* java_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string process_name = 1;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->process_name(), target);
  }

  // repeated .draiosproto.jmx_bean beans = 2;
  for (int i = 0; i < this->beans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->beans(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int java_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string process_name = 1;
    if (has_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_name());
    }

  }
  // repeated .draiosproto.jmx_bean beans = 2;
  total_size += 1 * this->beans_size();
  for (int i = 0; i < this->beans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void java_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const java_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const java_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void java_info::MergeFrom(const java_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  beans_.MergeFrom(from.beans_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_process_name()) {
      set_process_name(from.process_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void java_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void java_info::CopyFrom(const java_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool java_info::IsInitialized() const {

  return true;
}

void java_info::Swap(java_info* other) {
  if (other != this) {
    std::swap(process_name_, other->process_name_);
    beans_.Swap(&other->beans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata java_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = java_info_descriptor_;
  metadata.reflection = java_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int statsd_tag::kKeyFieldNumber;
const int statsd_tag::kValueFieldNumber;
#endif  // !_MSC_VER

statsd_tag::statsd_tag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void statsd_tag::InitAsDefaultInstance() {
}

statsd_tag::statsd_tag(const statsd_tag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void statsd_tag::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

statsd_tag::~statsd_tag() {
  SharedDtor();
}

void statsd_tag::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void statsd_tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statsd_tag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statsd_tag_descriptor_;
}

const statsd_tag& statsd_tag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

statsd_tag* statsd_tag::default_instance_ = NULL;

statsd_tag* statsd_tag::New() const {
  return new statsd_tag;
}

void statsd_tag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool statsd_tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void statsd_tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* statsd_tag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int statsd_tag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statsd_tag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const statsd_tag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const statsd_tag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void statsd_tag::MergeFrom(const statsd_tag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void statsd_tag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statsd_tag::CopyFrom(const statsd_tag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool statsd_tag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void statsd_tag::Swap(statsd_tag* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata statsd_tag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statsd_tag_descriptor_;
  metadata.reflection = statsd_tag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int statsd_metric::kNameFieldNumber;
const int statsd_metric::kTagsFieldNumber;
const int statsd_metric::kTypeFieldNumber;
const int statsd_metric::kValueFieldNumber;
const int statsd_metric::kSumFieldNumber;
const int statsd_metric::kMinFieldNumber;
const int statsd_metric::kMaxFieldNumber;
const int statsd_metric::kCountFieldNumber;
const int statsd_metric::kMedianFieldNumber;
const int statsd_metric::kPercentile95FieldNumber;
const int statsd_metric::kPercentile99FieldNumber;
const int statsd_metric::kPercentileFieldNumber;
#endif  // !_MSC_VER

statsd_metric::statsd_metric()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void statsd_metric::InitAsDefaultInstance() {
}

statsd_metric::statsd_metric(const statsd_metric& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void statsd_metric::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  value_ = 0;
  sum_ = 0;
  min_ = 0;
  max_ = 0;
  count_ = 0;
  median_ = 0;
  percentile_95_ = 0;
  percentile_99_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

statsd_metric::~statsd_metric() {
  SharedDtor();
}

void statsd_metric::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void statsd_metric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statsd_metric::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statsd_metric_descriptor_;
}

const statsd_metric& statsd_metric::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

statsd_metric* statsd_metric::default_instance_ = NULL;

statsd_metric* statsd_metric::New() const {
  return new statsd_metric;
}

void statsd_metric::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 1;
    value_ = 0;
    sum_ = 0;
    min_ = 0;
    max_ = 0;
    count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    median_ = 0;
    percentile_95_ = 0;
    percentile_99_ = 0;
  }
  tags_.Clear();
  percentile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool statsd_metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }

      // repeated .draiosproto.statsd_tag tags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .draiosproto.statsd_metric_type type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::statsd_metric_type_IsValid(value)) {
            set_type(static_cast< ::draiosproto::statsd_metric_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_value;
        break;
      }

      // optional double value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_sum;
        break;
      }

      // optional double sum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_min;
        break;
      }

      // optional double min = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_max;
        break;
      }

      // optional double max = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_count;
        break;
      }

      // optional double count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_median;
        break;
      }

      // optional double median = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_median:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &median_)));
          set_has_median();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_percentile_95;
        break;
      }

      // optional double percentile_95 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_percentile_95:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percentile_95_)));
          set_has_percentile_95();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_percentile_99;
        break;
      }

      // optional double percentile_99 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_percentile_99:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percentile_99_)));
          set_has_percentile_99();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_percentile;
        break;
      }

      // repeated .draiosproto.counter_percentile percentile = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_percentile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_percentile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_percentile;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void statsd_metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .draiosproto.statsd_tag tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tags(i), output);
  }

  // optional .draiosproto.statsd_metric_type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional double value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->value(), output);
  }

  // optional double sum = 5;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sum(), output);
  }

  // optional double min = 6;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->min(), output);
  }

  // optional double max = 7;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->max(), output);
  }

  // optional double count = 8;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->count(), output);
  }

  // optional double median = 9;
  if (has_median()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->median(), output);
  }

  // optional double percentile_95 = 10;
  if (has_percentile_95()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->percentile_95(), output);
  }

  // optional double percentile_99 = 11;
  if (has_percentile_99()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->percentile_99(), output);
  }

  // repeated .draiosproto.counter_percentile percentile = 12;
  for (int i = 0; i < this->percentile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->percentile(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* statsd_metric::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .draiosproto.statsd_tag tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tags(i), target);
  }

  // optional .draiosproto.statsd_metric_type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional double value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->value(), target);
  }

  // optional double sum = 5;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->sum(), target);
  }

  // optional double min = 6;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->min(), target);
  }

  // optional double max = 7;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->max(), target);
  }

  // optional double count = 8;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->count(), target);
  }

  // optional double median = 9;
  if (has_median()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->median(), target);
  }

  // optional double percentile_95 = 10;
  if (has_percentile_95()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->percentile_95(), target);
  }

  // optional double percentile_99 = 11;
  if (has_percentile_99()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->percentile_99(), target);
  }

  // repeated .draiosproto.counter_percentile percentile = 12;
  for (int i = 0; i < this->percentile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->percentile(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int statsd_metric::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .draiosproto.statsd_metric_type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double value = 4;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional double sum = 5;
    if (has_sum()) {
      total_size += 1 + 8;
    }

    // optional double min = 6;
    if (has_min()) {
      total_size += 1 + 8;
    }

    // optional double max = 7;
    if (has_max()) {
      total_size += 1 + 8;
    }

    // optional double count = 8;
    if (has_count()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double median = 9;
    if (has_median()) {
      total_size += 1 + 8;
    }

    // optional double percentile_95 = 10;
    if (has_percentile_95()) {
      total_size += 1 + 8;
    }

    // optional double percentile_99 = 11;
    if (has_percentile_99()) {
      total_size += 1 + 8;
    }

  }
  // repeated .draiosproto.statsd_tag tags = 2;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tags(i));
  }

  // repeated .draiosproto.counter_percentile percentile = 12;
  total_size += 1 * this->percentile_size();
  for (int i = 0; i < this->percentile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->percentile(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statsd_metric::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const statsd_metric* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const statsd_metric*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void statsd_metric::MergeFrom(const statsd_metric& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  percentile_.MergeFrom(from.percentile_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_sum()) {
      set_sum(from.sum());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_median()) {
      set_median(from.median());
    }
    if (from.has_percentile_95()) {
      set_percentile_95(from.percentile_95());
    }
    if (from.has_percentile_99()) {
      set_percentile_99(from.percentile_99());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void statsd_metric::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statsd_metric::CopyFrom(const statsd_metric& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool statsd_metric::IsInitialized() const {

  for (int i = 0; i < tags_size(); i++) {
    if (!this->tags(i).IsInitialized()) return false;
  }
  for (int i = 0; i < percentile_size(); i++) {
    if (!this->percentile(i).IsInitialized()) return false;
  }
  return true;
}

void statsd_metric::Swap(statsd_metric* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    tags_.Swap(&other->tags_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(sum_, other->sum_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(count_, other->count_);
    std::swap(median_, other->median_);
    std::swap(percentile_95_, other->percentile_95_);
    std::swap(percentile_99_, other->percentile_99_);
    percentile_.Swap(&other->percentile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata statsd_metric::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statsd_metric_descriptor_;
  metadata.reflection = statsd_metric_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int statsd_info::kStatsdMetricsFieldNumber;
#endif  // !_MSC_VER

statsd_info::statsd_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void statsd_info::InitAsDefaultInstance() {
}

statsd_info::statsd_info(const statsd_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void statsd_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

statsd_info::~statsd_info() {
  SharedDtor();
}

void statsd_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void statsd_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statsd_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statsd_info_descriptor_;
}

const statsd_info& statsd_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

statsd_info* statsd_info::default_instance_ = NULL;

statsd_info* statsd_info::New() const {
  return new statsd_info;
}

void statsd_info::Clear() {
  statsd_metrics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool statsd_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.statsd_metric statsd_metrics = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statsd_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statsd_metrics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_statsd_metrics;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void statsd_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .draiosproto.statsd_metric statsd_metrics = 1;
  for (int i = 0; i < this->statsd_metrics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statsd_metrics(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* statsd_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .draiosproto.statsd_metric statsd_metrics = 1;
  for (int i = 0; i < this->statsd_metrics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->statsd_metrics(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int statsd_info::ByteSize() const {
  int total_size = 0;

  // repeated .draiosproto.statsd_metric statsd_metrics = 1;
  total_size += 1 * this->statsd_metrics_size();
  for (int i = 0; i < this->statsd_metrics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statsd_metrics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statsd_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const statsd_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const statsd_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void statsd_info::MergeFrom(const statsd_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  statsd_metrics_.MergeFrom(from.statsd_metrics_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void statsd_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statsd_info::CopyFrom(const statsd_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool statsd_info::IsInitialized() const {

  for (int i = 0; i < statsd_metrics_size(); i++) {
    if (!this->statsd_metrics(i).IsInitialized()) return false;
  }
  return true;
}

void statsd_info::Swap(statsd_info* other) {
  if (other != this) {
    statsd_metrics_.Swap(&other->statsd_metrics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata statsd_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statsd_info_descriptor_;
  metadata.reflection = statsd_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int app_tag::kKeyFieldNumber;
const int app_tag::kValueFieldNumber;
#endif  // !_MSC_VER

app_tag::app_tag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void app_tag::InitAsDefaultInstance() {
}

app_tag::app_tag(const app_tag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void app_tag::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

app_tag::~app_tag() {
  SharedDtor();
}

void app_tag::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void app_tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* app_tag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return app_tag_descriptor_;
}

const app_tag& app_tag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

app_tag* app_tag::default_instance_ = NULL;

app_tag* app_tag::New() const {
  return new app_tag;
}

void app_tag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool app_tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void app_tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* app_tag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int app_tag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void app_tag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const app_tag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const app_tag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void app_tag::MergeFrom(const app_tag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void app_tag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void app_tag::CopyFrom(const app_tag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool app_tag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void app_tag::Swap(app_tag* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata app_tag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = app_tag_descriptor_;
  metadata.reflection = app_tag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int app_metric::kNameFieldNumber;
const int app_metric::kTypeFieldNumber;
const int app_metric::kValueFieldNumber;
const int app_metric::kTagsFieldNumber;
#endif  // !_MSC_VER

app_metric::app_metric()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void app_metric::InitAsDefaultInstance() {
}

app_metric::app_metric(const app_metric& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void app_metric::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

app_metric::~app_metric() {
  SharedDtor();
}

void app_metric::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void app_metric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* app_metric::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return app_metric_descriptor_;
}

const app_metric& app_metric::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

app_metric* app_metric::default_instance_ = NULL;

app_metric* app_metric::New() const {
  return new app_metric;
}

void app_metric::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 1;
    value_ = 0;
  }
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool app_metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .draiosproto.app_metric_type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::app_metric_type_IsValid(value)) {
            set_type(static_cast< ::draiosproto::app_metric_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_value;
        break;
      }

      // optional double value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        break;
      }

      // repeated .draiosproto.app_tag tags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void app_metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .draiosproto.app_metric_type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional double value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }

  // repeated .draiosproto.app_tag tags = 4;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* app_metric::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .draiosproto.app_metric_type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional double value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }

  // repeated .draiosproto.app_tag tags = 4;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int app_metric::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .draiosproto.app_metric_type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double value = 3;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  // repeated .draiosproto.app_tag tags = 4;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void app_metric::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const app_metric* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const app_metric*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void app_metric::MergeFrom(const app_metric& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void app_metric::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void app_metric::CopyFrom(const app_metric& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool app_metric::IsInitialized() const {

  for (int i = 0; i < tags_size(); i++) {
    if (!this->tags(i).IsInitialized()) return false;
  }
  return true;
}

void app_metric::Swap(app_metric* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    tags_.Swap(&other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata app_metric::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = app_metric_descriptor_;
  metadata.reflection = app_metric_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int app_check::kNameFieldNumber;
const int app_check::kValueFieldNumber;
const int app_check::kTagsFieldNumber;
#endif  // !_MSC_VER

app_check::app_check()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void app_check::InitAsDefaultInstance() {
}

app_check::app_check(const app_check& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void app_check::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

app_check::~app_check() {
  SharedDtor();
}

void app_check::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void app_check::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* app_check::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return app_check_descriptor_;
}

const app_check& app_check::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

app_check* app_check::default_instance_ = NULL;

app_check* app_check::New() const {
  return new app_check;
}

void app_check::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = 0;
  }
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool app_check::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional .draiosproto.app_check_value value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::app_check_value_IsValid(value)) {
            set_value(static_cast< ::draiosproto::app_check_value >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tags;
        break;
      }

      // repeated .draiosproto.app_tag tags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void app_check::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .draiosproto.app_check_value value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->value(), output);
  }

  // repeated .draiosproto.app_tag tags = 3;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* app_check::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .draiosproto.app_check_value value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->value(), target);
  }

  // repeated .draiosproto.app_tag tags = 3;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int app_check::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .draiosproto.app_check_value value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
    }

  }
  // repeated .draiosproto.app_tag tags = 3;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void app_check::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const app_check* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const app_check*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void app_check::MergeFrom(const app_check& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void app_check::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void app_check::CopyFrom(const app_check& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool app_check::IsInitialized() const {

  for (int i = 0; i < tags_size(); i++) {
    if (!this->tags(i).IsInitialized()) return false;
  }
  return true;
}

void app_check::Swap(app_check* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    tags_.Swap(&other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata app_check::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = app_check_descriptor_;
  metadata.reflection = app_check_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int app_info::kProcessNameFieldNumber;
const int app_info::kMetricsFieldNumber;
const int app_info::kChecksFieldNumber;
#endif  // !_MSC_VER

app_info::app_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void app_info::InitAsDefaultInstance() {
}

app_info::app_info(const app_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void app_info::SharedCtor() {
  _cached_size_ = 0;
  process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

app_info::~app_info() {
  SharedDtor();
}

void app_info::SharedDtor() {
  if (process_name_ != &::google::protobuf::internal::kEmptyString) {
    delete process_name_;
  }
  if (this != default_instance_) {
  }
}

void app_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* app_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return app_info_descriptor_;
}

const app_info& app_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

app_info* app_info::default_instance_ = NULL;

app_info* app_info::New() const {
  return new app_info;
}

void app_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_process_name()) {
      if (process_name_ != &::google::protobuf::internal::kEmptyString) {
        process_name_->clear();
      }
    }
  }
  metrics_.Clear();
  checks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool app_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string process_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_metrics;
        break;
      }

      // repeated .draiosproto.app_metric metrics = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metrics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_metrics;
        if (input->ExpectTag(26)) goto parse_checks;
        break;
      }

      // repeated .draiosproto.app_check checks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_checks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_checks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void app_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string process_name = 1;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->process_name(), output);
  }

  // repeated .draiosproto.app_metric metrics = 2;
  for (int i = 0; i < this->metrics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->metrics(i), output);
  }

  // repeated .draiosproto.app_check checks = 3;
  for (int i = 0; i < this->checks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->checks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* app_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string process_name = 1;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->process_name(), target);
  }

  // repeated .draiosproto.app_metric metrics = 2;
  for (int i = 0; i < this->metrics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->metrics(i), target);
  }

  // repeated .draiosproto.app_check checks = 3;
  for (int i = 0; i < this->checks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->checks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int app_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string process_name = 1;
    if (has_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_name());
    }

  }
  // repeated .draiosproto.app_metric metrics = 2;
  total_size += 1 * this->metrics_size();
  for (int i = 0; i < this->metrics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metrics(i));
  }

  // repeated .draiosproto.app_check checks = 3;
  total_size += 1 * this->checks_size();
  for (int i = 0; i < this->checks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->checks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void app_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const app_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const app_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void app_info::MergeFrom(const app_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  metrics_.MergeFrom(from.metrics_);
  checks_.MergeFrom(from.checks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_process_name()) {
      set_process_name(from.process_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void app_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void app_info::CopyFrom(const app_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool app_info::IsInitialized() const {

  for (int i = 0; i < metrics_size(); i++) {
    if (!this->metrics(i).IsInitialized()) return false;
  }
  for (int i = 0; i < checks_size(); i++) {
    if (!this->checks(i).IsInitialized()) return false;
  }
  return true;
}

void app_info::Swap(app_info* other) {
  if (other != this) {
    std::swap(process_name_, other->process_name_);
    metrics_.Swap(&other->metrics_);
    checks_.Swap(&other->checks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata app_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = app_info_descriptor_;
  metadata.reflection = app_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_info::kHttpFieldNumber;
const int proto_info::kMysqlFieldNumber;
const int proto_info::kPostgresFieldNumber;
const int proto_info::kMongodbFieldNumber;
const int proto_info::kJavaFieldNumber;
const int proto_info::kStatsdFieldNumber;
const int proto_info::kAppFieldNumber;
#endif  // !_MSC_VER

proto_info::proto_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_info::InitAsDefaultInstance() {
  http_ = const_cast< ::draiosproto::http_info*>(&::draiosproto::http_info::default_instance());
  mysql_ = const_cast< ::draiosproto::sql_info*>(&::draiosproto::sql_info::default_instance());
  postgres_ = const_cast< ::draiosproto::sql_info*>(&::draiosproto::sql_info::default_instance());
  mongodb_ = const_cast< ::draiosproto::mongodb_info*>(&::draiosproto::mongodb_info::default_instance());
  java_ = const_cast< ::draiosproto::java_info*>(&::draiosproto::java_info::default_instance());
  statsd_ = const_cast< ::draiosproto::statsd_info*>(&::draiosproto::statsd_info::default_instance());
  app_ = const_cast< ::draiosproto::app_info*>(&::draiosproto::app_info::default_instance());
}

proto_info::proto_info(const proto_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_info::SharedCtor() {
  _cached_size_ = 0;
  http_ = NULL;
  mysql_ = NULL;
  postgres_ = NULL;
  mongodb_ = NULL;
  java_ = NULL;
  statsd_ = NULL;
  app_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_info::~proto_info() {
  SharedDtor();
}

void proto_info::SharedDtor() {
  if (this != default_instance_) {
    delete http_;
    delete mysql_;
    delete postgres_;
    delete mongodb_;
    delete java_;
    delete statsd_;
    delete app_;
  }
}

void proto_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_info_descriptor_;
}

const proto_info& proto_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

proto_info* proto_info::default_instance_ = NULL;

proto_info* proto_info::New() const {
  return new proto_info;
}

void proto_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_http()) {
      if (http_ != NULL) http_->::draiosproto::http_info::Clear();
    }
    if (has_mysql()) {
      if (mysql_ != NULL) mysql_->::draiosproto::sql_info::Clear();
    }
    if (has_postgres()) {
      if (postgres_ != NULL) postgres_->::draiosproto::sql_info::Clear();
    }
    if (has_mongodb()) {
      if (mongodb_ != NULL) mongodb_->::draiosproto::mongodb_info::Clear();
    }
    if (has_java()) {
      if (java_ != NULL) java_->::draiosproto::java_info::Clear();
    }
    if (has_statsd()) {
      if (statsd_ != NULL) statsd_->::draiosproto::statsd_info::Clear();
    }
    if (has_app()) {
      if (app_ != NULL) app_->::draiosproto::app_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .draiosproto.http_info http = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mysql;
        break;
      }

      // optional .draiosproto.sql_info mysql = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mysql:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mysql()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_postgres;
        break;
      }

      // optional .draiosproto.sql_info postgres = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postgres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_postgres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mongodb;
        break;
      }

      // optional .draiosproto.mongodb_info mongodb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mongodb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mongodb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_java;
        break;
      }

      // optional .draiosproto.java_info java = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_java:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_java()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_statsd;
        break;
      }

      // optional .draiosproto.statsd_info statsd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statsd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statsd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_app;
        break;
      }

      // optional .draiosproto.app_info app = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .draiosproto.http_info http = 1;
  if (has_http()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->http(), output);
  }

  // optional .draiosproto.sql_info mysql = 2;
  if (has_mysql()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mysql(), output);
  }

  // optional .draiosproto.sql_info postgres = 3;
  if (has_postgres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->postgres(), output);
  }

  // optional .draiosproto.mongodb_info mongodb = 4;
  if (has_mongodb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mongodb(), output);
  }

  // optional .draiosproto.java_info java = 5;
  if (has_java()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->java(), output);
  }

  // optional .draiosproto.statsd_info statsd = 6;
  if (has_statsd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->statsd(), output);
  }

  // optional .draiosproto.app_info app = 7;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->app(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .draiosproto.http_info http = 1;
  if (has_http()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->http(), target);
  }

  // optional .draiosproto.sql_info mysql = 2;
  if (has_mysql()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mysql(), target);
  }

  // optional .draiosproto.sql_info postgres = 3;
  if (has_postgres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->postgres(), target);
  }

  // optional .draiosproto.mongodb_info mongodb = 4;
  if (has_mongodb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mongodb(), target);
  }

  // optional .draiosproto.java_info java = 5;
  if (has_java()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->java(), target);
  }

  // optional .draiosproto.statsd_info statsd = 6;
  if (has_statsd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->statsd(), target);
  }

  // optional .draiosproto.app_info app = 7;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->app(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .draiosproto.http_info http = 1;
    if (has_http()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->http());
    }

    // optional .draiosproto.sql_info mysql = 2;
    if (has_mysql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mysql());
    }

    // optional .draiosproto.sql_info postgres = 3;
    if (has_postgres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->postgres());
    }

    // optional .draiosproto.mongodb_info mongodb = 4;
    if (has_mongodb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mongodb());
    }

    // optional .draiosproto.java_info java = 5;
    if (has_java()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->java());
    }

    // optional .draiosproto.statsd_info statsd = 6;
    if (has_statsd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statsd());
    }

    // optional .draiosproto.app_info app = 7;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_info::MergeFrom(const proto_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_http()) {
      mutable_http()->::draiosproto::http_info::MergeFrom(from.http());
    }
    if (from.has_mysql()) {
      mutable_mysql()->::draiosproto::sql_info::MergeFrom(from.mysql());
    }
    if (from.has_postgres()) {
      mutable_postgres()->::draiosproto::sql_info::MergeFrom(from.postgres());
    }
    if (from.has_mongodb()) {
      mutable_mongodb()->::draiosproto::mongodb_info::MergeFrom(from.mongodb());
    }
    if (from.has_java()) {
      mutable_java()->::draiosproto::java_info::MergeFrom(from.java());
    }
    if (from.has_statsd()) {
      mutable_statsd()->::draiosproto::statsd_info::MergeFrom(from.statsd());
    }
    if (from.has_app()) {
      mutable_app()->::draiosproto::app_info::MergeFrom(from.app());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_info::CopyFrom(const proto_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_info::IsInitialized() const {

  if (has_http()) {
    if (!this->http().IsInitialized()) return false;
  }
  if (has_mysql()) {
    if (!this->mysql().IsInitialized()) return false;
  }
  if (has_postgres()) {
    if (!this->postgres().IsInitialized()) return false;
  }
  if (has_mongodb()) {
    if (!this->mongodb().IsInitialized()) return false;
  }
  if (has_statsd()) {
    if (!this->statsd().IsInitialized()) return false;
  }
  if (has_app()) {
    if (!this->app().IsInitialized()) return false;
  }
  return true;
}

void proto_info::Swap(proto_info* other) {
  if (other != this) {
    std::swap(http_, other->http_);
    std::swap(mysql_, other->mysql_);
    std::swap(postgres_, other->postgres_);
    std::swap(mongodb_, other->mongodb_);
    std::swap(java_, other->java_);
    std::swap(statsd_, other->statsd_);
    std::swap(app_, other->app_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_info_descriptor_;
  metadata.reflection = proto_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int network_by_port::kPortFieldNumber;
const int network_by_port::kCountersFieldNumber;
#endif  // !_MSC_VER

network_by_port::network_by_port()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void network_by_port::InitAsDefaultInstance() {
  counters_ = const_cast< ::draiosproto::connection_categories*>(&::draiosproto::connection_categories::default_instance());
}

network_by_port::network_by_port(const network_by_port& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void network_by_port::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0u;
  counters_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

network_by_port::~network_by_port() {
  SharedDtor();
}

void network_by_port::SharedDtor() {
  if (this != default_instance_) {
    delete counters_;
  }
}

void network_by_port::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* network_by_port::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return network_by_port_descriptor_;
}

const network_by_port& network_by_port::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

network_by_port* network_by_port::default_instance_ = NULL;

network_by_port* network_by_port::New() const {
  return new network_by_port;
}

void network_by_port::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    port_ = 0u;
    if (has_counters()) {
      if (counters_ != NULL) counters_->::draiosproto::connection_categories::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool network_by_port::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_counters;
        break;
      }

      // required .draiosproto.connection_categories counters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void network_by_port::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // required .draiosproto.connection_categories counters = 2;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->counters(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* network_by_port::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 port = 1;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  // required .draiosproto.connection_categories counters = 2;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->counters(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int network_by_port::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required .draiosproto.connection_categories counters = 2;
    if (has_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counters());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void network_by_port::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const network_by_port* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const network_by_port*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void network_by_port::MergeFrom(const network_by_port& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_counters()) {
      mutable_counters()->::draiosproto::connection_categories::MergeFrom(from.counters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void network_by_port::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void network_by_port::CopyFrom(const network_by_port& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool network_by_port::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_counters()) {
    if (!this->counters().IsInitialized()) return false;
  }
  return true;
}

void network_by_port::Swap(network_by_port* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(counters_, other->counters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata network_by_port::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = network_by_port_descriptor_;
  metadata.reflection = network_by_port_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int host::kHostnameFieldNumber;
const int host::kNumCpusFieldNumber;
const int host::kCpuLoadsFieldNumber;
const int host::kCpuStealFieldNumber;
const int host::kPhysicalMemorySizeBytesFieldNumber;
const int host::kTcountersFieldNumber;
const int host::kReqcountersFieldNumber;
const int host::kTransactionCountersFieldNumber;
const int host::kMinTransactionCountersFieldNumber;
const int host::kMaxTransactionCountersFieldNumber;
const int host::kTransactionProcessingDelayFieldNumber;
const int host::kNextTiersDelayFieldNumber;
const int host::kResourceCountersFieldNumber;
const int host::kSyscallErrorsFieldNumber;
const int host::kExternalIoNetFieldNumber;
const int host::kNetworkByServerportsFieldNumber;
const int host::kCpuIdleFieldNumber;
const int host::kUptimeFieldNumber;
const int host::kSystemCpuFieldNumber;
const int host::kUserCpuFieldNumber;
const int host::kMemoryBytesAvailableKbFieldNumber;
const int host::kIowaitCpuFieldNumber;
const int host::kNiceCpuFieldNumber;
const int host::kSystemLoad1FieldNumber;
const int host::kSystemLoad5FieldNumber;
const int host::kSystemLoad15FieldNumber;
#endif  // !_MSC_VER

host::host()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void host::InitAsDefaultInstance() {
  tcounters_ = const_cast< ::draiosproto::time_categories*>(&::draiosproto::time_categories::default_instance());
  reqcounters_ = const_cast< ::draiosproto::transaction_breakdown_categories*>(&::draiosproto::transaction_breakdown_categories::default_instance());
  transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
  min_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
  max_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
  resource_counters_ = const_cast< ::draiosproto::resource_categories*>(&::draiosproto::resource_categories::default_instance());
  syscall_errors_ = const_cast< ::draiosproto::counter_syscall_errors*>(&::draiosproto::counter_syscall_errors::default_instance());
  external_io_net_ = const_cast< ::draiosproto::counter_time_bytes*>(&::draiosproto::counter_time_bytes::default_instance());
}

host::host(const host& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void host::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_cpus_ = 0u;
  physical_memory_size_bytes_ = GOOGLE_ULONGLONG(0);
  tcounters_ = NULL;
  reqcounters_ = NULL;
  transaction_counters_ = NULL;
  min_transaction_counters_ = NULL;
  max_transaction_counters_ = NULL;
  transaction_processing_delay_ = GOOGLE_ULONGLONG(0);
  next_tiers_delay_ = GOOGLE_ULONGLONG(0);
  resource_counters_ = NULL;
  syscall_errors_ = NULL;
  external_io_net_ = NULL;
  uptime_ = GOOGLE_ULONGLONG(0);
  memory_bytes_available_kb_ = GOOGLE_ULONGLONG(0);
  system_load_1_ = 0u;
  system_load_5_ = 0u;
  system_load_15_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

host::~host() {
  SharedDtor();
}

void host::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
    delete tcounters_;
    delete reqcounters_;
    delete transaction_counters_;
    delete min_transaction_counters_;
    delete max_transaction_counters_;
    delete resource_counters_;
    delete syscall_errors_;
    delete external_io_net_;
  }
}

void host::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* host::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return host_descriptor_;
}

const host& host::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

host* host::default_instance_ = NULL;

host* host::New() const {
  return new host;
}

void host::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    num_cpus_ = 0u;
    physical_memory_size_bytes_ = GOOGLE_ULONGLONG(0);
    if (has_tcounters()) {
      if (tcounters_ != NULL) tcounters_->::draiosproto::time_categories::Clear();
    }
    if (has_reqcounters()) {
      if (reqcounters_ != NULL) reqcounters_->::draiosproto::transaction_breakdown_categories::Clear();
    }
    if (has_transaction_counters()) {
      if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_min_transaction_counters()) {
      if (min_transaction_counters_ != NULL) min_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    if (has_max_transaction_counters()) {
      if (max_transaction_counters_ != NULL) max_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    transaction_processing_delay_ = GOOGLE_ULONGLONG(0);
    next_tiers_delay_ = GOOGLE_ULONGLONG(0);
    if (has_resource_counters()) {
      if (resource_counters_ != NULL) resource_counters_->::draiosproto::resource_categories::Clear();
    }
    if (has_syscall_errors()) {
      if (syscall_errors_ != NULL) syscall_errors_->::draiosproto::counter_syscall_errors::Clear();
    }
    if (has_external_io_net()) {
      if (external_io_net_ != NULL) external_io_net_->::draiosproto::counter_time_bytes::Clear();
    }
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    uptime_ = GOOGLE_ULONGLONG(0);
    memory_bytes_available_kb_ = GOOGLE_ULONGLONG(0);
    system_load_1_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    system_load_5_ = 0u;
    system_load_15_ = 0u;
  }
  cpu_loads_.Clear();
  cpu_steal_.Clear();
  network_by_serverports_.Clear();
  cpu_idle_.Clear();
  system_cpu_.Clear();
  user_cpu_.Clear();
  iowait_cpu_.Clear();
  nice_cpu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool host::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_cpus;
        break;
      }

      // optional uint32 num_cpus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_cpus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_cpus_)));
          set_has_num_cpus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cpu_loads;
        break;
      }

      // repeated uint32 cpu_loads = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_loads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_cpu_loads())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cpu_loads())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cpu_loads;
        if (input->ExpectTag(32)) goto parse_physical_memory_size_bytes;
        break;
      }

      // required uint64 physical_memory_size_bytes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_memory_size_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &physical_memory_size_bytes_)));
          set_has_physical_memory_size_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tcounters;
        break;
      }

      // optional .draiosproto.time_categories tcounters = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tcounters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcounters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_transaction_processing_delay;
        break;
      }

      // optional uint64 transaction_processing_delay = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_processing_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_processing_delay_)));
          set_has_transaction_processing_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_resource_counters;
        break;
      }

      // optional .draiosproto.resource_categories resource_counters = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_syscall_errors;
        break;
      }

      // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscall_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscall_errors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_external_io_net;
        break;
      }

      // optional .draiosproto.counter_time_bytes external_io_net = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_external_io_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_external_io_net()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cpu_steal;
        break;
      }

      // repeated uint32 cpu_steal = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_steal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_cpu_steal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cpu_steal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cpu_steal;
        if (input->ExpectTag(98)) goto parse_reqcounters;
        break;
      }

      // optional .draiosproto.transaction_breakdown_categories reqcounters = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqcounters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqcounters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_next_tiers_delay;
        break;
      }

      // optional uint64 next_tiers_delay = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_tiers_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_tiers_delay_)));
          set_has_next_tiers_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_min_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_min_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_max_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_network_by_serverports;
        break;
      }

      // repeated .draiosproto.network_by_port network_by_serverports = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_by_serverports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_network_by_serverports()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_network_by_serverports;
        if (input->ExpectTag(200)) goto parse_cpu_idle;
        break;
      }

      // repeated uint32 cpu_idle = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_idle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 200, input, this->mutable_cpu_idle())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cpu_idle())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_cpu_idle;
        if (input->ExpectTag(264)) goto parse_uptime;
        break;
      }

      // optional uint64 uptime = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uptime_)));
          set_has_uptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_system_cpu;
        break;
      }

      // repeated uint32 system_cpu = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_system_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 272, input, this->mutable_system_cpu())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_system_cpu())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_system_cpu;
        if (input->ExpectTag(280)) goto parse_user_cpu;
        break;
      }

      // repeated uint32 user_cpu = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 280, input, this->mutable_user_cpu())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_cpu())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_user_cpu;
        if (input->ExpectTag(288)) goto parse_memory_bytes_available_kb;
        break;
      }

      // optional uint64 memory_bytes_available_kb = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memory_bytes_available_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_bytes_available_kb_)));
          set_has_memory_bytes_available_kb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_iowait_cpu;
        break;
      }

      // repeated uint32 iowait_cpu = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iowait_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 296, input, this->mutable_iowait_cpu())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_iowait_cpu())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_iowait_cpu;
        if (input->ExpectTag(304)) goto parse_nice_cpu;
        break;
      }

      // repeated uint32 nice_cpu = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nice_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 304, input, this->mutable_nice_cpu())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_nice_cpu())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_nice_cpu;
        if (input->ExpectTag(328)) goto parse_system_load_1;
        break;
      }

      // optional uint32 system_load_1 = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_system_load_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_load_1_)));
          set_has_system_load_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_system_load_5;
        break;
      }

      // optional uint32 system_load_5 = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_system_load_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_load_5_)));
          set_has_system_load_5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_system_load_15;
        break;
      }

      // optional uint32 system_load_15 = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_system_load_15:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_load_15_)));
          set_has_system_load_15();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void host::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }

  // optional uint32 num_cpus = 2;
  if (has_num_cpus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_cpus(), output);
  }

  // repeated uint32 cpu_loads = 3;
  for (int i = 0; i < this->cpu_loads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->cpu_loads(i), output);
  }

  // required uint64 physical_memory_size_bytes = 4;
  if (has_physical_memory_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->physical_memory_size_bytes(), output);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tcounters(), output);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
  if (has_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->transaction_counters(), output);
  }

  // optional uint64 transaction_processing_delay = 7;
  if (has_transaction_processing_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->transaction_processing_delay(), output);
  }

  // optional .draiosproto.resource_categories resource_counters = 8;
  if (has_resource_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->resource_counters(), output);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
  if (has_syscall_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->syscall_errors(), output);
  }

  // optional .draiosproto.counter_time_bytes external_io_net = 10;
  if (has_external_io_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->external_io_net(), output);
  }

  // repeated uint32 cpu_steal = 11;
  for (int i = 0; i < this->cpu_steal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->cpu_steal(i), output);
  }

  // optional .draiosproto.transaction_breakdown_categories reqcounters = 12;
  if (has_reqcounters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->reqcounters(), output);
  }

  // optional uint64 next_tiers_delay = 13;
  if (has_next_tiers_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->next_tiers_delay(), output);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 22;
  if (has_min_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->min_transaction_counters(), output);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 23;
  if (has_max_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->max_transaction_counters(), output);
  }

  // repeated .draiosproto.network_by_port network_by_serverports = 24;
  for (int i = 0; i < this->network_by_serverports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->network_by_serverports(i), output);
  }

  // repeated uint32 cpu_idle = 25;
  for (int i = 0; i < this->cpu_idle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      25, this->cpu_idle(i), output);
  }

  // optional uint64 uptime = 33;
  if (has_uptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->uptime(), output);
  }

  // repeated uint32 system_cpu = 34;
  for (int i = 0; i < this->system_cpu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      34, this->system_cpu(i), output);
  }

  // repeated uint32 user_cpu = 35;
  for (int i = 0; i < this->user_cpu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      35, this->user_cpu(i), output);
  }

  // optional uint64 memory_bytes_available_kb = 36;
  if (has_memory_bytes_available_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(36, this->memory_bytes_available_kb(), output);
  }

  // repeated uint32 iowait_cpu = 37;
  for (int i = 0; i < this->iowait_cpu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      37, this->iowait_cpu(i), output);
  }

  // repeated uint32 nice_cpu = 38;
  for (int i = 0; i < this->nice_cpu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      38, this->nice_cpu(i), output);
  }

  // optional uint32 system_load_1 = 41;
  if (has_system_load_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->system_load_1(), output);
  }

  // optional uint32 system_load_5 = 42;
  if (has_system_load_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->system_load_5(), output);
  }

  // optional uint32 system_load_15 = 43;
  if (has_system_load_15()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->system_load_15(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* host::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // optional uint32 num_cpus = 2;
  if (has_num_cpus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_cpus(), target);
  }

  // repeated uint32 cpu_loads = 3;
  for (int i = 0; i < this->cpu_loads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->cpu_loads(i), target);
  }

  // required uint64 physical_memory_size_bytes = 4;
  if (has_physical_memory_size_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->physical_memory_size_bytes(), target);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tcounters(), target);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
  if (has_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->transaction_counters(), target);
  }

  // optional uint64 transaction_processing_delay = 7;
  if (has_transaction_processing_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->transaction_processing_delay(), target);
  }

  // optional .draiosproto.resource_categories resource_counters = 8;
  if (has_resource_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->resource_counters(), target);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
  if (has_syscall_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->syscall_errors(), target);
  }

  // optional .draiosproto.counter_time_bytes external_io_net = 10;
  if (has_external_io_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->external_io_net(), target);
  }

  // repeated uint32 cpu_steal = 11;
  for (int i = 0; i < this->cpu_steal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->cpu_steal(i), target);
  }

  // optional .draiosproto.transaction_breakdown_categories reqcounters = 12;
  if (has_reqcounters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->reqcounters(), target);
  }

  // optional uint64 next_tiers_delay = 13;
  if (has_next_tiers_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->next_tiers_delay(), target);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 22;
  if (has_min_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->min_transaction_counters(), target);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 23;
  if (has_max_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->max_transaction_counters(), target);
  }

  // repeated .draiosproto.network_by_port network_by_serverports = 24;
  for (int i = 0; i < this->network_by_serverports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->network_by_serverports(i), target);
  }

  // repeated uint32 cpu_idle = 25;
  for (int i = 0; i < this->cpu_idle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(25, this->cpu_idle(i), target);
  }

  // optional uint64 uptime = 33;
  if (has_uptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->uptime(), target);
  }

  // repeated uint32 system_cpu = 34;
  for (int i = 0; i < this->system_cpu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(34, this->system_cpu(i), target);
  }

  // repeated uint32 user_cpu = 35;
  for (int i = 0; i < this->user_cpu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(35, this->user_cpu(i), target);
  }

  // optional uint64 memory_bytes_available_kb = 36;
  if (has_memory_bytes_available_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(36, this->memory_bytes_available_kb(), target);
  }

  // repeated uint32 iowait_cpu = 37;
  for (int i = 0; i < this->iowait_cpu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(37, this->iowait_cpu(i), target);
  }

  // repeated uint32 nice_cpu = 38;
  for (int i = 0; i < this->nice_cpu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(38, this->nice_cpu(i), target);
  }

  // optional uint32 system_load_1 = 41;
  if (has_system_load_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->system_load_1(), target);
  }

  // optional uint32 system_load_5 = 42;
  if (has_system_load_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->system_load_5(), target);
  }

  // optional uint32 system_load_15 = 43;
  if (has_system_load_15()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->system_load_15(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int host::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional uint32 num_cpus = 2;
    if (has_num_cpus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_cpus());
    }

    // required uint64 physical_memory_size_bytes = 4;
    if (has_physical_memory_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->physical_memory_size_bytes());
    }

    // optional .draiosproto.time_categories tcounters = 5;
    if (has_tcounters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tcounters());
    }

    // optional .draiosproto.transaction_breakdown_categories reqcounters = 12;
    if (has_reqcounters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqcounters());
    }

    // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
    if (has_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_counters());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 22;
    if (has_min_transaction_counters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_transaction_counters());
    }

    // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 23;
    if (has_max_transaction_counters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_transaction_counters());
    }

    // optional uint64 transaction_processing_delay = 7;
    if (has_transaction_processing_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_processing_delay());
    }

    // optional uint64 next_tiers_delay = 13;
    if (has_next_tiers_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_tiers_delay());
    }

    // optional .draiosproto.resource_categories resource_counters = 8;
    if (has_resource_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_counters());
    }

    // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
    if (has_syscall_errors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscall_errors());
    }

    // optional .draiosproto.counter_time_bytes external_io_net = 10;
    if (has_external_io_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->external_io_net());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional uint64 uptime = 33;
    if (has_uptime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uptime());
    }

    // optional uint64 memory_bytes_available_kb = 36;
    if (has_memory_bytes_available_kb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memory_bytes_available_kb());
    }

    // optional uint32 system_load_1 = 41;
    if (has_system_load_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->system_load_1());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 system_load_5 = 42;
    if (has_system_load_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->system_load_5());
    }

    // optional uint32 system_load_15 = 43;
    if (has_system_load_15()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->system_load_15());
    }

  }
  // repeated uint32 cpu_loads = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cpu_loads_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cpu_loads(i));
    }
    total_size += 1 * this->cpu_loads_size() + data_size;
  }

  // repeated uint32 cpu_steal = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->cpu_steal_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cpu_steal(i));
    }
    total_size += 1 * this->cpu_steal_size() + data_size;
  }

  // repeated .draiosproto.network_by_port network_by_serverports = 24;
  total_size += 2 * this->network_by_serverports_size();
  for (int i = 0; i < this->network_by_serverports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->network_by_serverports(i));
  }

  // repeated uint32 cpu_idle = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->cpu_idle_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cpu_idle(i));
    }
    total_size += 2 * this->cpu_idle_size() + data_size;
  }

  // repeated uint32 system_cpu = 34;
  {
    int data_size = 0;
    for (int i = 0; i < this->system_cpu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->system_cpu(i));
    }
    total_size += 2 * this->system_cpu_size() + data_size;
  }

  // repeated uint32 user_cpu = 35;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_cpu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_cpu(i));
    }
    total_size += 2 * this->user_cpu_size() + data_size;
  }

  // repeated uint32 iowait_cpu = 37;
  {
    int data_size = 0;
    for (int i = 0; i < this->iowait_cpu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->iowait_cpu(i));
    }
    total_size += 2 * this->iowait_cpu_size() + data_size;
  }

  // repeated uint32 nice_cpu = 38;
  {
    int data_size = 0;
    for (int i = 0; i < this->nice_cpu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->nice_cpu(i));
    }
    total_size += 2 * this->nice_cpu_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void host::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const host* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const host*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void host::MergeFrom(const host& from) {
  GOOGLE_CHECK_NE(&from, this);
  cpu_loads_.MergeFrom(from.cpu_loads_);
  cpu_steal_.MergeFrom(from.cpu_steal_);
  network_by_serverports_.MergeFrom(from.network_by_serverports_);
  cpu_idle_.MergeFrom(from.cpu_idle_);
  system_cpu_.MergeFrom(from.system_cpu_);
  user_cpu_.MergeFrom(from.user_cpu_);
  iowait_cpu_.MergeFrom(from.iowait_cpu_);
  nice_cpu_.MergeFrom(from.nice_cpu_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_num_cpus()) {
      set_num_cpus(from.num_cpus());
    }
    if (from.has_physical_memory_size_bytes()) {
      set_physical_memory_size_bytes(from.physical_memory_size_bytes());
    }
    if (from.has_tcounters()) {
      mutable_tcounters()->::draiosproto::time_categories::MergeFrom(from.tcounters());
    }
    if (from.has_reqcounters()) {
      mutable_reqcounters()->::draiosproto::transaction_breakdown_categories::MergeFrom(from.reqcounters());
    }
    if (from.has_transaction_counters()) {
      mutable_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.transaction_counters());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_min_transaction_counters()) {
      mutable_min_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.min_transaction_counters());
    }
    if (from.has_max_transaction_counters()) {
      mutable_max_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.max_transaction_counters());
    }
    if (from.has_transaction_processing_delay()) {
      set_transaction_processing_delay(from.transaction_processing_delay());
    }
    if (from.has_next_tiers_delay()) {
      set_next_tiers_delay(from.next_tiers_delay());
    }
    if (from.has_resource_counters()) {
      mutable_resource_counters()->::draiosproto::resource_categories::MergeFrom(from.resource_counters());
    }
    if (from.has_syscall_errors()) {
      mutable_syscall_errors()->::draiosproto::counter_syscall_errors::MergeFrom(from.syscall_errors());
    }
    if (from.has_external_io_net()) {
      mutable_external_io_net()->::draiosproto::counter_time_bytes::MergeFrom(from.external_io_net());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_uptime()) {
      set_uptime(from.uptime());
    }
    if (from.has_memory_bytes_available_kb()) {
      set_memory_bytes_available_kb(from.memory_bytes_available_kb());
    }
    if (from.has_system_load_1()) {
      set_system_load_1(from.system_load_1());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_system_load_5()) {
      set_system_load_5(from.system_load_5());
    }
    if (from.has_system_load_15()) {
      set_system_load_15(from.system_load_15());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void host::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void host::CopyFrom(const host& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool host::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  if (has_tcounters()) {
    if (!this->tcounters().IsInitialized()) return false;
  }
  if (has_reqcounters()) {
    if (!this->reqcounters().IsInitialized()) return false;
  }
  if (has_transaction_counters()) {
    if (!this->transaction_counters().IsInitialized()) return false;
  }
  if (has_min_transaction_counters()) {
    if (!this->min_transaction_counters().IsInitialized()) return false;
  }
  if (has_max_transaction_counters()) {
    if (!this->max_transaction_counters().IsInitialized()) return false;
  }
  if (has_syscall_errors()) {
    if (!this->syscall_errors().IsInitialized()) return false;
  }
  if (has_external_io_net()) {
    if (!this->external_io_net().IsInitialized()) return false;
  }
  for (int i = 0; i < network_by_serverports_size(); i++) {
    if (!this->network_by_serverports(i).IsInitialized()) return false;
  }
  return true;
}

void host::Swap(host* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(num_cpus_, other->num_cpus_);
    cpu_loads_.Swap(&other->cpu_loads_);
    cpu_steal_.Swap(&other->cpu_steal_);
    std::swap(physical_memory_size_bytes_, other->physical_memory_size_bytes_);
    std::swap(tcounters_, other->tcounters_);
    std::swap(reqcounters_, other->reqcounters_);
    std::swap(transaction_counters_, other->transaction_counters_);
    std::swap(min_transaction_counters_, other->min_transaction_counters_);
    std::swap(max_transaction_counters_, other->max_transaction_counters_);
    std::swap(transaction_processing_delay_, other->transaction_processing_delay_);
    std::swap(next_tiers_delay_, other->next_tiers_delay_);
    std::swap(resource_counters_, other->resource_counters_);
    std::swap(syscall_errors_, other->syscall_errors_);
    std::swap(external_io_net_, other->external_io_net_);
    network_by_serverports_.Swap(&other->network_by_serverports_);
    cpu_idle_.Swap(&other->cpu_idle_);
    std::swap(uptime_, other->uptime_);
    system_cpu_.Swap(&other->system_cpu_);
    user_cpu_.Swap(&other->user_cpu_);
    std::swap(memory_bytes_available_kb_, other->memory_bytes_available_kb_);
    iowait_cpu_.Swap(&other->iowait_cpu_);
    nice_cpu_.Swap(&other->nice_cpu_);
    std::swap(system_load_1_, other->system_load_1_);
    std::swap(system_load_5_, other->system_load_5_);
    std::swap(system_load_15_, other->system_load_15_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata host::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = host_descriptor_;
  metadata.reflection = host_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int process::kDetailsFieldNumber;
const int process::kIsIpv4TransactionServerFieldNumber;
const int process::kIsUnixTransactionServerFieldNumber;
const int process::kIsIpv4TransactionClientFieldNumber;
const int process::kIsUnixTransactionClientFieldNumber;
const int process::kNetroleFieldNumber;
const int process::kTcountersFieldNumber;
const int process::kTransactionCountersFieldNumber;
const int process::kMinTransactionCountersFieldNumber;
const int process::kMaxTransactionCountersFieldNumber;
const int process::kTransactionProcessingDelayFieldNumber;
const int process::kNextTiersDelayFieldNumber;
const int process::kResourceCountersFieldNumber;
const int process::kSyscallErrorsFieldNumber;
const int process::kProtosFieldNumber;
const int process::kStartCountFieldNumber;
const int process::kCountProcessesFieldNumber;
#endif  // !_MSC_VER

process::process()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void process::InitAsDefaultInstance() {
  details_ = const_cast< ::draiosproto::process_details*>(&::draiosproto::process_details::default_instance());
  tcounters_ = const_cast< ::draiosproto::time_categories*>(&::draiosproto::time_categories::default_instance());
  transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
  min_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
  max_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
  resource_counters_ = const_cast< ::draiosproto::resource_categories*>(&::draiosproto::resource_categories::default_instance());
  syscall_errors_ = const_cast< ::draiosproto::counter_syscall_errors*>(&::draiosproto::counter_syscall_errors::default_instance());
  protos_ = const_cast< ::draiosproto::proto_info*>(&::draiosproto::proto_info::default_instance());
}

process::process(const process& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void process::SharedCtor() {
  _cached_size_ = 0;
  details_ = NULL;
  is_ipv4_transaction_server_ = false;
  is_unix_transaction_server_ = false;
  is_ipv4_transaction_client_ = false;
  is_unix_transaction_client_ = false;
  netrole_ = 0u;
  tcounters_ = NULL;
  transaction_counters_ = NULL;
  min_transaction_counters_ = NULL;
  max_transaction_counters_ = NULL;
  transaction_processing_delay_ = GOOGLE_ULONGLONG(0);
  next_tiers_delay_ = GOOGLE_ULONGLONG(0);
  resource_counters_ = NULL;
  syscall_errors_ = NULL;
  protos_ = NULL;
  start_count_ = GOOGLE_ULONGLONG(0);
  count_processes_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

process::~process() {
  SharedDtor();
}

void process::SharedDtor() {
  if (this != default_instance_) {
    delete details_;
    delete tcounters_;
    delete transaction_counters_;
    delete min_transaction_counters_;
    delete max_transaction_counters_;
    delete resource_counters_;
    delete syscall_errors_;
    delete protos_;
  }
}

void process::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* process::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return process_descriptor_;
}

const process& process::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

process* process::default_instance_ = NULL;

process* process::New() const {
  return new process;
}

void process::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_details()) {
      if (details_ != NULL) details_->::draiosproto::process_details::Clear();
    }
    is_ipv4_transaction_server_ = false;
    is_unix_transaction_server_ = false;
    is_ipv4_transaction_client_ = false;
    is_unix_transaction_client_ = false;
    netrole_ = 0u;
    if (has_tcounters()) {
      if (tcounters_ != NULL) tcounters_->::draiosproto::time_categories::Clear();
    }
    if (has_transaction_counters()) {
      if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_min_transaction_counters()) {
      if (min_transaction_counters_ != NULL) min_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    if (has_max_transaction_counters()) {
      if (max_transaction_counters_ != NULL) max_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    transaction_processing_delay_ = GOOGLE_ULONGLONG(0);
    next_tiers_delay_ = GOOGLE_ULONGLONG(0);
    if (has_resource_counters()) {
      if (resource_counters_ != NULL) resource_counters_->::draiosproto::resource_categories::Clear();
    }
    if (has_syscall_errors()) {
      if (syscall_errors_ != NULL) syscall_errors_->::draiosproto::counter_syscall_errors::Clear();
    }
    if (has_protos()) {
      if (protos_ != NULL) protos_->::draiosproto::proto_info::Clear();
    }
    start_count_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    count_processes_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool process::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .draiosproto.process_details details = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_ipv4_transaction_server;
        break;
      }

      // optional bool is_ipv4_transaction_server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ipv4_transaction_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ipv4_transaction_server_)));
          set_has_is_ipv4_transaction_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_unix_transaction_server;
        break;
      }

      // optional bool is_unix_transaction_server = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_unix_transaction_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unix_transaction_server_)));
          set_has_is_unix_transaction_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tcounters;
        break;
      }

      // optional .draiosproto.time_categories tcounters = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tcounters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcounters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_transaction_processing_delay;
        break;
      }

      // optional uint64 transaction_processing_delay = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_processing_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_processing_delay_)));
          set_has_transaction_processing_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_resource_counters;
        break;
      }

      // optional .draiosproto.resource_categories resource_counters = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_syscall_errors;
        break;
      }

      // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscall_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscall_errors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_ipv4_transaction_client;
        break;
      }

      // optional bool is_ipv4_transaction_client = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ipv4_transaction_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ipv4_transaction_client_)));
          set_has_is_ipv4_transaction_client();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_unix_transaction_client;
        break;
      }

      // optional bool is_unix_transaction_client = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_unix_transaction_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unix_transaction_client_)));
          set_has_is_unix_transaction_client();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_next_tiers_delay;
        break;
      }

      // optional uint64 next_tiers_delay = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_tiers_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_tiers_delay_)));
          set_has_next_tiers_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_netrole;
        break;
      }

      // optional uint32 netrole = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_netrole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netrole_)));
          set_has_netrole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_min_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_min_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_max_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_protos;
        break;
      }

      // optional .draiosproto.proto_info protos = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_protos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_start_count;
        break;
      }

      // optional uint64 start_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_count_)));
          set_has_start_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_count_processes;
        break;
      }

      // optional uint64 count_processes = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_processes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_processes_)));
          set_has_count_processes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void process::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .draiosproto.process_details details = 2;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->details(), output);
  }

  // optional bool is_ipv4_transaction_server = 3;
  if (has_is_ipv4_transaction_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_ipv4_transaction_server(), output);
  }

  // optional bool is_unix_transaction_server = 4;
  if (has_is_unix_transaction_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_unix_transaction_server(), output);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tcounters(), output);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
  if (has_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->transaction_counters(), output);
  }

  // optional uint64 transaction_processing_delay = 7;
  if (has_transaction_processing_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->transaction_processing_delay(), output);
  }

  // optional .draiosproto.resource_categories resource_counters = 8;
  if (has_resource_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->resource_counters(), output);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
  if (has_syscall_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->syscall_errors(), output);
  }

  // optional bool is_ipv4_transaction_client = 10;
  if (has_is_ipv4_transaction_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_ipv4_transaction_client(), output);
  }

  // optional bool is_unix_transaction_client = 11;
  if (has_is_unix_transaction_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_unix_transaction_client(), output);
  }

  // optional uint64 next_tiers_delay = 12;
  if (has_next_tiers_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->next_tiers_delay(), output);
  }

  // optional uint32 netrole = 13;
  if (has_netrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->netrole(), output);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
  if (has_min_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->min_transaction_counters(), output);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
  if (has_max_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->max_transaction_counters(), output);
  }

  // optional .draiosproto.proto_info protos = 20;
  if (has_protos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->protos(), output);
  }

  // optional uint64 start_count = 21;
  if (has_start_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->start_count(), output);
  }

  // optional uint64 count_processes = 23;
  if (has_count_processes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->count_processes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* process::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .draiosproto.process_details details = 2;
  if (has_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->details(), target);
  }

  // optional bool is_ipv4_transaction_server = 3;
  if (has_is_ipv4_transaction_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_ipv4_transaction_server(), target);
  }

  // optional bool is_unix_transaction_server = 4;
  if (has_is_unix_transaction_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_unix_transaction_server(), target);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tcounters(), target);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
  if (has_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->transaction_counters(), target);
  }

  // optional uint64 transaction_processing_delay = 7;
  if (has_transaction_processing_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->transaction_processing_delay(), target);
  }

  // optional .draiosproto.resource_categories resource_counters = 8;
  if (has_resource_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->resource_counters(), target);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
  if (has_syscall_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->syscall_errors(), target);
  }

  // optional bool is_ipv4_transaction_client = 10;
  if (has_is_ipv4_transaction_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_ipv4_transaction_client(), target);
  }

  // optional bool is_unix_transaction_client = 11;
  if (has_is_unix_transaction_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_unix_transaction_client(), target);
  }

  // optional uint64 next_tiers_delay = 12;
  if (has_next_tiers_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->next_tiers_delay(), target);
  }

  // optional uint32 netrole = 13;
  if (has_netrole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->netrole(), target);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
  if (has_min_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->min_transaction_counters(), target);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
  if (has_max_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->max_transaction_counters(), target);
  }

  // optional .draiosproto.proto_info protos = 20;
  if (has_protos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->protos(), target);
  }

  // optional uint64 start_count = 21;
  if (has_start_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->start_count(), target);
  }

  // optional uint64 count_processes = 23;
  if (has_count_processes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->count_processes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int process::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .draiosproto.process_details details = 2;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details());
    }

    // optional bool is_ipv4_transaction_server = 3;
    if (has_is_ipv4_transaction_server()) {
      total_size += 1 + 1;
    }

    // optional bool is_unix_transaction_server = 4;
    if (has_is_unix_transaction_server()) {
      total_size += 1 + 1;
    }

    // optional bool is_ipv4_transaction_client = 10;
    if (has_is_ipv4_transaction_client()) {
      total_size += 1 + 1;
    }

    // optional bool is_unix_transaction_client = 11;
    if (has_is_unix_transaction_client()) {
      total_size += 1 + 1;
    }

    // optional uint32 netrole = 13;
    if (has_netrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netrole());
    }

    // optional .draiosproto.time_categories tcounters = 5;
    if (has_tcounters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tcounters());
    }

    // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
    if (has_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_counters());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
    if (has_min_transaction_counters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_transaction_counters());
    }

    // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
    if (has_max_transaction_counters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_transaction_counters());
    }

    // optional uint64 transaction_processing_delay = 7;
    if (has_transaction_processing_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_processing_delay());
    }

    // optional uint64 next_tiers_delay = 12;
    if (has_next_tiers_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_tiers_delay());
    }

    // optional .draiosproto.resource_categories resource_counters = 8;
    if (has_resource_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_counters());
    }

    // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
    if (has_syscall_errors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscall_errors());
    }

    // optional .draiosproto.proto_info protos = 20;
    if (has_protos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->protos());
    }

    // optional uint64 start_count = 21;
    if (has_start_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_count());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 count_processes = 23;
    if (has_count_processes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count_processes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void process::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const process* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const process*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void process::MergeFrom(const process& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_details()) {
      mutable_details()->::draiosproto::process_details::MergeFrom(from.details());
    }
    if (from.has_is_ipv4_transaction_server()) {
      set_is_ipv4_transaction_server(from.is_ipv4_transaction_server());
    }
    if (from.has_is_unix_transaction_server()) {
      set_is_unix_transaction_server(from.is_unix_transaction_server());
    }
    if (from.has_is_ipv4_transaction_client()) {
      set_is_ipv4_transaction_client(from.is_ipv4_transaction_client());
    }
    if (from.has_is_unix_transaction_client()) {
      set_is_unix_transaction_client(from.is_unix_transaction_client());
    }
    if (from.has_netrole()) {
      set_netrole(from.netrole());
    }
    if (from.has_tcounters()) {
      mutable_tcounters()->::draiosproto::time_categories::MergeFrom(from.tcounters());
    }
    if (from.has_transaction_counters()) {
      mutable_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.transaction_counters());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_min_transaction_counters()) {
      mutable_min_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.min_transaction_counters());
    }
    if (from.has_max_transaction_counters()) {
      mutable_max_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.max_transaction_counters());
    }
    if (from.has_transaction_processing_delay()) {
      set_transaction_processing_delay(from.transaction_processing_delay());
    }
    if (from.has_next_tiers_delay()) {
      set_next_tiers_delay(from.next_tiers_delay());
    }
    if (from.has_resource_counters()) {
      mutable_resource_counters()->::draiosproto::resource_categories::MergeFrom(from.resource_counters());
    }
    if (from.has_syscall_errors()) {
      mutable_syscall_errors()->::draiosproto::counter_syscall_errors::MergeFrom(from.syscall_errors());
    }
    if (from.has_protos()) {
      mutable_protos()->::draiosproto::proto_info::MergeFrom(from.protos());
    }
    if (from.has_start_count()) {
      set_start_count(from.start_count());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_count_processes()) {
      set_count_processes(from.count_processes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void process::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void process::CopyFrom(const process& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool process::IsInitialized() const {

  if (has_details()) {
    if (!this->details().IsInitialized()) return false;
  }
  if (has_tcounters()) {
    if (!this->tcounters().IsInitialized()) return false;
  }
  if (has_transaction_counters()) {
    if (!this->transaction_counters().IsInitialized()) return false;
  }
  if (has_min_transaction_counters()) {
    if (!this->min_transaction_counters().IsInitialized()) return false;
  }
  if (has_max_transaction_counters()) {
    if (!this->max_transaction_counters().IsInitialized()) return false;
  }
  if (has_syscall_errors()) {
    if (!this->syscall_errors().IsInitialized()) return false;
  }
  if (has_protos()) {
    if (!this->protos().IsInitialized()) return false;
  }
  return true;
}

void process::Swap(process* other) {
  if (other != this) {
    std::swap(details_, other->details_);
    std::swap(is_ipv4_transaction_server_, other->is_ipv4_transaction_server_);
    std::swap(is_unix_transaction_server_, other->is_unix_transaction_server_);
    std::swap(is_ipv4_transaction_client_, other->is_ipv4_transaction_client_);
    std::swap(is_unix_transaction_client_, other->is_unix_transaction_client_);
    std::swap(netrole_, other->netrole_);
    std::swap(tcounters_, other->tcounters_);
    std::swap(transaction_counters_, other->transaction_counters_);
    std::swap(min_transaction_counters_, other->min_transaction_counters_);
    std::swap(max_transaction_counters_, other->max_transaction_counters_);
    std::swap(transaction_processing_delay_, other->transaction_processing_delay_);
    std::swap(next_tiers_delay_, other->next_tiers_delay_);
    std::swap(resource_counters_, other->resource_counters_);
    std::swap(syscall_errors_, other->syscall_errors_);
    std::swap(protos_, other->protos_);
    std::swap(start_count_, other->start_count_);
    std::swap(count_processes_, other->count_processes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata process::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = process_descriptor_;
  metadata.reflection = process_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int program::kProcinfoFieldNumber;
const int program::kPidsFieldNumber;
#endif  // !_MSC_VER

program::program()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void program::InitAsDefaultInstance() {
  procinfo_ = const_cast< ::draiosproto::process*>(&::draiosproto::process::default_instance());
}

program::program(const program& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void program::SharedCtor() {
  _cached_size_ = 0;
  procinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

program::~program() {
  SharedDtor();
}

void program::SharedDtor() {
  if (this != default_instance_) {
    delete procinfo_;
  }
}

void program::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* program::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return program_descriptor_;
}

const program& program::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

program* program::default_instance_ = NULL;

program* program::New() const {
  return new program;
}

void program::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_procinfo()) {
      if (procinfo_ != NULL) procinfo_->::draiosproto::process::Clear();
    }
  }
  pids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool program::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.process procinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_procinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pids;
        break;
      }

      // repeated uint64 pids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_pids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void program::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.process procinfo = 1;
  if (has_procinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->procinfo(), output);
  }

  // repeated uint64 pids = 2;
  for (int i = 0; i < this->pids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->pids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* program::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.process procinfo = 1;
  if (has_procinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->procinfo(), target);
  }

  // repeated uint64 pids = 2;
  for (int i = 0; i < this->pids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->pids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int program::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.process procinfo = 1;
    if (has_procinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->procinfo());
    }

  }
  // repeated uint64 pids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->pids(i));
    }
    total_size += 1 * this->pids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void program::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const program* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const program*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void program::MergeFrom(const program& from) {
  GOOGLE_CHECK_NE(&from, this);
  pids_.MergeFrom(from.pids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_procinfo()) {
      mutable_procinfo()->::draiosproto::process::MergeFrom(from.procinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void program::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void program::CopyFrom(const program& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool program::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_procinfo()) {
    if (!this->procinfo().IsInitialized()) return false;
  }
  return true;
}

void program::Swap(program* other) {
  if (other != this) {
    std::swap(procinfo_, other->procinfo_);
    pids_.Swap(&other->pids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata program::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = program_descriptor_;
  metadata.reflection = program_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ipv4tuple::kSipFieldNumber;
const int ipv4tuple::kDipFieldNumber;
const int ipv4tuple::kSportFieldNumber;
const int ipv4tuple::kDportFieldNumber;
const int ipv4tuple::kL4ProtoFieldNumber;
#endif  // !_MSC_VER

ipv4tuple::ipv4tuple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ipv4tuple::InitAsDefaultInstance() {
}

ipv4tuple::ipv4tuple(const ipv4tuple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ipv4tuple::SharedCtor() {
  _cached_size_ = 0;
  sip_ = 0u;
  dip_ = 0u;
  sport_ = 0u;
  dport_ = 0u;
  l4proto_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ipv4tuple::~ipv4tuple() {
  SharedDtor();
}

void ipv4tuple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ipv4tuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv4tuple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ipv4tuple_descriptor_;
}

const ipv4tuple& ipv4tuple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

ipv4tuple* ipv4tuple::default_instance_ = NULL;

ipv4tuple* ipv4tuple::New() const {
  return new ipv4tuple;
}

void ipv4tuple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sip_ = 0u;
    dip_ = 0u;
    sport_ = 0u;
    dport_ = 0u;
    l4proto_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ipv4tuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sip_)));
          set_has_sip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dip;
        break;
      }

      // required uint32 dip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dip_)));
          set_has_dip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sport;
        break;
      }

      // required uint32 sport = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sport_)));
          set_has_sport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dport;
        break;
      }

      // required uint32 dport = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dport_)));
          set_has_dport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_l4proto;
        break;
      }

      // required uint32 l4proto = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_l4proto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &l4proto_)));
          set_has_l4proto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ipv4tuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sip = 1;
  if (has_sip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sip(), output);
  }

  // required uint32 dip = 2;
  if (has_dip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dip(), output);
  }

  // required uint32 sport = 3;
  if (has_sport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sport(), output);
  }

  // required uint32 dport = 4;
  if (has_dport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dport(), output);
  }

  // required uint32 l4proto = 5;
  if (has_l4proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->l4proto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ipv4tuple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sip = 1;
  if (has_sip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sip(), target);
  }

  // required uint32 dip = 2;
  if (has_dip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dip(), target);
  }

  // required uint32 sport = 3;
  if (has_sport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sport(), target);
  }

  // required uint32 dport = 4;
  if (has_dport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dport(), target);
  }

  // required uint32 l4proto = 5;
  if (has_l4proto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->l4proto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ipv4tuple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sip = 1;
    if (has_sip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sip());
    }

    // required uint32 dip = 2;
    if (has_dip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dip());
    }

    // required uint32 sport = 3;
    if (has_sport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sport());
    }

    // required uint32 dport = 4;
    if (has_dport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dport());
    }

    // required uint32 l4proto = 5;
    if (has_l4proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->l4proto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv4tuple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ipv4tuple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ipv4tuple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ipv4tuple::MergeFrom(const ipv4tuple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sip()) {
      set_sip(from.sip());
    }
    if (from.has_dip()) {
      set_dip(from.dip());
    }
    if (from.has_sport()) {
      set_sport(from.sport());
    }
    if (from.has_dport()) {
      set_dport(from.dport());
    }
    if (from.has_l4proto()) {
      set_l4proto(from.l4proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ipv4tuple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv4tuple::CopyFrom(const ipv4tuple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv4tuple::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ipv4tuple::Swap(ipv4tuple* other) {
  if (other != this) {
    std::swap(sip_, other->sip_);
    std::swap(dip_, other->dip_);
    std::swap(sport_, other->sport_);
    std::swap(dport_, other->dport_);
    std::swap(l4proto_, other->l4proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ipv4tuple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ipv4tuple_descriptor_;
  metadata.reflection = ipv4tuple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ipv4_connection::kTupleFieldNumber;
const int ipv4_connection::kSpidFieldNumber;
const int ipv4_connection::kDpidFieldNumber;
const int ipv4_connection::kCountersFieldNumber;
#endif  // !_MSC_VER

ipv4_connection::ipv4_connection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ipv4_connection::InitAsDefaultInstance() {
  tuple_ = const_cast< ::draiosproto::ipv4tuple*>(&::draiosproto::ipv4tuple::default_instance());
  counters_ = const_cast< ::draiosproto::connection_categories*>(&::draiosproto::connection_categories::default_instance());
}

ipv4_connection::ipv4_connection(const ipv4_connection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ipv4_connection::SharedCtor() {
  _cached_size_ = 0;
  tuple_ = NULL;
  spid_ = GOOGLE_ULONGLONG(0);
  dpid_ = GOOGLE_ULONGLONG(0);
  counters_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ipv4_connection::~ipv4_connection() {
  SharedDtor();
}

void ipv4_connection::SharedDtor() {
  if (this != default_instance_) {
    delete tuple_;
    delete counters_;
  }
}

void ipv4_connection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv4_connection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ipv4_connection_descriptor_;
}

const ipv4_connection& ipv4_connection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

ipv4_connection* ipv4_connection::default_instance_ = NULL;

ipv4_connection* ipv4_connection::New() const {
  return new ipv4_connection;
}

void ipv4_connection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tuple()) {
      if (tuple_ != NULL) tuple_->::draiosproto::ipv4tuple::Clear();
    }
    spid_ = GOOGLE_ULONGLONG(0);
    dpid_ = GOOGLE_ULONGLONG(0);
    if (has_counters()) {
      if (counters_ != NULL) counters_->::draiosproto::connection_categories::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ipv4_connection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.ipv4tuple tuple = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_spid;
        break;
      }

      // optional uint64 spid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &spid_)));
          set_has_spid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dpid;
        break;
      }

      // optional uint64 dpid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dpid_)));
          set_has_dpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_counters;
        break;
      }

      // required .draiosproto.connection_categories counters = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ipv4_connection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.ipv4tuple tuple = 1;
  if (has_tuple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tuple(), output);
  }

  // optional uint64 spid = 2;
  if (has_spid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->spid(), output);
  }

  // optional uint64 dpid = 5;
  if (has_dpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dpid(), output);
  }

  // required .draiosproto.connection_categories counters = 8;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->counters(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ipv4_connection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.ipv4tuple tuple = 1;
  if (has_tuple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tuple(), target);
  }

  // optional uint64 spid = 2;
  if (has_spid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->spid(), target);
  }

  // optional uint64 dpid = 5;
  if (has_dpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->dpid(), target);
  }

  // required .draiosproto.connection_categories counters = 8;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->counters(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ipv4_connection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.ipv4tuple tuple = 1;
    if (has_tuple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuple());
    }

    // optional uint64 spid = 2;
    if (has_spid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->spid());
    }

    // optional uint64 dpid = 5;
    if (has_dpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dpid());
    }

    // required .draiosproto.connection_categories counters = 8;
    if (has_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counters());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv4_connection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ipv4_connection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ipv4_connection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ipv4_connection::MergeFrom(const ipv4_connection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tuple()) {
      mutable_tuple()->::draiosproto::ipv4tuple::MergeFrom(from.tuple());
    }
    if (from.has_spid()) {
      set_spid(from.spid());
    }
    if (from.has_dpid()) {
      set_dpid(from.dpid());
    }
    if (from.has_counters()) {
      mutable_counters()->::draiosproto::connection_categories::MergeFrom(from.counters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ipv4_connection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv4_connection::CopyFrom(const ipv4_connection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv4_connection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_tuple()) {
    if (!this->tuple().IsInitialized()) return false;
  }
  if (has_counters()) {
    if (!this->counters().IsInitialized()) return false;
  }
  return true;
}

void ipv4_connection::Swap(ipv4_connection* other) {
  if (other != this) {
    std::swap(tuple_, other->tuple_);
    std::swap(spid_, other->spid_);
    std::swap(dpid_, other->dpid_);
    std::swap(counters_, other->counters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ipv4_connection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ipv4_connection_descriptor_;
  metadata.reflection = ipv4_connection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ipv4_network_interface::kNameFieldNumber;
const int ipv4_network_interface::kAddrFieldNumber;
const int ipv4_network_interface::kNetmaskFieldNumber;
const int ipv4_network_interface::kBcastFieldNumber;
#endif  // !_MSC_VER

ipv4_network_interface::ipv4_network_interface()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ipv4_network_interface::InitAsDefaultInstance() {
}

ipv4_network_interface::ipv4_network_interface(const ipv4_network_interface& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ipv4_network_interface::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addr_ = 0u;
  netmask_ = 0u;
  bcast_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ipv4_network_interface::~ipv4_network_interface() {
  SharedDtor();
}

void ipv4_network_interface::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ipv4_network_interface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv4_network_interface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ipv4_network_interface_descriptor_;
}

const ipv4_network_interface& ipv4_network_interface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

ipv4_network_interface* ipv4_network_interface::default_instance_ = NULL;

ipv4_network_interface* ipv4_network_interface::New() const {
  return new ipv4_network_interface;
}

void ipv4_network_interface::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    addr_ = 0u;
    netmask_ = 0u;
    bcast_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ipv4_network_interface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addr;
        break;
      }

      // required uint32 addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_netmask;
        break;
      }

      // required uint32 netmask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_netmask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmask_)));
          set_has_netmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bcast;
        break;
      }

      // optional uint32 bcast = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bcast_)));
          set_has_bcast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ipv4_network_interface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 addr = 2;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->addr(), output);
  }

  // required uint32 netmask = 3;
  if (has_netmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmask(), output);
  }

  // optional uint32 bcast = 4;
  if (has_bcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bcast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ipv4_network_interface::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 addr = 2;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->addr(), target);
  }

  // required uint32 netmask = 3;
  if (has_netmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmask(), target);
  }

  // optional uint32 bcast = 4;
  if (has_bcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bcast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ipv4_network_interface::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 addr = 2;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addr());
    }

    // required uint32 netmask = 3;
    if (has_netmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmask());
    }

    // optional uint32 bcast = 4;
    if (has_bcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bcast());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv4_network_interface::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ipv4_network_interface* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ipv4_network_interface*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ipv4_network_interface::MergeFrom(const ipv4_network_interface& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_netmask()) {
      set_netmask(from.netmask());
    }
    if (from.has_bcast()) {
      set_bcast(from.bcast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ipv4_network_interface::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv4_network_interface::CopyFrom(const ipv4_network_interface& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv4_network_interface::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ipv4_network_interface::Swap(ipv4_network_interface* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(addr_, other->addr_);
    std::swap(netmask_, other->netmask_);
    std::swap(bcast_, other->bcast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ipv4_network_interface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ipv4_network_interface_descriptor_;
  metadata.reflection = ipv4_network_interface_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mounted_fs::kDeviceFieldNumber;
const int mounted_fs::kMountDirFieldNumber;
const int mounted_fs::kTypeFieldNumber;
const int mounted_fs::kSizeBytesFieldNumber;
const int mounted_fs::kUsedBytesFieldNumber;
const int mounted_fs::kAvailableBytesFieldNumber;
const int mounted_fs::kTotalInodesFieldNumber;
const int mounted_fs::kUsedInodesFieldNumber;
#endif  // !_MSC_VER

mounted_fs::mounted_fs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mounted_fs::InitAsDefaultInstance() {
}

mounted_fs::mounted_fs(const mounted_fs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mounted_fs::SharedCtor() {
  _cached_size_ = 0;
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mount_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_bytes_ = GOOGLE_ULONGLONG(0);
  used_bytes_ = GOOGLE_ULONGLONG(0);
  available_bytes_ = GOOGLE_ULONGLONG(0);
  total_inodes_ = GOOGLE_ULONGLONG(0);
  used_inodes_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mounted_fs::~mounted_fs() {
  SharedDtor();
}

void mounted_fs::SharedDtor() {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (mount_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete mount_dir_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void mounted_fs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mounted_fs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mounted_fs_descriptor_;
}

const mounted_fs& mounted_fs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

mounted_fs* mounted_fs::default_instance_ = NULL;

mounted_fs* mounted_fs::New() const {
  return new mounted_fs;
}

void mounted_fs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    if (has_mount_dir()) {
      if (mount_dir_ != &::google::protobuf::internal::kEmptyString) {
        mount_dir_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    size_bytes_ = GOOGLE_ULONGLONG(0);
    used_bytes_ = GOOGLE_ULONGLONG(0);
    available_bytes_ = GOOGLE_ULONGLONG(0);
    total_inodes_ = GOOGLE_ULONGLONG(0);
    used_inodes_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mounted_fs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string device = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mount_dir;
        break;
      }

      // required string mount_dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mount_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mount_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mount_dir().data(), this->mount_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size_bytes;
        break;
      }

      // required uint64 size_bytes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_bytes_)));
          set_has_size_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_used_bytes;
        break;
      }

      // required uint64 used_bytes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_bytes_)));
          set_has_used_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_available_bytes;
        break;
      }

      // required uint64 available_bytes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_available_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &available_bytes_)));
          set_has_available_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_total_inodes;
        break;
      }

      // optional uint64 total_inodes = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_inodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_inodes_)));
          set_has_total_inodes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_used_inodes;
        break;
      }

      // optional uint64 used_inodes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_inodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_inodes_)));
          set_has_used_inodes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mounted_fs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string device = 1;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device(), output);
  }

  // required string mount_dir = 2;
  if (has_mount_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mount_dir().data(), this->mount_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mount_dir(), output);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }

  // required uint64 size_bytes = 4;
  if (has_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->size_bytes(), output);
  }

  // required uint64 used_bytes = 5;
  if (has_used_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->used_bytes(), output);
  }

  // required uint64 available_bytes = 6;
  if (has_available_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->available_bytes(), output);
  }

  // optional uint64 total_inodes = 10;
  if (has_total_inodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->total_inodes(), output);
  }

  // optional uint64 used_inodes = 11;
  if (has_used_inodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->used_inodes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mounted_fs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string device = 1;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device(), target);
  }

  // required string mount_dir = 2;
  if (has_mount_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mount_dir().data(), this->mount_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mount_dir(), target);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // required uint64 size_bytes = 4;
  if (has_size_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->size_bytes(), target);
  }

  // required uint64 used_bytes = 5;
  if (has_used_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->used_bytes(), target);
  }

  // required uint64 available_bytes = 6;
  if (has_available_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->available_bytes(), target);
  }

  // optional uint64 total_inodes = 10;
  if (has_total_inodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->total_inodes(), target);
  }

  // optional uint64 used_inodes = 11;
  if (has_used_inodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->used_inodes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mounted_fs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // required string mount_dir = 2;
    if (has_mount_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mount_dir());
    }

    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required uint64 size_bytes = 4;
    if (has_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size_bytes());
    }

    // required uint64 used_bytes = 5;
    if (has_used_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->used_bytes());
    }

    // required uint64 available_bytes = 6;
    if (has_available_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->available_bytes());
    }

    // optional uint64 total_inodes = 10;
    if (has_total_inodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_inodes());
    }

    // optional uint64 used_inodes = 11;
    if (has_used_inodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->used_inodes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mounted_fs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mounted_fs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mounted_fs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mounted_fs::MergeFrom(const mounted_fs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_mount_dir()) {
      set_mount_dir(from.mount_dir());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size_bytes()) {
      set_size_bytes(from.size_bytes());
    }
    if (from.has_used_bytes()) {
      set_used_bytes(from.used_bytes());
    }
    if (from.has_available_bytes()) {
      set_available_bytes(from.available_bytes());
    }
    if (from.has_total_inodes()) {
      set_total_inodes(from.total_inodes());
    }
    if (from.has_used_inodes()) {
      set_used_inodes(from.used_inodes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mounted_fs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mounted_fs::CopyFrom(const mounted_fs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mounted_fs::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void mounted_fs::Swap(mounted_fs* other) {
  if (other != this) {
    std::swap(device_, other->device_);
    std::swap(mount_dir_, other->mount_dir_);
    std::swap(type_, other->type_);
    std::swap(size_bytes_, other->size_bytes_);
    std::swap(used_bytes_, other->used_bytes_);
    std::swap(available_bytes_, other->available_bytes_);
    std::swap(total_inodes_, other->total_inodes_);
    std::swap(used_inodes_, other->used_inodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mounted_fs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mounted_fs_descriptor_;
  metadata.reflection = mounted_fs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int file_stat::kNameFieldNumber;
const int file_stat::kBytesFieldNumber;
const int file_stat::kTimeNsFieldNumber;
const int file_stat::kOpenCountFieldNumber;
const int file_stat::kErrorsFieldNumber;
#endif  // !_MSC_VER

file_stat::file_stat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void file_stat::InitAsDefaultInstance() {
}

file_stat::file_stat(const file_stat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void file_stat::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bytes_ = 0u;
  time_ns_ = GOOGLE_ULONGLONG(0);
  open_count_ = 0u;
  errors_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

file_stat::~file_stat() {
  SharedDtor();
}

void file_stat::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void file_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* file_stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_stat_descriptor_;
}

const file_stat& file_stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

file_stat* file_stat::default_instance_ = NULL;

file_stat* file_stat::New() const {
  return new file_stat;
}

void file_stat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    bytes_ = 0u;
    time_ns_ = GOOGLE_ULONGLONG(0);
    open_count_ = 0u;
    errors_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool file_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bytes;
        break;
      }

      // required uint32 bytes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_)));
          set_has_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_ns;
        break;
      }

      // required uint64 time_ns = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_)));
          set_has_time_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_open_count;
        break;
      }

      // required uint32 open_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_count_)));
          set_has_open_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_errors;
        break;
      }

      // required uint32 errors = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errors_)));
          set_has_errors();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void file_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 bytes = 2;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bytes(), output);
  }

  // required uint64 time_ns = 3;
  if (has_time_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_ns(), output);
  }

  // required uint32 open_count = 4;
  if (has_open_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->open_count(), output);
  }

  // required uint32 errors = 5;
  if (has_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->errors(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* file_stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 bytes = 2;
  if (has_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bytes(), target);
  }

  // required uint64 time_ns = 3;
  if (has_time_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time_ns(), target);
  }

  // required uint32 open_count = 4;
  if (has_open_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->open_count(), target);
  }

  // required uint32 errors = 5;
  if (has_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->errors(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int file_stat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 bytes = 2;
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes());
    }

    // required uint64 time_ns = 3;
    if (has_time_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_ns());
    }

    // required uint32 open_count = 4;
    if (has_open_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_count());
    }

    // required uint32 errors = 5;
    if (has_errors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errors());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void file_stat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const file_stat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const file_stat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void file_stat::MergeFrom(const file_stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
    if (from.has_time_ns()) {
      set_time_ns(from.time_ns());
    }
    if (from.has_open_count()) {
      set_open_count(from.open_count());
    }
    if (from.has_errors()) {
      set_errors(from.errors());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void file_stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void file_stat::CopyFrom(const file_stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool file_stat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void file_stat::Swap(file_stat* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(bytes_, other->bytes_);
    std::swap(time_ns_, other->time_ns_);
    std::swap(open_count_, other->open_count_);
    std::swap(errors_, other->errors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata file_stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = file_stat_descriptor_;
  metadata.reflection = file_stat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int container_port_mapping::kHostIpFieldNumber;
const int container_port_mapping::kHostPortFieldNumber;
const int container_port_mapping::kContainerIpFieldNumber;
const int container_port_mapping::kContainerPortFieldNumber;
#endif  // !_MSC_VER

container_port_mapping::container_port_mapping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void container_port_mapping::InitAsDefaultInstance() {
}

container_port_mapping::container_port_mapping(const container_port_mapping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void container_port_mapping::SharedCtor() {
  _cached_size_ = 0;
  host_ip_ = 0u;
  host_port_ = 0u;
  container_ip_ = 0u;
  container_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

container_port_mapping::~container_port_mapping() {
  SharedDtor();
}

void container_port_mapping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void container_port_mapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* container_port_mapping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return container_port_mapping_descriptor_;
}

const container_port_mapping& container_port_mapping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

container_port_mapping* container_port_mapping::default_instance_ = NULL;

container_port_mapping* container_port_mapping::New() const {
  return new container_port_mapping;
}

void container_port_mapping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    host_ip_ = 0u;
    host_port_ = 0u;
    container_ip_ = 0u;
    container_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool container_port_mapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 host_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_ip_)));
          set_has_host_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_host_port;
        break;
      }

      // optional uint32 host_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_host_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_port_)));
          set_has_host_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_container_ip;
        break;
      }

      // optional uint32 container_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_container_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &container_ip_)));
          set_has_container_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_container_port;
        break;
      }

      // optional uint32 container_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_container_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &container_port_)));
          set_has_container_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void container_port_mapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 host_ip = 1;
  if (has_host_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->host_ip(), output);
  }

  // optional uint32 host_port = 2;
  if (has_host_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->host_port(), output);
  }

  // optional uint32 container_ip = 3;
  if (has_container_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->container_ip(), output);
  }

  // optional uint32 container_port = 4;
  if (has_container_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->container_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* container_port_mapping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 host_ip = 1;
  if (has_host_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->host_ip(), target);
  }

  // optional uint32 host_port = 2;
  if (has_host_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->host_port(), target);
  }

  // optional uint32 container_ip = 3;
  if (has_container_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->container_ip(), target);
  }

  // optional uint32 container_port = 4;
  if (has_container_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->container_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int container_port_mapping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 host_ip = 1;
    if (has_host_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_ip());
    }

    // optional uint32 host_port = 2;
    if (has_host_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_port());
    }

    // optional uint32 container_ip = 3;
    if (has_container_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->container_ip());
    }

    // optional uint32 container_port = 4;
    if (has_container_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->container_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void container_port_mapping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const container_port_mapping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const container_port_mapping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void container_port_mapping::MergeFrom(const container_port_mapping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host_ip()) {
      set_host_ip(from.host_ip());
    }
    if (from.has_host_port()) {
      set_host_port(from.host_port());
    }
    if (from.has_container_ip()) {
      set_container_ip(from.container_ip());
    }
    if (from.has_container_port()) {
      set_container_port(from.container_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void container_port_mapping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void container_port_mapping::CopyFrom(const container_port_mapping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool container_port_mapping::IsInitialized() const {

  return true;
}

void container_port_mapping::Swap(container_port_mapping* other) {
  if (other != this) {
    std::swap(host_ip_, other->host_ip_);
    std::swap(host_port_, other->host_port_);
    std::swap(container_ip_, other->container_ip_);
    std::swap(container_port_, other->container_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata container_port_mapping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = container_port_mapping_descriptor_;
  metadata.reflection = container_port_mapping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int container_label::kKeyFieldNumber;
const int container_label::kValueFieldNumber;
#endif  // !_MSC_VER

container_label::container_label()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void container_label::InitAsDefaultInstance() {
}

container_label::container_label(const container_label& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void container_label::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

container_label::~container_label() {
  SharedDtor();
}

void container_label::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void container_label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* container_label::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return container_label_descriptor_;
}

const container_label& container_label::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

container_label* container_label::default_instance_ = NULL;

container_label* container_label::New() const {
  return new container_label;
}

void container_label::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool container_label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void container_label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* container_label::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int container_label::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void container_label::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const container_label* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const container_label*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void container_label::MergeFrom(const container_label& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void container_label::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void container_label::CopyFrom(const container_label& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool container_label::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void container_label::Swap(container_label* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata container_label::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = container_label_descriptor_;
  metadata.reflection = container_label_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int container::kIdFieldNumber;
const int container::kTypeFieldNumber;
const int container::kNameFieldNumber;
const int container::kImageFieldNumber;
const int container::kTcountersFieldNumber;
const int container::kReqcountersFieldNumber;
const int container::kTransactionCountersFieldNumber;
const int container::kMinTransactionCountersFieldNumber;
const int container::kMaxTransactionCountersFieldNumber;
const int container::kTransactionProcessingDelayFieldNumber;
const int container::kNextTiersDelayFieldNumber;
const int container::kResourceCountersFieldNumber;
const int container::kSyscallErrorsFieldNumber;
const int container::kPortMappingsFieldNumber;
const int container::kProtosFieldNumber;
const int container::kLabelsFieldNumber;
const int container::kMountsFieldNumber;
const int container::kNetworkByServerportsFieldNumber;
const int container::kMesosTaskIdFieldNumber;
const int container::kImageIdFieldNumber;
#endif  // !_MSC_VER

container::container()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void container::InitAsDefaultInstance() {
  tcounters_ = const_cast< ::draiosproto::time_categories*>(&::draiosproto::time_categories::default_instance());
  reqcounters_ = const_cast< ::draiosproto::transaction_breakdown_categories*>(&::draiosproto::transaction_breakdown_categories::default_instance());
  transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
  min_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
  max_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
  resource_counters_ = const_cast< ::draiosproto::resource_categories*>(&::draiosproto::resource_categories::default_instance());
  syscall_errors_ = const_cast< ::draiosproto::counter_syscall_errors*>(&::draiosproto::counter_syscall_errors::default_instance());
  protos_ = const_cast< ::draiosproto::proto_info*>(&::draiosproto::proto_info::default_instance());
}

container::container(const container& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void container::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tcounters_ = NULL;
  reqcounters_ = NULL;
  transaction_counters_ = NULL;
  min_transaction_counters_ = NULL;
  max_transaction_counters_ = NULL;
  transaction_processing_delay_ = GOOGLE_ULONGLONG(0);
  next_tiers_delay_ = GOOGLE_ULONGLONG(0);
  resource_counters_ = NULL;
  syscall_errors_ = NULL;
  protos_ = NULL;
  mesos_task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  image_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

container::~container() {
  SharedDtor();
}

void container::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (mesos_task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete mesos_task_id_;
  }
  if (image_id_ != &::google::protobuf::internal::kEmptyString) {
    delete image_id_;
  }
  if (this != default_instance_) {
    delete tcounters_;
    delete reqcounters_;
    delete transaction_counters_;
    delete min_transaction_counters_;
    delete max_transaction_counters_;
    delete resource_counters_;
    delete syscall_errors_;
    delete protos_;
  }
}

void container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* container::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return container_descriptor_;
}

const container& container::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

container* container::default_instance_ = NULL;

container* container::New() const {
  return new container;
}

void container::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::kEmptyString) {
        image_->clear();
      }
    }
    if (has_tcounters()) {
      if (tcounters_ != NULL) tcounters_->::draiosproto::time_categories::Clear();
    }
    if (has_reqcounters()) {
      if (reqcounters_ != NULL) reqcounters_->::draiosproto::transaction_breakdown_categories::Clear();
    }
    if (has_transaction_counters()) {
      if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    if (has_min_transaction_counters()) {
      if (min_transaction_counters_ != NULL) min_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_max_transaction_counters()) {
      if (max_transaction_counters_ != NULL) max_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    transaction_processing_delay_ = GOOGLE_ULONGLONG(0);
    next_tiers_delay_ = GOOGLE_ULONGLONG(0);
    if (has_resource_counters()) {
      if (resource_counters_ != NULL) resource_counters_->::draiosproto::resource_categories::Clear();
    }
    if (has_syscall_errors()) {
      if (syscall_errors_ != NULL) syscall_errors_->::draiosproto::counter_syscall_errors::Clear();
    }
    if (has_protos()) {
      if (protos_ != NULL) protos_->::draiosproto::proto_info::Clear();
    }
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (has_mesos_task_id()) {
      if (mesos_task_id_ != &::google::protobuf::internal::kEmptyString) {
        mesos_task_id_->clear();
      }
    }
    if (has_image_id()) {
      if (image_id_ != &::google::protobuf::internal::kEmptyString) {
        image_id_->clear();
      }
    }
  }
  port_mappings_.Clear();
  labels_.Clear();
  mounts_.Clear();
  network_by_serverports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .draiosproto.container_type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::container_type_IsValid(value)) {
            set_type(static_cast< ::draiosproto::container_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_image;
        break;
      }

      // optional string image = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tcounters;
        break;
      }

      // optional .draiosproto.time_categories tcounters = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tcounters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcounters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reqcounters;
        break;
      }

      // optional .draiosproto.transaction_breakdown_categories reqcounters = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqcounters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqcounters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional transaction_counters = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_min_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_min_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_max_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_transaction_processing_delay;
        break;
      }

      // optional uint64 transaction_processing_delay = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_processing_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_processing_delay_)));
          set_has_transaction_processing_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_next_tiers_delay;
        break;
      }

      // optional uint64 next_tiers_delay = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_tiers_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_tiers_delay_)));
          set_has_next_tiers_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_resource_counters;
        break;
      }

      // optional .draiosproto.resource_categories resource_counters = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_syscall_errors;
        break;
      }

      // optional .draiosproto.counter_syscall_errors syscall_errors = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscall_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscall_errors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_port_mappings;
        break;
      }

      // repeated .draiosproto.container_port_mapping port_mappings = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port_mappings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_port_mappings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_port_mappings;
        if (input->ExpectTag(154)) goto parse_protos;
        break;
      }

      // optional .draiosproto.proto_info protos = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_protos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_labels;
        break;
      }

      // repeated .draiosproto.container_label labels = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_labels;
        if (input->ExpectTag(170)) goto parse_mounts;
        break;
      }

      // repeated .draiosproto.mounted_fs mounts = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mounts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_mounts;
        if (input->ExpectTag(178)) goto parse_network_by_serverports;
        break;
      }

      // repeated .draiosproto.network_by_port network_by_serverports = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_by_serverports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_network_by_serverports()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_network_by_serverports;
        if (input->ExpectTag(186)) goto parse_mesos_task_id;
        break;
      }

      // optional string mesos_task_id = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mesos_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mesos_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mesos_task_id().data(), this->mesos_task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_image_id;
        break;
      }

      // optional string image_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_id().data(), this->image_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional .draiosproto.container_type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string image = 4;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->image(), output);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tcounters(), output);
  }

  // optional .draiosproto.transaction_breakdown_categories reqcounters = 6;
  if (has_reqcounters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->reqcounters(), output);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 7;
  if (has_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->transaction_counters(), output);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 8;
  if (has_min_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->min_transaction_counters(), output);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 9;
  if (has_max_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->max_transaction_counters(), output);
  }

  // optional uint64 transaction_processing_delay = 10;
  if (has_transaction_processing_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->transaction_processing_delay(), output);
  }

  // optional uint64 next_tiers_delay = 12;
  if (has_next_tiers_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->next_tiers_delay(), output);
  }

  // optional .draiosproto.resource_categories resource_counters = 13;
  if (has_resource_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->resource_counters(), output);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 14;
  if (has_syscall_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->syscall_errors(), output);
  }

  // repeated .draiosproto.container_port_mapping port_mappings = 18;
  for (int i = 0; i < this->port_mappings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->port_mappings(i), output);
  }

  // optional .draiosproto.proto_info protos = 19;
  if (has_protos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->protos(), output);
  }

  // repeated .draiosproto.container_label labels = 20;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->labels(i), output);
  }

  // repeated .draiosproto.mounted_fs mounts = 21;
  for (int i = 0; i < this->mounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->mounts(i), output);
  }

  // repeated .draiosproto.network_by_port network_by_serverports = 22;
  for (int i = 0; i < this->network_by_serverports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->network_by_serverports(i), output);
  }

  // optional string mesos_task_id = 23;
  if (has_mesos_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mesos_task_id().data(), this->mesos_task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->mesos_task_id(), output);
  }

  // optional string image_id = 24;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->image_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* container::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .draiosproto.container_type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string image = 4;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->image(), target);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tcounters(), target);
  }

  // optional .draiosproto.transaction_breakdown_categories reqcounters = 6;
  if (has_reqcounters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->reqcounters(), target);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 7;
  if (has_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->transaction_counters(), target);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 8;
  if (has_min_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->min_transaction_counters(), target);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 9;
  if (has_max_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->max_transaction_counters(), target);
  }

  // optional uint64 transaction_processing_delay = 10;
  if (has_transaction_processing_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->transaction_processing_delay(), target);
  }

  // optional uint64 next_tiers_delay = 12;
  if (has_next_tiers_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->next_tiers_delay(), target);
  }

  // optional .draiosproto.resource_categories resource_counters = 13;
  if (has_resource_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->resource_counters(), target);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 14;
  if (has_syscall_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->syscall_errors(), target);
  }

  // repeated .draiosproto.container_port_mapping port_mappings = 18;
  for (int i = 0; i < this->port_mappings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->port_mappings(i), target);
  }

  // optional .draiosproto.proto_info protos = 19;
  if (has_protos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->protos(), target);
  }

  // repeated .draiosproto.container_label labels = 20;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->labels(i), target);
  }

  // repeated .draiosproto.mounted_fs mounts = 21;
  for (int i = 0; i < this->mounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->mounts(i), target);
  }

  // repeated .draiosproto.network_by_port network_by_serverports = 22;
  for (int i = 0; i < this->network_by_serverports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->network_by_serverports(i), target);
  }

  // optional string mesos_task_id = 23;
  if (has_mesos_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mesos_task_id().data(), this->mesos_task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->mesos_task_id(), target);
  }

  // optional string image_id = 24;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->image_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int container::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .draiosproto.container_type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string image = 4;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional .draiosproto.time_categories tcounters = 5;
    if (has_tcounters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tcounters());
    }

    // optional .draiosproto.transaction_breakdown_categories reqcounters = 6;
    if (has_reqcounters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqcounters());
    }

    // optional .draiosproto.counter_time_bidirectional transaction_counters = 7;
    if (has_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_counters());
    }

    // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 8;
    if (has_min_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_transaction_counters());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 9;
    if (has_max_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_transaction_counters());
    }

    // optional uint64 transaction_processing_delay = 10;
    if (has_transaction_processing_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_processing_delay());
    }

    // optional uint64 next_tiers_delay = 12;
    if (has_next_tiers_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_tiers_delay());
    }

    // optional .draiosproto.resource_categories resource_counters = 13;
    if (has_resource_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_counters());
    }

    // optional .draiosproto.counter_syscall_errors syscall_errors = 14;
    if (has_syscall_errors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscall_errors());
    }

    // optional .draiosproto.proto_info protos = 19;
    if (has_protos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->protos());
    }

  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // optional string mesos_task_id = 23;
    if (has_mesos_task_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mesos_task_id());
    }

    // optional string image_id = 24;
    if (has_image_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_id());
    }

  }
  // repeated .draiosproto.container_port_mapping port_mappings = 18;
  total_size += 2 * this->port_mappings_size();
  for (int i = 0; i < this->port_mappings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->port_mappings(i));
  }

  // repeated .draiosproto.container_label labels = 20;
  total_size += 2 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  // repeated .draiosproto.mounted_fs mounts = 21;
  total_size += 2 * this->mounts_size();
  for (int i = 0; i < this->mounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mounts(i));
  }

  // repeated .draiosproto.network_by_port network_by_serverports = 22;
  total_size += 2 * this->network_by_serverports_size();
  for (int i = 0; i < this->network_by_serverports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->network_by_serverports(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void container::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const container* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const container*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void container::MergeFrom(const container& from) {
  GOOGLE_CHECK_NE(&from, this);
  port_mappings_.MergeFrom(from.port_mappings_);
  labels_.MergeFrom(from.labels_);
  mounts_.MergeFrom(from.mounts_);
  network_by_serverports_.MergeFrom(from.network_by_serverports_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_tcounters()) {
      mutable_tcounters()->::draiosproto::time_categories::MergeFrom(from.tcounters());
    }
    if (from.has_reqcounters()) {
      mutable_reqcounters()->::draiosproto::transaction_breakdown_categories::MergeFrom(from.reqcounters());
    }
    if (from.has_transaction_counters()) {
      mutable_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.transaction_counters());
    }
    if (from.has_min_transaction_counters()) {
      mutable_min_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.min_transaction_counters());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_transaction_counters()) {
      mutable_max_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.max_transaction_counters());
    }
    if (from.has_transaction_processing_delay()) {
      set_transaction_processing_delay(from.transaction_processing_delay());
    }
    if (from.has_next_tiers_delay()) {
      set_next_tiers_delay(from.next_tiers_delay());
    }
    if (from.has_resource_counters()) {
      mutable_resource_counters()->::draiosproto::resource_categories::MergeFrom(from.resource_counters());
    }
    if (from.has_syscall_errors()) {
      mutable_syscall_errors()->::draiosproto::counter_syscall_errors::MergeFrom(from.syscall_errors());
    }
    if (from.has_protos()) {
      mutable_protos()->::draiosproto::proto_info::MergeFrom(from.protos());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_mesos_task_id()) {
      set_mesos_task_id(from.mesos_task_id());
    }
    if (from.has_image_id()) {
      set_image_id(from.image_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void container::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void container::CopyFrom(const container& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool container::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_tcounters()) {
    if (!this->tcounters().IsInitialized()) return false;
  }
  if (has_reqcounters()) {
    if (!this->reqcounters().IsInitialized()) return false;
  }
  if (has_transaction_counters()) {
    if (!this->transaction_counters().IsInitialized()) return false;
  }
  if (has_min_transaction_counters()) {
    if (!this->min_transaction_counters().IsInitialized()) return false;
  }
  if (has_max_transaction_counters()) {
    if (!this->max_transaction_counters().IsInitialized()) return false;
  }
  if (has_syscall_errors()) {
    if (!this->syscall_errors().IsInitialized()) return false;
  }
  if (has_protos()) {
    if (!this->protos().IsInitialized()) return false;
  }
  for (int i = 0; i < labels_size(); i++) {
    if (!this->labels(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mounts_size(); i++) {
    if (!this->mounts(i).IsInitialized()) return false;
  }
  for (int i = 0; i < network_by_serverports_size(); i++) {
    if (!this->network_by_serverports(i).IsInitialized()) return false;
  }
  return true;
}

void container::Swap(container* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(image_, other->image_);
    std::swap(tcounters_, other->tcounters_);
    std::swap(reqcounters_, other->reqcounters_);
    std::swap(transaction_counters_, other->transaction_counters_);
    std::swap(min_transaction_counters_, other->min_transaction_counters_);
    std::swap(max_transaction_counters_, other->max_transaction_counters_);
    std::swap(transaction_processing_delay_, other->transaction_processing_delay_);
    std::swap(next_tiers_delay_, other->next_tiers_delay_);
    std::swap(resource_counters_, other->resource_counters_);
    std::swap(syscall_errors_, other->syscall_errors_);
    port_mappings_.Swap(&other->port_mappings_);
    std::swap(protos_, other->protos_);
    labels_.Swap(&other->labels_);
    mounts_.Swap(&other->mounts_);
    network_by_serverports_.Swap(&other->network_by_serverports_);
    std::swap(mesos_task_id_, other->mesos_task_id_);
    std::swap(image_id_, other->image_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata container::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = container_descriptor_;
  metadata.reflection = container_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int k8s_pair::kKeyFieldNumber;
const int k8s_pair::kValueFieldNumber;
#endif  // !_MSC_VER

k8s_pair::k8s_pair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void k8s_pair::InitAsDefaultInstance() {
}

k8s_pair::k8s_pair(const k8s_pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void k8s_pair::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

k8s_pair::~k8s_pair() {
  SharedDtor();
}

void k8s_pair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void k8s_pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_pair_descriptor_;
}

const k8s_pair& k8s_pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

k8s_pair* k8s_pair::default_instance_ = NULL;

k8s_pair* k8s_pair::New() const {
  return new k8s_pair;
}

void k8s_pair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool k8s_pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void k8s_pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* k8s_pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int k8s_pair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const k8s_pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const k8s_pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void k8s_pair::MergeFrom(const k8s_pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void k8s_pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_pair::CopyFrom(const k8s_pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool k8s_pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void k8s_pair::Swap(k8s_pair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata k8s_pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_pair_descriptor_;
  metadata.reflection = k8s_pair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int k8s_common::kNameFieldNumber;
const int k8s_common::kUidFieldNumber;
const int k8s_common::kNamespaceFieldNumber;
const int k8s_common::kLabelsFieldNumber;
const int k8s_common::kSelectorsFieldNumber;
#endif  // !_MSC_VER

k8s_common::k8s_common()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void k8s_common::InitAsDefaultInstance() {
}

k8s_common::k8s_common(const k8s_common& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void k8s_common::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  namespace__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

k8s_common::~k8s_common() {
  SharedDtor();
}

void k8s_common::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (namespace__ != &::google::protobuf::internal::kEmptyString) {
    delete namespace__;
  }
  if (this != default_instance_) {
  }
}

void k8s_common::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_common::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_common_descriptor_;
}

const k8s_common& k8s_common::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

k8s_common* k8s_common::default_instance_ = NULL;

k8s_common* k8s_common::New() const {
  return new k8s_common;
}

void k8s_common::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_namespace_()) {
      if (namespace__ != &::google::protobuf::internal::kEmptyString) {
        namespace__->clear();
      }
    }
  }
  labels_.Clear();
  selectors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool k8s_common::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required string uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_namespace;
        break;
      }

      // optional string namespace = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namespace_().data(), this->namespace_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_labels;
        break;
      }

      // repeated .draiosproto.k8s_pair labels = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_labels;
        if (input->ExpectTag(42)) goto parse_selectors;
        break;
      }

      // repeated .draiosproto.k8s_pair selectors = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selectors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selectors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_selectors;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void k8s_common::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uid(), output);
  }

  // optional string namespace = 3;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->namespace_(), output);
  }

  // repeated .draiosproto.k8s_pair labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->labels(i), output);
  }

  // repeated .draiosproto.k8s_pair selectors = 5;
  for (int i = 0; i < this->selectors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->selectors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* k8s_common::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  // optional string namespace = 3;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->namespace_(), target);
  }

  // repeated .draiosproto.k8s_pair labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->labels(i), target);
  }

  // repeated .draiosproto.k8s_pair selectors = 5;
  for (int i = 0; i < this->selectors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->selectors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int k8s_common::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string namespace = 3;
    if (has_namespace_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespace_());
    }

  }
  // repeated .draiosproto.k8s_pair labels = 4;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  // repeated .draiosproto.k8s_pair selectors = 5;
  total_size += 1 * this->selectors_size();
  for (int i = 0; i < this->selectors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selectors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_common::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const k8s_common* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const k8s_common*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void k8s_common::MergeFrom(const k8s_common& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  selectors_.MergeFrom(from.selectors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_namespace_()) {
      set_namespace_(from.namespace_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void k8s_common::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_common::CopyFrom(const k8s_common& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool k8s_common::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < labels_size(); i++) {
    if (!this->labels(i).IsInitialized()) return false;
  }
  for (int i = 0; i < selectors_size(); i++) {
    if (!this->selectors(i).IsInitialized()) return false;
  }
  return true;
}

void k8s_common::Swap(k8s_common* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(uid_, other->uid_);
    std::swap(namespace__, other->namespace__);
    labels_.Swap(&other->labels_);
    selectors_.Swap(&other->selectors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata k8s_common::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_common_descriptor_;
  metadata.reflection = k8s_common_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int k8s_namespace::kCommonFieldNumber;
#endif  // !_MSC_VER

k8s_namespace::k8s_namespace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void k8s_namespace::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(&::draiosproto::k8s_common::default_instance());
}

k8s_namespace::k8s_namespace(const k8s_namespace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void k8s_namespace::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

k8s_namespace::~k8s_namespace() {
  SharedDtor();
}

void k8s_namespace::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void k8s_namespace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_namespace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_namespace_descriptor_;
}

const k8s_namespace& k8s_namespace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

k8s_namespace* k8s_namespace::default_instance_ = NULL;

k8s_namespace* k8s_namespace::New() const {
  return new k8s_namespace;
}

void k8s_namespace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool k8s_namespace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void k8s_namespace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* k8s_namespace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int k8s_namespace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.k8s_common common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_namespace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const k8s_namespace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const k8s_namespace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void k8s_namespace::MergeFrom(const k8s_namespace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void k8s_namespace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_namespace::CopyFrom(const k8s_namespace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool k8s_namespace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void k8s_namespace::Swap(k8s_namespace* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata k8s_namespace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_namespace_descriptor_;
  metadata.reflection = k8s_namespace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int k8s_node::kCommonFieldNumber;
const int k8s_node::kHostIpsFieldNumber;
#endif  // !_MSC_VER

k8s_node::k8s_node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void k8s_node::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(&::draiosproto::k8s_common::default_instance());
}

k8s_node::k8s_node(const k8s_node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void k8s_node::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

k8s_node::~k8s_node() {
  SharedDtor();
}

void k8s_node::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void k8s_node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_node_descriptor_;
}

const k8s_node& k8s_node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

k8s_node* k8s_node::default_instance_ = NULL;

k8s_node* k8s_node::New() const {
  return new k8s_node;
}

void k8s_node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
    }
  }
  host_ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool k8s_node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host_ips;
        break;
      }

      // repeated string host_ips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_host_ips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_ips(this->host_ips_size() - 1).data(),
            this->host_ips(this->host_ips_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host_ips;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void k8s_node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // repeated string host_ips = 2;
  for (int i = 0; i < this->host_ips_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->host_ips(i).data(), this->host_ips(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host_ips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* k8s_node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // repeated string host_ips = 2;
  for (int i = 0; i < this->host_ips_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_ips(i).data(), this->host_ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->host_ips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int k8s_node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.k8s_common common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

  }
  // repeated string host_ips = 2;
  total_size += 1 * this->host_ips_size();
  for (int i = 0; i < this->host_ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->host_ips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const k8s_node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const k8s_node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void k8s_node::MergeFrom(const k8s_node& from) {
  GOOGLE_CHECK_NE(&from, this);
  host_ips_.MergeFrom(from.host_ips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void k8s_node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_node::CopyFrom(const k8s_node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool k8s_node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void k8s_node::Swap(k8s_node* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    host_ips_.Swap(&other->host_ips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata k8s_node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_node_descriptor_;
  metadata.reflection = k8s_node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int k8s_pod::kCommonFieldNumber;
const int k8s_pod::kContainerIdsFieldNumber;
const int k8s_pod::kNodeNameFieldNumber;
const int k8s_pod::kHostIpFieldNumber;
const int k8s_pod::kInternalIpFieldNumber;
const int k8s_pod::kRestartCountFieldNumber;
#endif  // !_MSC_VER

k8s_pod::k8s_pod()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void k8s_pod::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(&::draiosproto::k8s_common::default_instance());
}

k8s_pod::k8s_pod(const k8s_pod& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void k8s_pod::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  internal_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  restart_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

k8s_pod::~k8s_pod() {
  SharedDtor();
}

void k8s_pod::SharedDtor() {
  if (node_name_ != &::google::protobuf::internal::kEmptyString) {
    delete node_name_;
  }
  if (host_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete host_ip_;
  }
  if (internal_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete internal_ip_;
  }
  if (this != default_instance_) {
    delete common_;
  }
}

void k8s_pod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_pod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_pod_descriptor_;
}

const k8s_pod& k8s_pod::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

k8s_pod* k8s_pod::default_instance_ = NULL;

k8s_pod* k8s_pod::New() const {
  return new k8s_pod;
}

void k8s_pod::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
    }
    if (has_node_name()) {
      if (node_name_ != &::google::protobuf::internal::kEmptyString) {
        node_name_->clear();
      }
    }
    if (has_host_ip()) {
      if (host_ip_ != &::google::protobuf::internal::kEmptyString) {
        host_ip_->clear();
      }
    }
    if (has_internal_ip()) {
      if (internal_ip_ != &::google::protobuf::internal::kEmptyString) {
        internal_ip_->clear();
      }
    }
    restart_count_ = 0u;
  }
  container_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool k8s_pod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_container_ids;
        break;
      }

      // repeated string container_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_container_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->container_ids(this->container_ids_size() - 1).data(),
            this->container_ids(this->container_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_container_ids;
        if (input->ExpectTag(26)) goto parse_node_name;
        break;
      }

      // optional string node_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_name().data(), this->node_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_host_ip;
        break;
      }

      // optional string host_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_ip().data(), this->host_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_internal_ip;
        break;
      }

      // optional string internal_ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internal_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->internal_ip().data(), this->internal_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_restart_count;
        break;
      }

      // optional uint32 restart_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restart_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restart_count_)));
          set_has_restart_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void k8s_pod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // repeated string container_ids = 2;
  for (int i = 0; i < this->container_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->container_ids(i).data(), this->container_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->container_ids(i), output);
  }

  // optional string node_name = 3;
  if (has_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->node_name(), output);
  }

  // optional string host_ip = 4;
  if (has_host_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_ip().data(), this->host_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->host_ip(), output);
  }

  // optional string internal_ip = 5;
  if (has_internal_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->internal_ip().data(), this->internal_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->internal_ip(), output);
  }

  // optional uint32 restart_count = 6;
  if (has_restart_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->restart_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* k8s_pod::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // repeated string container_ids = 2;
  for (int i = 0; i < this->container_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container_ids(i).data(), this->container_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->container_ids(i), target);
  }

  // optional string node_name = 3;
  if (has_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node_name(), target);
  }

  // optional string host_ip = 4;
  if (has_host_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_ip().data(), this->host_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->host_ip(), target);
  }

  // optional string internal_ip = 5;
  if (has_internal_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->internal_ip().data(), this->internal_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->internal_ip(), target);
  }

  // optional uint32 restart_count = 6;
  if (has_restart_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->restart_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int k8s_pod::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.k8s_common common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional string node_name = 3;
    if (has_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_name());
    }

    // optional string host_ip = 4;
    if (has_host_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_ip());
    }

    // optional string internal_ip = 5;
    if (has_internal_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->internal_ip());
    }

    // optional uint32 restart_count = 6;
    if (has_restart_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restart_count());
    }

  }
  // repeated string container_ids = 2;
  total_size += 1 * this->container_ids_size();
  for (int i = 0; i < this->container_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->container_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_pod::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const k8s_pod* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const k8s_pod*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void k8s_pod::MergeFrom(const k8s_pod& from) {
  GOOGLE_CHECK_NE(&from, this);
  container_ids_.MergeFrom(from.container_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
    if (from.has_node_name()) {
      set_node_name(from.node_name());
    }
    if (from.has_host_ip()) {
      set_host_ip(from.host_ip());
    }
    if (from.has_internal_ip()) {
      set_internal_ip(from.internal_ip());
    }
    if (from.has_restart_count()) {
      set_restart_count(from.restart_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void k8s_pod::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_pod::CopyFrom(const k8s_pod& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool k8s_pod::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void k8s_pod::Swap(k8s_pod* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    container_ids_.Swap(&other->container_ids_);
    std::swap(node_name_, other->node_name_);
    std::swap(host_ip_, other->host_ip_);
    std::swap(internal_ip_, other->internal_ip_);
    std::swap(restart_count_, other->restart_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata k8s_pod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_pod_descriptor_;
  metadata.reflection = k8s_pod_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int k8s_replication_controller::kCommonFieldNumber;
const int k8s_replication_controller::kReplicasDesiredFieldNumber;
const int k8s_replication_controller::kReplicasRunningFieldNumber;
#endif  // !_MSC_VER

k8s_replication_controller::k8s_replication_controller()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void k8s_replication_controller::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(&::draiosproto::k8s_common::default_instance());
}

k8s_replication_controller::k8s_replication_controller(const k8s_replication_controller& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void k8s_replication_controller::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  replicas_desired_ = 0u;
  replicas_running_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

k8s_replication_controller::~k8s_replication_controller() {
  SharedDtor();
}

void k8s_replication_controller::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void k8s_replication_controller::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_replication_controller::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_replication_controller_descriptor_;
}

const k8s_replication_controller& k8s_replication_controller::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

k8s_replication_controller* k8s_replication_controller::default_instance_ = NULL;

k8s_replication_controller* k8s_replication_controller::New() const {
  return new k8s_replication_controller;
}

void k8s_replication_controller::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
    }
    replicas_desired_ = 0u;
    replicas_running_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool k8s_replication_controller::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_replicas_desired;
        break;
      }

      // optional uint32 replicas_desired = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replicas_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replicas_desired_)));
          set_has_replicas_desired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_replicas_running;
        break;
      }

      // optional uint32 replicas_running = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replicas_running:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replicas_running_)));
          set_has_replicas_running();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void k8s_replication_controller::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional uint32 replicas_desired = 2;
  if (has_replicas_desired()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->replicas_desired(), output);
  }

  // optional uint32 replicas_running = 3;
  if (has_replicas_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->replicas_running(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* k8s_replication_controller::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional uint32 replicas_desired = 2;
  if (has_replicas_desired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->replicas_desired(), target);
  }

  // optional uint32 replicas_running = 3;
  if (has_replicas_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->replicas_running(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int k8s_replication_controller::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.k8s_common common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional uint32 replicas_desired = 2;
    if (has_replicas_desired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replicas_desired());
    }

    // optional uint32 replicas_running = 3;
    if (has_replicas_running()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replicas_running());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_replication_controller::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const k8s_replication_controller* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const k8s_replication_controller*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void k8s_replication_controller::MergeFrom(const k8s_replication_controller& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
    if (from.has_replicas_desired()) {
      set_replicas_desired(from.replicas_desired());
    }
    if (from.has_replicas_running()) {
      set_replicas_running(from.replicas_running());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void k8s_replication_controller::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_replication_controller::CopyFrom(const k8s_replication_controller& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool k8s_replication_controller::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void k8s_replication_controller::Swap(k8s_replication_controller* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(replicas_desired_, other->replicas_desired_);
    std::swap(replicas_running_, other->replicas_running_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata k8s_replication_controller::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_replication_controller_descriptor_;
  metadata.reflection = k8s_replication_controller_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int k8s_replica_set::kCommonFieldNumber;
const int k8s_replica_set::kReplicasDesiredFieldNumber;
const int k8s_replica_set::kReplicasRunningFieldNumber;
#endif  // !_MSC_VER

k8s_replica_set::k8s_replica_set()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void k8s_replica_set::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(&::draiosproto::k8s_common::default_instance());
}

k8s_replica_set::k8s_replica_set(const k8s_replica_set& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void k8s_replica_set::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  replicas_desired_ = 0u;
  replicas_running_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

k8s_replica_set::~k8s_replica_set() {
  SharedDtor();
}

void k8s_replica_set::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void k8s_replica_set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_replica_set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_replica_set_descriptor_;
}

const k8s_replica_set& k8s_replica_set::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

k8s_replica_set* k8s_replica_set::default_instance_ = NULL;

k8s_replica_set* k8s_replica_set::New() const {
  return new k8s_replica_set;
}

void k8s_replica_set::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
    }
    replicas_desired_ = 0u;
    replicas_running_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool k8s_replica_set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_replicas_desired;
        break;
      }

      // optional uint32 replicas_desired = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replicas_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replicas_desired_)));
          set_has_replicas_desired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_replicas_running;
        break;
      }

      // optional uint32 replicas_running = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replicas_running:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replicas_running_)));
          set_has_replicas_running();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void k8s_replica_set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional uint32 replicas_desired = 2;
  if (has_replicas_desired()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->replicas_desired(), output);
  }

  // optional uint32 replicas_running = 3;
  if (has_replicas_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->replicas_running(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* k8s_replica_set::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional uint32 replicas_desired = 2;
  if (has_replicas_desired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->replicas_desired(), target);
  }

  // optional uint32 replicas_running = 3;
  if (has_replicas_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->replicas_running(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int k8s_replica_set::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.k8s_common common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional uint32 replicas_desired = 2;
    if (has_replicas_desired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replicas_desired());
    }

    // optional uint32 replicas_running = 3;
    if (has_replicas_running()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replicas_running());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_replica_set::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const k8s_replica_set* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const k8s_replica_set*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void k8s_replica_set::MergeFrom(const k8s_replica_set& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
    if (from.has_replicas_desired()) {
      set_replicas_desired(from.replicas_desired());
    }
    if (from.has_replicas_running()) {
      set_replicas_running(from.replicas_running());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void k8s_replica_set::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_replica_set::CopyFrom(const k8s_replica_set& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool k8s_replica_set::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void k8s_replica_set::Swap(k8s_replica_set* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(replicas_desired_, other->replicas_desired_);
    std::swap(replicas_running_, other->replicas_running_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata k8s_replica_set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_replica_set_descriptor_;
  metadata.reflection = k8s_replica_set_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int k8s_service_net_port::kPortFieldNumber;
const int k8s_service_net_port::kTargetPortFieldNumber;
const int k8s_service_net_port::kProtocolFieldNumber;
const int k8s_service_net_port::kNodePortFieldNumber;
#endif  // !_MSC_VER

k8s_service_net_port::k8s_service_net_port()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void k8s_service_net_port::InitAsDefaultInstance() {
}

k8s_service_net_port::k8s_service_net_port(const k8s_service_net_port& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void k8s_service_net_port::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0u;
  target_port_ = 0u;
  protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  node_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

k8s_service_net_port::~k8s_service_net_port() {
  SharedDtor();
}

void k8s_service_net_port::SharedDtor() {
  if (protocol_ != &::google::protobuf::internal::kEmptyString) {
    delete protocol_;
  }
  if (this != default_instance_) {
  }
}

void k8s_service_net_port::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_service_net_port::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_service_net_port_descriptor_;
}

const k8s_service_net_port& k8s_service_net_port::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

k8s_service_net_port* k8s_service_net_port::default_instance_ = NULL;

k8s_service_net_port* k8s_service_net_port::New() const {
  return new k8s_service_net_port;
}

void k8s_service_net_port::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    port_ = 0u;
    target_port_ = 0u;
    if (has_protocol()) {
      if (protocol_ != &::google::protobuf::internal::kEmptyString) {
        protocol_->clear();
      }
    }
    node_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool k8s_service_net_port::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_port;
        break;
      }

      // required uint32 target_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_port_)));
          set_has_target_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_protocol;
        break;
      }

      // optional string protocol = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_node_port;
        break;
      }

      // optional uint32 node_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_port_)));
          set_has_node_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void k8s_service_net_port::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // required uint32 target_port = 2;
  if (has_target_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_port(), output);
  }

  // optional string protocol = 3;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->protocol(), output);
  }

  // optional uint32 node_port = 4;
  if (has_node_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->node_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* k8s_service_net_port::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 port = 1;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  // required uint32 target_port = 2;
  if (has_target_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_port(), target);
  }

  // optional string protocol = 3;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->protocol(), target);
  }

  // optional uint32 node_port = 4;
  if (has_node_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->node_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int k8s_service_net_port::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required uint32 target_port = 2;
    if (has_target_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_port());
    }

    // optional string protocol = 3;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }

    // optional uint32 node_port = 4;
    if (has_node_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_service_net_port::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const k8s_service_net_port* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const k8s_service_net_port*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void k8s_service_net_port::MergeFrom(const k8s_service_net_port& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_target_port()) {
      set_target_port(from.target_port());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_node_port()) {
      set_node_port(from.node_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void k8s_service_net_port::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_service_net_port::CopyFrom(const k8s_service_net_port& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool k8s_service_net_port::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void k8s_service_net_port::Swap(k8s_service_net_port* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(target_port_, other->target_port_);
    std::swap(protocol_, other->protocol_);
    std::swap(node_port_, other->node_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata k8s_service_net_port::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_service_net_port_descriptor_;
  metadata.reflection = k8s_service_net_port_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int k8s_service::kCommonFieldNumber;
const int k8s_service::kClusterIpFieldNumber;
const int k8s_service::kPortsFieldNumber;
#endif  // !_MSC_VER

k8s_service::k8s_service()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void k8s_service::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(&::draiosproto::k8s_common::default_instance());
}

k8s_service::k8s_service(const k8s_service& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void k8s_service::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  cluster_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

k8s_service::~k8s_service() {
  SharedDtor();
}

void k8s_service::SharedDtor() {
  if (cluster_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete cluster_ip_;
  }
  if (this != default_instance_) {
    delete common_;
  }
}

void k8s_service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_service::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_service_descriptor_;
}

const k8s_service& k8s_service::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

k8s_service* k8s_service::default_instance_ = NULL;

k8s_service* k8s_service::New() const {
  return new k8s_service;
}

void k8s_service::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
    }
    if (has_cluster_ip()) {
      if (cluster_ip_ != &::google::protobuf::internal::kEmptyString) {
        cluster_ip_->clear();
      }
    }
  }
  ports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool k8s_service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cluster_ip;
        break;
      }

      // optional string cluster_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cluster_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cluster_ip().data(), this->cluster_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ports;
        break;
      }

      // repeated .draiosproto.k8s_service.net_port ports = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ports()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ports;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void k8s_service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional string cluster_ip = 2;
  if (has_cluster_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cluster_ip().data(), this->cluster_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cluster_ip(), output);
  }

  // repeated .draiosproto.k8s_service.net_port ports = 3;
  for (int i = 0; i < this->ports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ports(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* k8s_service::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional string cluster_ip = 2;
  if (has_cluster_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cluster_ip().data(), this->cluster_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_ip(), target);
  }

  // repeated .draiosproto.k8s_service.net_port ports = 3;
  for (int i = 0; i < this->ports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ports(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int k8s_service::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.k8s_common common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional string cluster_ip = 2;
    if (has_cluster_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_ip());
    }

  }
  // repeated .draiosproto.k8s_service.net_port ports = 3;
  total_size += 1 * this->ports_size();
  for (int i = 0; i < this->ports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ports(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_service::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const k8s_service* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const k8s_service*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void k8s_service::MergeFrom(const k8s_service& from) {
  GOOGLE_CHECK_NE(&from, this);
  ports_.MergeFrom(from.ports_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
    if (from.has_cluster_ip()) {
      set_cluster_ip(from.cluster_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void k8s_service::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_service::CopyFrom(const k8s_service& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool k8s_service::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  for (int i = 0; i < ports_size(); i++) {
    if (!this->ports(i).IsInitialized()) return false;
  }
  return true;
}

void k8s_service::Swap(k8s_service* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(cluster_ip_, other->cluster_ip_);
    ports_.Swap(&other->ports_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata k8s_service::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_service_descriptor_;
  metadata.reflection = k8s_service_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int k8s_deployment::kCommonFieldNumber;
const int k8s_deployment::kReplicasDesiredFieldNumber;
const int k8s_deployment::kReplicasRunningFieldNumber;
#endif  // !_MSC_VER

k8s_deployment::k8s_deployment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void k8s_deployment::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(&::draiosproto::k8s_common::default_instance());
}

k8s_deployment::k8s_deployment(const k8s_deployment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void k8s_deployment::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  replicas_desired_ = 0u;
  replicas_running_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

k8s_deployment::~k8s_deployment() {
  SharedDtor();
}

void k8s_deployment::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void k8s_deployment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_deployment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_deployment_descriptor_;
}

const k8s_deployment& k8s_deployment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

k8s_deployment* k8s_deployment::default_instance_ = NULL;

k8s_deployment* k8s_deployment::New() const {
  return new k8s_deployment;
}

void k8s_deployment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
    }
    replicas_desired_ = 0u;
    replicas_running_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool k8s_deployment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_replicas_desired;
        break;
      }

      // optional uint32 replicas_desired = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replicas_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replicas_desired_)));
          set_has_replicas_desired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_replicas_running;
        break;
      }

      // optional uint32 replicas_running = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replicas_running:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replicas_running_)));
          set_has_replicas_running();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void k8s_deployment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional uint32 replicas_desired = 2;
  if (has_replicas_desired()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->replicas_desired(), output);
  }

  // optional uint32 replicas_running = 3;
  if (has_replicas_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->replicas_running(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* k8s_deployment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional uint32 replicas_desired = 2;
  if (has_replicas_desired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->replicas_desired(), target);
  }

  // optional uint32 replicas_running = 3;
  if (has_replicas_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->replicas_running(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int k8s_deployment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.k8s_common common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional uint32 replicas_desired = 2;
    if (has_replicas_desired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replicas_desired());
    }

    // optional uint32 replicas_running = 3;
    if (has_replicas_running()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replicas_running());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_deployment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const k8s_deployment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const k8s_deployment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void k8s_deployment::MergeFrom(const k8s_deployment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
    if (from.has_replicas_desired()) {
      set_replicas_desired(from.replicas_desired());
    }
    if (from.has_replicas_running()) {
      set_replicas_running(from.replicas_running());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void k8s_deployment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_deployment::CopyFrom(const k8s_deployment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool k8s_deployment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void k8s_deployment::Swap(k8s_deployment* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(replicas_desired_, other->replicas_desired_);
    std::swap(replicas_running_, other->replicas_running_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata k8s_deployment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_deployment_descriptor_;
  metadata.reflection = k8s_deployment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int k8s_daemonset::kCommonFieldNumber;
const int k8s_daemonset::kCurrentScheduledFieldNumber;
const int k8s_daemonset::kDesiredScheduledFieldNumber;
#endif  // !_MSC_VER

k8s_daemonset::k8s_daemonset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void k8s_daemonset::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(&::draiosproto::k8s_common::default_instance());
}

k8s_daemonset::k8s_daemonset(const k8s_daemonset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void k8s_daemonset::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  current_scheduled_ = 0u;
  desired_scheduled_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

k8s_daemonset::~k8s_daemonset() {
  SharedDtor();
}

void k8s_daemonset::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void k8s_daemonset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_daemonset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_daemonset_descriptor_;
}

const k8s_daemonset& k8s_daemonset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

k8s_daemonset* k8s_daemonset::default_instance_ = NULL;

k8s_daemonset* k8s_daemonset::New() const {
  return new k8s_daemonset;
}

void k8s_daemonset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
    }
    current_scheduled_ = 0u;
    desired_scheduled_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool k8s_daemonset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_scheduled;
        break;
      }

      // optional uint32 current_scheduled = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_scheduled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_scheduled_)));
          set_has_current_scheduled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_desired_scheduled;
        break;
      }

      // optional uint32 desired_scheduled = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desired_scheduled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desired_scheduled_)));
          set_has_desired_scheduled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void k8s_daemonset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional uint32 current_scheduled = 2;
  if (has_current_scheduled()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->current_scheduled(), output);
  }

  // optional uint32 desired_scheduled = 3;
  if (has_desired_scheduled()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->desired_scheduled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* k8s_daemonset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional uint32 current_scheduled = 2;
  if (has_current_scheduled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->current_scheduled(), target);
  }

  // optional uint32 desired_scheduled = 3;
  if (has_desired_scheduled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->desired_scheduled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int k8s_daemonset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.k8s_common common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional uint32 current_scheduled = 2;
    if (has_current_scheduled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_scheduled());
    }

    // optional uint32 desired_scheduled = 3;
    if (has_desired_scheduled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desired_scheduled());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_daemonset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const k8s_daemonset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const k8s_daemonset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void k8s_daemonset::MergeFrom(const k8s_daemonset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
    if (from.has_current_scheduled()) {
      set_current_scheduled(from.current_scheduled());
    }
    if (from.has_desired_scheduled()) {
      set_desired_scheduled(from.desired_scheduled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void k8s_daemonset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_daemonset::CopyFrom(const k8s_daemonset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool k8s_daemonset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void k8s_daemonset::Swap(k8s_daemonset* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(current_scheduled_, other->current_scheduled_);
    std::swap(desired_scheduled_, other->desired_scheduled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata k8s_daemonset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_daemonset_descriptor_;
  metadata.reflection = k8s_daemonset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int k8s_state::kNamespacesFieldNumber;
const int k8s_state::kNodesFieldNumber;
const int k8s_state::kPodsFieldNumber;
const int k8s_state::kControllersFieldNumber;
const int k8s_state::kServicesFieldNumber;
const int k8s_state::kReplicaSetsFieldNumber;
const int k8s_state::kDeploymentsFieldNumber;
const int k8s_state::kDaemonsetsFieldNumber;
#endif  // !_MSC_VER

k8s_state::k8s_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void k8s_state::InitAsDefaultInstance() {
}

k8s_state::k8s_state(const k8s_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void k8s_state::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

k8s_state::~k8s_state() {
  SharedDtor();
}

void k8s_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void k8s_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_state_descriptor_;
}

const k8s_state& k8s_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

k8s_state* k8s_state::default_instance_ = NULL;

k8s_state* k8s_state::New() const {
  return new k8s_state;
}

void k8s_state::Clear() {
  namespaces_.Clear();
  nodes_.Clear();
  pods_.Clear();
  controllers_.Clear();
  services_.Clear();
  replica_sets_.Clear();
  deployments_.Clear();
  daemonsets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool k8s_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.k8s_namespace namespaces = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_namespaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_namespaces()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_namespaces;
        if (input->ExpectTag(18)) goto parse_nodes;
        break;
      }

      // repeated .draiosproto.k8s_node nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        if (input->ExpectTag(26)) goto parse_pods;
        break;
      }

      // repeated .draiosproto.k8s_pod pods = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pods;
        if (input->ExpectTag(34)) goto parse_controllers;
        break;
      }

      // repeated .draiosproto.k8s_replication_controller controllers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_controllers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_controllers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_controllers;
        if (input->ExpectTag(42)) goto parse_services;
        break;
      }

      // repeated .draiosproto.k8s_service services = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_services:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_services()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_services;
        if (input->ExpectTag(50)) goto parse_replica_sets;
        break;
      }

      // repeated .draiosproto.k8s_replica_set replica_sets = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replica_sets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_replica_sets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_replica_sets;
        if (input->ExpectTag(58)) goto parse_deployments;
        break;
      }

      // repeated .draiosproto.k8s_deployment deployments = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deployments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deployments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deployments;
        if (input->ExpectTag(66)) goto parse_daemonsets;
        break;
      }

      // repeated .draiosproto.k8s_daemonset daemonsets = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daemonsets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daemonsets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_daemonsets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void k8s_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .draiosproto.k8s_namespace namespaces = 1;
  for (int i = 0; i < this->namespaces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->namespaces(i), output);
  }

  // repeated .draiosproto.k8s_node nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodes(i), output);
  }

  // repeated .draiosproto.k8s_pod pods = 3;
  for (int i = 0; i < this->pods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pods(i), output);
  }

  // repeated .draiosproto.k8s_replication_controller controllers = 4;
  for (int i = 0; i < this->controllers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->controllers(i), output);
  }

  // repeated .draiosproto.k8s_service services = 5;
  for (int i = 0; i < this->services_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->services(i), output);
  }

  // repeated .draiosproto.k8s_replica_set replica_sets = 6;
  for (int i = 0; i < this->replica_sets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->replica_sets(i), output);
  }

  // repeated .draiosproto.k8s_deployment deployments = 7;
  for (int i = 0; i < this->deployments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->deployments(i), output);
  }

  // repeated .draiosproto.k8s_daemonset daemonsets = 8;
  for (int i = 0; i < this->daemonsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->daemonsets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* k8s_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .draiosproto.k8s_namespace namespaces = 1;
  for (int i = 0; i < this->namespaces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->namespaces(i), target);
  }

  // repeated .draiosproto.k8s_node nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nodes(i), target);
  }

  // repeated .draiosproto.k8s_pod pods = 3;
  for (int i = 0; i < this->pods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pods(i), target);
  }

  // repeated .draiosproto.k8s_replication_controller controllers = 4;
  for (int i = 0; i < this->controllers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->controllers(i), target);
  }

  // repeated .draiosproto.k8s_service services = 5;
  for (int i = 0; i < this->services_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->services(i), target);
  }

  // repeated .draiosproto.k8s_replica_set replica_sets = 6;
  for (int i = 0; i < this->replica_sets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->replica_sets(i), target);
  }

  // repeated .draiosproto.k8s_deployment deployments = 7;
  for (int i = 0; i < this->deployments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->deployments(i), target);
  }

  // repeated .draiosproto.k8s_daemonset daemonsets = 8;
  for (int i = 0; i < this->daemonsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->daemonsets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int k8s_state::ByteSize() const {
  int total_size = 0;

  // repeated .draiosproto.k8s_namespace namespaces = 1;
  total_size += 1 * this->namespaces_size();
  for (int i = 0; i < this->namespaces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->namespaces(i));
  }

  // repeated .draiosproto.k8s_node nodes = 2;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  // repeated .draiosproto.k8s_pod pods = 3;
  total_size += 1 * this->pods_size();
  for (int i = 0; i < this->pods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pods(i));
  }

  // repeated .draiosproto.k8s_replication_controller controllers = 4;
  total_size += 1 * this->controllers_size();
  for (int i = 0; i < this->controllers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->controllers(i));
  }

  // repeated .draiosproto.k8s_service services = 5;
  total_size += 1 * this->services_size();
  for (int i = 0; i < this->services_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->services(i));
  }

  // repeated .draiosproto.k8s_replica_set replica_sets = 6;
  total_size += 1 * this->replica_sets_size();
  for (int i = 0; i < this->replica_sets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->replica_sets(i));
  }

  // repeated .draiosproto.k8s_deployment deployments = 7;
  total_size += 1 * this->deployments_size();
  for (int i = 0; i < this->deployments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deployments(i));
  }

  // repeated .draiosproto.k8s_daemonset daemonsets = 8;
  total_size += 1 * this->daemonsets_size();
  for (int i = 0; i < this->daemonsets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daemonsets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const k8s_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const k8s_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void k8s_state::MergeFrom(const k8s_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  namespaces_.MergeFrom(from.namespaces_);
  nodes_.MergeFrom(from.nodes_);
  pods_.MergeFrom(from.pods_);
  controllers_.MergeFrom(from.controllers_);
  services_.MergeFrom(from.services_);
  replica_sets_.MergeFrom(from.replica_sets_);
  deployments_.MergeFrom(from.deployments_);
  daemonsets_.MergeFrom(from.daemonsets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void k8s_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_state::CopyFrom(const k8s_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool k8s_state::IsInitialized() const {

  for (int i = 0; i < namespaces_size(); i++) {
    if (!this->namespaces(i).IsInitialized()) return false;
  }
  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pods_size(); i++) {
    if (!this->pods(i).IsInitialized()) return false;
  }
  for (int i = 0; i < controllers_size(); i++) {
    if (!this->controllers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < services_size(); i++) {
    if (!this->services(i).IsInitialized()) return false;
  }
  for (int i = 0; i < replica_sets_size(); i++) {
    if (!this->replica_sets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < deployments_size(); i++) {
    if (!this->deployments(i).IsInitialized()) return false;
  }
  for (int i = 0; i < daemonsets_size(); i++) {
    if (!this->daemonsets(i).IsInitialized()) return false;
  }
  return true;
}

void k8s_state::Swap(k8s_state* other) {
  if (other != this) {
    namespaces_.Swap(&other->namespaces_);
    nodes_.Swap(&other->nodes_);
    pods_.Swap(&other->pods_);
    controllers_.Swap(&other->controllers_);
    services_.Swap(&other->services_);
    replica_sets_.Swap(&other->replica_sets_);
    deployments_.Swap(&other->deployments_);
    daemonsets_.Swap(&other->daemonsets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata k8s_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_state_descriptor_;
  metadata.reflection = k8s_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mesos_pair::kKeyFieldNumber;
const int mesos_pair::kValueFieldNumber;
#endif  // !_MSC_VER

mesos_pair::mesos_pair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mesos_pair::InitAsDefaultInstance() {
}

mesos_pair::mesos_pair(const mesos_pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mesos_pair::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mesos_pair::~mesos_pair() {
  SharedDtor();
}

void mesos_pair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void mesos_pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mesos_pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mesos_pair_descriptor_;
}

const mesos_pair& mesos_pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

mesos_pair* mesos_pair::default_instance_ = NULL;

mesos_pair* mesos_pair::New() const {
  return new mesos_pair;
}

void mesos_pair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mesos_pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mesos_pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mesos_pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mesos_pair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mesos_pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mesos_pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mesos_pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mesos_pair::MergeFrom(const mesos_pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mesos_pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mesos_pair::CopyFrom(const mesos_pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mesos_pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mesos_pair::Swap(mesos_pair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mesos_pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mesos_pair_descriptor_;
  metadata.reflection = mesos_pair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mesos_common::kUidFieldNumber;
const int mesos_common::kNameFieldNumber;
const int mesos_common::kLabelsFieldNumber;
#endif  // !_MSC_VER

mesos_common::mesos_common()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mesos_common::InitAsDefaultInstance() {
}

mesos_common::mesos_common(const mesos_common& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mesos_common::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mesos_common::~mesos_common() {
  SharedDtor();
}

void mesos_common::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void mesos_common::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mesos_common::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mesos_common_descriptor_;
}

const mesos_common& mesos_common::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

mesos_common* mesos_common::default_instance_ = NULL;

mesos_common* mesos_common::New() const {
  return new mesos_common;
}

void mesos_common::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mesos_common::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_labels;
        break;
      }

      // repeated .draiosproto.mesos_pair labels = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_labels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mesos_common::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // repeated .draiosproto.mesos_pair labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mesos_common::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .draiosproto.mesos_pair labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mesos_common::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .draiosproto.mesos_pair labels = 3;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mesos_common::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mesos_common* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mesos_common*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mesos_common::MergeFrom(const mesos_common& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mesos_common::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mesos_common::CopyFrom(const mesos_common& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mesos_common::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < labels_size(); i++) {
    if (!this->labels(i).IsInitialized()) return false;
  }
  return true;
}

void mesos_common::Swap(mesos_common* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mesos_common::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mesos_common_descriptor_;
  metadata.reflection = mesos_common_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mesos_task::kCommonFieldNumber;
const int mesos_task::kSlaveIdFieldNumber;
#endif  // !_MSC_VER

mesos_task::mesos_task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mesos_task::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::mesos_common*>(&::draiosproto::mesos_common::default_instance());
}

mesos_task::mesos_task(const mesos_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mesos_task::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  slave_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mesos_task::~mesos_task() {
  SharedDtor();
}

void mesos_task::SharedDtor() {
  if (slave_id_ != &::google::protobuf::internal::kEmptyString) {
    delete slave_id_;
  }
  if (this != default_instance_) {
    delete common_;
  }
}

void mesos_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mesos_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mesos_task_descriptor_;
}

const mesos_task& mesos_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

mesos_task* mesos_task::default_instance_ = NULL;

mesos_task* mesos_task::New() const {
  return new mesos_task;
}

void mesos_task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::mesos_common::Clear();
    }
    if (has_slave_id()) {
      if (slave_id_ != &::google::protobuf::internal::kEmptyString) {
        slave_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mesos_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.mesos_common common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slave_id;
        break;
      }

      // required string slave_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slave_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slave_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slave_id().data(), this->slave_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mesos_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.mesos_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // required string slave_id = 2;
  if (has_slave_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slave_id().data(), this->slave_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->slave_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mesos_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.mesos_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // required string slave_id = 2;
  if (has_slave_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slave_id().data(), this->slave_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->slave_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mesos_task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.mesos_common common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // required string slave_id = 2;
    if (has_slave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slave_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mesos_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mesos_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mesos_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mesos_task::MergeFrom(const mesos_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::mesos_common::MergeFrom(from.common());
    }
    if (from.has_slave_id()) {
      set_slave_id(from.slave_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mesos_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mesos_task::CopyFrom(const mesos_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mesos_task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void mesos_task::Swap(mesos_task* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(slave_id_, other->slave_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mesos_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mesos_task_descriptor_;
  metadata.reflection = mesos_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int marathon_app::kIdFieldNumber;
const int marathon_app::kTaskIdsFieldNumber;
#endif  // !_MSC_VER

marathon_app::marathon_app()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void marathon_app::InitAsDefaultInstance() {
}

marathon_app::marathon_app(const marathon_app& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void marathon_app::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

marathon_app::~marathon_app() {
  SharedDtor();
}

void marathon_app::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void marathon_app::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marathon_app::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marathon_app_descriptor_;
}

const marathon_app& marathon_app::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

marathon_app* marathon_app::default_instance_ = NULL;

marathon_app* marathon_app::New() const {
  return new marathon_app;
}

void marathon_app::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  task_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool marathon_app::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_ids;
        break;
      }

      // repeated string task_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_task_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_ids(this->task_ids_size() - 1).data(),
            this->task_ids(this->task_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void marathon_app::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // repeated string task_ids = 2;
  for (int i = 0; i < this->task_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->task_ids(i).data(), this->task_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->task_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* marathon_app::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated string task_ids = 2;
  for (int i = 0; i < this->task_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_ids(i).data(), this->task_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->task_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int marathon_app::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  // repeated string task_ids = 2;
  total_size += 1 * this->task_ids_size();
  for (int i = 0; i < this->task_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->task_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marathon_app::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const marathon_app* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const marathon_app*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void marathon_app::MergeFrom(const marathon_app& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_ids_.MergeFrom(from.task_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void marathon_app::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marathon_app::CopyFrom(const marathon_app& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool marathon_app::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void marathon_app::Swap(marathon_app* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    task_ids_.Swap(&other->task_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata marathon_app::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marathon_app_descriptor_;
  metadata.reflection = marathon_app_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int marathon_group::kIdFieldNumber;
const int marathon_group::kAppsFieldNumber;
const int marathon_group::kGroupsFieldNumber;
#endif  // !_MSC_VER

marathon_group::marathon_group()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void marathon_group::InitAsDefaultInstance() {
}

marathon_group::marathon_group(const marathon_group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void marathon_group::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

marathon_group::~marathon_group() {
  SharedDtor();
}

void marathon_group::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void marathon_group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marathon_group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marathon_group_descriptor_;
}

const marathon_group& marathon_group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

marathon_group* marathon_group::default_instance_ = NULL;

marathon_group* marathon_group::New() const {
  return new marathon_group;
}

void marathon_group::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  apps_.Clear();
  groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool marathon_group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apps;
        break;
      }

      // repeated .draiosproto.marathon_app apps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apps;
        if (input->ExpectTag(26)) goto parse_groups;
        break;
      }

      // repeated .draiosproto.marathon_group groups = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void marathon_group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // repeated .draiosproto.marathon_app apps = 2;
  for (int i = 0; i < this->apps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->apps(i), output);
  }

  // repeated .draiosproto.marathon_group groups = 3;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->groups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* marathon_group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .draiosproto.marathon_app apps = 2;
  for (int i = 0; i < this->apps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->apps(i), target);
  }

  // repeated .draiosproto.marathon_group groups = 3;
  for (int i = 0; i < this->groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->groups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int marathon_group::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  // repeated .draiosproto.marathon_app apps = 2;
  total_size += 1 * this->apps_size();
  for (int i = 0; i < this->apps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apps(i));
  }

  // repeated .draiosproto.marathon_group groups = 3;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marathon_group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const marathon_group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const marathon_group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void marathon_group::MergeFrom(const marathon_group& from) {
  GOOGLE_CHECK_NE(&from, this);
  apps_.MergeFrom(from.apps_);
  groups_.MergeFrom(from.groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void marathon_group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marathon_group::CopyFrom(const marathon_group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool marathon_group::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < apps_size(); i++) {
    if (!this->apps(i).IsInitialized()) return false;
  }
  for (int i = 0; i < groups_size(); i++) {
    if (!this->groups(i).IsInitialized()) return false;
  }
  return true;
}

void marathon_group::Swap(marathon_group* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    apps_.Swap(&other->apps_);
    groups_.Swap(&other->groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata marathon_group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marathon_group_descriptor_;
  metadata.reflection = marathon_group_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mesos_framework::kCommonFieldNumber;
const int mesos_framework::kTasksFieldNumber;
#endif  // !_MSC_VER

mesos_framework::mesos_framework()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mesos_framework::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::mesos_common*>(&::draiosproto::mesos_common::default_instance());
}

mesos_framework::mesos_framework(const mesos_framework& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mesos_framework::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mesos_framework::~mesos_framework() {
  SharedDtor();
}

void mesos_framework::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void mesos_framework::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mesos_framework::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mesos_framework_descriptor_;
}

const mesos_framework& mesos_framework::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

mesos_framework* mesos_framework::default_instance_ = NULL;

mesos_framework* mesos_framework::New() const {
  return new mesos_framework;
}

void mesos_framework::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::mesos_common::Clear();
    }
  }
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mesos_framework::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.mesos_common common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tasks;
        break;
      }

      // repeated .draiosproto.mesos_task tasks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mesos_framework::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.mesos_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // repeated .draiosproto.mesos_task tasks = 2;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mesos_framework::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.mesos_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // repeated .draiosproto.mesos_task tasks = 2;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mesos_framework::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.mesos_common common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

  }
  // repeated .draiosproto.mesos_task tasks = 2;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mesos_framework::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mesos_framework* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mesos_framework*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mesos_framework::MergeFrom(const mesos_framework& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::mesos_common::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mesos_framework::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mesos_framework::CopyFrom(const mesos_framework& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mesos_framework::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  for (int i = 0; i < tasks_size(); i++) {
    if (!this->tasks(i).IsInitialized()) return false;
  }
  return true;
}

void mesos_framework::Swap(mesos_framework* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mesos_framework::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mesos_framework_descriptor_;
  metadata.reflection = mesos_framework_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mesos_slave::kCommonFieldNumber;
#endif  // !_MSC_VER

mesos_slave::mesos_slave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mesos_slave::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::mesos_common*>(&::draiosproto::mesos_common::default_instance());
}

mesos_slave::mesos_slave(const mesos_slave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mesos_slave::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mesos_slave::~mesos_slave() {
  SharedDtor();
}

void mesos_slave::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void mesos_slave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mesos_slave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mesos_slave_descriptor_;
}

const mesos_slave& mesos_slave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

mesos_slave* mesos_slave::default_instance_ = NULL;

mesos_slave* mesos_slave::New() const {
  return new mesos_slave;
}

void mesos_slave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::mesos_common::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mesos_slave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.mesos_common common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mesos_slave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.mesos_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mesos_slave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.mesos_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mesos_slave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.mesos_common common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mesos_slave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mesos_slave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mesos_slave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mesos_slave::MergeFrom(const mesos_slave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::mesos_common::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mesos_slave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mesos_slave::CopyFrom(const mesos_slave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mesos_slave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void mesos_slave::Swap(mesos_slave* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mesos_slave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mesos_slave_descriptor_;
  metadata.reflection = mesos_slave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mesos_state::kFrameworksFieldNumber;
const int mesos_state::kGroupsFieldNumber;
const int mesos_state::kSlavesFieldNumber;
#endif  // !_MSC_VER

mesos_state::mesos_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mesos_state::InitAsDefaultInstance() {
}

mesos_state::mesos_state(const mesos_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mesos_state::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mesos_state::~mesos_state() {
  SharedDtor();
}

void mesos_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mesos_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mesos_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mesos_state_descriptor_;
}

const mesos_state& mesos_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

mesos_state* mesos_state::default_instance_ = NULL;

mesos_state* mesos_state::New() const {
  return new mesos_state;
}

void mesos_state::Clear() {
  frameworks_.Clear();
  groups_.Clear();
  slaves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mesos_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.mesos_framework frameworks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frameworks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frameworks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_frameworks;
        if (input->ExpectTag(18)) goto parse_groups;
        break;
      }

      // repeated .draiosproto.marathon_group groups = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groups;
        if (input->ExpectTag(26)) goto parse_slaves;
        break;
      }

      // repeated .draiosproto.mesos_slave slaves = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slaves;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mesos_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .draiosproto.mesos_framework frameworks = 1;
  for (int i = 0; i < this->frameworks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frameworks(i), output);
  }

  // repeated .draiosproto.marathon_group groups = 2;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groups(i), output);
  }

  // repeated .draiosproto.mesos_slave slaves = 3;
  for (int i = 0; i < this->slaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slaves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mesos_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .draiosproto.mesos_framework frameworks = 1;
  for (int i = 0; i < this->frameworks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frameworks(i), target);
  }

  // repeated .draiosproto.marathon_group groups = 2;
  for (int i = 0; i < this->groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groups(i), target);
  }

  // repeated .draiosproto.mesos_slave slaves = 3;
  for (int i = 0; i < this->slaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slaves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mesos_state::ByteSize() const {
  int total_size = 0;

  // repeated .draiosproto.mesos_framework frameworks = 1;
  total_size += 1 * this->frameworks_size();
  for (int i = 0; i < this->frameworks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frameworks(i));
  }

  // repeated .draiosproto.marathon_group groups = 2;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  // repeated .draiosproto.mesos_slave slaves = 3;
  total_size += 1 * this->slaves_size();
  for (int i = 0; i < this->slaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slaves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mesos_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mesos_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mesos_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mesos_state::MergeFrom(const mesos_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  frameworks_.MergeFrom(from.frameworks_);
  groups_.MergeFrom(from.groups_);
  slaves_.MergeFrom(from.slaves_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mesos_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mesos_state::CopyFrom(const mesos_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mesos_state::IsInitialized() const {

  for (int i = 0; i < frameworks_size(); i++) {
    if (!this->frameworks(i).IsInitialized()) return false;
  }
  for (int i = 0; i < groups_size(); i++) {
    if (!this->groups(i).IsInitialized()) return false;
  }
  for (int i = 0; i < slaves_size(); i++) {
    if (!this->slaves(i).IsInitialized()) return false;
  }
  return true;
}

void mesos_state::Swap(mesos_state* other) {
  if (other != this) {
    frameworks_.Swap(&other->frameworks_);
    groups_.Swap(&other->groups_);
    slaves_.Swap(&other->slaves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mesos_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mesos_state_descriptor_;
  metadata.reflection = mesos_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int metrics::kTimestampNsFieldNumber;
const int metrics::kMachineIdFieldNumber;
const int metrics::kCustomerIdFieldNumber;
const int metrics::kSamplingRatioFieldNumber;
const int metrics::kHostCustomNameFieldNumber;
const int metrics::kHostTagsFieldNumber;
const int metrics::kIsHostHiddenFieldNumber;
const int metrics::kHiddenProcessesFieldNumber;
const int metrics::kVersionFieldNumber;
const int metrics::kInstanceIdFieldNumber;
const int metrics::kHostinfoFieldNumber;
const int metrics::kProgramsFieldNumber;
const int metrics::kIpv4ConnectionsFieldNumber;
const int metrics::kIpv4NetworkInterfacesFieldNumber;
const int metrics::kCommandsFieldNumber;
const int metrics::kMountsFieldNumber;
const int metrics::kTopFilesFieldNumber;
const int metrics::kProtosFieldNumber;
const int metrics::kContainersFieldNumber;
const int metrics::kKubernetesFieldNumber;
const int metrics::kMesosFieldNumber;
const int metrics::kEventsFieldNumber;
const int metrics::kFalcoblFieldNumber;
#endif  // !_MSC_VER

metrics::metrics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void metrics::InitAsDefaultInstance() {
  hostinfo_ = const_cast< ::draiosproto::host*>(&::draiosproto::host::default_instance());
  protos_ = const_cast< ::draiosproto::proto_info*>(&::draiosproto::proto_info::default_instance());
  kubernetes_ = const_cast< ::draiosproto::k8s_state*>(&::draiosproto::k8s_state::default_instance());
  mesos_ = const_cast< ::draiosproto::mesos_state*>(&::draiosproto::mesos_state::default_instance());
  falcobl_ = const_cast< ::draiosproto::falco_baseline*>(&::draiosproto::falco_baseline::default_instance());
}

metrics::metrics(const metrics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void metrics::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sampling_ratio_ = 0u;
  host_custom_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_tags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_host_hidden_ = false;
  hidden_processes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instance_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostinfo_ = NULL;
  protos_ = NULL;
  kubernetes_ = NULL;
  mesos_ = NULL;
  falcobl_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

metrics::~metrics() {
  SharedDtor();
}

void metrics::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (host_custom_name_ != &::google::protobuf::internal::kEmptyString) {
    delete host_custom_name_;
  }
  if (host_tags_ != &::google::protobuf::internal::kEmptyString) {
    delete host_tags_;
  }
  if (hidden_processes_ != &::google::protobuf::internal::kEmptyString) {
    delete hidden_processes_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (instance_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instance_id_;
  }
  if (this != default_instance_) {
    delete hostinfo_;
    delete protos_;
    delete kubernetes_;
    delete mesos_;
    delete falcobl_;
  }
}

void metrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* metrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return metrics_descriptor_;
}

const metrics& metrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

metrics* metrics::default_instance_ = NULL;

metrics* metrics::New() const {
  return new metrics;
}

void metrics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
    sampling_ratio_ = 0u;
    if (has_host_custom_name()) {
      if (host_custom_name_ != &::google::protobuf::internal::kEmptyString) {
        host_custom_name_->clear();
      }
    }
    if (has_host_tags()) {
      if (host_tags_ != &::google::protobuf::internal::kEmptyString) {
        host_tags_->clear();
      }
    }
    is_host_hidden_ = false;
    if (has_hidden_processes()) {
      if (hidden_processes_ != &::google::protobuf::internal::kEmptyString) {
        hidden_processes_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_instance_id()) {
      if (instance_id_ != &::google::protobuf::internal::kEmptyString) {
        instance_id_->clear();
      }
    }
    if (has_hostinfo()) {
      if (hostinfo_ != NULL) hostinfo_->::draiosproto::host::Clear();
    }
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (has_protos()) {
      if (protos_ != NULL) protos_->::draiosproto::proto_info::Clear();
    }
    if (has_kubernetes()) {
      if (kubernetes_ != NULL) kubernetes_->::draiosproto::k8s_state::Clear();
    }
    if (has_mesos()) {
      if (mesos_ != NULL) mesos_->::draiosproto::mesos_state::Clear();
    }
    if (has_falcobl()) {
      if (falcobl_ != NULL) falcobl_->::draiosproto::falco_baseline::Clear();
    }
  }
  programs_.Clear();
  ipv4_connections_.Clear();
  ipv4_network_interfaces_.Clear();
  commands_.Clear();
  mounts_.Clear();
  top_files_.Clear();
  containers_.Clear();
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool metrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hostinfo;
        break;
      }

      // optional .draiosproto.host hostinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hostinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ipv4_connections;
        break;
      }

      // repeated .draiosproto.ipv4_connection ipv4_connections = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv4_connections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ipv4_connections()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ipv4_connections;
        if (input->ExpectTag(66)) goto parse_ipv4_network_interfaces;
        break;
      }

      // repeated .draiosproto.ipv4_network_interface ipv4_network_interfaces = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv4_network_interfaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ipv4_network_interfaces()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ipv4_network_interfaces;
        if (input->ExpectTag(74)) goto parse_programs;
        break;
      }

      // repeated .draiosproto.program programs = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_programs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_programs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_programs;
        if (input->ExpectTag(80)) goto parse_sampling_ratio;
        break;
      }

      // optional uint32 sampling_ratio = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sampling_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sampling_ratio_)));
          set_has_sampling_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_host_custom_name;
        break;
      }

      // optional string host_custom_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_custom_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_custom_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_custom_name().data(), this->host_custom_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_host_tags;
        break;
      }

      // optional string host_tags = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_tags().data(), this->host_tags().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_is_host_hidden;
        break;
      }

      // optional bool is_host_hidden = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_host_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_host_hidden_)));
          set_has_is_host_hidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_hidden_processes;
        break;
      }

      // optional string hidden_processes = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hidden_processes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hidden_processes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hidden_processes().data(), this->hidden_processes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_version;
        break;
      }

      // optional string version = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_commands;
        break;
      }

      // repeated .draiosproto.command_details commands = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_commands;
        if (input->ExpectTag(146)) goto parse_mounts;
        break;
      }

      // repeated .draiosproto.mounted_fs mounts = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mounts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_mounts;
        if (input->ExpectTag(154)) goto parse_top_files;
        break;
      }

      // repeated .draiosproto.file_stat top_files = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_top_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_top_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_top_files;
        if (input->ExpectTag(162)) goto parse_protos;
        break;
      }

      // optional .draiosproto.proto_info protos = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_protos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_instance_id;
        break;
      }

      // optional string instance_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instance_id().data(), this->instance_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_containers;
        break;
      }

      // repeated .draiosproto.container containers = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_containers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_containers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_containers;
        if (input->ExpectTag(194)) goto parse_kubernetes;
        break;
      }

      // optional .draiosproto.k8s_state kubernetes = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kubernetes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kubernetes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_mesos;
        break;
      }

      // optional .draiosproto.mesos_state mesos = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mesos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mesos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_events;
        break;
      }

      // repeated .draiosproto.agent_event events = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_events;
        if (input->ExpectTag(218)) goto parse_falcobl;
        break;
      }

      // optional .draiosproto.falco_baseline falcobl = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_falcobl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_falcobl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void metrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  // optional .draiosproto.host hostinfo = 4;
  if (has_hostinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hostinfo(), output);
  }

  // repeated .draiosproto.ipv4_connection ipv4_connections = 7;
  for (int i = 0; i < this->ipv4_connections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ipv4_connections(i), output);
  }

  // repeated .draiosproto.ipv4_network_interface ipv4_network_interfaces = 8;
  for (int i = 0; i < this->ipv4_network_interfaces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ipv4_network_interfaces(i), output);
  }

  // repeated .draiosproto.program programs = 9;
  for (int i = 0; i < this->programs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->programs(i), output);
  }

  // optional uint32 sampling_ratio = 10;
  if (has_sampling_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sampling_ratio(), output);
  }

  // optional string host_custom_name = 11;
  if (has_host_custom_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_custom_name().data(), this->host_custom_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->host_custom_name(), output);
  }

  // optional string host_tags = 12;
  if (has_host_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_tags().data(), this->host_tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->host_tags(), output);
  }

  // optional bool is_host_hidden = 14;
  if (has_is_host_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_host_hidden(), output);
  }

  // optional string hidden_processes = 15;
  if (has_hidden_processes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hidden_processes().data(), this->hidden_processes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->hidden_processes(), output);
  }

  // optional string version = 16;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->version(), output);
  }

  // repeated .draiosproto.command_details commands = 17;
  for (int i = 0; i < this->commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->commands(i), output);
  }

  // repeated .draiosproto.mounted_fs mounts = 18;
  for (int i = 0; i < this->mounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->mounts(i), output);
  }

  // repeated .draiosproto.file_stat top_files = 19;
  for (int i = 0; i < this->top_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->top_files(i), output);
  }

  // optional .draiosproto.proto_info protos = 20;
  if (has_protos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->protos(), output);
  }

  // optional string instance_id = 21;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instance_id().data(), this->instance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->instance_id(), output);
  }

  // repeated .draiosproto.container containers = 22;
  for (int i = 0; i < this->containers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->containers(i), output);
  }

  // optional .draiosproto.k8s_state kubernetes = 24;
  if (has_kubernetes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->kubernetes(), output);
  }

  // optional .draiosproto.mesos_state mesos = 25;
  if (has_mesos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->mesos(), output);
  }

  // repeated .draiosproto.agent_event events = 26;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->events(i), output);
  }

  // optional .draiosproto.falco_baseline falcobl = 27;
  if (has_falcobl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->falcobl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* metrics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // optional .draiosproto.host hostinfo = 4;
  if (has_hostinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hostinfo(), target);
  }

  // repeated .draiosproto.ipv4_connection ipv4_connections = 7;
  for (int i = 0; i < this->ipv4_connections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ipv4_connections(i), target);
  }

  // repeated .draiosproto.ipv4_network_interface ipv4_network_interfaces = 8;
  for (int i = 0; i < this->ipv4_network_interfaces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ipv4_network_interfaces(i), target);
  }

  // repeated .draiosproto.program programs = 9;
  for (int i = 0; i < this->programs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->programs(i), target);
  }

  // optional uint32 sampling_ratio = 10;
  if (has_sampling_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sampling_ratio(), target);
  }

  // optional string host_custom_name = 11;
  if (has_host_custom_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_custom_name().data(), this->host_custom_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->host_custom_name(), target);
  }

  // optional string host_tags = 12;
  if (has_host_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_tags().data(), this->host_tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->host_tags(), target);
  }

  // optional bool is_host_hidden = 14;
  if (has_is_host_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_host_hidden(), target);
  }

  // optional string hidden_processes = 15;
  if (has_hidden_processes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hidden_processes().data(), this->hidden_processes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->hidden_processes(), target);
  }

  // optional string version = 16;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->version(), target);
  }

  // repeated .draiosproto.command_details commands = 17;
  for (int i = 0; i < this->commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->commands(i), target);
  }

  // repeated .draiosproto.mounted_fs mounts = 18;
  for (int i = 0; i < this->mounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->mounts(i), target);
  }

  // repeated .draiosproto.file_stat top_files = 19;
  for (int i = 0; i < this->top_files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->top_files(i), target);
  }

  // optional .draiosproto.proto_info protos = 20;
  if (has_protos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->protos(), target);
  }

  // optional string instance_id = 21;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instance_id().data(), this->instance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->instance_id(), target);
  }

  // repeated .draiosproto.container containers = 22;
  for (int i = 0; i < this->containers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->containers(i), target);
  }

  // optional .draiosproto.k8s_state kubernetes = 24;
  if (has_kubernetes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->kubernetes(), target);
  }

  // optional .draiosproto.mesos_state mesos = 25;
  if (has_mesos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->mesos(), target);
  }

  // repeated .draiosproto.agent_event events = 26;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->events(i), target);
  }

  // optional .draiosproto.falco_baseline falcobl = 27;
  if (has_falcobl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->falcobl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int metrics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // optional uint32 sampling_ratio = 10;
    if (has_sampling_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sampling_ratio());
    }

    // optional string host_custom_name = 11;
    if (has_host_custom_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_custom_name());
    }

    // optional string host_tags = 12;
    if (has_host_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_tags());
    }

    // optional bool is_host_hidden = 14;
    if (has_is_host_hidden()) {
      total_size += 1 + 1;
    }

    // optional string hidden_processes = 15;
    if (has_hidden_processes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hidden_processes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string version = 16;
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string instance_id = 21;
    if (has_instance_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instance_id());
    }

    // optional .draiosproto.host hostinfo = 4;
    if (has_hostinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hostinfo());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .draiosproto.proto_info protos = 20;
    if (has_protos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->protos());
    }

    // optional .draiosproto.k8s_state kubernetes = 24;
    if (has_kubernetes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kubernetes());
    }

    // optional .draiosproto.mesos_state mesos = 25;
    if (has_mesos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mesos());
    }

    // optional .draiosproto.falco_baseline falcobl = 27;
    if (has_falcobl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->falcobl());
    }

  }
  // repeated .draiosproto.program programs = 9;
  total_size += 1 * this->programs_size();
  for (int i = 0; i < this->programs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->programs(i));
  }

  // repeated .draiosproto.ipv4_connection ipv4_connections = 7;
  total_size += 1 * this->ipv4_connections_size();
  for (int i = 0; i < this->ipv4_connections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ipv4_connections(i));
  }

  // repeated .draiosproto.ipv4_network_interface ipv4_network_interfaces = 8;
  total_size += 1 * this->ipv4_network_interfaces_size();
  for (int i = 0; i < this->ipv4_network_interfaces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ipv4_network_interfaces(i));
  }

  // repeated .draiosproto.command_details commands = 17;
  total_size += 2 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  // repeated .draiosproto.mounted_fs mounts = 18;
  total_size += 2 * this->mounts_size();
  for (int i = 0; i < this->mounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mounts(i));
  }

  // repeated .draiosproto.file_stat top_files = 19;
  total_size += 2 * this->top_files_size();
  for (int i = 0; i < this->top_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->top_files(i));
  }

  // repeated .draiosproto.container containers = 22;
  total_size += 2 * this->containers_size();
  for (int i = 0; i < this->containers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->containers(i));
  }

  // repeated .draiosproto.agent_event events = 26;
  total_size += 2 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void metrics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const metrics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const metrics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void metrics::MergeFrom(const metrics& from) {
  GOOGLE_CHECK_NE(&from, this);
  programs_.MergeFrom(from.programs_);
  ipv4_connections_.MergeFrom(from.ipv4_connections_);
  ipv4_network_interfaces_.MergeFrom(from.ipv4_network_interfaces_);
  commands_.MergeFrom(from.commands_);
  mounts_.MergeFrom(from.mounts_);
  top_files_.MergeFrom(from.top_files_);
  containers_.MergeFrom(from.containers_);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_sampling_ratio()) {
      set_sampling_ratio(from.sampling_ratio());
    }
    if (from.has_host_custom_name()) {
      set_host_custom_name(from.host_custom_name());
    }
    if (from.has_host_tags()) {
      set_host_tags(from.host_tags());
    }
    if (from.has_is_host_hidden()) {
      set_is_host_hidden(from.is_host_hidden());
    }
    if (from.has_hidden_processes()) {
      set_hidden_processes(from.hidden_processes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_hostinfo()) {
      mutable_hostinfo()->::draiosproto::host::MergeFrom(from.hostinfo());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_protos()) {
      mutable_protos()->::draiosproto::proto_info::MergeFrom(from.protos());
    }
    if (from.has_kubernetes()) {
      mutable_kubernetes()->::draiosproto::k8s_state::MergeFrom(from.kubernetes());
    }
    if (from.has_mesos()) {
      mutable_mesos()->::draiosproto::mesos_state::MergeFrom(from.mesos());
    }
    if (from.has_falcobl()) {
      mutable_falcobl()->::draiosproto::falco_baseline::MergeFrom(from.falcobl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void metrics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void metrics::CopyFrom(const metrics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool metrics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_hostinfo()) {
    if (!this->hostinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < programs_size(); i++) {
    if (!this->programs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ipv4_connections_size(); i++) {
    if (!this->ipv4_connections(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ipv4_network_interfaces_size(); i++) {
    if (!this->ipv4_network_interfaces(i).IsInitialized()) return false;
  }
  for (int i = 0; i < commands_size(); i++) {
    if (!this->commands(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mounts_size(); i++) {
    if (!this->mounts(i).IsInitialized()) return false;
  }
  for (int i = 0; i < top_files_size(); i++) {
    if (!this->top_files(i).IsInitialized()) return false;
  }
  if (has_protos()) {
    if (!this->protos().IsInitialized()) return false;
  }
  for (int i = 0; i < containers_size(); i++) {
    if (!this->containers(i).IsInitialized()) return false;
  }
  if (has_kubernetes()) {
    if (!this->kubernetes().IsInitialized()) return false;
  }
  if (has_mesos()) {
    if (!this->mesos().IsInitialized()) return false;
  }
  for (int i = 0; i < events_size(); i++) {
    if (!this->events(i).IsInitialized()) return false;
  }
  if (has_falcobl()) {
    if (!this->falcobl().IsInitialized()) return false;
  }
  return true;
}

void metrics::Swap(metrics* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(sampling_ratio_, other->sampling_ratio_);
    std::swap(host_custom_name_, other->host_custom_name_);
    std::swap(host_tags_, other->host_tags_);
    std::swap(is_host_hidden_, other->is_host_hidden_);
    std::swap(hidden_processes_, other->hidden_processes_);
    std::swap(version_, other->version_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(hostinfo_, other->hostinfo_);
    programs_.Swap(&other->programs_);
    ipv4_connections_.Swap(&other->ipv4_connections_);
    ipv4_network_interfaces_.Swap(&other->ipv4_network_interfaces_);
    commands_.Swap(&other->commands_);
    mounts_.Swap(&other->mounts_);
    top_files_.Swap(&other->top_files_);
    std::swap(protos_, other->protos_);
    containers_.Swap(&other->containers_);
    std::swap(kubernetes_, other->kubernetes_);
    std::swap(mesos_, other->mesos_);
    events_.Swap(&other->events_);
    std::swap(falcobl_, other->falcobl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata metrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = metrics_descriptor_;
  metadata.reflection = metrics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dump_request_start::kTimestampNsFieldNumber;
const int dump_request_start::kMachineIdFieldNumber;
const int dump_request_start::kCustomerIdFieldNumber;
const int dump_request_start::kDurationNsFieldNumber;
const int dump_request_start::kFiltersFieldNumber;
const int dump_request_start::kMaxSizeFieldNumber;
const int dump_request_start::kTokenFieldNumber;
#endif  // !_MSC_VER

dump_request_start::dump_request_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dump_request_start::InitAsDefaultInstance() {
}

dump_request_start::dump_request_start(const dump_request_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dump_request_start::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_ns_ = GOOGLE_ULONGLONG(0);
  filters_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_size_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dump_request_start::~dump_request_start() {
  SharedDtor();
}

void dump_request_start::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (filters_ != &::google::protobuf::internal::kEmptyString) {
    delete filters_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void dump_request_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dump_request_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dump_request_start_descriptor_;
}

const dump_request_start& dump_request_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

dump_request_start* dump_request_start::default_instance_ = NULL;

dump_request_start* dump_request_start::New() const {
  return new dump_request_start;
}

void dump_request_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
    duration_ns_ = GOOGLE_ULONGLONG(0);
    if (has_filters()) {
      if (filters_ != &::google::protobuf::internal::kEmptyString) {
        filters_->clear();
      }
    }
    max_size_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dump_request_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_duration_ns;
        break;
      }

      // optional uint64 duration_ns = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_ns_)));
          set_has_duration_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filters;
        break;
      }

      // optional string filters = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filters().data(), this->filters().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_token;
        break;
      }

      // required string token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_size;
        break;
      }

      // optional uint64 max_size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_size_)));
          set_has_max_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dump_request_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  // optional uint64 duration_ns = 4;
  if (has_duration_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->duration_ns(), output);
  }

  // optional string filters = 5;
  if (has_filters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters().data(), this->filters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->filters(), output);
  }

  // required string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->token(), output);
  }

  // optional uint64 max_size = 7;
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->max_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dump_request_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // optional uint64 duration_ns = 4;
  if (has_duration_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->duration_ns(), target);
  }

  // optional string filters = 5;
  if (has_filters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters().data(), this->filters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filters(), target);
  }

  // required string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->token(), target);
  }

  // optional uint64 max_size = 7;
  if (has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->max_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dump_request_start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // optional uint64 duration_ns = 4;
    if (has_duration_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duration_ns());
    }

    // optional string filters = 5;
    if (has_filters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filters());
    }

    // optional uint64 max_size = 7;
    if (has_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_size());
    }

    // required string token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dump_request_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dump_request_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dump_request_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dump_request_start::MergeFrom(const dump_request_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_duration_ns()) {
      set_duration_ns(from.duration_ns());
    }
    if (from.has_filters()) {
      set_filters(from.filters());
    }
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dump_request_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dump_request_start::CopyFrom(const dump_request_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dump_request_start::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000043) != 0x00000043) return false;

  return true;
}

void dump_request_start::Swap(dump_request_start* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(duration_ns_, other->duration_ns_);
    std::swap(filters_, other->filters_);
    std::swap(max_size_, other->max_size_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dump_request_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dump_request_start_descriptor_;
  metadata.reflection = dump_request_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dump_request_stop::kTimestampNsFieldNumber;
const int dump_request_stop::kMachineIdFieldNumber;
const int dump_request_stop::kCustomerIdFieldNumber;
const int dump_request_stop::kTokenFieldNumber;
#endif  // !_MSC_VER

dump_request_stop::dump_request_stop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dump_request_stop::InitAsDefaultInstance() {
}

dump_request_stop::dump_request_stop(const dump_request_stop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dump_request_stop::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dump_request_stop::~dump_request_stop() {
  SharedDtor();
}

void dump_request_stop::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void dump_request_stop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dump_request_stop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dump_request_stop_descriptor_;
}

const dump_request_stop& dump_request_stop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

dump_request_stop* dump_request_stop::default_instance_ = NULL;

dump_request_stop* dump_request_stop::New() const {
  return new dump_request_stop;
}

void dump_request_stop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dump_request_stop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // required string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dump_request_stop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dump_request_stop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dump_request_stop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // required string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dump_request_stop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dump_request_stop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dump_request_stop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dump_request_stop::MergeFrom(const dump_request_stop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dump_request_stop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dump_request_stop::CopyFrom(const dump_request_stop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dump_request_stop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void dump_request_stop::Swap(dump_request_stop* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dump_request_stop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dump_request_stop_descriptor_;
  metadata.reflection = dump_request_stop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dump_response::kTimestampNsFieldNumber;
const int dump_response::kMachineIdFieldNumber;
const int dump_response::kCustomerIdFieldNumber;
const int dump_response::kChunkNoFieldNumber;
const int dump_response::kFinalChunkFieldNumber;
const int dump_response::kKeepAliveFieldNumber;
const int dump_response::kContentFieldNumber;
const int dump_response::kFinalSizeBytesFieldNumber;
const int dump_response::kErrorFieldNumber;
const int dump_response::kTokenFieldNumber;
#endif  // !_MSC_VER

dump_response::dump_response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dump_response::InitAsDefaultInstance() {
}

dump_response::dump_response(const dump_response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dump_response::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chunk_no_ = 0u;
  final_chunk_ = false;
  keep_alive_ = false;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  final_size_bytes_ = GOOGLE_ULONGLONG(0);
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dump_response::~dump_response() {
  SharedDtor();
}

void dump_response::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void dump_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dump_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dump_response_descriptor_;
}

const dump_response& dump_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

dump_response* dump_response::default_instance_ = NULL;

dump_response* dump_response::New() const {
  return new dump_response;
}

void dump_response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
    chunk_no_ = 0u;
    final_chunk_ = false;
    keep_alive_ = false;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    final_size_bytes_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dump_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }

      // optional string error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_token;
        break;
      }

      // required string token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_chunk_no;
        break;
      }

      // optional uint32 chunk_no = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunk_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunk_no_)));
          set_has_chunk_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_final_chunk;
        break;
      }

      // optional bool final_chunk = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final_chunk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &final_chunk_)));
          set_has_final_chunk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_keep_alive;
        break;
      }

      // optional bool keep_alive = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keep_alive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_alive_)));
          set_has_keep_alive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_final_size_bytes;
        break;
      }

      // optional uint64 final_size_bytes = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final_size_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &final_size_bytes_)));
          set_has_final_size_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dump_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  // optional bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->content(), output);
  }

  // optional string error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->error(), output);
  }

  // required string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->token(), output);
  }

  // optional uint32 chunk_no = 7;
  if (has_chunk_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->chunk_no(), output);
  }

  // optional bool final_chunk = 8;
  if (has_final_chunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->final_chunk(), output);
  }

  // optional bool keep_alive = 9;
  if (has_keep_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->keep_alive(), output);
  }

  // optional uint64 final_size_bytes = 10;
  if (has_final_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->final_size_bytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dump_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // optional bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // optional string error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error(), target);
  }

  // required string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->token(), target);
  }

  // optional uint32 chunk_no = 7;
  if (has_chunk_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->chunk_no(), target);
  }

  // optional bool final_chunk = 8;
  if (has_final_chunk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->final_chunk(), target);
  }

  // optional bool keep_alive = 9;
  if (has_keep_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->keep_alive(), target);
  }

  // optional uint64 final_size_bytes = 10;
  if (has_final_size_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->final_size_bytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dump_response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // optional uint32 chunk_no = 7;
    if (has_chunk_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chunk_no());
    }

    // optional bool final_chunk = 8;
    if (has_final_chunk()) {
      total_size += 1 + 1;
    }

    // optional bool keep_alive = 9;
    if (has_keep_alive()) {
      total_size += 1 + 1;
    }

    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional uint64 final_size_bytes = 10;
    if (has_final_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->final_size_bytes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // required string token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dump_response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dump_response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dump_response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dump_response::MergeFrom(const dump_response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_chunk_no()) {
      set_chunk_no(from.chunk_no());
    }
    if (from.has_final_chunk()) {
      set_final_chunk(from.final_chunk());
    }
    if (from.has_keep_alive()) {
      set_keep_alive(from.keep_alive());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_final_size_bytes()) {
      set_final_size_bytes(from.final_size_bytes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dump_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dump_response::CopyFrom(const dump_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dump_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000203) != 0x00000203) return false;

  return true;
}

void dump_response::Swap(dump_response* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(chunk_no_, other->chunk_no_);
    std::swap(final_chunk_, other->final_chunk_);
    std::swap(keep_alive_, other->keep_alive_);
    std::swap(content_, other->content_);
    std::swap(final_size_bytes_, other->final_size_bytes_);
    std::swap(error_, other->error_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dump_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dump_response_descriptor_;
  metadata.reflection = dump_response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ssh_open_channel::kTimestampNsFieldNumber;
const int ssh_open_channel::kMachineIdFieldNumber;
const int ssh_open_channel::kCustomerIdFieldNumber;
const int ssh_open_channel::kTokenFieldNumber;
const int ssh_open_channel::kUserFieldNumber;
const int ssh_open_channel::kPasswordFieldNumber;
const int ssh_open_channel::kKeyFieldNumber;
const int ssh_open_channel::kPassphraseFieldNumber;
const int ssh_open_channel::kPortFieldNumber;
#endif  // !_MSC_VER

ssh_open_channel::ssh_open_channel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssh_open_channel::InitAsDefaultInstance() {
}

ssh_open_channel::ssh_open_channel(const ssh_open_channel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssh_open_channel::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passphrase_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssh_open_channel::~ssh_open_channel() {
  SharedDtor();
}

void ssh_open_channel::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (passphrase_ != &::google::protobuf::internal::kEmptyString) {
    delete passphrase_;
  }
  if (this != default_instance_) {
  }
}

void ssh_open_channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssh_open_channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssh_open_channel_descriptor_;
}

const ssh_open_channel& ssh_open_channel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

ssh_open_channel* ssh_open_channel::default_instance_ = NULL;

ssh_open_channel* ssh_open_channel::New() const {
  return new ssh_open_channel;
}

void ssh_open_channel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_passphrase()) {
      if (passphrase_ != &::google::protobuf::internal::kEmptyString) {
        passphrase_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssh_open_channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // required string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // required string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_password;
        break;
      }

      // optional string password = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_key;
        break;
      }

      // optional string key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_passphrase;
        break;
      }

      // optional string passphrase = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passphrase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passphrase()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passphrase().data(), this->passphrase().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_port;
        break;
      }

      // optional uint32 port = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssh_open_channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(), output);
  }

  // required string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }

  // optional string password = 6;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->password(), output);
  }

  // optional string key = 7;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->key(), output);
  }

  // optional string passphrase = 8;
  if (has_passphrase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passphrase().data(), this->passphrase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->passphrase(), output);
  }

  // optional uint32 port = 9;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssh_open_channel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // required string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // optional string password = 6;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->password(), target);
  }

  // optional string key = 7;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->key(), target);
  }

  // optional string passphrase = 8;
  if (has_passphrase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passphrase().data(), this->passphrase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->passphrase(), target);
  }

  // optional uint32 port = 9;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssh_open_channel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // required string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string password = 6;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string key = 7;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string passphrase = 8;
    if (has_passphrase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passphrase());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 port = 9;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssh_open_channel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssh_open_channel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssh_open_channel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssh_open_channel::MergeFrom(const ssh_open_channel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_passphrase()) {
      set_passphrase(from.passphrase());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssh_open_channel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssh_open_channel::CopyFrom(const ssh_open_channel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssh_open_channel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void ssh_open_channel::Swap(ssh_open_channel* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(token_, other->token_);
    std::swap(user_, other->user_);
    std::swap(password_, other->password_);
    std::swap(key_, other->key_);
    std::swap(passphrase_, other->passphrase_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssh_open_channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssh_open_channel_descriptor_;
  metadata.reflection = ssh_open_channel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ssh_data::kTimestampNsFieldNumber;
const int ssh_data::kMachineIdFieldNumber;
const int ssh_data::kCustomerIdFieldNumber;
const int ssh_data::kTokenFieldNumber;
const int ssh_data::kDataFieldNumber;
const int ssh_data::kErrorFieldNumber;
const int ssh_data::kExitStatusFieldNumber;
#endif  // !_MSC_VER

ssh_data::ssh_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssh_data::InitAsDefaultInstance() {
}

ssh_data::ssh_data(const ssh_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssh_data::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exit_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssh_data::~ssh_data() {
  SharedDtor();
}

void ssh_data::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void ssh_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssh_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssh_data_descriptor_;
}

const ssh_data& ssh_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

ssh_data* ssh_data::default_instance_ = NULL;

ssh_data* ssh_data::New() const {
  return new ssh_data;
}

void ssh_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
    exit_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssh_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // required string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_error;
        break;
      }

      // optional string error = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exit_status;
        break;
      }

      // optional int32 exit_status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_status_)));
          set_has_exit_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssh_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }

  // optional string error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->error(), output);
  }

  // optional int32 exit_status = 7;
  if (has_exit_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exit_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssh_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // optional string error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->error(), target);
  }

  // optional int32 exit_status = 7;
  if (has_exit_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exit_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssh_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // required string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional string error = 6;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional int32 exit_status = 7;
    if (has_exit_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssh_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssh_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssh_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssh_data::MergeFrom(const ssh_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_exit_status()) {
      set_exit_status(from.exit_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssh_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssh_data::CopyFrom(const ssh_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssh_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void ssh_data::Swap(ssh_data* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(token_, other->token_);
    std::swap(data_, other->data_);
    std::swap(error_, other->error_);
    std::swap(exit_status_, other->exit_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssh_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssh_data_descriptor_;
  metadata.reflection = ssh_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ssh_close_channel::kTimestampNsFieldNumber;
const int ssh_close_channel::kMachineIdFieldNumber;
const int ssh_close_channel::kCustomerIdFieldNumber;
const int ssh_close_channel::kTokenFieldNumber;
#endif  // !_MSC_VER

ssh_close_channel::ssh_close_channel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssh_close_channel::InitAsDefaultInstance() {
}

ssh_close_channel::ssh_close_channel(const ssh_close_channel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssh_close_channel::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssh_close_channel::~ssh_close_channel() {
  SharedDtor();
}

void ssh_close_channel::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ssh_close_channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssh_close_channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssh_close_channel_descriptor_;
}

const ssh_close_channel& ssh_close_channel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

ssh_close_channel* ssh_close_channel::default_instance_ = NULL;

ssh_close_channel* ssh_close_channel::New() const {
  return new ssh_close_channel;
}

void ssh_close_channel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssh_close_channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // required string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssh_close_channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssh_close_channel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssh_close_channel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // required string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssh_close_channel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssh_close_channel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssh_close_channel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssh_close_channel::MergeFrom(const ssh_close_channel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssh_close_channel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssh_close_channel::CopyFrom(const ssh_close_channel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssh_close_channel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void ssh_close_channel::Swap(ssh_close_channel* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssh_close_channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssh_close_channel_descriptor_;
  metadata.reflection = ssh_close_channel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int auto_update_request::kTimestampNsFieldNumber;
const int auto_update_request::kMachineIdFieldNumber;
const int auto_update_request::kCustomerIdFieldNumber;
#endif  // !_MSC_VER

auto_update_request::auto_update_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void auto_update_request::InitAsDefaultInstance() {
}

auto_update_request::auto_update_request(const auto_update_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void auto_update_request::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auto_update_request::~auto_update_request() {
  SharedDtor();
}

void auto_update_request::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (this != default_instance_) {
  }
}

void auto_update_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auto_update_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auto_update_request_descriptor_;
}

const auto_update_request& auto_update_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

auto_update_request* auto_update_request::default_instance_ = NULL;

auto_update_request* auto_update_request::New() const {
  return new auto_update_request;
}

void auto_update_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auto_update_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void auto_update_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* auto_update_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int auto_update_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auto_update_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auto_update_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auto_update_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auto_update_request::MergeFrom(const auto_update_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auto_update_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auto_update_request::CopyFrom(const auto_update_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auto_update_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void auto_update_request::Swap(auto_update_request* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auto_update_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auto_update_request_descriptor_;
  metadata.reflection = auto_update_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dirty_shutdown_report::kTimestampNsFieldNumber;
const int dirty_shutdown_report::kMachineIdFieldNumber;
const int dirty_shutdown_report::kCustomerIdFieldNumber;
const int dirty_shutdown_report::kLogFieldNumber;
#endif  // !_MSC_VER

dirty_shutdown_report::dirty_shutdown_report()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dirty_shutdown_report::InitAsDefaultInstance() {
}

dirty_shutdown_report::dirty_shutdown_report(const dirty_shutdown_report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dirty_shutdown_report::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dirty_shutdown_report::~dirty_shutdown_report() {
  SharedDtor();
}

void dirty_shutdown_report::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (log_ != &::google::protobuf::internal::kEmptyString) {
    delete log_;
  }
  if (this != default_instance_) {
  }
}

void dirty_shutdown_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dirty_shutdown_report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dirty_shutdown_report_descriptor_;
}

const dirty_shutdown_report& dirty_shutdown_report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

dirty_shutdown_report* dirty_shutdown_report::default_instance_ = NULL;

dirty_shutdown_report* dirty_shutdown_report::New() const {
  return new dirty_shutdown_report;
}

void dirty_shutdown_report::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
    if (has_log()) {
      if (log_ != &::google::protobuf::internal::kEmptyString) {
        log_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dirty_shutdown_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_log;
        break;
      }

      // required string log = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dirty_shutdown_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  // required string log = 4;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->log(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dirty_shutdown_report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // required string log = 4;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->log(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dirty_shutdown_report::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // required string log = 4;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dirty_shutdown_report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dirty_shutdown_report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dirty_shutdown_report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dirty_shutdown_report::MergeFrom(const dirty_shutdown_report& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_log()) {
      set_log(from.log());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dirty_shutdown_report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dirty_shutdown_report::CopyFrom(const dirty_shutdown_report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dirty_shutdown_report::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void dirty_shutdown_report::Swap(dirty_shutdown_report* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(log_, other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dirty_shutdown_report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dirty_shutdown_report_descriptor_;
  metadata.reflection = dirty_shutdown_report_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int key_value::kKeyFieldNumber;
const int key_value::kValueFieldNumber;
#endif  // !_MSC_VER

key_value::key_value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void key_value::InitAsDefaultInstance() {
}

key_value::key_value(const key_value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void key_value::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

key_value::~key_value() {
  SharedDtor();
}

void key_value::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void key_value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* key_value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return key_value_descriptor_;
}

const key_value& key_value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

key_value* key_value::default_instance_ = NULL;

key_value* key_value::New() const {
  return new key_value;
}

void key_value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool key_value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void key_value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* key_value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int key_value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void key_value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const key_value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const key_value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void key_value::MergeFrom(const key_value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void key_value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void key_value::CopyFrom(const key_value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool key_value::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void key_value::Swap(key_value* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata key_value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = key_value_descriptor_;
  metadata.reflection = key_value_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int agent_event::kTimestampSecFieldNumber;
const int agent_event::kScopeFieldNumber;
const int agent_event::kTitleFieldNumber;
const int agent_event::kDescriptionFieldNumber;
const int agent_event::kSeverityFieldNumber;
const int agent_event::kTagsFieldNumber;
#endif  // !_MSC_VER

agent_event::agent_event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void agent_event::InitAsDefaultInstance() {
}

agent_event::agent_event(const agent_event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void agent_event::SharedCtor() {
  _cached_size_ = 0;
  timestamp_sec_ = GOOGLE_ULONGLONG(0);
  scope_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  severity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

agent_event::~agent_event() {
  SharedDtor();
}

void agent_event::SharedDtor() {
  if (scope_ != &::google::protobuf::internal::kEmptyString) {
    delete scope_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void agent_event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* agent_event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agent_event_descriptor_;
}

const agent_event& agent_event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

agent_event* agent_event::default_instance_ = NULL;

agent_event* agent_event::New() const {
  return new agent_event;
}

void agent_event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_sec_ = GOOGLE_ULONGLONG(0);
    if (has_scope()) {
      if (scope_ != &::google::protobuf::internal::kEmptyString) {
        scope_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    severity_ = 0u;
  }
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool agent_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp_sec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_sec_)));
          set_has_timestamp_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scope;
        break;
      }

      // optional string scope = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scope()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scope().data(), this->scope().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_severity;
        break;
      }

      // optional uint32 severity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tags;
        break;
      }

      // repeated .draiosproto.key_value tags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void agent_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 timestamp_sec = 1;
  if (has_timestamp_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_sec(), output);
  }

  // optional string scope = 2;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scope().data(), this->scope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->scope(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->description(), output);
  }

  // optional uint32 severity = 5;
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->severity(), output);
  }

  // repeated .draiosproto.key_value tags = 6;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* agent_event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 timestamp_sec = 1;
  if (has_timestamp_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_sec(), target);
  }

  // optional string scope = 2;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scope().data(), this->scope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scope(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // optional uint32 severity = 5;
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->severity(), target);
  }

  // repeated .draiosproto.key_value tags = 6;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int agent_event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_sec());
    }

    // optional string scope = 2;
    if (has_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scope());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint32 severity = 5;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->severity());
    }

  }
  // repeated .draiosproto.key_value tags = 6;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void agent_event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const agent_event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const agent_event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void agent_event::MergeFrom(const agent_event& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_sec()) {
      set_timestamp_sec(from.timestamp_sec());
    }
    if (from.has_scope()) {
      set_scope(from.scope());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void agent_event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void agent_event::CopyFrom(const agent_event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool agent_event::IsInitialized() const {

  for (int i = 0; i < tags_size(); i++) {
    if (!this->tags(i).IsInitialized()) return false;
  }
  return true;
}

void agent_event::Swap(agent_event* other) {
  if (other != this) {
    std::swap(timestamp_sec_, other->timestamp_sec_);
    std::swap(scope_, other->scope_);
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    std::swap(severity_, other->severity_);
    tags_.Swap(&other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata agent_event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = agent_event_descriptor_;
  metadata.reflection = agent_event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int config_file::kNameFieldNumber;
const int config_file::kContentFieldNumber;
#endif  // !_MSC_VER

config_file::config_file()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void config_file::InitAsDefaultInstance() {
}

config_file::config_file(const config_file& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void config_file::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

config_file::~config_file() {
  SharedDtor();
}

void config_file::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void config_file::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* config_file::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return config_file_descriptor_;
}

const config_file& config_file::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

config_file* config_file::default_instance_ = NULL;

config_file* config_file::New() const {
  return new config_file;
}

void config_file::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool config_file::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void config_file::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* config_file::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int config_file::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void config_file::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const config_file* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const config_file*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void config_file::MergeFrom(const config_file& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void config_file::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void config_file::CopyFrom(const config_file& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool config_file::IsInitialized() const {

  return true;
}

void config_file::Swap(config_file* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata config_file::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = config_file_descriptor_;
  metadata.reflection = config_file_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int config_data::kConfigFilesFieldNumber;
#endif  // !_MSC_VER

config_data::config_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void config_data::InitAsDefaultInstance() {
}

config_data::config_data(const config_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void config_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

config_data::~config_data() {
  SharedDtor();
}

void config_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void config_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* config_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return config_data_descriptor_;
}

const config_data& config_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

config_data* config_data::default_instance_ = NULL;

config_data* config_data::New() const {
  return new config_data;
}

void config_data::Clear() {
  config_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool config_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.config_file config_files = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_config_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_config_files;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void config_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .draiosproto.config_file config_files = 1;
  for (int i = 0; i < this->config_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config_files(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* config_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .draiosproto.config_file config_files = 1;
  for (int i = 0; i < this->config_files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->config_files(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int config_data::ByteSize() const {
  int total_size = 0;

  // repeated .draiosproto.config_file config_files = 1;
  total_size += 1 * this->config_files_size();
  for (int i = 0; i < this->config_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->config_files(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void config_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const config_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const config_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void config_data::MergeFrom(const config_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  config_files_.MergeFrom(from.config_files_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void config_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void config_data::CopyFrom(const config_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool config_data::IsInitialized() const {

  return true;
}

void config_data::Swap(config_data* other) {
  if (other != this) {
    config_files_.Swap(&other->config_files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata config_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = config_data_descriptor_;
  metadata.reflection = config_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int falco_subcategory::kNameFieldNumber;
const int falco_subcategory::kDFieldNumber;
const int falco_subcategory::kFullFieldNumber;
#endif  // !_MSC_VER

falco_subcategory::falco_subcategory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void falco_subcategory::InitAsDefaultInstance() {
}

falco_subcategory::falco_subcategory(const falco_subcategory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void falco_subcategory::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  full_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

falco_subcategory::~falco_subcategory() {
  SharedDtor();
}

void falco_subcategory::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void falco_subcategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* falco_subcategory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return falco_subcategory_descriptor_;
}

const falco_subcategory& falco_subcategory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

falco_subcategory* falco_subcategory::default_instance_ = NULL;

falco_subcategory* falco_subcategory::New() const {
  return new falco_subcategory;
}

void falco_subcategory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    full_ = false;
  }
  d_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool falco_subcategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_d;
        break;
      }

      // repeated string d = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_d()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->d(this->d_size() - 1).data(),
            this->d(this->d_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_d;
        if (input->ExpectTag(24)) goto parse_full;
        break;
      }

      // optional bool full = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_full:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &full_)));
          set_has_full();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void falco_subcategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated string d = 2;
  for (int i = 0; i < this->d_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->d(i).data(), this->d(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->d(i), output);
  }

  // optional bool full = 3;
  if (has_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->full(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* falco_subcategory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string d = 2;
  for (int i = 0; i < this->d_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->d(i).data(), this->d(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->d(i), target);
  }

  // optional bool full = 3;
  if (has_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->full(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int falco_subcategory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool full = 3;
    if (has_full()) {
      total_size += 1 + 1;
    }

  }
  // repeated string d = 2;
  total_size += 1 * this->d_size();
  for (int i = 0; i < this->d_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->d(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void falco_subcategory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const falco_subcategory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const falco_subcategory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void falco_subcategory::MergeFrom(const falco_subcategory& from) {
  GOOGLE_CHECK_NE(&from, this);
  d_.MergeFrom(from.d_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_full()) {
      set_full(from.full());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void falco_subcategory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void falco_subcategory::CopyFrom(const falco_subcategory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool falco_subcategory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void falco_subcategory::Swap(falco_subcategory* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    d_.Swap(&other->d_);
    std::swap(full_, other->full_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata falco_subcategory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = falco_subcategory_descriptor_;
  metadata.reflection = falco_subcategory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int falco_subcategory_container::kSubcatsFieldNumber;
#endif  // !_MSC_VER

falco_subcategory_container::falco_subcategory_container()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void falco_subcategory_container::InitAsDefaultInstance() {
}

falco_subcategory_container::falco_subcategory_container(const falco_subcategory_container& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void falco_subcategory_container::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

falco_subcategory_container::~falco_subcategory_container() {
  SharedDtor();
}

void falco_subcategory_container::SharedDtor() {
  if (this != default_instance_) {
  }
}

void falco_subcategory_container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* falco_subcategory_container::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return falco_subcategory_container_descriptor_;
}

const falco_subcategory_container& falco_subcategory_container::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

falco_subcategory_container* falco_subcategory_container::default_instance_ = NULL;

falco_subcategory_container* falco_subcategory_container::New() const {
  return new falco_subcategory_container;
}

void falco_subcategory_container::Clear() {
  subcats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool falco_subcategory_container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.falco_subcategory subcats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subcats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subcats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_subcats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void falco_subcategory_container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .draiosproto.falco_subcategory subcats = 1;
  for (int i = 0; i < this->subcats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->subcats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* falco_subcategory_container::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .draiosproto.falco_subcategory subcats = 1;
  for (int i = 0; i < this->subcats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->subcats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int falco_subcategory_container::ByteSize() const {
  int total_size = 0;

  // repeated .draiosproto.falco_subcategory subcats = 1;
  total_size += 1 * this->subcats_size();
  for (int i = 0; i < this->subcats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subcats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void falco_subcategory_container::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const falco_subcategory_container* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const falco_subcategory_container*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void falco_subcategory_container::MergeFrom(const falco_subcategory_container& from) {
  GOOGLE_CHECK_NE(&from, this);
  subcats_.MergeFrom(from.subcats_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void falco_subcategory_container::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void falco_subcategory_container::CopyFrom(const falco_subcategory_container& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool falco_subcategory_container::IsInitialized() const {

  for (int i = 0; i < subcats_size(); i++) {
    if (!this->subcats(i).IsInitialized()) return false;
  }
  return true;
}

void falco_subcategory_container::Swap(falco_subcategory_container* other) {
  if (other != this) {
    subcats_.Swap(&other->subcats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata falco_subcategory_container::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = falco_subcategory_container_descriptor_;
  metadata.reflection = falco_subcategory_container_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int falco_category::kNameFieldNumber;
const int falco_category::kStartupSubcatsFieldNumber;
const int falco_category::kRegularSubcatsFieldNumber;
#endif  // !_MSC_VER

falco_category::falco_category()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void falco_category::InitAsDefaultInstance() {
}

falco_category::falco_category(const falco_category& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void falco_category::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

falco_category::~falco_category() {
  SharedDtor();
}

void falco_category::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void falco_category::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* falco_category::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return falco_category_descriptor_;
}

const falco_category& falco_category::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

falco_category* falco_category::default_instance_ = NULL;

falco_category* falco_category::New() const {
  return new falco_category;
}

void falco_category::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  startup_subcats_.Clear();
  regular_subcats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool falco_category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_startup_subcats;
        break;
      }

      // repeated .draiosproto.falco_subcategory_container startup_subcats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startup_subcats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_startup_subcats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_startup_subcats;
        if (input->ExpectTag(26)) goto parse_regular_subcats;
        break;
      }

      // repeated .draiosproto.falco_subcategory_container regular_subcats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regular_subcats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_regular_subcats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_regular_subcats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void falco_category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .draiosproto.falco_subcategory_container startup_subcats = 2;
  for (int i = 0; i < this->startup_subcats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->startup_subcats(i), output);
  }

  // repeated .draiosproto.falco_subcategory_container regular_subcats = 3;
  for (int i = 0; i < this->regular_subcats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->regular_subcats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* falco_category::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .draiosproto.falco_subcategory_container startup_subcats = 2;
  for (int i = 0; i < this->startup_subcats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->startup_subcats(i), target);
  }

  // repeated .draiosproto.falco_subcategory_container regular_subcats = 3;
  for (int i = 0; i < this->regular_subcats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->regular_subcats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int falco_category::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .draiosproto.falco_subcategory_container startup_subcats = 2;
  total_size += 1 * this->startup_subcats_size();
  for (int i = 0; i < this->startup_subcats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->startup_subcats(i));
  }

  // repeated .draiosproto.falco_subcategory_container regular_subcats = 3;
  total_size += 1 * this->regular_subcats_size();
  for (int i = 0; i < this->regular_subcats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regular_subcats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void falco_category::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const falco_category* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const falco_category*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void falco_category::MergeFrom(const falco_category& from) {
  GOOGLE_CHECK_NE(&from, this);
  startup_subcats_.MergeFrom(from.startup_subcats_);
  regular_subcats_.MergeFrom(from.regular_subcats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void falco_category::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void falco_category::CopyFrom(const falco_category& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool falco_category::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < startup_subcats_size(); i++) {
    if (!this->startup_subcats(i).IsInitialized()) return false;
  }
  for (int i = 0; i < regular_subcats_size(); i++) {
    if (!this->regular_subcats(i).IsInitialized()) return false;
  }
  return true;
}

void falco_category::Swap(falco_category* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    startup_subcats_.Swap(&other->startup_subcats_);
    regular_subcats_.Swap(&other->regular_subcats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata falco_category::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = falco_category_descriptor_;
  metadata.reflection = falco_category_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int falco_prog::kCommFieldNumber;
const int falco_prog::kExeFieldNumber;
const int falco_prog::kArgsFieldNumber;
const int falco_prog::kUserIdFieldNumber;
const int falco_prog::kContainerIdFieldNumber;
const int falco_prog::kCatsFieldNumber;
#endif  // !_MSC_VER

falco_prog::falco_prog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void falco_prog::InitAsDefaultInstance() {
}

falco_prog::falco_prog(const falco_prog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void falco_prog::SharedCtor() {
  _cached_size_ = 0;
  comm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  container_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

falco_prog::~falco_prog() {
  SharedDtor();
}

void falco_prog::SharedDtor() {
  if (comm_ != &::google::protobuf::internal::kEmptyString) {
    delete comm_;
  }
  if (exe_ != &::google::protobuf::internal::kEmptyString) {
    delete exe_;
  }
  if (container_id_ != &::google::protobuf::internal::kEmptyString) {
    delete container_id_;
  }
  if (this != default_instance_) {
  }
}

void falco_prog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* falco_prog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return falco_prog_descriptor_;
}

const falco_prog& falco_prog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

falco_prog* falco_prog::default_instance_ = NULL;

falco_prog* falco_prog::New() const {
  return new falco_prog;
}

void falco_prog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_comm()) {
      if (comm_ != &::google::protobuf::internal::kEmptyString) {
        comm_->clear();
      }
    }
    if (has_exe()) {
      if (exe_ != &::google::protobuf::internal::kEmptyString) {
        exe_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_container_id()) {
      if (container_id_ != &::google::protobuf::internal::kEmptyString) {
        container_id_->clear();
      }
    }
  }
  args_.Clear();
  cats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool falco_prog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string comm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comm().data(), this->comm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exe;
        break;
      }

      // required string exe = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exe().data(), this->exe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }

      // repeated string args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args(this->args_size() - 1).data(),
            this->args(this->args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }

      // required uint64 user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_container_id;
        break;
      }

      // optional string container_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->container_id().data(), this->container_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cats;
        break;
      }

      // repeated .draiosproto.falco_category cats = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void falco_prog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string comm = 1;
  if (has_comm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comm().data(), this->comm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->comm(), output);
  }

  // required string exe = 2;
  if (has_exe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exe().data(), this->exe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->exe(), output);
  }

  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->args(i).data(), this->args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->args(i), output);
  }

  // required uint64 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->user_id(), output);
  }

  // optional string container_id = 5;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->container_id(), output);
  }

  // repeated .draiosproto.falco_category cats = 6;
  for (int i = 0; i < this->cats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* falco_prog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string comm = 1;
  if (has_comm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comm().data(), this->comm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->comm(), target);
  }

  // required string exe = 2;
  if (has_exe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exe().data(), this->exe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exe(), target);
  }

  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->args(i), target);
  }

  // required uint64 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->user_id(), target);
  }

  // optional string container_id = 5;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->container_id(), target);
  }

  // repeated .draiosproto.falco_category cats = 6;
  for (int i = 0; i < this->cats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int falco_prog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string comm = 1;
    if (has_comm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comm());
    }

    // required string exe = 2;
    if (has_exe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exe());
    }

    // required uint64 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string container_id = 5;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->container_id());
    }

  }
  // repeated string args = 3;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  // repeated .draiosproto.falco_category cats = 6;
  total_size += 1 * this->cats_size();
  for (int i = 0; i < this->cats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void falco_prog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const falco_prog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const falco_prog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void falco_prog::MergeFrom(const falco_prog& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  cats_.MergeFrom(from.cats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comm()) {
      set_comm(from.comm());
    }
    if (from.has_exe()) {
      set_exe(from.exe());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_container_id()) {
      set_container_id(from.container_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void falco_prog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void falco_prog::CopyFrom(const falco_prog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool falco_prog::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < cats_size(); i++) {
    if (!this->cats(i).IsInitialized()) return false;
  }
  return true;
}

void falco_prog::Swap(falco_prog* other) {
  if (other != this) {
    std::swap(comm_, other->comm_);
    std::swap(exe_, other->exe_);
    args_.Swap(&other->args_);
    std::swap(user_id_, other->user_id_);
    std::swap(container_id_, other->container_id_);
    cats_.Swap(&other->cats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata falco_prog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = falco_prog_descriptor_;
  metadata.reflection = falco_prog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int falco_container::kIdFieldNumber;
const int falco_container::kNameFieldNumber;
const int falco_container::kImageNameFieldNumber;
const int falco_container::kImageIdFieldNumber;
#endif  // !_MSC_VER

falco_container::falco_container()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void falco_container::InitAsDefaultInstance() {
}

falco_container::falco_container(const falco_container& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void falco_container::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  image_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

falco_container::~falco_container() {
  SharedDtor();
}

void falco_container::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (image_name_ != &::google::protobuf::internal::kEmptyString) {
    delete image_name_;
  }
  if (image_id_ != &::google::protobuf::internal::kEmptyString) {
    delete image_id_;
  }
  if (this != default_instance_) {
  }
}

void falco_container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* falco_container::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return falco_container_descriptor_;
}

const falco_container& falco_container::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

falco_container* falco_container::default_instance_ = NULL;

falco_container* falco_container::New() const {
  return new falco_container;
}

void falco_container::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_image_name()) {
      if (image_name_ != &::google::protobuf::internal::kEmptyString) {
        image_name_->clear();
      }
    }
    if (has_image_id()) {
      if (image_id_ != &::google::protobuf::internal::kEmptyString) {
        image_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool falco_container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_image_name;
        break;
      }

      // optional string image_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_name().data(), this->image_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_image_id;
        break;
      }

      // optional string image_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_id().data(), this->image_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void falco_container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string image_name = 3;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->image_name(), output);
  }

  // optional string image_id = 4;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->image_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* falco_container::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string image_name = 3;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image_name(), target);
  }

  // optional string image_id = 4;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->image_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int falco_container::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string image_name = 3;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

    // optional string image_id = 4;
    if (has_image_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void falco_container::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const falco_container* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const falco_container*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void falco_container::MergeFrom(const falco_container& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_image_name()) {
      set_image_name(from.image_name());
    }
    if (from.has_image_id()) {
      set_image_id(from.image_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void falco_container::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void falco_container::CopyFrom(const falco_container& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool falco_container::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void falco_container::Swap(falco_container* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(image_name_, other->image_name_);
    std::swap(image_id_, other->image_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata falco_container::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = falco_container_descriptor_;
  metadata.reflection = falco_container_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int falco_baseline::kProgsFieldNumber;
const int falco_baseline::kContainersFieldNumber;
#endif  // !_MSC_VER

falco_baseline::falco_baseline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void falco_baseline::InitAsDefaultInstance() {
}

falco_baseline::falco_baseline(const falco_baseline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void falco_baseline::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

falco_baseline::~falco_baseline() {
  SharedDtor();
}

void falco_baseline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void falco_baseline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* falco_baseline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return falco_baseline_descriptor_;
}

const falco_baseline& falco_baseline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

falco_baseline* falco_baseline::default_instance_ = NULL;

falco_baseline* falco_baseline::New() const {
  return new falco_baseline;
}

void falco_baseline::Clear() {
  progs_.Clear();
  containers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool falco_baseline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.falco_prog progs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_progs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_progs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_progs;
        if (input->ExpectTag(18)) goto parse_containers;
        break;
      }

      // repeated .draiosproto.falco_container containers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_containers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_containers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_containers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void falco_baseline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .draiosproto.falco_prog progs = 1;
  for (int i = 0; i < this->progs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->progs(i), output);
  }

  // repeated .draiosproto.falco_container containers = 2;
  for (int i = 0; i < this->containers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->containers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* falco_baseline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .draiosproto.falco_prog progs = 1;
  for (int i = 0; i < this->progs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->progs(i), target);
  }

  // repeated .draiosproto.falco_container containers = 2;
  for (int i = 0; i < this->containers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->containers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int falco_baseline::ByteSize() const {
  int total_size = 0;

  // repeated .draiosproto.falco_prog progs = 1;
  total_size += 1 * this->progs_size();
  for (int i = 0; i < this->progs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->progs(i));
  }

  // repeated .draiosproto.falco_container containers = 2;
  total_size += 1 * this->containers_size();
  for (int i = 0; i < this->containers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->containers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void falco_baseline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const falco_baseline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const falco_baseline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void falco_baseline::MergeFrom(const falco_baseline& from) {
  GOOGLE_CHECK_NE(&from, this);
  progs_.MergeFrom(from.progs_);
  containers_.MergeFrom(from.containers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void falco_baseline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void falco_baseline::CopyFrom(const falco_baseline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool falco_baseline::IsInitialized() const {

  for (int i = 0; i < progs_size(); i++) {
    if (!this->progs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < containers_size(); i++) {
    if (!this->containers(i).IsInitialized()) return false;
  }
  return true;
}

void falco_baseline::Swap(falco_baseline* other) {
  if (other != this) {
    progs_.Swap(&other->progs_);
    containers_.Swap(&other->containers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata falco_baseline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = falco_baseline_descriptor_;
  metadata.reflection = falco_baseline_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace draiosproto

// @@protoc_insertion_point(global_scope)
