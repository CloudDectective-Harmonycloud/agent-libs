// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: draios.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "draios.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace draiosproto {

namespace {

const ::google::protobuf::Descriptor* counter_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* counter_time_bidirectional_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_time_bidirectional_reflection_ = NULL;
const ::google::protobuf::Descriptor* counter_bytes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_bytes_reflection_ = NULL;
const ::google::protobuf::Descriptor* counter_time_bytes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_time_bytes_reflection_ = NULL;
const ::google::protobuf::Descriptor* time_categories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  time_categories_reflection_ = NULL;
const ::google::protobuf::Descriptor* transaction_breakdown_categories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  transaction_breakdown_categories_reflection_ = NULL;
const ::google::protobuf::Descriptor* counter_syscall_errors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_syscall_errors_reflection_ = NULL;
const ::google::protobuf::Descriptor* resource_categories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  resource_categories_reflection_ = NULL;
const ::google::protobuf::Descriptor* connection_categories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  connection_categories_reflection_ = NULL;
const ::google::protobuf::Descriptor* process_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  process_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* host_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  host_reflection_ = NULL;
const ::google::protobuf::Descriptor* thread_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  thread_reflection_ = NULL;
const ::google::protobuf::Descriptor* process_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  process_reflection_ = NULL;
const ::google::protobuf::Descriptor* program_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  program_reflection_ = NULL;
const ::google::protobuf::Descriptor* ipv4tuple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ipv4tuple_reflection_ = NULL;
const ::google::protobuf::Descriptor* ipv4_connection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ipv4_connection_reflection_ = NULL;
const ::google::protobuf::Descriptor* ipv4_network_interface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ipv4_network_interface_reflection_ = NULL;
const ::google::protobuf::Descriptor* metrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  metrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* dump_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dump_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* dump_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dump_response_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssh_open_channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssh_open_channel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssh_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssh_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssh_close_channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssh_close_channel_reflection_ = NULL;
const ::google::protobuf::Descriptor* auto_update_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auto_update_request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* networkrole_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* message_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_draios_2eproto() {
  protobuf_AddDesc_draios_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "draios.proto");
  GOOGLE_CHECK(file != NULL);
  counter_time_descriptor_ = file->message_type(0);
  static const int counter_time_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time, time_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time, time_percentage_),
  };
  counter_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      counter_time_descriptor_,
      counter_time::default_instance_,
      counter_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(counter_time));
  counter_time_bidirectional_descriptor_ = file->message_type(1);
  static const int counter_time_bidirectional_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, count_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, count_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, time_ns_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, time_ns_out_),
  };
  counter_time_bidirectional_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      counter_time_bidirectional_descriptor_,
      counter_time_bidirectional::default_instance_,
      counter_time_bidirectional_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(counter_time_bidirectional));
  counter_bytes_descriptor_ = file->message_type(2);
  static const int counter_bytes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, count_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, count_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, bytes_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, bytes_out_),
  };
  counter_bytes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      counter_bytes_descriptor_,
      counter_bytes::default_instance_,
      counter_bytes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(counter_bytes));
  counter_time_bytes_descriptor_ = file->message_type(3);
  static const int counter_time_bytes_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_ns_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_ns_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_ns_other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, count_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, count_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, count_other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, bytes_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, bytes_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, bytes_other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_percentage_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_percentage_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_percentage_other_),
  };
  counter_time_bytes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      counter_time_bytes_descriptor_,
      counter_time_bytes::default_instance_,
      counter_time_bytes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(counter_time_bytes));
  time_categories_descriptor_ = file->message_type(4);
  static const int time_categories_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, unknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, ipc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, sleep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, system_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, io_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, io_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, io_other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, wait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, processing_),
  };
  time_categories_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      time_categories_descriptor_,
      time_categories::default_instance_,
      time_categories_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(time_categories));
  transaction_breakdown_categories_descriptor_ = file->message_type(5);
  static const int transaction_breakdown_categories_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, io_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, io_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, processing_),
  };
  transaction_breakdown_categories_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      transaction_breakdown_categories_descriptor_,
      transaction_breakdown_categories::default_instance_,
      transaction_breakdown_categories_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(transaction_breakdown_categories));
  counter_syscall_errors_descriptor_ = file->message_type(6);
  static const int counter_syscall_errors_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, top_error_codes_),
  };
  counter_syscall_errors_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      counter_syscall_errors_descriptor_,
      counter_syscall_errors::default_instance_,
      counter_syscall_errors_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(counter_syscall_errors));
  resource_categories_descriptor_ = file->message_type(7);
  static const int resource_categories_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, capacity_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, stolen_capacity_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, connection_queue_usage_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, fd_usage_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, cpu_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, resident_memory_usage_kb_),
  };
  resource_categories_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      resource_categories_descriptor_,
      resource_categories::default_instance_,
      resource_categories_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(resource_categories));
  connection_categories_descriptor_ = file->message_type(8);
  static const int connection_categories_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, n_aggregated_connections_),
  };
  connection_categories_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      connection_categories_descriptor_,
      connection_categories::default_instance_,
      connection_categories_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(connection_categories));
  process_details_descriptor_ = file->message_type(9);
  static const int process_details_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, comm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, exe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, args_),
  };
  process_details_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      process_details_descriptor_,
      process_details::default_instance_,
      process_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(process_details));
  host_descriptor_ = file->message_type(10);
  static const int host_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, num_cpus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, cpu_loads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, cpu_steal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, physical_memory_size_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, tcounters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, reqcounters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, transaction_processing_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, merged_server_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, next_tiers_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, resource_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, syscall_errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, external_io_net_),
  };
  host_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      host_descriptor_,
      host::default_instance_,
      host_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(host));
  thread_descriptor_ = file->message_type(11);
  static const int thread_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread, tcounters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread, transaction_counters_),
  };
  thread_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      thread_descriptor_,
      thread::default_instance_,
      thread_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(thread));
  process_descriptor_ = file->message_type(12);
  static const int process_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, is_ipv4_transaction_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, is_unix_transaction_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, is_ipv4_transaction_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, is_unix_transaction_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, netrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, tcounters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, transaction_processing_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, merged_server_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, next_tiers_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, resource_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, syscall_errors_),
  };
  process_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      process_descriptor_,
      process::default_instance_,
      process_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(process));
  program_descriptor_ = file->message_type(13);
  static const int program_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(program, procinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(program, pids_),
  };
  program_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      program_descriptor_,
      program::default_instance_,
      program_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(program, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(program, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(program));
  ipv4tuple_descriptor_ = file->message_type(14);
  static const int ipv4tuple_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, sip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, dip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, sport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, dport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, l4proto_),
  };
  ipv4tuple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ipv4tuple_descriptor_,
      ipv4tuple::default_instance_,
      ipv4tuple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ipv4tuple));
  ipv4_connection_descriptor_ = file->message_type(15);
  static const int ipv4_connection_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, tuple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, spid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, stid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, dpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, dtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, counters_),
  };
  ipv4_connection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ipv4_connection_descriptor_,
      ipv4_connection::default_instance_,
      ipv4_connection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ipv4_connection));
  ipv4_network_interface_descriptor_ = file->message_type(16);
  static const int ipv4_network_interface_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, netmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, bcast_),
  };
  ipv4_network_interface_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ipv4_network_interface_descriptor_,
      ipv4_network_interface::default_instance_,
      ipv4_network_interface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ipv4_network_interface));
  metrics_descriptor_ = file->message_type(17);
  static const int metrics_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, hostinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, programs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, processes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, ipv4_connections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, ipv4_network_interfaces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, sampling_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, host_custom_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, host_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, host_custom_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, is_host_hidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, hidden_processes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, version_),
  };
  metrics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      metrics_descriptor_,
      metrics::default_instance_,
      metrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(metrics));
  dump_request_descriptor_ = file->message_type(18);
  static const int dump_request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request, duration_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request, filters_),
  };
  dump_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dump_request_descriptor_,
      dump_request::default_instance_,
      dump_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dump_request));
  dump_response_descriptor_ = file->message_type(19);
  static const int dump_response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, error_),
  };
  dump_response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dump_response_descriptor_,
      dump_response::default_instance_,
      dump_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dump_response));
  ssh_open_channel_descriptor_ = file->message_type(20);
  static const int ssh_open_channel_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, passphrase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, port_),
  };
  ssh_open_channel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssh_open_channel_descriptor_,
      ssh_open_channel::default_instance_,
      ssh_open_channel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssh_open_channel));
  ssh_data_descriptor_ = file->message_type(21);
  static const int ssh_data_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, exit_status_),
  };
  ssh_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssh_data_descriptor_,
      ssh_data::default_instance_,
      ssh_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssh_data));
  ssh_close_channel_descriptor_ = file->message_type(22);
  static const int ssh_close_channel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, token_),
  };
  ssh_close_channel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssh_close_channel_descriptor_,
      ssh_close_channel::default_instance_,
      ssh_close_channel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssh_close_channel));
  auto_update_request_descriptor_ = file->message_type(23);
  static const int auto_update_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_update_request, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_update_request, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_update_request, customer_id_),
  };
  auto_update_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auto_update_request_descriptor_,
      auto_update_request::default_instance_,
      auto_update_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_update_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_update_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auto_update_request));
  networkrole_descriptor_ = file->enum_type(0);
  message_type_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_draios_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    counter_time_descriptor_, &counter_time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    counter_time_bidirectional_descriptor_, &counter_time_bidirectional::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    counter_bytes_descriptor_, &counter_bytes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    counter_time_bytes_descriptor_, &counter_time_bytes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    time_categories_descriptor_, &time_categories::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    transaction_breakdown_categories_descriptor_, &transaction_breakdown_categories::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    counter_syscall_errors_descriptor_, &counter_syscall_errors::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    resource_categories_descriptor_, &resource_categories::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    connection_categories_descriptor_, &connection_categories::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    process_details_descriptor_, &process_details::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    host_descriptor_, &host::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    thread_descriptor_, &thread::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    process_descriptor_, &process::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    program_descriptor_, &program::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ipv4tuple_descriptor_, &ipv4tuple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ipv4_connection_descriptor_, &ipv4_connection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ipv4_network_interface_descriptor_, &ipv4_network_interface::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    metrics_descriptor_, &metrics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dump_request_descriptor_, &dump_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dump_response_descriptor_, &dump_response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssh_open_channel_descriptor_, &ssh_open_channel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssh_data_descriptor_, &ssh_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssh_close_channel_descriptor_, &ssh_close_channel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auto_update_request_descriptor_, &auto_update_request::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_draios_2eproto() {
  delete counter_time::default_instance_;
  delete counter_time_reflection_;
  delete counter_time_bidirectional::default_instance_;
  delete counter_time_bidirectional_reflection_;
  delete counter_bytes::default_instance_;
  delete counter_bytes_reflection_;
  delete counter_time_bytes::default_instance_;
  delete counter_time_bytes_reflection_;
  delete time_categories::default_instance_;
  delete time_categories_reflection_;
  delete transaction_breakdown_categories::default_instance_;
  delete transaction_breakdown_categories_reflection_;
  delete counter_syscall_errors::default_instance_;
  delete counter_syscall_errors_reflection_;
  delete resource_categories::default_instance_;
  delete resource_categories_reflection_;
  delete connection_categories::default_instance_;
  delete connection_categories_reflection_;
  delete process_details::default_instance_;
  delete process_details_reflection_;
  delete host::default_instance_;
  delete host_reflection_;
  delete thread::default_instance_;
  delete thread_reflection_;
  delete process::default_instance_;
  delete process_reflection_;
  delete program::default_instance_;
  delete program_reflection_;
  delete ipv4tuple::default_instance_;
  delete ipv4tuple_reflection_;
  delete ipv4_connection::default_instance_;
  delete ipv4_connection_reflection_;
  delete ipv4_network_interface::default_instance_;
  delete ipv4_network_interface_reflection_;
  delete metrics::default_instance_;
  delete metrics_reflection_;
  delete dump_request::default_instance_;
  delete dump_request_reflection_;
  delete dump_response::default_instance_;
  delete dump_response_reflection_;
  delete ssh_open_channel::default_instance_;
  delete ssh_open_channel_reflection_;
  delete ssh_data::default_instance_;
  delete ssh_data_reflection_;
  delete ssh_close_channel::default_instance_;
  delete ssh_close_channel_reflection_;
  delete auto_update_request::default_instance_;
  delete auto_update_request_reflection_;
}

void protobuf_AddDesc_draios_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014draios.proto\022\013draiosproto\"G\n\014counter_t"
    "ime\022\r\n\005count\030\001 \002(\r\022\017\n\007time_ns\030\002 \002(\004\022\027\n\017t"
    "ime_percentage\030\003 \001(\r\"j\n\032counter_time_bid"
    "irectional\022\020\n\010count_in\030\001 \002(\r\022\021\n\tcount_ou"
    "t\030\002 \002(\r\022\022\n\ntime_ns_in\030\003 \002(\004\022\023\n\013time_ns_o"
    "ut\030\004 \002(\004\"Y\n\rcounter_bytes\022\020\n\010count_in\030\001 "
    "\002(\r\022\021\n\tcount_out\030\002 \002(\r\022\020\n\010bytes_in\030\003 \002(\r"
    "\022\021\n\tbytes_out\030\004 \002(\r\"\240\002\n\022counter_time_byt"
    "es\022\022\n\ntime_ns_in\030\001 \002(\004\022\023\n\013time_ns_out\030\002 "
    "\002(\004\022\025\n\rtime_ns_other\030\003 \002(\004\022\020\n\010count_in\030\004"
    " \002(\r\022\021\n\tcount_out\030\005 \002(\r\022\023\n\013count_other\030\006"
    " \002(\r\022\020\n\010bytes_in\030\007 \002(\r\022\021\n\tbytes_out\030\010 \002("
    "\r\022\023\n\013bytes_other\030\t \002(\r\022\032\n\022time_percentag"
    "e_in\030\n \001(\r\022\033\n\023time_percentage_out\030\013 \001(\r\022"
    "\035\n\025time_percentage_other\030\014 \001(\r\"\367\005\n\017time_"
    "categories\022*\n\007unknown\030\001 \001(\0132\031.draiosprot"
    "o.counter_time\022(\n\005other\030\002 \001(\0132\031.draiospr"
    "oto.counter_time\022\'\n\004file\030\003 \001(\0132\031.draiosp"
    "roto.counter_time\022&\n\003net\030\004 \001(\0132\031.draiosp"
    "roto.counter_time\022&\n\003ipc\030\005 \001(\0132\031.draiosp"
    "roto.counter_time\022)\n\006memory\030\006 \001(\0132\031.drai"
    "osproto.counter_time\022*\n\007process\030\007 \001(\0132\031."
    "draiosproto.counter_time\022(\n\005sleep\030\010 \001(\0132"
    "\031.draiosproto.counter_time\022)\n\006system\030\t \001"
    "(\0132\031.draiosproto.counter_time\022)\n\006signal\030"
    "\n \001(\0132\031.draiosproto.counter_time\022\'\n\004user"
    "\030\013 \001(\0132\031.draiosproto.counter_time\022\'\n\004tim"
    "e\030\014 \001(\0132\031.draiosproto.counter_time\0220\n\007io"
    "_file\030\r \001(\0132\037.draiosproto.counter_time_b"
    "ytes\022/\n\006io_net\030\016 \001(\0132\037.draiosproto.count"
    "er_time_bytes\0221\n\010io_other\030\017 \001(\0132\037.draios"
    "proto.counter_time_bytes\022\'\n\004wait\030\020 \001(\0132\031"
    ".draiosproto.counter_time\022-\n\nprocessing\030"
    "\021 \001(\0132\031.draiosproto.counter_time\"\336\001\n tra"
    "nsaction_breakdown_categories\022(\n\005other\030\002"
    " \001(\0132\031.draiosproto.counter_time\0220\n\007io_fi"
    "le\030\r \001(\0132\037.draiosproto.counter_time_byte"
    "s\022/\n\006io_net\030\016 \001(\0132\037.draiosproto.counter_"
    "time_bytes\022-\n\nprocessing\030\021 \001(\0132\031.draiosp"
    "roto.counter_time\"@\n\026counter_syscall_err"
    "ors\022\r\n\005count\030\001 \002(\r\022\027\n\017top_error_codes\030\002 "
    "\003(\r\"\271\001\n\023resource_categories\022\026\n\016capacity_"
    "score\030\001 \001(\r\022\035\n\025stolen_capacity_score\030\006 \001"
    "(\r\022\"\n\032connection_queue_usage_pct\030\002 \001(\r\022\024"
    "\n\014fd_usage_pct\030\003 \001(\r\022\017\n\007cpu_pct\030\004 \001(\r\022 \n"
    "\030resident_memory_usage_kb\030\005 \001(\004\"\330\001\n\025conn"
    "ection_categories\022*\n\006server\030\001 \001(\0132\032.drai"
    "osproto.counter_bytes\022*\n\006client\030\002 \001(\0132\032."
    "draiosproto.counter_bytes\022E\n\024transaction"
    "_counters\030\003 \001(\0132\'.draiosproto.counter_ti"
    "me_bidirectional\022 \n\030n_aggregated_connect"
    "ions\030\004 \001(\r\":\n\017process_details\022\014\n\004comm\030\001 "
    "\002(\t\022\013\n\003exe\030\002 \002(\t\022\014\n\004args\030\003 \003(\t\"\301\004\n\004host\022"
    "\020\n\010hostname\030\001 \001(\t\022\020\n\010num_cpus\030\002 \001(\r\022\021\n\tc"
    "pu_loads\030\003 \003(\r\022\021\n\tcpu_steal\030\013 \003(\r\022\"\n\032phy"
    "sical_memory_size_bytes\030\004 \002(\004\022/\n\ttcounte"
    "rs\030\005 \001(\0132\034.draiosproto.time_categories\022B"
    "\n\013reqcounters\030\014 \001(\0132-.draiosproto.transa"
    "ction_breakdown_categories\022E\n\024transactio"
    "n_counters\030\006 \001(\0132\'.draiosproto.counter_t"
    "ime_bidirectional\022$\n\034transaction_process"
    "ing_delay\030\007 \001(\004\022\033\n\023merged_server_delay\030\016"
    " \001(\004\022\030\n\020next_tiers_delay\030\r \001(\004\022;\n\021resour"
    "ce_counters\030\010 \001(\0132 .draiosproto.resource"
    "_categories\022;\n\016syscall_errors\030\t \001(\0132#.dr"
    "aiosproto.counter_syscall_errors\0228\n\017exte"
    "rnal_io_net\030\n \001(\0132\037.draiosproto.counter_"
    "time_bytes\"\232\001\n\006thread\022\013\n\003pid\030\001 \002(\004\022\013\n\003ti"
    "d\030\002 \002(\004\022/\n\ttcounters\030\003 \001(\0132\034.draiosproto"
    ".time_categories\022E\n\024transaction_counters"
    "\030\005 \001(\0132\'.draiosproto.counter_time_bidire"
    "ctional\"\265\004\n\007process\022\013\n\003pid\030\001 \002(\004\022-\n\007deta"
    "ils\030\002 \001(\0132\034.draiosproto.process_details\022"
    "\"\n\032is_ipv4_transaction_server\030\003 \001(\010\022\"\n\032i"
    "s_unix_transaction_server\030\004 \001(\010\022\"\n\032is_ip"
    "v4_transaction_client\030\n \001(\010\022\"\n\032is_unix_t"
    "ransaction_client\030\013 \001(\010\022\017\n\007netrole\030\r \001(\r"
    "\022/\n\ttcounters\030\005 \001(\0132\034.draiosproto.time_c"
    "ategories\022E\n\024transaction_counters\030\006 \001(\0132"
    "\'.draiosproto.counter_time_bidirectional"
    "\022$\n\034transaction_processing_delay\030\007 \001(\004\022\033"
    "\n\023merged_server_delay\030\016 \001(\004\022\030\n\020next_tier"
    "s_delay\030\014 \001(\004\022;\n\021resource_counters\030\010 \001(\013"
    "2 .draiosproto.resource_categories\022;\n\016sy"
    "scall_errors\030\t \001(\0132#.draiosproto.counter"
    "_syscall_errors\"\?\n\007program\022&\n\010procinfo\030\001"
    " \002(\0132\024.draiosproto.process\022\014\n\004pids\030\002 \003(\004"
    "\"T\n\tipv4tuple\022\013\n\003sip\030\001 \002(\r\022\013\n\003dip\030\002 \002(\r\022"
    "\r\n\005sport\030\003 \002(\r\022\r\n\005dport\030\004 \002(\r\022\017\n\007l4proto"
    "\030\005 \002(\r\"\246\001\n\017ipv4_connection\022%\n\005tuple\030\001 \002("
    "\0132\026.draiosproto.ipv4tuple\022\014\n\004spid\030\002 \001(\004\022"
    "\014\n\004stid\030\003 \001(\004\022\014\n\004dpid\030\005 \001(\004\022\014\n\004dtid\030\006 \001("
    "\004\0224\n\010counters\030\010 \002(\0132\".draiosproto.connec"
    "tion_categories\"T\n\026ipv4_network_interfac"
    "e\022\014\n\004name\030\001 \002(\t\022\014\n\004addr\030\002 \002(\r\022\017\n\007netmask"
    "\030\003 \002(\r\022\r\n\005bcast\030\004 \001(\r\"\203\004\n\007metrics\022\024\n\014tim"
    "estamp_ns\030\001 \002(\004\022\022\n\nmachine_id\030\002 \002(\t\022\023\n\013c"
    "ustomer_id\030\003 \001(\t\022#\n\010hostinfo\030\004 \002(\0132\021.dra"
    "iosproto.host\022&\n\010programs\030\t \003(\0132\024.draios"
    "proto.program\022\'\n\tprocesses\030\005 \003(\0132\024.draio"
    "sproto.process\022$\n\007threads\030\006 \003(\0132\023.draios"
    "proto.thread\0226\n\020ipv4_connections\030\007 \003(\0132\034"
    ".draiosproto.ipv4_connection\022D\n\027ipv4_net"
    "work_interfaces\030\010 \003(\0132#.draiosproto.ipv4"
    "_network_interface\022\026\n\016sampling_ratio\030\n \001"
    "(\r\022\030\n\020host_custom_name\030\013 \001(\t\022\021\n\thost_tag"
    "s\030\014 \001(\t\022\027\n\017host_custom_map\030\r \001(\t\022\026\n\016is_h"
    "ost_hidden\030\016 \001(\010\022\030\n\020hidden_processes\030\017 \001"
    "(\t\022\017\n\007version\030\020 \001(\t\"s\n\014dump_request\022\024\n\014t"
    "imestamp_ns\030\001 \002(\004\022\022\n\nmachine_id\030\002 \002(\t\022\023\n"
    "\013customer_id\030\003 \001(\t\022\023\n\013duration_ns\030\004 \002(\004\022"
    "\017\n\007filters\030\005 \001(\t\"n\n\rdump_response\022\024\n\014tim"
    "estamp_ns\030\001 \002(\004\022\022\n\nmachine_id\030\002 \002(\t\022\023\n\013c"
    "ustomer_id\030\003 \001(\t\022\017\n\007content\030\004 \001(\014\022\r\n\005err"
    "or\030\005 \001(\t\"\257\001\n\020ssh_open_channel\022\024\n\014timesta"
    "mp_ns\030\001 \002(\004\022\022\n\nmachine_id\030\002 \002(\t\022\023\n\013custo"
    "mer_id\030\003 \001(\t\022\r\n\005token\030\004 \002(\t\022\014\n\004user\030\005 \002("
    "\t\022\020\n\010password\030\006 \001(\t\022\013\n\003key\030\007 \001(\t\022\022\n\npass"
    "phrase\030\010 \001(\t\022\014\n\004port\030\t \001(\r\"\212\001\n\010ssh_data\022"
    "\024\n\014timestamp_ns\030\001 \002(\004\022\022\n\nmachine_id\030\002 \002("
    "\t\022\023\n\013customer_id\030\003 \001(\t\022\r\n\005token\030\004 \002(\t\022\014\n"
    "\004data\030\005 \001(\014\022\r\n\005error\030\006 \001(\t\022\023\n\013exit_statu"
    "s\030\007 \001(\005\"a\n\021ssh_close_channel\022\024\n\014timestam"
    "p_ns\030\001 \002(\004\022\022\n\nmachine_id\030\002 \002(\t\022\023\n\013custom"
    "er_id\030\003 \001(\t\022\r\n\005token\030\004 \002(\t\"T\n\023auto_updat"
    "e_request\022\024\n\014timestamp_ns\030\001 \002(\004\022\022\n\nmachi"
    "ne_id\030\002 \002(\t\022\023\n\013customer_id\030\003 \001(\t*\251\001\n\013net"
    "workrole\022\010\n\004NONE\020\000\022\030\n\024IS_LOCAL_IPV4_SERV"
    "ER\020\001\022\031\n\025IS_REMOTE_IPV4_SERVER\020\002\022\022\n\016IS_UN"
    "IX_SERVER\020\004\022\030\n\024IS_LOCAL_IPV4_CLIENT\020\010\022\031\n"
    "\025IS_REMOTE_IPV4_CLIENT\020\020\022\022\n\016IS_UNIX_CLIE"
    "NT\020 *\224\001\n\014message_type\022\013\n\007METRICS\020\001\022\020\n\014DU"
    "MP_REQUEST\020\002\022\021\n\rDUMP_RESPONSE\020\003\022\024\n\020SSH_O"
    "PEN_CHANNEL\020\006\022\025\n\021SSH_CLOSE_CHANNEL\020\007\022\014\n\010"
    "SSH_DATA\020\010\022\027\n\023AUTO_UPDATE_REQUEST\020\tB$\n\031c"
    "om.draios.model.protobufB\005AgentH\001", 5433);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "draios.proto", &protobuf_RegisterTypes);
  counter_time::default_instance_ = new counter_time();
  counter_time_bidirectional::default_instance_ = new counter_time_bidirectional();
  counter_bytes::default_instance_ = new counter_bytes();
  counter_time_bytes::default_instance_ = new counter_time_bytes();
  time_categories::default_instance_ = new time_categories();
  transaction_breakdown_categories::default_instance_ = new transaction_breakdown_categories();
  counter_syscall_errors::default_instance_ = new counter_syscall_errors();
  resource_categories::default_instance_ = new resource_categories();
  connection_categories::default_instance_ = new connection_categories();
  process_details::default_instance_ = new process_details();
  host::default_instance_ = new host();
  thread::default_instance_ = new thread();
  process::default_instance_ = new process();
  program::default_instance_ = new program();
  ipv4tuple::default_instance_ = new ipv4tuple();
  ipv4_connection::default_instance_ = new ipv4_connection();
  ipv4_network_interface::default_instance_ = new ipv4_network_interface();
  metrics::default_instance_ = new metrics();
  dump_request::default_instance_ = new dump_request();
  dump_response::default_instance_ = new dump_response();
  ssh_open_channel::default_instance_ = new ssh_open_channel();
  ssh_data::default_instance_ = new ssh_data();
  ssh_close_channel::default_instance_ = new ssh_close_channel();
  auto_update_request::default_instance_ = new auto_update_request();
  counter_time::default_instance_->InitAsDefaultInstance();
  counter_time_bidirectional::default_instance_->InitAsDefaultInstance();
  counter_bytes::default_instance_->InitAsDefaultInstance();
  counter_time_bytes::default_instance_->InitAsDefaultInstance();
  time_categories::default_instance_->InitAsDefaultInstance();
  transaction_breakdown_categories::default_instance_->InitAsDefaultInstance();
  counter_syscall_errors::default_instance_->InitAsDefaultInstance();
  resource_categories::default_instance_->InitAsDefaultInstance();
  connection_categories::default_instance_->InitAsDefaultInstance();
  process_details::default_instance_->InitAsDefaultInstance();
  host::default_instance_->InitAsDefaultInstance();
  thread::default_instance_->InitAsDefaultInstance();
  process::default_instance_->InitAsDefaultInstance();
  program::default_instance_->InitAsDefaultInstance();
  ipv4tuple::default_instance_->InitAsDefaultInstance();
  ipv4_connection::default_instance_->InitAsDefaultInstance();
  ipv4_network_interface::default_instance_->InitAsDefaultInstance();
  metrics::default_instance_->InitAsDefaultInstance();
  dump_request::default_instance_->InitAsDefaultInstance();
  dump_response::default_instance_->InitAsDefaultInstance();
  ssh_open_channel::default_instance_->InitAsDefaultInstance();
  ssh_data::default_instance_->InitAsDefaultInstance();
  ssh_close_channel::default_instance_->InitAsDefaultInstance();
  auto_update_request::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_draios_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_draios_2eproto {
  StaticDescriptorInitializer_draios_2eproto() {
    protobuf_AddDesc_draios_2eproto();
  }
} static_descriptor_initializer_draios_2eproto_;
const ::google::protobuf::EnumDescriptor* networkrole_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return networkrole_descriptor_;
}
bool networkrole_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* message_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return message_type_descriptor_;
}
bool message_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int counter_time::kCountFieldNumber;
const int counter_time::kTimeNsFieldNumber;
const int counter_time::kTimePercentageFieldNumber;
#endif  // !_MSC_VER

counter_time::counter_time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void counter_time::InitAsDefaultInstance() {
}

counter_time::counter_time(const counter_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void counter_time::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  time_ns_ = GOOGLE_ULONGLONG(0);
  time_percentage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

counter_time::~counter_time() {
  SharedDtor();
}

void counter_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void counter_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_time_descriptor_;
}

const counter_time& counter_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

counter_time* counter_time::default_instance_ = NULL;

counter_time* counter_time::New() const {
  return new counter_time;
}

void counter_time::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
    time_ns_ = GOOGLE_ULONGLONG(0);
    time_percentage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool counter_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_ns;
        break;
      }

      // required uint64 time_ns = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_)));
          set_has_time_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_percentage;
        break;
      }

      // optional uint32 time_percentage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_percentage_)));
          set_has_time_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void counter_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // required uint64 time_ns = 2;
  if (has_time_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time_ns(), output);
  }

  // optional uint32 time_percentage = 3;
  if (has_time_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_percentage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* counter_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // required uint64 time_ns = 2;
  if (has_time_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time_ns(), target);
  }

  // optional uint32 time_percentage = 3;
  if (has_time_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_percentage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int counter_time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint64 time_ns = 2;
    if (has_time_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_ns());
    }

    // optional uint32 time_percentage = 3;
    if (has_time_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_percentage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const counter_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const counter_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void counter_time::MergeFrom(const counter_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_time_ns()) {
      set_time_ns(from.time_ns());
    }
    if (from.has_time_percentage()) {
      set_time_percentage(from.time_percentage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void counter_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_time::CopyFrom(const counter_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool counter_time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void counter_time::Swap(counter_time* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(time_ns_, other->time_ns_);
    std::swap(time_percentage_, other->time_percentage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata counter_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_time_descriptor_;
  metadata.reflection = counter_time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int counter_time_bidirectional::kCountInFieldNumber;
const int counter_time_bidirectional::kCountOutFieldNumber;
const int counter_time_bidirectional::kTimeNsInFieldNumber;
const int counter_time_bidirectional::kTimeNsOutFieldNumber;
#endif  // !_MSC_VER

counter_time_bidirectional::counter_time_bidirectional()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void counter_time_bidirectional::InitAsDefaultInstance() {
}

counter_time_bidirectional::counter_time_bidirectional(const counter_time_bidirectional& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void counter_time_bidirectional::SharedCtor() {
  _cached_size_ = 0;
  count_in_ = 0u;
  count_out_ = 0u;
  time_ns_in_ = GOOGLE_ULONGLONG(0);
  time_ns_out_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

counter_time_bidirectional::~counter_time_bidirectional() {
  SharedDtor();
}

void counter_time_bidirectional::SharedDtor() {
  if (this != default_instance_) {
  }
}

void counter_time_bidirectional::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_time_bidirectional::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_time_bidirectional_descriptor_;
}

const counter_time_bidirectional& counter_time_bidirectional::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

counter_time_bidirectional* counter_time_bidirectional::default_instance_ = NULL;

counter_time_bidirectional* counter_time_bidirectional::New() const {
  return new counter_time_bidirectional;
}

void counter_time_bidirectional::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_in_ = 0u;
    count_out_ = 0u;
    time_ns_in_ = GOOGLE_ULONGLONG(0);
    time_ns_out_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool counter_time_bidirectional::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count_in = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_in_)));
          set_has_count_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_out;
        break;
      }

      // required uint32 count_out = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_out_)));
          set_has_count_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_ns_in;
        break;
      }

      // required uint64 time_ns_in = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_ns_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_in_)));
          set_has_time_ns_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time_ns_out;
        break;
      }

      // required uint64 time_ns_out = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_ns_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_out_)));
          set_has_time_ns_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void counter_time_bidirectional::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count_in = 1;
  if (has_count_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count_in(), output);
  }

  // required uint32 count_out = 2;
  if (has_count_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count_out(), output);
  }

  // required uint64 time_ns_in = 3;
  if (has_time_ns_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_ns_in(), output);
  }

  // required uint64 time_ns_out = 4;
  if (has_time_ns_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time_ns_out(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* counter_time_bidirectional::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count_in = 1;
  if (has_count_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count_in(), target);
  }

  // required uint32 count_out = 2;
  if (has_count_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count_out(), target);
  }

  // required uint64 time_ns_in = 3;
  if (has_time_ns_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time_ns_in(), target);
  }

  // required uint64 time_ns_out = 4;
  if (has_time_ns_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time_ns_out(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int counter_time_bidirectional::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count_in = 1;
    if (has_count_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_in());
    }

    // required uint32 count_out = 2;
    if (has_count_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_out());
    }

    // required uint64 time_ns_in = 3;
    if (has_time_ns_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_ns_in());
    }

    // required uint64 time_ns_out = 4;
    if (has_time_ns_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_ns_out());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_time_bidirectional::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const counter_time_bidirectional* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const counter_time_bidirectional*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void counter_time_bidirectional::MergeFrom(const counter_time_bidirectional& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count_in()) {
      set_count_in(from.count_in());
    }
    if (from.has_count_out()) {
      set_count_out(from.count_out());
    }
    if (from.has_time_ns_in()) {
      set_time_ns_in(from.time_ns_in());
    }
    if (from.has_time_ns_out()) {
      set_time_ns_out(from.time_ns_out());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void counter_time_bidirectional::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_time_bidirectional::CopyFrom(const counter_time_bidirectional& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool counter_time_bidirectional::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void counter_time_bidirectional::Swap(counter_time_bidirectional* other) {
  if (other != this) {
    std::swap(count_in_, other->count_in_);
    std::swap(count_out_, other->count_out_);
    std::swap(time_ns_in_, other->time_ns_in_);
    std::swap(time_ns_out_, other->time_ns_out_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata counter_time_bidirectional::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_time_bidirectional_descriptor_;
  metadata.reflection = counter_time_bidirectional_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int counter_bytes::kCountInFieldNumber;
const int counter_bytes::kCountOutFieldNumber;
const int counter_bytes::kBytesInFieldNumber;
const int counter_bytes::kBytesOutFieldNumber;
#endif  // !_MSC_VER

counter_bytes::counter_bytes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void counter_bytes::InitAsDefaultInstance() {
}

counter_bytes::counter_bytes(const counter_bytes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void counter_bytes::SharedCtor() {
  _cached_size_ = 0;
  count_in_ = 0u;
  count_out_ = 0u;
  bytes_in_ = 0u;
  bytes_out_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

counter_bytes::~counter_bytes() {
  SharedDtor();
}

void counter_bytes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void counter_bytes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_bytes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_bytes_descriptor_;
}

const counter_bytes& counter_bytes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

counter_bytes* counter_bytes::default_instance_ = NULL;

counter_bytes* counter_bytes::New() const {
  return new counter_bytes;
}

void counter_bytes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_in_ = 0u;
    count_out_ = 0u;
    bytes_in_ = 0u;
    bytes_out_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool counter_bytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count_in = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_in_)));
          set_has_count_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_out;
        break;
      }

      // required uint32 count_out = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_out_)));
          set_has_count_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bytes_in;
        break;
      }

      // required uint32 bytes_in = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_in_)));
          set_has_bytes_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bytes_out;
        break;
      }

      // required uint32 bytes_out = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_out_)));
          set_has_bytes_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void counter_bytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count_in = 1;
  if (has_count_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count_in(), output);
  }

  // required uint32 count_out = 2;
  if (has_count_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count_out(), output);
  }

  // required uint32 bytes_in = 3;
  if (has_bytes_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bytes_in(), output);
  }

  // required uint32 bytes_out = 4;
  if (has_bytes_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bytes_out(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* counter_bytes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count_in = 1;
  if (has_count_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count_in(), target);
  }

  // required uint32 count_out = 2;
  if (has_count_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count_out(), target);
  }

  // required uint32 bytes_in = 3;
  if (has_bytes_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bytes_in(), target);
  }

  // required uint32 bytes_out = 4;
  if (has_bytes_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bytes_out(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int counter_bytes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count_in = 1;
    if (has_count_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_in());
    }

    // required uint32 count_out = 2;
    if (has_count_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_out());
    }

    // required uint32 bytes_in = 3;
    if (has_bytes_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_in());
    }

    // required uint32 bytes_out = 4;
    if (has_bytes_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_out());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_bytes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const counter_bytes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const counter_bytes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void counter_bytes::MergeFrom(const counter_bytes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count_in()) {
      set_count_in(from.count_in());
    }
    if (from.has_count_out()) {
      set_count_out(from.count_out());
    }
    if (from.has_bytes_in()) {
      set_bytes_in(from.bytes_in());
    }
    if (from.has_bytes_out()) {
      set_bytes_out(from.bytes_out());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void counter_bytes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_bytes::CopyFrom(const counter_bytes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool counter_bytes::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void counter_bytes::Swap(counter_bytes* other) {
  if (other != this) {
    std::swap(count_in_, other->count_in_);
    std::swap(count_out_, other->count_out_);
    std::swap(bytes_in_, other->bytes_in_);
    std::swap(bytes_out_, other->bytes_out_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata counter_bytes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_bytes_descriptor_;
  metadata.reflection = counter_bytes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int counter_time_bytes::kTimeNsInFieldNumber;
const int counter_time_bytes::kTimeNsOutFieldNumber;
const int counter_time_bytes::kTimeNsOtherFieldNumber;
const int counter_time_bytes::kCountInFieldNumber;
const int counter_time_bytes::kCountOutFieldNumber;
const int counter_time_bytes::kCountOtherFieldNumber;
const int counter_time_bytes::kBytesInFieldNumber;
const int counter_time_bytes::kBytesOutFieldNumber;
const int counter_time_bytes::kBytesOtherFieldNumber;
const int counter_time_bytes::kTimePercentageInFieldNumber;
const int counter_time_bytes::kTimePercentageOutFieldNumber;
const int counter_time_bytes::kTimePercentageOtherFieldNumber;
#endif  // !_MSC_VER

counter_time_bytes::counter_time_bytes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void counter_time_bytes::InitAsDefaultInstance() {
}

counter_time_bytes::counter_time_bytes(const counter_time_bytes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void counter_time_bytes::SharedCtor() {
  _cached_size_ = 0;
  time_ns_in_ = GOOGLE_ULONGLONG(0);
  time_ns_out_ = GOOGLE_ULONGLONG(0);
  time_ns_other_ = GOOGLE_ULONGLONG(0);
  count_in_ = 0u;
  count_out_ = 0u;
  count_other_ = 0u;
  bytes_in_ = 0u;
  bytes_out_ = 0u;
  bytes_other_ = 0u;
  time_percentage_in_ = 0u;
  time_percentage_out_ = 0u;
  time_percentage_other_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

counter_time_bytes::~counter_time_bytes() {
  SharedDtor();
}

void counter_time_bytes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void counter_time_bytes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_time_bytes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_time_bytes_descriptor_;
}

const counter_time_bytes& counter_time_bytes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

counter_time_bytes* counter_time_bytes::default_instance_ = NULL;

counter_time_bytes* counter_time_bytes::New() const {
  return new counter_time_bytes;
}

void counter_time_bytes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ns_in_ = GOOGLE_ULONGLONG(0);
    time_ns_out_ = GOOGLE_ULONGLONG(0);
    time_ns_other_ = GOOGLE_ULONGLONG(0);
    count_in_ = 0u;
    count_out_ = 0u;
    count_other_ = 0u;
    bytes_in_ = 0u;
    bytes_out_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bytes_other_ = 0u;
    time_percentage_in_ = 0u;
    time_percentage_out_ = 0u;
    time_percentage_other_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool counter_time_bytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time_ns_in = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_in_)));
          set_has_time_ns_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_ns_out;
        break;
      }

      // required uint64 time_ns_out = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_ns_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_out_)));
          set_has_time_ns_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_ns_other;
        break;
      }

      // required uint64 time_ns_other = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_ns_other:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_other_)));
          set_has_time_ns_other();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count_in;
        break;
      }

      // required uint32 count_in = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_in_)));
          set_has_count_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count_out;
        break;
      }

      // required uint32 count_out = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_out_)));
          set_has_count_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count_other;
        break;
      }

      // required uint32 count_other = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_other:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_other_)));
          set_has_count_other();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bytes_in;
        break;
      }

      // required uint32 bytes_in = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_in_)));
          set_has_bytes_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bytes_out;
        break;
      }

      // required uint32 bytes_out = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_out_)));
          set_has_bytes_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bytes_other;
        break;
      }

      // required uint32 bytes_other = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_other:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_other_)));
          set_has_bytes_other();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_time_percentage_in;
        break;
      }

      // optional uint32 time_percentage_in = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_percentage_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_percentage_in_)));
          set_has_time_percentage_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_time_percentage_out;
        break;
      }

      // optional uint32 time_percentage_out = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_percentage_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_percentage_out_)));
          set_has_time_percentage_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_time_percentage_other;
        break;
      }

      // optional uint32 time_percentage_other = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_percentage_other:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_percentage_other_)));
          set_has_time_percentage_other();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void counter_time_bytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 time_ns_in = 1;
  if (has_time_ns_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_ns_in(), output);
  }

  // required uint64 time_ns_out = 2;
  if (has_time_ns_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time_ns_out(), output);
  }

  // required uint64 time_ns_other = 3;
  if (has_time_ns_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_ns_other(), output);
  }

  // required uint32 count_in = 4;
  if (has_count_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count_in(), output);
  }

  // required uint32 count_out = 5;
  if (has_count_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count_out(), output);
  }

  // required uint32 count_other = 6;
  if (has_count_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count_other(), output);
  }

  // required uint32 bytes_in = 7;
  if (has_bytes_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bytes_in(), output);
  }

  // required uint32 bytes_out = 8;
  if (has_bytes_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bytes_out(), output);
  }

  // required uint32 bytes_other = 9;
  if (has_bytes_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->bytes_other(), output);
  }

  // optional uint32 time_percentage_in = 10;
  if (has_time_percentage_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->time_percentage_in(), output);
  }

  // optional uint32 time_percentage_out = 11;
  if (has_time_percentage_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->time_percentage_out(), output);
  }

  // optional uint32 time_percentage_other = 12;
  if (has_time_percentage_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->time_percentage_other(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* counter_time_bytes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 time_ns_in = 1;
  if (has_time_ns_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_ns_in(), target);
  }

  // required uint64 time_ns_out = 2;
  if (has_time_ns_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time_ns_out(), target);
  }

  // required uint64 time_ns_other = 3;
  if (has_time_ns_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time_ns_other(), target);
  }

  // required uint32 count_in = 4;
  if (has_count_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count_in(), target);
  }

  // required uint32 count_out = 5;
  if (has_count_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count_out(), target);
  }

  // required uint32 count_other = 6;
  if (has_count_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count_other(), target);
  }

  // required uint32 bytes_in = 7;
  if (has_bytes_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bytes_in(), target);
  }

  // required uint32 bytes_out = 8;
  if (has_bytes_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bytes_out(), target);
  }

  // required uint32 bytes_other = 9;
  if (has_bytes_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->bytes_other(), target);
  }

  // optional uint32 time_percentage_in = 10;
  if (has_time_percentage_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->time_percentage_in(), target);
  }

  // optional uint32 time_percentage_out = 11;
  if (has_time_percentage_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->time_percentage_out(), target);
  }

  // optional uint32 time_percentage_other = 12;
  if (has_time_percentage_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->time_percentage_other(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int counter_time_bytes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time_ns_in = 1;
    if (has_time_ns_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_ns_in());
    }

    // required uint64 time_ns_out = 2;
    if (has_time_ns_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_ns_out());
    }

    // required uint64 time_ns_other = 3;
    if (has_time_ns_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_ns_other());
    }

    // required uint32 count_in = 4;
    if (has_count_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_in());
    }

    // required uint32 count_out = 5;
    if (has_count_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_out());
    }

    // required uint32 count_other = 6;
    if (has_count_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_other());
    }

    // required uint32 bytes_in = 7;
    if (has_bytes_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_in());
    }

    // required uint32 bytes_out = 8;
    if (has_bytes_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_out());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 bytes_other = 9;
    if (has_bytes_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_other());
    }

    // optional uint32 time_percentage_in = 10;
    if (has_time_percentage_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_percentage_in());
    }

    // optional uint32 time_percentage_out = 11;
    if (has_time_percentage_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_percentage_out());
    }

    // optional uint32 time_percentage_other = 12;
    if (has_time_percentage_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_percentage_other());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_time_bytes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const counter_time_bytes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const counter_time_bytes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void counter_time_bytes::MergeFrom(const counter_time_bytes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_ns_in()) {
      set_time_ns_in(from.time_ns_in());
    }
    if (from.has_time_ns_out()) {
      set_time_ns_out(from.time_ns_out());
    }
    if (from.has_time_ns_other()) {
      set_time_ns_other(from.time_ns_other());
    }
    if (from.has_count_in()) {
      set_count_in(from.count_in());
    }
    if (from.has_count_out()) {
      set_count_out(from.count_out());
    }
    if (from.has_count_other()) {
      set_count_other(from.count_other());
    }
    if (from.has_bytes_in()) {
      set_bytes_in(from.bytes_in());
    }
    if (from.has_bytes_out()) {
      set_bytes_out(from.bytes_out());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bytes_other()) {
      set_bytes_other(from.bytes_other());
    }
    if (from.has_time_percentage_in()) {
      set_time_percentage_in(from.time_percentage_in());
    }
    if (from.has_time_percentage_out()) {
      set_time_percentage_out(from.time_percentage_out());
    }
    if (from.has_time_percentage_other()) {
      set_time_percentage_other(from.time_percentage_other());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void counter_time_bytes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_time_bytes::CopyFrom(const counter_time_bytes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool counter_time_bytes::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void counter_time_bytes::Swap(counter_time_bytes* other) {
  if (other != this) {
    std::swap(time_ns_in_, other->time_ns_in_);
    std::swap(time_ns_out_, other->time_ns_out_);
    std::swap(time_ns_other_, other->time_ns_other_);
    std::swap(count_in_, other->count_in_);
    std::swap(count_out_, other->count_out_);
    std::swap(count_other_, other->count_other_);
    std::swap(bytes_in_, other->bytes_in_);
    std::swap(bytes_out_, other->bytes_out_);
    std::swap(bytes_other_, other->bytes_other_);
    std::swap(time_percentage_in_, other->time_percentage_in_);
    std::swap(time_percentage_out_, other->time_percentage_out_);
    std::swap(time_percentage_other_, other->time_percentage_other_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata counter_time_bytes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_time_bytes_descriptor_;
  metadata.reflection = counter_time_bytes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int time_categories::kUnknownFieldNumber;
const int time_categories::kOtherFieldNumber;
const int time_categories::kFileFieldNumber;
const int time_categories::kNetFieldNumber;
const int time_categories::kIpcFieldNumber;
const int time_categories::kMemoryFieldNumber;
const int time_categories::kProcessFieldNumber;
const int time_categories::kSleepFieldNumber;
const int time_categories::kSystemFieldNumber;
const int time_categories::kSignalFieldNumber;
const int time_categories::kUserFieldNumber;
const int time_categories::kTimeFieldNumber;
const int time_categories::kIoFileFieldNumber;
const int time_categories::kIoNetFieldNumber;
const int time_categories::kIoOtherFieldNumber;
const int time_categories::kWaitFieldNumber;
const int time_categories::kProcessingFieldNumber;
#endif  // !_MSC_VER

time_categories::time_categories()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void time_categories::InitAsDefaultInstance() {
  unknown_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  other_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  file_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  net_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  ipc_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  memory_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  process_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  sleep_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  system_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  signal_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  user_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  time_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  io_file_ = const_cast< ::draiosproto::counter_time_bytes*>(&::draiosproto::counter_time_bytes::default_instance());
  io_net_ = const_cast< ::draiosproto::counter_time_bytes*>(&::draiosproto::counter_time_bytes::default_instance());
  io_other_ = const_cast< ::draiosproto::counter_time_bytes*>(&::draiosproto::counter_time_bytes::default_instance());
  wait_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  processing_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
}

time_categories::time_categories(const time_categories& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void time_categories::SharedCtor() {
  _cached_size_ = 0;
  unknown_ = NULL;
  other_ = NULL;
  file_ = NULL;
  net_ = NULL;
  ipc_ = NULL;
  memory_ = NULL;
  process_ = NULL;
  sleep_ = NULL;
  system_ = NULL;
  signal_ = NULL;
  user_ = NULL;
  time_ = NULL;
  io_file_ = NULL;
  io_net_ = NULL;
  io_other_ = NULL;
  wait_ = NULL;
  processing_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

time_categories::~time_categories() {
  SharedDtor();
}

void time_categories::SharedDtor() {
  if (this != default_instance_) {
    delete unknown_;
    delete other_;
    delete file_;
    delete net_;
    delete ipc_;
    delete memory_;
    delete process_;
    delete sleep_;
    delete system_;
    delete signal_;
    delete user_;
    delete time_;
    delete io_file_;
    delete io_net_;
    delete io_other_;
    delete wait_;
    delete processing_;
  }
}

void time_categories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* time_categories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return time_categories_descriptor_;
}

const time_categories& time_categories::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

time_categories* time_categories::default_instance_ = NULL;

time_categories* time_categories::New() const {
  return new time_categories;
}

void time_categories::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unknown()) {
      if (unknown_ != NULL) unknown_->::draiosproto::counter_time::Clear();
    }
    if (has_other()) {
      if (other_ != NULL) other_->::draiosproto::counter_time::Clear();
    }
    if (has_file()) {
      if (file_ != NULL) file_->::draiosproto::counter_time::Clear();
    }
    if (has_net()) {
      if (net_ != NULL) net_->::draiosproto::counter_time::Clear();
    }
    if (has_ipc()) {
      if (ipc_ != NULL) ipc_->::draiosproto::counter_time::Clear();
    }
    if (has_memory()) {
      if (memory_ != NULL) memory_->::draiosproto::counter_time::Clear();
    }
    if (has_process()) {
      if (process_ != NULL) process_->::draiosproto::counter_time::Clear();
    }
    if (has_sleep()) {
      if (sleep_ != NULL) sleep_->::draiosproto::counter_time::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_system()) {
      if (system_ != NULL) system_->::draiosproto::counter_time::Clear();
    }
    if (has_signal()) {
      if (signal_ != NULL) signal_->::draiosproto::counter_time::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::draiosproto::counter_time::Clear();
    }
    if (has_time()) {
      if (time_ != NULL) time_->::draiosproto::counter_time::Clear();
    }
    if (has_io_file()) {
      if (io_file_ != NULL) io_file_->::draiosproto::counter_time_bytes::Clear();
    }
    if (has_io_net()) {
      if (io_net_ != NULL) io_net_->::draiosproto::counter_time_bytes::Clear();
    }
    if (has_io_other()) {
      if (io_other_ != NULL) io_other_->::draiosproto::counter_time_bytes::Clear();
    }
    if (has_wait()) {
      if (wait_ != NULL) wait_->::draiosproto::counter_time::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_processing()) {
      if (processing_ != NULL) processing_->::draiosproto::counter_time::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool time_categories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .draiosproto.counter_time unknown = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unknown()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_other;
        break;
      }

      // optional .draiosproto.counter_time other = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file;
        break;
      }

      // optional .draiosproto.counter_time file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_net;
        break;
      }

      // optional .draiosproto.counter_time net = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ipc;
        break;
      }

      // optional .draiosproto.counter_time ipc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_memory;
        break;
      }

      // optional .draiosproto.counter_time memory = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_process;
        break;
      }

      // optional .draiosproto.counter_time process = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_process()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sleep;
        break;
      }

      // optional .draiosproto.counter_time sleep = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sleep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sleep()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_system;
        break;
      }

      // optional .draiosproto.counter_time system = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_signal;
        break;
      }

      // optional .draiosproto.counter_time signal = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_user;
        break;
      }

      // optional .draiosproto.counter_time user = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_time;
        break;
      }

      // optional .draiosproto.counter_time time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_io_file;
        break;
      }

      // optional .draiosproto.counter_time_bytes io_file = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_io_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_io_net;
        break;
      }

      // optional .draiosproto.counter_time_bytes io_net = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_io_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_net()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_io_other;
        break;
      }

      // optional .draiosproto.counter_time_bytes io_other = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_io_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_other()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_wait;
        break;
      }

      // optional .draiosproto.counter_time wait = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wait()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_processing;
        break;
      }

      // optional .draiosproto.counter_time processing = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void time_categories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .draiosproto.counter_time unknown = 1;
  if (has_unknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unknown(), output);
  }

  // optional .draiosproto.counter_time other = 2;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->other(), output);
  }

  // optional .draiosproto.counter_time file = 3;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->file(), output);
  }

  // optional .draiosproto.counter_time net = 4;
  if (has_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->net(), output);
  }

  // optional .draiosproto.counter_time ipc = 5;
  if (has_ipc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ipc(), output);
  }

  // optional .draiosproto.counter_time memory = 6;
  if (has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->memory(), output);
  }

  // optional .draiosproto.counter_time process = 7;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->process(), output);
  }

  // optional .draiosproto.counter_time sleep = 8;
  if (has_sleep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sleep(), output);
  }

  // optional .draiosproto.counter_time system = 9;
  if (has_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->system(), output);
  }

  // optional .draiosproto.counter_time signal = 10;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->signal(), output);
  }

  // optional .draiosproto.counter_time user = 11;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->user(), output);
  }

  // optional .draiosproto.counter_time time = 12;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->time(), output);
  }

  // optional .draiosproto.counter_time_bytes io_file = 13;
  if (has_io_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->io_file(), output);
  }

  // optional .draiosproto.counter_time_bytes io_net = 14;
  if (has_io_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->io_net(), output);
  }

  // optional .draiosproto.counter_time_bytes io_other = 15;
  if (has_io_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->io_other(), output);
  }

  // optional .draiosproto.counter_time wait = 16;
  if (has_wait()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->wait(), output);
  }

  // optional .draiosproto.counter_time processing = 17;
  if (has_processing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->processing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* time_categories::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .draiosproto.counter_time unknown = 1;
  if (has_unknown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unknown(), target);
  }

  // optional .draiosproto.counter_time other = 2;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->other(), target);
  }

  // optional .draiosproto.counter_time file = 3;
  if (has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->file(), target);
  }

  // optional .draiosproto.counter_time net = 4;
  if (has_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->net(), target);
  }

  // optional .draiosproto.counter_time ipc = 5;
  if (has_ipc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ipc(), target);
  }

  // optional .draiosproto.counter_time memory = 6;
  if (has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->memory(), target);
  }

  // optional .draiosproto.counter_time process = 7;
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->process(), target);
  }

  // optional .draiosproto.counter_time sleep = 8;
  if (has_sleep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->sleep(), target);
  }

  // optional .draiosproto.counter_time system = 9;
  if (has_system()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->system(), target);
  }

  // optional .draiosproto.counter_time signal = 10;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->signal(), target);
  }

  // optional .draiosproto.counter_time user = 11;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->user(), target);
  }

  // optional .draiosproto.counter_time time = 12;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->time(), target);
  }

  // optional .draiosproto.counter_time_bytes io_file = 13;
  if (has_io_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->io_file(), target);
  }

  // optional .draiosproto.counter_time_bytes io_net = 14;
  if (has_io_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->io_net(), target);
  }

  // optional .draiosproto.counter_time_bytes io_other = 15;
  if (has_io_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->io_other(), target);
  }

  // optional .draiosproto.counter_time wait = 16;
  if (has_wait()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->wait(), target);
  }

  // optional .draiosproto.counter_time processing = 17;
  if (has_processing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->processing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int time_categories::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .draiosproto.counter_time unknown = 1;
    if (has_unknown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unknown());
    }

    // optional .draiosproto.counter_time other = 2;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other());
    }

    // optional .draiosproto.counter_time file = 3;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }

    // optional .draiosproto.counter_time net = 4;
    if (has_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->net());
    }

    // optional .draiosproto.counter_time ipc = 5;
    if (has_ipc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ipc());
    }

    // optional .draiosproto.counter_time memory = 6;
    if (has_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memory());
    }

    // optional .draiosproto.counter_time process = 7;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->process());
    }

    // optional .draiosproto.counter_time sleep = 8;
    if (has_sleep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sleep());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .draiosproto.counter_time system = 9;
    if (has_system()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->system());
    }

    // optional .draiosproto.counter_time signal = 10;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal());
    }

    // optional .draiosproto.counter_time user = 11;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .draiosproto.counter_time time = 12;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // optional .draiosproto.counter_time_bytes io_file = 13;
    if (has_io_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->io_file());
    }

    // optional .draiosproto.counter_time_bytes io_net = 14;
    if (has_io_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->io_net());
    }

    // optional .draiosproto.counter_time_bytes io_other = 15;
    if (has_io_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->io_other());
    }

    // optional .draiosproto.counter_time wait = 16;
    if (has_wait()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wait());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .draiosproto.counter_time processing = 17;
    if (has_processing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->processing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void time_categories::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const time_categories* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const time_categories*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void time_categories::MergeFrom(const time_categories& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unknown()) {
      mutable_unknown()->::draiosproto::counter_time::MergeFrom(from.unknown());
    }
    if (from.has_other()) {
      mutable_other()->::draiosproto::counter_time::MergeFrom(from.other());
    }
    if (from.has_file()) {
      mutable_file()->::draiosproto::counter_time::MergeFrom(from.file());
    }
    if (from.has_net()) {
      mutable_net()->::draiosproto::counter_time::MergeFrom(from.net());
    }
    if (from.has_ipc()) {
      mutable_ipc()->::draiosproto::counter_time::MergeFrom(from.ipc());
    }
    if (from.has_memory()) {
      mutable_memory()->::draiosproto::counter_time::MergeFrom(from.memory());
    }
    if (from.has_process()) {
      mutable_process()->::draiosproto::counter_time::MergeFrom(from.process());
    }
    if (from.has_sleep()) {
      mutable_sleep()->::draiosproto::counter_time::MergeFrom(from.sleep());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_system()) {
      mutable_system()->::draiosproto::counter_time::MergeFrom(from.system());
    }
    if (from.has_signal()) {
      mutable_signal()->::draiosproto::counter_time::MergeFrom(from.signal());
    }
    if (from.has_user()) {
      mutable_user()->::draiosproto::counter_time::MergeFrom(from.user());
    }
    if (from.has_time()) {
      mutable_time()->::draiosproto::counter_time::MergeFrom(from.time());
    }
    if (from.has_io_file()) {
      mutable_io_file()->::draiosproto::counter_time_bytes::MergeFrom(from.io_file());
    }
    if (from.has_io_net()) {
      mutable_io_net()->::draiosproto::counter_time_bytes::MergeFrom(from.io_net());
    }
    if (from.has_io_other()) {
      mutable_io_other()->::draiosproto::counter_time_bytes::MergeFrom(from.io_other());
    }
    if (from.has_wait()) {
      mutable_wait()->::draiosproto::counter_time::MergeFrom(from.wait());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_processing()) {
      mutable_processing()->::draiosproto::counter_time::MergeFrom(from.processing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void time_categories::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void time_categories::CopyFrom(const time_categories& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool time_categories::IsInitialized() const {

  if (has_unknown()) {
    if (!this->unknown().IsInitialized()) return false;
  }
  if (has_other()) {
    if (!this->other().IsInitialized()) return false;
  }
  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  if (has_net()) {
    if (!this->net().IsInitialized()) return false;
  }
  if (has_ipc()) {
    if (!this->ipc().IsInitialized()) return false;
  }
  if (has_memory()) {
    if (!this->memory().IsInitialized()) return false;
  }
  if (has_process()) {
    if (!this->process().IsInitialized()) return false;
  }
  if (has_sleep()) {
    if (!this->sleep().IsInitialized()) return false;
  }
  if (has_system()) {
    if (!this->system().IsInitialized()) return false;
  }
  if (has_signal()) {
    if (!this->signal().IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  if (has_io_file()) {
    if (!this->io_file().IsInitialized()) return false;
  }
  if (has_io_net()) {
    if (!this->io_net().IsInitialized()) return false;
  }
  if (has_io_other()) {
    if (!this->io_other().IsInitialized()) return false;
  }
  if (has_wait()) {
    if (!this->wait().IsInitialized()) return false;
  }
  if (has_processing()) {
    if (!this->processing().IsInitialized()) return false;
  }
  return true;
}

void time_categories::Swap(time_categories* other) {
  if (other != this) {
    std::swap(unknown_, other->unknown_);
    std::swap(other_, other->other_);
    std::swap(file_, other->file_);
    std::swap(net_, other->net_);
    std::swap(ipc_, other->ipc_);
    std::swap(memory_, other->memory_);
    std::swap(process_, other->process_);
    std::swap(sleep_, other->sleep_);
    std::swap(system_, other->system_);
    std::swap(signal_, other->signal_);
    std::swap(user_, other->user_);
    std::swap(time_, other->time_);
    std::swap(io_file_, other->io_file_);
    std::swap(io_net_, other->io_net_);
    std::swap(io_other_, other->io_other_);
    std::swap(wait_, other->wait_);
    std::swap(processing_, other->processing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata time_categories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = time_categories_descriptor_;
  metadata.reflection = time_categories_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int transaction_breakdown_categories::kOtherFieldNumber;
const int transaction_breakdown_categories::kIoFileFieldNumber;
const int transaction_breakdown_categories::kIoNetFieldNumber;
const int transaction_breakdown_categories::kProcessingFieldNumber;
#endif  // !_MSC_VER

transaction_breakdown_categories::transaction_breakdown_categories()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void transaction_breakdown_categories::InitAsDefaultInstance() {
  other_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
  io_file_ = const_cast< ::draiosproto::counter_time_bytes*>(&::draiosproto::counter_time_bytes::default_instance());
  io_net_ = const_cast< ::draiosproto::counter_time_bytes*>(&::draiosproto::counter_time_bytes::default_instance());
  processing_ = const_cast< ::draiosproto::counter_time*>(&::draiosproto::counter_time::default_instance());
}

transaction_breakdown_categories::transaction_breakdown_categories(const transaction_breakdown_categories& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void transaction_breakdown_categories::SharedCtor() {
  _cached_size_ = 0;
  other_ = NULL;
  io_file_ = NULL;
  io_net_ = NULL;
  processing_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

transaction_breakdown_categories::~transaction_breakdown_categories() {
  SharedDtor();
}

void transaction_breakdown_categories::SharedDtor() {
  if (this != default_instance_) {
    delete other_;
    delete io_file_;
    delete io_net_;
    delete processing_;
  }
}

void transaction_breakdown_categories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* transaction_breakdown_categories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return transaction_breakdown_categories_descriptor_;
}

const transaction_breakdown_categories& transaction_breakdown_categories::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

transaction_breakdown_categories* transaction_breakdown_categories::default_instance_ = NULL;

transaction_breakdown_categories* transaction_breakdown_categories::New() const {
  return new transaction_breakdown_categories;
}

void transaction_breakdown_categories::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_other()) {
      if (other_ != NULL) other_->::draiosproto::counter_time::Clear();
    }
    if (has_io_file()) {
      if (io_file_ != NULL) io_file_->::draiosproto::counter_time_bytes::Clear();
    }
    if (has_io_net()) {
      if (io_net_ != NULL) io_net_->::draiosproto::counter_time_bytes::Clear();
    }
    if (has_processing()) {
      if (processing_ != NULL) processing_->::draiosproto::counter_time::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool transaction_breakdown_categories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .draiosproto.counter_time other = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_io_file;
        break;
      }

      // optional .draiosproto.counter_time_bytes io_file = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_io_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_io_net;
        break;
      }

      // optional .draiosproto.counter_time_bytes io_net = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_io_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_net()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_processing;
        break;
      }

      // optional .draiosproto.counter_time processing = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void transaction_breakdown_categories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .draiosproto.counter_time other = 2;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->other(), output);
  }

  // optional .draiosproto.counter_time_bytes io_file = 13;
  if (has_io_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->io_file(), output);
  }

  // optional .draiosproto.counter_time_bytes io_net = 14;
  if (has_io_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->io_net(), output);
  }

  // optional .draiosproto.counter_time processing = 17;
  if (has_processing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->processing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* transaction_breakdown_categories::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .draiosproto.counter_time other = 2;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->other(), target);
  }

  // optional .draiosproto.counter_time_bytes io_file = 13;
  if (has_io_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->io_file(), target);
  }

  // optional .draiosproto.counter_time_bytes io_net = 14;
  if (has_io_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->io_net(), target);
  }

  // optional .draiosproto.counter_time processing = 17;
  if (has_processing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->processing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int transaction_breakdown_categories::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .draiosproto.counter_time other = 2;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other());
    }

    // optional .draiosproto.counter_time_bytes io_file = 13;
    if (has_io_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->io_file());
    }

    // optional .draiosproto.counter_time_bytes io_net = 14;
    if (has_io_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->io_net());
    }

    // optional .draiosproto.counter_time processing = 17;
    if (has_processing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->processing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void transaction_breakdown_categories::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const transaction_breakdown_categories* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const transaction_breakdown_categories*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void transaction_breakdown_categories::MergeFrom(const transaction_breakdown_categories& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_other()) {
      mutable_other()->::draiosproto::counter_time::MergeFrom(from.other());
    }
    if (from.has_io_file()) {
      mutable_io_file()->::draiosproto::counter_time_bytes::MergeFrom(from.io_file());
    }
    if (from.has_io_net()) {
      mutable_io_net()->::draiosproto::counter_time_bytes::MergeFrom(from.io_net());
    }
    if (from.has_processing()) {
      mutable_processing()->::draiosproto::counter_time::MergeFrom(from.processing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void transaction_breakdown_categories::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transaction_breakdown_categories::CopyFrom(const transaction_breakdown_categories& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_breakdown_categories::IsInitialized() const {

  if (has_other()) {
    if (!this->other().IsInitialized()) return false;
  }
  if (has_io_file()) {
    if (!this->io_file().IsInitialized()) return false;
  }
  if (has_io_net()) {
    if (!this->io_net().IsInitialized()) return false;
  }
  if (has_processing()) {
    if (!this->processing().IsInitialized()) return false;
  }
  return true;
}

void transaction_breakdown_categories::Swap(transaction_breakdown_categories* other) {
  if (other != this) {
    std::swap(other_, other->other_);
    std::swap(io_file_, other->io_file_);
    std::swap(io_net_, other->io_net_);
    std::swap(processing_, other->processing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata transaction_breakdown_categories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = transaction_breakdown_categories_descriptor_;
  metadata.reflection = transaction_breakdown_categories_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int counter_syscall_errors::kCountFieldNumber;
const int counter_syscall_errors::kTopErrorCodesFieldNumber;
#endif  // !_MSC_VER

counter_syscall_errors::counter_syscall_errors()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void counter_syscall_errors::InitAsDefaultInstance() {
}

counter_syscall_errors::counter_syscall_errors(const counter_syscall_errors& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void counter_syscall_errors::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

counter_syscall_errors::~counter_syscall_errors() {
  SharedDtor();
}

void counter_syscall_errors::SharedDtor() {
  if (this != default_instance_) {
  }
}

void counter_syscall_errors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_syscall_errors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_syscall_errors_descriptor_;
}

const counter_syscall_errors& counter_syscall_errors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

counter_syscall_errors* counter_syscall_errors::default_instance_ = NULL;

counter_syscall_errors* counter_syscall_errors::New() const {
  return new counter_syscall_errors;
}

void counter_syscall_errors::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  top_error_codes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool counter_syscall_errors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_top_error_codes;
        break;
      }

      // repeated uint32 top_error_codes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_error_codes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_top_error_codes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_top_error_codes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_top_error_codes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void counter_syscall_errors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated uint32 top_error_codes = 2;
  for (int i = 0; i < this->top_error_codes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->top_error_codes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* counter_syscall_errors::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated uint32 top_error_codes = 2;
  for (int i = 0; i < this->top_error_codes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->top_error_codes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int counter_syscall_errors::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated uint32 top_error_codes = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->top_error_codes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->top_error_codes(i));
    }
    total_size += 1 * this->top_error_codes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_syscall_errors::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const counter_syscall_errors* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const counter_syscall_errors*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void counter_syscall_errors::MergeFrom(const counter_syscall_errors& from) {
  GOOGLE_CHECK_NE(&from, this);
  top_error_codes_.MergeFrom(from.top_error_codes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void counter_syscall_errors::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_syscall_errors::CopyFrom(const counter_syscall_errors& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool counter_syscall_errors::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void counter_syscall_errors::Swap(counter_syscall_errors* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    top_error_codes_.Swap(&other->top_error_codes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata counter_syscall_errors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_syscall_errors_descriptor_;
  metadata.reflection = counter_syscall_errors_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int resource_categories::kCapacityScoreFieldNumber;
const int resource_categories::kStolenCapacityScoreFieldNumber;
const int resource_categories::kConnectionQueueUsagePctFieldNumber;
const int resource_categories::kFdUsagePctFieldNumber;
const int resource_categories::kCpuPctFieldNumber;
const int resource_categories::kResidentMemoryUsageKbFieldNumber;
#endif  // !_MSC_VER

resource_categories::resource_categories()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void resource_categories::InitAsDefaultInstance() {
}

resource_categories::resource_categories(const resource_categories& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void resource_categories::SharedCtor() {
  _cached_size_ = 0;
  capacity_score_ = 0u;
  stolen_capacity_score_ = 0u;
  connection_queue_usage_pct_ = 0u;
  fd_usage_pct_ = 0u;
  cpu_pct_ = 0u;
  resident_memory_usage_kb_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

resource_categories::~resource_categories() {
  SharedDtor();
}

void resource_categories::SharedDtor() {
  if (this != default_instance_) {
  }
}

void resource_categories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* resource_categories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return resource_categories_descriptor_;
}

const resource_categories& resource_categories::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

resource_categories* resource_categories::default_instance_ = NULL;

resource_categories* resource_categories::New() const {
  return new resource_categories;
}

void resource_categories::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    capacity_score_ = 0u;
    stolen_capacity_score_ = 0u;
    connection_queue_usage_pct_ = 0u;
    fd_usage_pct_ = 0u;
    cpu_pct_ = 0u;
    resident_memory_usage_kb_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool resource_categories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 capacity_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_score_)));
          set_has_capacity_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_connection_queue_usage_pct;
        break;
      }

      // optional uint32 connection_queue_usage_pct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connection_queue_usage_pct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connection_queue_usage_pct_)));
          set_has_connection_queue_usage_pct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fd_usage_pct;
        break;
      }

      // optional uint32 fd_usage_pct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd_usage_pct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fd_usage_pct_)));
          set_has_fd_usage_pct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cpu_pct;
        break;
      }

      // optional uint32 cpu_pct = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_pct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_pct_)));
          set_has_cpu_pct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resident_memory_usage_kb;
        break;
      }

      // optional uint64 resident_memory_usage_kb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resident_memory_usage_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resident_memory_usage_kb_)));
          set_has_resident_memory_usage_kb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stolen_capacity_score;
        break;
      }

      // optional uint32 stolen_capacity_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stolen_capacity_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stolen_capacity_score_)));
          set_has_stolen_capacity_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void resource_categories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 capacity_score = 1;
  if (has_capacity_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->capacity_score(), output);
  }

  // optional uint32 connection_queue_usage_pct = 2;
  if (has_connection_queue_usage_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->connection_queue_usage_pct(), output);
  }

  // optional uint32 fd_usage_pct = 3;
  if (has_fd_usage_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fd_usage_pct(), output);
  }

  // optional uint32 cpu_pct = 4;
  if (has_cpu_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cpu_pct(), output);
  }

  // optional uint64 resident_memory_usage_kb = 5;
  if (has_resident_memory_usage_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->resident_memory_usage_kb(), output);
  }

  // optional uint32 stolen_capacity_score = 6;
  if (has_stolen_capacity_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stolen_capacity_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* resource_categories::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 capacity_score = 1;
  if (has_capacity_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->capacity_score(), target);
  }

  // optional uint32 connection_queue_usage_pct = 2;
  if (has_connection_queue_usage_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->connection_queue_usage_pct(), target);
  }

  // optional uint32 fd_usage_pct = 3;
  if (has_fd_usage_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fd_usage_pct(), target);
  }

  // optional uint32 cpu_pct = 4;
  if (has_cpu_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cpu_pct(), target);
  }

  // optional uint64 resident_memory_usage_kb = 5;
  if (has_resident_memory_usage_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->resident_memory_usage_kb(), target);
  }

  // optional uint32 stolen_capacity_score = 6;
  if (has_stolen_capacity_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stolen_capacity_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int resource_categories::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 capacity_score = 1;
    if (has_capacity_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capacity_score());
    }

    // optional uint32 stolen_capacity_score = 6;
    if (has_stolen_capacity_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stolen_capacity_score());
    }

    // optional uint32 connection_queue_usage_pct = 2;
    if (has_connection_queue_usage_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connection_queue_usage_pct());
    }

    // optional uint32 fd_usage_pct = 3;
    if (has_fd_usage_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fd_usage_pct());
    }

    // optional uint32 cpu_pct = 4;
    if (has_cpu_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_pct());
    }

    // optional uint64 resident_memory_usage_kb = 5;
    if (has_resident_memory_usage_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resident_memory_usage_kb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void resource_categories::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const resource_categories* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const resource_categories*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void resource_categories::MergeFrom(const resource_categories& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_capacity_score()) {
      set_capacity_score(from.capacity_score());
    }
    if (from.has_stolen_capacity_score()) {
      set_stolen_capacity_score(from.stolen_capacity_score());
    }
    if (from.has_connection_queue_usage_pct()) {
      set_connection_queue_usage_pct(from.connection_queue_usage_pct());
    }
    if (from.has_fd_usage_pct()) {
      set_fd_usage_pct(from.fd_usage_pct());
    }
    if (from.has_cpu_pct()) {
      set_cpu_pct(from.cpu_pct());
    }
    if (from.has_resident_memory_usage_kb()) {
      set_resident_memory_usage_kb(from.resident_memory_usage_kb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void resource_categories::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void resource_categories::CopyFrom(const resource_categories& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool resource_categories::IsInitialized() const {

  return true;
}

void resource_categories::Swap(resource_categories* other) {
  if (other != this) {
    std::swap(capacity_score_, other->capacity_score_);
    std::swap(stolen_capacity_score_, other->stolen_capacity_score_);
    std::swap(connection_queue_usage_pct_, other->connection_queue_usage_pct_);
    std::swap(fd_usage_pct_, other->fd_usage_pct_);
    std::swap(cpu_pct_, other->cpu_pct_);
    std::swap(resident_memory_usage_kb_, other->resident_memory_usage_kb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata resource_categories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = resource_categories_descriptor_;
  metadata.reflection = resource_categories_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int connection_categories::kServerFieldNumber;
const int connection_categories::kClientFieldNumber;
const int connection_categories::kTransactionCountersFieldNumber;
const int connection_categories::kNAggregatedConnectionsFieldNumber;
#endif  // !_MSC_VER

connection_categories::connection_categories()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void connection_categories::InitAsDefaultInstance() {
  server_ = const_cast< ::draiosproto::counter_bytes*>(&::draiosproto::counter_bytes::default_instance());
  client_ = const_cast< ::draiosproto::counter_bytes*>(&::draiosproto::counter_bytes::default_instance());
  transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
}

connection_categories::connection_categories(const connection_categories& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void connection_categories::SharedCtor() {
  _cached_size_ = 0;
  server_ = NULL;
  client_ = NULL;
  transaction_counters_ = NULL;
  n_aggregated_connections_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

connection_categories::~connection_categories() {
  SharedDtor();
}

void connection_categories::SharedDtor() {
  if (this != default_instance_) {
    delete server_;
    delete client_;
    delete transaction_counters_;
  }
}

void connection_categories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* connection_categories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connection_categories_descriptor_;
}

const connection_categories& connection_categories::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

connection_categories* connection_categories::default_instance_ = NULL;

connection_categories* connection_categories::New() const {
  return new connection_categories;
}

void connection_categories::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server()) {
      if (server_ != NULL) server_->::draiosproto::counter_bytes::Clear();
    }
    if (has_client()) {
      if (client_ != NULL) client_->::draiosproto::counter_bytes::Clear();
    }
    if (has_transaction_counters()) {
      if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    n_aggregated_connections_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool connection_categories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .draiosproto.counter_bytes server = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client;
        break;
      }

      // optional .draiosproto.counter_bytes client = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional transaction_counters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_n_aggregated_connections;
        break;
      }

      // optional uint32 n_aggregated_connections = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n_aggregated_connections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_aggregated_connections_)));
          set_has_n_aggregated_connections();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void connection_categories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .draiosproto.counter_bytes server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server(), output);
  }

  // optional .draiosproto.counter_bytes client = 2;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client(), output);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 3;
  if (has_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transaction_counters(), output);
  }

  // optional uint32 n_aggregated_connections = 4;
  if (has_n_aggregated_connections()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->n_aggregated_connections(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* connection_categories::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .draiosproto.counter_bytes server = 1;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server(), target);
  }

  // optional .draiosproto.counter_bytes client = 2;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->client(), target);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 3;
  if (has_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transaction_counters(), target);
  }

  // optional uint32 n_aggregated_connections = 4;
  if (has_n_aggregated_connections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->n_aggregated_connections(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int connection_categories::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .draiosproto.counter_bytes server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server());
    }

    // optional .draiosproto.counter_bytes client = 2;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client());
    }

    // optional .draiosproto.counter_time_bidirectional transaction_counters = 3;
    if (has_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_counters());
    }

    // optional uint32 n_aggregated_connections = 4;
    if (has_n_aggregated_connections()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_aggregated_connections());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void connection_categories::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const connection_categories* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const connection_categories*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void connection_categories::MergeFrom(const connection_categories& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      mutable_server()->::draiosproto::counter_bytes::MergeFrom(from.server());
    }
    if (from.has_client()) {
      mutable_client()->::draiosproto::counter_bytes::MergeFrom(from.client());
    }
    if (from.has_transaction_counters()) {
      mutable_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.transaction_counters());
    }
    if (from.has_n_aggregated_connections()) {
      set_n_aggregated_connections(from.n_aggregated_connections());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void connection_categories::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void connection_categories::CopyFrom(const connection_categories& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool connection_categories::IsInitialized() const {

  if (has_server()) {
    if (!this->server().IsInitialized()) return false;
  }
  if (has_client()) {
    if (!this->client().IsInitialized()) return false;
  }
  if (has_transaction_counters()) {
    if (!this->transaction_counters().IsInitialized()) return false;
  }
  return true;
}

void connection_categories::Swap(connection_categories* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(client_, other->client_);
    std::swap(transaction_counters_, other->transaction_counters_);
    std::swap(n_aggregated_connections_, other->n_aggregated_connections_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata connection_categories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = connection_categories_descriptor_;
  metadata.reflection = connection_categories_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int process_details::kCommFieldNumber;
const int process_details::kExeFieldNumber;
const int process_details::kArgsFieldNumber;
#endif  // !_MSC_VER

process_details::process_details()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void process_details::InitAsDefaultInstance() {
}

process_details::process_details(const process_details& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void process_details::SharedCtor() {
  _cached_size_ = 0;
  comm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

process_details::~process_details() {
  SharedDtor();
}

void process_details::SharedDtor() {
  if (comm_ != &::google::protobuf::internal::kEmptyString) {
    delete comm_;
  }
  if (exe_ != &::google::protobuf::internal::kEmptyString) {
    delete exe_;
  }
  if (this != default_instance_) {
  }
}

void process_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* process_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return process_details_descriptor_;
}

const process_details& process_details::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

process_details* process_details::default_instance_ = NULL;

process_details* process_details::New() const {
  return new process_details;
}

void process_details::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_comm()) {
      if (comm_ != &::google::protobuf::internal::kEmptyString) {
        comm_->clear();
      }
    }
    if (has_exe()) {
      if (exe_ != &::google::protobuf::internal::kEmptyString) {
        exe_->clear();
      }
    }
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool process_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string comm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comm().data(), this->comm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exe;
        break;
      }

      // required string exe = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exe().data(), this->exe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }

      // repeated string args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args(this->args_size() - 1).data(),
            this->args(this->args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void process_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string comm = 1;
  if (has_comm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comm().data(), this->comm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->comm(), output);
  }

  // required string exe = 2;
  if (has_exe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exe().data(), this->exe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->exe(), output);
  }

  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->args(i).data(), this->args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* process_details::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string comm = 1;
  if (has_comm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comm().data(), this->comm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->comm(), target);
  }

  // required string exe = 2;
  if (has_exe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exe().data(), this->exe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exe(), target);
  }

  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int process_details::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string comm = 1;
    if (has_comm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comm());
    }

    // required string exe = 2;
    if (has_exe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exe());
    }

  }
  // repeated string args = 3;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void process_details::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const process_details* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const process_details*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void process_details::MergeFrom(const process_details& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comm()) {
      set_comm(from.comm());
    }
    if (from.has_exe()) {
      set_exe(from.exe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void process_details::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void process_details::CopyFrom(const process_details& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool process_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void process_details::Swap(process_details* other) {
  if (other != this) {
    std::swap(comm_, other->comm_);
    std::swap(exe_, other->exe_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata process_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = process_details_descriptor_;
  metadata.reflection = process_details_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int host::kHostnameFieldNumber;
const int host::kNumCpusFieldNumber;
const int host::kCpuLoadsFieldNumber;
const int host::kCpuStealFieldNumber;
const int host::kPhysicalMemorySizeBytesFieldNumber;
const int host::kTcountersFieldNumber;
const int host::kReqcountersFieldNumber;
const int host::kTransactionCountersFieldNumber;
const int host::kTransactionProcessingDelayFieldNumber;
const int host::kMergedServerDelayFieldNumber;
const int host::kNextTiersDelayFieldNumber;
const int host::kResourceCountersFieldNumber;
const int host::kSyscallErrorsFieldNumber;
const int host::kExternalIoNetFieldNumber;
#endif  // !_MSC_VER

host::host()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void host::InitAsDefaultInstance() {
  tcounters_ = const_cast< ::draiosproto::time_categories*>(&::draiosproto::time_categories::default_instance());
  reqcounters_ = const_cast< ::draiosproto::transaction_breakdown_categories*>(&::draiosproto::transaction_breakdown_categories::default_instance());
  transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
  resource_counters_ = const_cast< ::draiosproto::resource_categories*>(&::draiosproto::resource_categories::default_instance());
  syscall_errors_ = const_cast< ::draiosproto::counter_syscall_errors*>(&::draiosproto::counter_syscall_errors::default_instance());
  external_io_net_ = const_cast< ::draiosproto::counter_time_bytes*>(&::draiosproto::counter_time_bytes::default_instance());
}

host::host(const host& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void host::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_cpus_ = 0u;
  physical_memory_size_bytes_ = GOOGLE_ULONGLONG(0);
  tcounters_ = NULL;
  reqcounters_ = NULL;
  transaction_counters_ = NULL;
  transaction_processing_delay_ = GOOGLE_ULONGLONG(0);
  merged_server_delay_ = GOOGLE_ULONGLONG(0);
  next_tiers_delay_ = GOOGLE_ULONGLONG(0);
  resource_counters_ = NULL;
  syscall_errors_ = NULL;
  external_io_net_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

host::~host() {
  SharedDtor();
}

void host::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
    delete tcounters_;
    delete reqcounters_;
    delete transaction_counters_;
    delete resource_counters_;
    delete syscall_errors_;
    delete external_io_net_;
  }
}

void host::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* host::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return host_descriptor_;
}

const host& host::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

host* host::default_instance_ = NULL;

host* host::New() const {
  return new host;
}

void host::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    num_cpus_ = 0u;
    physical_memory_size_bytes_ = GOOGLE_ULONGLONG(0);
    if (has_tcounters()) {
      if (tcounters_ != NULL) tcounters_->::draiosproto::time_categories::Clear();
    }
    if (has_reqcounters()) {
      if (reqcounters_ != NULL) reqcounters_->::draiosproto::transaction_breakdown_categories::Clear();
    }
    if (has_transaction_counters()) {
      if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    transaction_processing_delay_ = GOOGLE_ULONGLONG(0);
    merged_server_delay_ = GOOGLE_ULONGLONG(0);
    next_tiers_delay_ = GOOGLE_ULONGLONG(0);
    if (has_resource_counters()) {
      if (resource_counters_ != NULL) resource_counters_->::draiosproto::resource_categories::Clear();
    }
    if (has_syscall_errors()) {
      if (syscall_errors_ != NULL) syscall_errors_->::draiosproto::counter_syscall_errors::Clear();
    }
    if (has_external_io_net()) {
      if (external_io_net_ != NULL) external_io_net_->::draiosproto::counter_time_bytes::Clear();
    }
  }
  cpu_loads_.Clear();
  cpu_steal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool host::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_cpus;
        break;
      }

      // optional uint32 num_cpus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_cpus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_cpus_)));
          set_has_num_cpus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cpu_loads;
        break;
      }

      // repeated uint32 cpu_loads = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_loads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_cpu_loads())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cpu_loads())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cpu_loads;
        if (input->ExpectTag(32)) goto parse_physical_memory_size_bytes;
        break;
      }

      // required uint64 physical_memory_size_bytes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_memory_size_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &physical_memory_size_bytes_)));
          set_has_physical_memory_size_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tcounters;
        break;
      }

      // optional .draiosproto.time_categories tcounters = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tcounters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcounters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_transaction_processing_delay;
        break;
      }

      // optional uint64 transaction_processing_delay = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_processing_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_processing_delay_)));
          set_has_transaction_processing_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_resource_counters;
        break;
      }

      // optional .draiosproto.resource_categories resource_counters = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_syscall_errors;
        break;
      }

      // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscall_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscall_errors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_external_io_net;
        break;
      }

      // optional .draiosproto.counter_time_bytes external_io_net = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_external_io_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_external_io_net()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cpu_steal;
        break;
      }

      // repeated uint32 cpu_steal = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_steal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_cpu_steal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cpu_steal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cpu_steal;
        if (input->ExpectTag(98)) goto parse_reqcounters;
        break;
      }

      // optional .draiosproto.transaction_breakdown_categories reqcounters = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqcounters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqcounters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_next_tiers_delay;
        break;
      }

      // optional uint64 next_tiers_delay = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_tiers_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_tiers_delay_)));
          set_has_next_tiers_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_merged_server_delay;
        break;
      }

      // optional uint64 merged_server_delay = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merged_server_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &merged_server_delay_)));
          set_has_merged_server_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void host::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }

  // optional uint32 num_cpus = 2;
  if (has_num_cpus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_cpus(), output);
  }

  // repeated uint32 cpu_loads = 3;
  for (int i = 0; i < this->cpu_loads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->cpu_loads(i), output);
  }

  // required uint64 physical_memory_size_bytes = 4;
  if (has_physical_memory_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->physical_memory_size_bytes(), output);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tcounters(), output);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
  if (has_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->transaction_counters(), output);
  }

  // optional uint64 transaction_processing_delay = 7;
  if (has_transaction_processing_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->transaction_processing_delay(), output);
  }

  // optional .draiosproto.resource_categories resource_counters = 8;
  if (has_resource_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->resource_counters(), output);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
  if (has_syscall_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->syscall_errors(), output);
  }

  // optional .draiosproto.counter_time_bytes external_io_net = 10;
  if (has_external_io_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->external_io_net(), output);
  }

  // repeated uint32 cpu_steal = 11;
  for (int i = 0; i < this->cpu_steal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->cpu_steal(i), output);
  }

  // optional .draiosproto.transaction_breakdown_categories reqcounters = 12;
  if (has_reqcounters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->reqcounters(), output);
  }

  // optional uint64 next_tiers_delay = 13;
  if (has_next_tiers_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->next_tiers_delay(), output);
  }

  // optional uint64 merged_server_delay = 14;
  if (has_merged_server_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->merged_server_delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* host::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // optional uint32 num_cpus = 2;
  if (has_num_cpus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_cpus(), target);
  }

  // repeated uint32 cpu_loads = 3;
  for (int i = 0; i < this->cpu_loads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->cpu_loads(i), target);
  }

  // required uint64 physical_memory_size_bytes = 4;
  if (has_physical_memory_size_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->physical_memory_size_bytes(), target);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tcounters(), target);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
  if (has_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->transaction_counters(), target);
  }

  // optional uint64 transaction_processing_delay = 7;
  if (has_transaction_processing_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->transaction_processing_delay(), target);
  }

  // optional .draiosproto.resource_categories resource_counters = 8;
  if (has_resource_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->resource_counters(), target);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
  if (has_syscall_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->syscall_errors(), target);
  }

  // optional .draiosproto.counter_time_bytes external_io_net = 10;
  if (has_external_io_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->external_io_net(), target);
  }

  // repeated uint32 cpu_steal = 11;
  for (int i = 0; i < this->cpu_steal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->cpu_steal(i), target);
  }

  // optional .draiosproto.transaction_breakdown_categories reqcounters = 12;
  if (has_reqcounters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->reqcounters(), target);
  }

  // optional uint64 next_tiers_delay = 13;
  if (has_next_tiers_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->next_tiers_delay(), target);
  }

  // optional uint64 merged_server_delay = 14;
  if (has_merged_server_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->merged_server_delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int host::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional uint32 num_cpus = 2;
    if (has_num_cpus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_cpus());
    }

    // required uint64 physical_memory_size_bytes = 4;
    if (has_physical_memory_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->physical_memory_size_bytes());
    }

    // optional .draiosproto.time_categories tcounters = 5;
    if (has_tcounters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tcounters());
    }

    // optional .draiosproto.transaction_breakdown_categories reqcounters = 12;
    if (has_reqcounters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqcounters());
    }

    // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
    if (has_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_counters());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 transaction_processing_delay = 7;
    if (has_transaction_processing_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_processing_delay());
    }

    // optional uint64 merged_server_delay = 14;
    if (has_merged_server_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->merged_server_delay());
    }

    // optional uint64 next_tiers_delay = 13;
    if (has_next_tiers_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_tiers_delay());
    }

    // optional .draiosproto.resource_categories resource_counters = 8;
    if (has_resource_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_counters());
    }

    // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
    if (has_syscall_errors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscall_errors());
    }

    // optional .draiosproto.counter_time_bytes external_io_net = 10;
    if (has_external_io_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->external_io_net());
    }

  }
  // repeated uint32 cpu_loads = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cpu_loads_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cpu_loads(i));
    }
    total_size += 1 * this->cpu_loads_size() + data_size;
  }

  // repeated uint32 cpu_steal = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->cpu_steal_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cpu_steal(i));
    }
    total_size += 1 * this->cpu_steal_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void host::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const host* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const host*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void host::MergeFrom(const host& from) {
  GOOGLE_CHECK_NE(&from, this);
  cpu_loads_.MergeFrom(from.cpu_loads_);
  cpu_steal_.MergeFrom(from.cpu_steal_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_num_cpus()) {
      set_num_cpus(from.num_cpus());
    }
    if (from.has_physical_memory_size_bytes()) {
      set_physical_memory_size_bytes(from.physical_memory_size_bytes());
    }
    if (from.has_tcounters()) {
      mutable_tcounters()->::draiosproto::time_categories::MergeFrom(from.tcounters());
    }
    if (from.has_reqcounters()) {
      mutable_reqcounters()->::draiosproto::transaction_breakdown_categories::MergeFrom(from.reqcounters());
    }
    if (from.has_transaction_counters()) {
      mutable_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.transaction_counters());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transaction_processing_delay()) {
      set_transaction_processing_delay(from.transaction_processing_delay());
    }
    if (from.has_merged_server_delay()) {
      set_merged_server_delay(from.merged_server_delay());
    }
    if (from.has_next_tiers_delay()) {
      set_next_tiers_delay(from.next_tiers_delay());
    }
    if (from.has_resource_counters()) {
      mutable_resource_counters()->::draiosproto::resource_categories::MergeFrom(from.resource_counters());
    }
    if (from.has_syscall_errors()) {
      mutable_syscall_errors()->::draiosproto::counter_syscall_errors::MergeFrom(from.syscall_errors());
    }
    if (from.has_external_io_net()) {
      mutable_external_io_net()->::draiosproto::counter_time_bytes::MergeFrom(from.external_io_net());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void host::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void host::CopyFrom(const host& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool host::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  if (has_tcounters()) {
    if (!this->tcounters().IsInitialized()) return false;
  }
  if (has_reqcounters()) {
    if (!this->reqcounters().IsInitialized()) return false;
  }
  if (has_transaction_counters()) {
    if (!this->transaction_counters().IsInitialized()) return false;
  }
  if (has_syscall_errors()) {
    if (!this->syscall_errors().IsInitialized()) return false;
  }
  if (has_external_io_net()) {
    if (!this->external_io_net().IsInitialized()) return false;
  }
  return true;
}

void host::Swap(host* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(num_cpus_, other->num_cpus_);
    cpu_loads_.Swap(&other->cpu_loads_);
    cpu_steal_.Swap(&other->cpu_steal_);
    std::swap(physical_memory_size_bytes_, other->physical_memory_size_bytes_);
    std::swap(tcounters_, other->tcounters_);
    std::swap(reqcounters_, other->reqcounters_);
    std::swap(transaction_counters_, other->transaction_counters_);
    std::swap(transaction_processing_delay_, other->transaction_processing_delay_);
    std::swap(merged_server_delay_, other->merged_server_delay_);
    std::swap(next_tiers_delay_, other->next_tiers_delay_);
    std::swap(resource_counters_, other->resource_counters_);
    std::swap(syscall_errors_, other->syscall_errors_);
    std::swap(external_io_net_, other->external_io_net_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata host::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = host_descriptor_;
  metadata.reflection = host_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int thread::kPidFieldNumber;
const int thread::kTidFieldNumber;
const int thread::kTcountersFieldNumber;
const int thread::kTransactionCountersFieldNumber;
#endif  // !_MSC_VER

thread::thread()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void thread::InitAsDefaultInstance() {
  tcounters_ = const_cast< ::draiosproto::time_categories*>(&::draiosproto::time_categories::default_instance());
  transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
}

thread::thread(const thread& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void thread::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  tid_ = GOOGLE_ULONGLONG(0);
  tcounters_ = NULL;
  transaction_counters_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

thread::~thread() {
  SharedDtor();
}

void thread::SharedDtor() {
  if (this != default_instance_) {
    delete tcounters_;
    delete transaction_counters_;
  }
}

void thread::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* thread::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return thread_descriptor_;
}

const thread& thread::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

thread* thread::default_instance_ = NULL;

thread* thread::New() const {
  return new thread;
}

void thread::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_ULONGLONG(0);
    tid_ = GOOGLE_ULONGLONG(0);
    if (has_tcounters()) {
      if (tcounters_ != NULL) tcounters_->::draiosproto::time_categories::Clear();
    }
    if (has_transaction_counters()) {
      if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool thread::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tid;
        break;
      }

      // required uint64 tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tcounters;
        break;
      }

      // optional .draiosproto.time_categories tcounters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tcounters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcounters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional transaction_counters = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void thread::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // required uint64 tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tid(), output);
  }

  // optional .draiosproto.time_categories tcounters = 3;
  if (has_tcounters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tcounters(), output);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 5;
  if (has_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->transaction_counters(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* thread::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // required uint64 tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tid(), target);
  }

  // optional .draiosproto.time_categories tcounters = 3;
  if (has_tcounters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tcounters(), target);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 5;
  if (has_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->transaction_counters(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int thread::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // required uint64 tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tid());
    }

    // optional .draiosproto.time_categories tcounters = 3;
    if (has_tcounters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tcounters());
    }

    // optional .draiosproto.counter_time_bidirectional transaction_counters = 5;
    if (has_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_counters());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void thread::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const thread* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const thread*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void thread::MergeFrom(const thread& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_tcounters()) {
      mutable_tcounters()->::draiosproto::time_categories::MergeFrom(from.tcounters());
    }
    if (from.has_transaction_counters()) {
      mutable_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.transaction_counters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void thread::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void thread::CopyFrom(const thread& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool thread::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_tcounters()) {
    if (!this->tcounters().IsInitialized()) return false;
  }
  if (has_transaction_counters()) {
    if (!this->transaction_counters().IsInitialized()) return false;
  }
  return true;
}

void thread::Swap(thread* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(tid_, other->tid_);
    std::swap(tcounters_, other->tcounters_);
    std::swap(transaction_counters_, other->transaction_counters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata thread::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = thread_descriptor_;
  metadata.reflection = thread_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int process::kPidFieldNumber;
const int process::kDetailsFieldNumber;
const int process::kIsIpv4TransactionServerFieldNumber;
const int process::kIsUnixTransactionServerFieldNumber;
const int process::kIsIpv4TransactionClientFieldNumber;
const int process::kIsUnixTransactionClientFieldNumber;
const int process::kNetroleFieldNumber;
const int process::kTcountersFieldNumber;
const int process::kTransactionCountersFieldNumber;
const int process::kTransactionProcessingDelayFieldNumber;
const int process::kMergedServerDelayFieldNumber;
const int process::kNextTiersDelayFieldNumber;
const int process::kResourceCountersFieldNumber;
const int process::kSyscallErrorsFieldNumber;
#endif  // !_MSC_VER

process::process()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void process::InitAsDefaultInstance() {
  details_ = const_cast< ::draiosproto::process_details*>(&::draiosproto::process_details::default_instance());
  tcounters_ = const_cast< ::draiosproto::time_categories*>(&::draiosproto::time_categories::default_instance());
  transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(&::draiosproto::counter_time_bidirectional::default_instance());
  resource_counters_ = const_cast< ::draiosproto::resource_categories*>(&::draiosproto::resource_categories::default_instance());
  syscall_errors_ = const_cast< ::draiosproto::counter_syscall_errors*>(&::draiosproto::counter_syscall_errors::default_instance());
}

process::process(const process& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void process::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  details_ = NULL;
  is_ipv4_transaction_server_ = false;
  is_unix_transaction_server_ = false;
  is_ipv4_transaction_client_ = false;
  is_unix_transaction_client_ = false;
  netrole_ = 0u;
  tcounters_ = NULL;
  transaction_counters_ = NULL;
  transaction_processing_delay_ = GOOGLE_ULONGLONG(0);
  merged_server_delay_ = GOOGLE_ULONGLONG(0);
  next_tiers_delay_ = GOOGLE_ULONGLONG(0);
  resource_counters_ = NULL;
  syscall_errors_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

process::~process() {
  SharedDtor();
}

void process::SharedDtor() {
  if (this != default_instance_) {
    delete details_;
    delete tcounters_;
    delete transaction_counters_;
    delete resource_counters_;
    delete syscall_errors_;
  }
}

void process::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* process::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return process_descriptor_;
}

const process& process::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

process* process::default_instance_ = NULL;

process* process::New() const {
  return new process;
}

void process::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_ULONGLONG(0);
    if (has_details()) {
      if (details_ != NULL) details_->::draiosproto::process_details::Clear();
    }
    is_ipv4_transaction_server_ = false;
    is_unix_transaction_server_ = false;
    is_ipv4_transaction_client_ = false;
    is_unix_transaction_client_ = false;
    netrole_ = 0u;
    if (has_tcounters()) {
      if (tcounters_ != NULL) tcounters_->::draiosproto::time_categories::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_transaction_counters()) {
      if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    transaction_processing_delay_ = GOOGLE_ULONGLONG(0);
    merged_server_delay_ = GOOGLE_ULONGLONG(0);
    next_tiers_delay_ = GOOGLE_ULONGLONG(0);
    if (has_resource_counters()) {
      if (resource_counters_ != NULL) resource_counters_->::draiosproto::resource_categories::Clear();
    }
    if (has_syscall_errors()) {
      if (syscall_errors_ != NULL) syscall_errors_->::draiosproto::counter_syscall_errors::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool process::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_details;
        break;
      }

      // optional .draiosproto.process_details details = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_ipv4_transaction_server;
        break;
      }

      // optional bool is_ipv4_transaction_server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ipv4_transaction_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ipv4_transaction_server_)));
          set_has_is_ipv4_transaction_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_unix_transaction_server;
        break;
      }

      // optional bool is_unix_transaction_server = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_unix_transaction_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unix_transaction_server_)));
          set_has_is_unix_transaction_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tcounters;
        break;
      }

      // optional .draiosproto.time_categories tcounters = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tcounters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcounters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_transaction_processing_delay;
        break;
      }

      // optional uint64 transaction_processing_delay = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_processing_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_processing_delay_)));
          set_has_transaction_processing_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_resource_counters;
        break;
      }

      // optional .draiosproto.resource_categories resource_counters = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_syscall_errors;
        break;
      }

      // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscall_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscall_errors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_ipv4_transaction_client;
        break;
      }

      // optional bool is_ipv4_transaction_client = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ipv4_transaction_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ipv4_transaction_client_)));
          set_has_is_ipv4_transaction_client();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_unix_transaction_client;
        break;
      }

      // optional bool is_unix_transaction_client = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_unix_transaction_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unix_transaction_client_)));
          set_has_is_unix_transaction_client();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_next_tiers_delay;
        break;
      }

      // optional uint64 next_tiers_delay = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_tiers_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_tiers_delay_)));
          set_has_next_tiers_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_netrole;
        break;
      }

      // optional uint32 netrole = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_netrole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netrole_)));
          set_has_netrole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_merged_server_delay;
        break;
      }

      // optional uint64 merged_server_delay = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merged_server_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &merged_server_delay_)));
          set_has_merged_server_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void process::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // optional .draiosproto.process_details details = 2;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->details(), output);
  }

  // optional bool is_ipv4_transaction_server = 3;
  if (has_is_ipv4_transaction_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_ipv4_transaction_server(), output);
  }

  // optional bool is_unix_transaction_server = 4;
  if (has_is_unix_transaction_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_unix_transaction_server(), output);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tcounters(), output);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
  if (has_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->transaction_counters(), output);
  }

  // optional uint64 transaction_processing_delay = 7;
  if (has_transaction_processing_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->transaction_processing_delay(), output);
  }

  // optional .draiosproto.resource_categories resource_counters = 8;
  if (has_resource_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->resource_counters(), output);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
  if (has_syscall_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->syscall_errors(), output);
  }

  // optional bool is_ipv4_transaction_client = 10;
  if (has_is_ipv4_transaction_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_ipv4_transaction_client(), output);
  }

  // optional bool is_unix_transaction_client = 11;
  if (has_is_unix_transaction_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_unix_transaction_client(), output);
  }

  // optional uint64 next_tiers_delay = 12;
  if (has_next_tiers_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->next_tiers_delay(), output);
  }

  // optional uint32 netrole = 13;
  if (has_netrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->netrole(), output);
  }

  // optional uint64 merged_server_delay = 14;
  if (has_merged_server_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->merged_server_delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* process::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // optional .draiosproto.process_details details = 2;
  if (has_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->details(), target);
  }

  // optional bool is_ipv4_transaction_server = 3;
  if (has_is_ipv4_transaction_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_ipv4_transaction_server(), target);
  }

  // optional bool is_unix_transaction_server = 4;
  if (has_is_unix_transaction_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_unix_transaction_server(), target);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tcounters(), target);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
  if (has_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->transaction_counters(), target);
  }

  // optional uint64 transaction_processing_delay = 7;
  if (has_transaction_processing_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->transaction_processing_delay(), target);
  }

  // optional .draiosproto.resource_categories resource_counters = 8;
  if (has_resource_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->resource_counters(), target);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
  if (has_syscall_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->syscall_errors(), target);
  }

  // optional bool is_ipv4_transaction_client = 10;
  if (has_is_ipv4_transaction_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_ipv4_transaction_client(), target);
  }

  // optional bool is_unix_transaction_client = 11;
  if (has_is_unix_transaction_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_unix_transaction_client(), target);
  }

  // optional uint64 next_tiers_delay = 12;
  if (has_next_tiers_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->next_tiers_delay(), target);
  }

  // optional uint32 netrole = 13;
  if (has_netrole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->netrole(), target);
  }

  // optional uint64 merged_server_delay = 14;
  if (has_merged_server_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->merged_server_delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int process::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional .draiosproto.process_details details = 2;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details());
    }

    // optional bool is_ipv4_transaction_server = 3;
    if (has_is_ipv4_transaction_server()) {
      total_size += 1 + 1;
    }

    // optional bool is_unix_transaction_server = 4;
    if (has_is_unix_transaction_server()) {
      total_size += 1 + 1;
    }

    // optional bool is_ipv4_transaction_client = 10;
    if (has_is_ipv4_transaction_client()) {
      total_size += 1 + 1;
    }

    // optional bool is_unix_transaction_client = 11;
    if (has_is_unix_transaction_client()) {
      total_size += 1 + 1;
    }

    // optional uint32 netrole = 13;
    if (has_netrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netrole());
    }

    // optional .draiosproto.time_categories tcounters = 5;
    if (has_tcounters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tcounters());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
    if (has_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_counters());
    }

    // optional uint64 transaction_processing_delay = 7;
    if (has_transaction_processing_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_processing_delay());
    }

    // optional uint64 merged_server_delay = 14;
    if (has_merged_server_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->merged_server_delay());
    }

    // optional uint64 next_tiers_delay = 12;
    if (has_next_tiers_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_tiers_delay());
    }

    // optional .draiosproto.resource_categories resource_counters = 8;
    if (has_resource_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_counters());
    }

    // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
    if (has_syscall_errors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscall_errors());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void process::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const process* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const process*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void process::MergeFrom(const process& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_details()) {
      mutable_details()->::draiosproto::process_details::MergeFrom(from.details());
    }
    if (from.has_is_ipv4_transaction_server()) {
      set_is_ipv4_transaction_server(from.is_ipv4_transaction_server());
    }
    if (from.has_is_unix_transaction_server()) {
      set_is_unix_transaction_server(from.is_unix_transaction_server());
    }
    if (from.has_is_ipv4_transaction_client()) {
      set_is_ipv4_transaction_client(from.is_ipv4_transaction_client());
    }
    if (from.has_is_unix_transaction_client()) {
      set_is_unix_transaction_client(from.is_unix_transaction_client());
    }
    if (from.has_netrole()) {
      set_netrole(from.netrole());
    }
    if (from.has_tcounters()) {
      mutable_tcounters()->::draiosproto::time_categories::MergeFrom(from.tcounters());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transaction_counters()) {
      mutable_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.transaction_counters());
    }
    if (from.has_transaction_processing_delay()) {
      set_transaction_processing_delay(from.transaction_processing_delay());
    }
    if (from.has_merged_server_delay()) {
      set_merged_server_delay(from.merged_server_delay());
    }
    if (from.has_next_tiers_delay()) {
      set_next_tiers_delay(from.next_tiers_delay());
    }
    if (from.has_resource_counters()) {
      mutable_resource_counters()->::draiosproto::resource_categories::MergeFrom(from.resource_counters());
    }
    if (from.has_syscall_errors()) {
      mutable_syscall_errors()->::draiosproto::counter_syscall_errors::MergeFrom(from.syscall_errors());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void process::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void process::CopyFrom(const process& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool process::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_details()) {
    if (!this->details().IsInitialized()) return false;
  }
  if (has_tcounters()) {
    if (!this->tcounters().IsInitialized()) return false;
  }
  if (has_transaction_counters()) {
    if (!this->transaction_counters().IsInitialized()) return false;
  }
  if (has_syscall_errors()) {
    if (!this->syscall_errors().IsInitialized()) return false;
  }
  return true;
}

void process::Swap(process* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(details_, other->details_);
    std::swap(is_ipv4_transaction_server_, other->is_ipv4_transaction_server_);
    std::swap(is_unix_transaction_server_, other->is_unix_transaction_server_);
    std::swap(is_ipv4_transaction_client_, other->is_ipv4_transaction_client_);
    std::swap(is_unix_transaction_client_, other->is_unix_transaction_client_);
    std::swap(netrole_, other->netrole_);
    std::swap(tcounters_, other->tcounters_);
    std::swap(transaction_counters_, other->transaction_counters_);
    std::swap(transaction_processing_delay_, other->transaction_processing_delay_);
    std::swap(merged_server_delay_, other->merged_server_delay_);
    std::swap(next_tiers_delay_, other->next_tiers_delay_);
    std::swap(resource_counters_, other->resource_counters_);
    std::swap(syscall_errors_, other->syscall_errors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata process::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = process_descriptor_;
  metadata.reflection = process_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int program::kProcinfoFieldNumber;
const int program::kPidsFieldNumber;
#endif  // !_MSC_VER

program::program()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void program::InitAsDefaultInstance() {
  procinfo_ = const_cast< ::draiosproto::process*>(&::draiosproto::process::default_instance());
}

program::program(const program& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void program::SharedCtor() {
  _cached_size_ = 0;
  procinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

program::~program() {
  SharedDtor();
}

void program::SharedDtor() {
  if (this != default_instance_) {
    delete procinfo_;
  }
}

void program::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* program::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return program_descriptor_;
}

const program& program::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

program* program::default_instance_ = NULL;

program* program::New() const {
  return new program;
}

void program::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_procinfo()) {
      if (procinfo_ != NULL) procinfo_->::draiosproto::process::Clear();
    }
  }
  pids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool program::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.process procinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_procinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pids;
        break;
      }

      // repeated uint64 pids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_pids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void program::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.process procinfo = 1;
  if (has_procinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->procinfo(), output);
  }

  // repeated uint64 pids = 2;
  for (int i = 0; i < this->pids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->pids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* program::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.process procinfo = 1;
  if (has_procinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->procinfo(), target);
  }

  // repeated uint64 pids = 2;
  for (int i = 0; i < this->pids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->pids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int program::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.process procinfo = 1;
    if (has_procinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->procinfo());
    }

  }
  // repeated uint64 pids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->pids(i));
    }
    total_size += 1 * this->pids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void program::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const program* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const program*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void program::MergeFrom(const program& from) {
  GOOGLE_CHECK_NE(&from, this);
  pids_.MergeFrom(from.pids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_procinfo()) {
      mutable_procinfo()->::draiosproto::process::MergeFrom(from.procinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void program::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void program::CopyFrom(const program& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool program::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_procinfo()) {
    if (!this->procinfo().IsInitialized()) return false;
  }
  return true;
}

void program::Swap(program* other) {
  if (other != this) {
    std::swap(procinfo_, other->procinfo_);
    pids_.Swap(&other->pids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata program::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = program_descriptor_;
  metadata.reflection = program_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ipv4tuple::kSipFieldNumber;
const int ipv4tuple::kDipFieldNumber;
const int ipv4tuple::kSportFieldNumber;
const int ipv4tuple::kDportFieldNumber;
const int ipv4tuple::kL4ProtoFieldNumber;
#endif  // !_MSC_VER

ipv4tuple::ipv4tuple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ipv4tuple::InitAsDefaultInstance() {
}

ipv4tuple::ipv4tuple(const ipv4tuple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ipv4tuple::SharedCtor() {
  _cached_size_ = 0;
  sip_ = 0u;
  dip_ = 0u;
  sport_ = 0u;
  dport_ = 0u;
  l4proto_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ipv4tuple::~ipv4tuple() {
  SharedDtor();
}

void ipv4tuple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ipv4tuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv4tuple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ipv4tuple_descriptor_;
}

const ipv4tuple& ipv4tuple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

ipv4tuple* ipv4tuple::default_instance_ = NULL;

ipv4tuple* ipv4tuple::New() const {
  return new ipv4tuple;
}

void ipv4tuple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sip_ = 0u;
    dip_ = 0u;
    sport_ = 0u;
    dport_ = 0u;
    l4proto_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ipv4tuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sip_)));
          set_has_sip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dip;
        break;
      }

      // required uint32 dip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dip_)));
          set_has_dip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sport;
        break;
      }

      // required uint32 sport = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sport_)));
          set_has_sport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dport;
        break;
      }

      // required uint32 dport = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dport_)));
          set_has_dport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_l4proto;
        break;
      }

      // required uint32 l4proto = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_l4proto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &l4proto_)));
          set_has_l4proto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ipv4tuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sip = 1;
  if (has_sip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sip(), output);
  }

  // required uint32 dip = 2;
  if (has_dip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dip(), output);
  }

  // required uint32 sport = 3;
  if (has_sport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sport(), output);
  }

  // required uint32 dport = 4;
  if (has_dport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dport(), output);
  }

  // required uint32 l4proto = 5;
  if (has_l4proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->l4proto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ipv4tuple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sip = 1;
  if (has_sip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sip(), target);
  }

  // required uint32 dip = 2;
  if (has_dip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dip(), target);
  }

  // required uint32 sport = 3;
  if (has_sport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sport(), target);
  }

  // required uint32 dport = 4;
  if (has_dport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dport(), target);
  }

  // required uint32 l4proto = 5;
  if (has_l4proto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->l4proto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ipv4tuple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sip = 1;
    if (has_sip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sip());
    }

    // required uint32 dip = 2;
    if (has_dip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dip());
    }

    // required uint32 sport = 3;
    if (has_sport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sport());
    }

    // required uint32 dport = 4;
    if (has_dport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dport());
    }

    // required uint32 l4proto = 5;
    if (has_l4proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->l4proto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv4tuple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ipv4tuple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ipv4tuple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ipv4tuple::MergeFrom(const ipv4tuple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sip()) {
      set_sip(from.sip());
    }
    if (from.has_dip()) {
      set_dip(from.dip());
    }
    if (from.has_sport()) {
      set_sport(from.sport());
    }
    if (from.has_dport()) {
      set_dport(from.dport());
    }
    if (from.has_l4proto()) {
      set_l4proto(from.l4proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ipv4tuple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv4tuple::CopyFrom(const ipv4tuple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv4tuple::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ipv4tuple::Swap(ipv4tuple* other) {
  if (other != this) {
    std::swap(sip_, other->sip_);
    std::swap(dip_, other->dip_);
    std::swap(sport_, other->sport_);
    std::swap(dport_, other->dport_);
    std::swap(l4proto_, other->l4proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ipv4tuple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ipv4tuple_descriptor_;
  metadata.reflection = ipv4tuple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ipv4_connection::kTupleFieldNumber;
const int ipv4_connection::kSpidFieldNumber;
const int ipv4_connection::kStidFieldNumber;
const int ipv4_connection::kDpidFieldNumber;
const int ipv4_connection::kDtidFieldNumber;
const int ipv4_connection::kCountersFieldNumber;
#endif  // !_MSC_VER

ipv4_connection::ipv4_connection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ipv4_connection::InitAsDefaultInstance() {
  tuple_ = const_cast< ::draiosproto::ipv4tuple*>(&::draiosproto::ipv4tuple::default_instance());
  counters_ = const_cast< ::draiosproto::connection_categories*>(&::draiosproto::connection_categories::default_instance());
}

ipv4_connection::ipv4_connection(const ipv4_connection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ipv4_connection::SharedCtor() {
  _cached_size_ = 0;
  tuple_ = NULL;
  spid_ = GOOGLE_ULONGLONG(0);
  stid_ = GOOGLE_ULONGLONG(0);
  dpid_ = GOOGLE_ULONGLONG(0);
  dtid_ = GOOGLE_ULONGLONG(0);
  counters_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ipv4_connection::~ipv4_connection() {
  SharedDtor();
}

void ipv4_connection::SharedDtor() {
  if (this != default_instance_) {
    delete tuple_;
    delete counters_;
  }
}

void ipv4_connection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv4_connection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ipv4_connection_descriptor_;
}

const ipv4_connection& ipv4_connection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

ipv4_connection* ipv4_connection::default_instance_ = NULL;

ipv4_connection* ipv4_connection::New() const {
  return new ipv4_connection;
}

void ipv4_connection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tuple()) {
      if (tuple_ != NULL) tuple_->::draiosproto::ipv4tuple::Clear();
    }
    spid_ = GOOGLE_ULONGLONG(0);
    stid_ = GOOGLE_ULONGLONG(0);
    dpid_ = GOOGLE_ULONGLONG(0);
    dtid_ = GOOGLE_ULONGLONG(0);
    if (has_counters()) {
      if (counters_ != NULL) counters_->::draiosproto::connection_categories::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ipv4_connection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.ipv4tuple tuple = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_spid;
        break;
      }

      // optional uint64 spid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &spid_)));
          set_has_spid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stid;
        break;
      }

      // optional uint64 stid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stid_)));
          set_has_stid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dpid;
        break;
      }

      // optional uint64 dpid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dpid_)));
          set_has_dpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dtid;
        break;
      }

      // optional uint64 dtid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dtid_)));
          set_has_dtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_counters;
        break;
      }

      // required .draiosproto.connection_categories counters = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ipv4_connection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .draiosproto.ipv4tuple tuple = 1;
  if (has_tuple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tuple(), output);
  }

  // optional uint64 spid = 2;
  if (has_spid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->spid(), output);
  }

  // optional uint64 stid = 3;
  if (has_stid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->stid(), output);
  }

  // optional uint64 dpid = 5;
  if (has_dpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dpid(), output);
  }

  // optional uint64 dtid = 6;
  if (has_dtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->dtid(), output);
  }

  // required .draiosproto.connection_categories counters = 8;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->counters(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ipv4_connection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .draiosproto.ipv4tuple tuple = 1;
  if (has_tuple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tuple(), target);
  }

  // optional uint64 spid = 2;
  if (has_spid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->spid(), target);
  }

  // optional uint64 stid = 3;
  if (has_stid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->stid(), target);
  }

  // optional uint64 dpid = 5;
  if (has_dpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->dpid(), target);
  }

  // optional uint64 dtid = 6;
  if (has_dtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->dtid(), target);
  }

  // required .draiosproto.connection_categories counters = 8;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->counters(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ipv4_connection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .draiosproto.ipv4tuple tuple = 1;
    if (has_tuple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuple());
    }

    // optional uint64 spid = 2;
    if (has_spid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->spid());
    }

    // optional uint64 stid = 3;
    if (has_stid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stid());
    }

    // optional uint64 dpid = 5;
    if (has_dpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dpid());
    }

    // optional uint64 dtid = 6;
    if (has_dtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dtid());
    }

    // required .draiosproto.connection_categories counters = 8;
    if (has_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counters());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv4_connection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ipv4_connection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ipv4_connection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ipv4_connection::MergeFrom(const ipv4_connection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tuple()) {
      mutable_tuple()->::draiosproto::ipv4tuple::MergeFrom(from.tuple());
    }
    if (from.has_spid()) {
      set_spid(from.spid());
    }
    if (from.has_stid()) {
      set_stid(from.stid());
    }
    if (from.has_dpid()) {
      set_dpid(from.dpid());
    }
    if (from.has_dtid()) {
      set_dtid(from.dtid());
    }
    if (from.has_counters()) {
      mutable_counters()->::draiosproto::connection_categories::MergeFrom(from.counters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ipv4_connection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv4_connection::CopyFrom(const ipv4_connection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv4_connection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;

  if (has_tuple()) {
    if (!this->tuple().IsInitialized()) return false;
  }
  if (has_counters()) {
    if (!this->counters().IsInitialized()) return false;
  }
  return true;
}

void ipv4_connection::Swap(ipv4_connection* other) {
  if (other != this) {
    std::swap(tuple_, other->tuple_);
    std::swap(spid_, other->spid_);
    std::swap(stid_, other->stid_);
    std::swap(dpid_, other->dpid_);
    std::swap(dtid_, other->dtid_);
    std::swap(counters_, other->counters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ipv4_connection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ipv4_connection_descriptor_;
  metadata.reflection = ipv4_connection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ipv4_network_interface::kNameFieldNumber;
const int ipv4_network_interface::kAddrFieldNumber;
const int ipv4_network_interface::kNetmaskFieldNumber;
const int ipv4_network_interface::kBcastFieldNumber;
#endif  // !_MSC_VER

ipv4_network_interface::ipv4_network_interface()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ipv4_network_interface::InitAsDefaultInstance() {
}

ipv4_network_interface::ipv4_network_interface(const ipv4_network_interface& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ipv4_network_interface::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addr_ = 0u;
  netmask_ = 0u;
  bcast_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ipv4_network_interface::~ipv4_network_interface() {
  SharedDtor();
}

void ipv4_network_interface::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ipv4_network_interface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv4_network_interface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ipv4_network_interface_descriptor_;
}

const ipv4_network_interface& ipv4_network_interface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

ipv4_network_interface* ipv4_network_interface::default_instance_ = NULL;

ipv4_network_interface* ipv4_network_interface::New() const {
  return new ipv4_network_interface;
}

void ipv4_network_interface::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    addr_ = 0u;
    netmask_ = 0u;
    bcast_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ipv4_network_interface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addr;
        break;
      }

      // required uint32 addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_netmask;
        break;
      }

      // required uint32 netmask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_netmask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmask_)));
          set_has_netmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bcast;
        break;
      }

      // optional uint32 bcast = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bcast_)));
          set_has_bcast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ipv4_network_interface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 addr = 2;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->addr(), output);
  }

  // required uint32 netmask = 3;
  if (has_netmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmask(), output);
  }

  // optional uint32 bcast = 4;
  if (has_bcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bcast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ipv4_network_interface::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 addr = 2;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->addr(), target);
  }

  // required uint32 netmask = 3;
  if (has_netmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmask(), target);
  }

  // optional uint32 bcast = 4;
  if (has_bcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bcast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ipv4_network_interface::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 addr = 2;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addr());
    }

    // required uint32 netmask = 3;
    if (has_netmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmask());
    }

    // optional uint32 bcast = 4;
    if (has_bcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bcast());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv4_network_interface::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ipv4_network_interface* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ipv4_network_interface*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ipv4_network_interface::MergeFrom(const ipv4_network_interface& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_netmask()) {
      set_netmask(from.netmask());
    }
    if (from.has_bcast()) {
      set_bcast(from.bcast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ipv4_network_interface::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv4_network_interface::CopyFrom(const ipv4_network_interface& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv4_network_interface::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ipv4_network_interface::Swap(ipv4_network_interface* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(addr_, other->addr_);
    std::swap(netmask_, other->netmask_);
    std::swap(bcast_, other->bcast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ipv4_network_interface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ipv4_network_interface_descriptor_;
  metadata.reflection = ipv4_network_interface_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int metrics::kTimestampNsFieldNumber;
const int metrics::kMachineIdFieldNumber;
const int metrics::kCustomerIdFieldNumber;
const int metrics::kHostinfoFieldNumber;
const int metrics::kProgramsFieldNumber;
const int metrics::kProcessesFieldNumber;
const int metrics::kThreadsFieldNumber;
const int metrics::kIpv4ConnectionsFieldNumber;
const int metrics::kIpv4NetworkInterfacesFieldNumber;
const int metrics::kSamplingRatioFieldNumber;
const int metrics::kHostCustomNameFieldNumber;
const int metrics::kHostTagsFieldNumber;
const int metrics::kHostCustomMapFieldNumber;
const int metrics::kIsHostHiddenFieldNumber;
const int metrics::kHiddenProcessesFieldNumber;
const int metrics::kVersionFieldNumber;
#endif  // !_MSC_VER

metrics::metrics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void metrics::InitAsDefaultInstance() {
  hostinfo_ = const_cast< ::draiosproto::host*>(&::draiosproto::host::default_instance());
}

metrics::metrics(const metrics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void metrics::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostinfo_ = NULL;
  sampling_ratio_ = 0u;
  host_custom_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_tags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_custom_map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_host_hidden_ = false;
  hidden_processes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

metrics::~metrics() {
  SharedDtor();
}

void metrics::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (host_custom_name_ != &::google::protobuf::internal::kEmptyString) {
    delete host_custom_name_;
  }
  if (host_tags_ != &::google::protobuf::internal::kEmptyString) {
    delete host_tags_;
  }
  if (host_custom_map_ != &::google::protobuf::internal::kEmptyString) {
    delete host_custom_map_;
  }
  if (hidden_processes_ != &::google::protobuf::internal::kEmptyString) {
    delete hidden_processes_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete hostinfo_;
  }
}

void metrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* metrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return metrics_descriptor_;
}

const metrics& metrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

metrics* metrics::default_instance_ = NULL;

metrics* metrics::New() const {
  return new metrics;
}

void metrics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
    if (has_hostinfo()) {
      if (hostinfo_ != NULL) hostinfo_->::draiosproto::host::Clear();
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    sampling_ratio_ = 0u;
    if (has_host_custom_name()) {
      if (host_custom_name_ != &::google::protobuf::internal::kEmptyString) {
        host_custom_name_->clear();
      }
    }
    if (has_host_tags()) {
      if (host_tags_ != &::google::protobuf::internal::kEmptyString) {
        host_tags_->clear();
      }
    }
    if (has_host_custom_map()) {
      if (host_custom_map_ != &::google::protobuf::internal::kEmptyString) {
        host_custom_map_->clear();
      }
    }
    is_host_hidden_ = false;
    if (has_hidden_processes()) {
      if (hidden_processes_ != &::google::protobuf::internal::kEmptyString) {
        hidden_processes_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  programs_.Clear();
  processes_.Clear();
  threads_.Clear();
  ipv4_connections_.Clear();
  ipv4_network_interfaces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool metrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hostinfo;
        break;
      }

      // required .draiosproto.host hostinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hostinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_processes;
        break;
      }

      // repeated .draiosproto.process processes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_processes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_processes;
        if (input->ExpectTag(50)) goto parse_threads;
        break;
      }

      // repeated .draiosproto.thread threads = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_threads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_threads()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_threads;
        if (input->ExpectTag(58)) goto parse_ipv4_connections;
        break;
      }

      // repeated .draiosproto.ipv4_connection ipv4_connections = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv4_connections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ipv4_connections()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ipv4_connections;
        if (input->ExpectTag(66)) goto parse_ipv4_network_interfaces;
        break;
      }

      // repeated .draiosproto.ipv4_network_interface ipv4_network_interfaces = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv4_network_interfaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ipv4_network_interfaces()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ipv4_network_interfaces;
        if (input->ExpectTag(74)) goto parse_programs;
        break;
      }

      // repeated .draiosproto.program programs = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_programs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_programs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_programs;
        if (input->ExpectTag(80)) goto parse_sampling_ratio;
        break;
      }

      // optional uint32 sampling_ratio = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sampling_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sampling_ratio_)));
          set_has_sampling_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_host_custom_name;
        break;
      }

      // optional string host_custom_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_custom_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_custom_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_custom_name().data(), this->host_custom_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_host_tags;
        break;
      }

      // optional string host_tags = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_tags().data(), this->host_tags().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_host_custom_map;
        break;
      }

      // optional string host_custom_map = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_custom_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_custom_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_custom_map().data(), this->host_custom_map().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_is_host_hidden;
        break;
      }

      // optional bool is_host_hidden = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_host_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_host_hidden_)));
          set_has_is_host_hidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_hidden_processes;
        break;
      }

      // optional string hidden_processes = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hidden_processes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hidden_processes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hidden_processes().data(), this->hidden_processes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_version;
        break;
      }

      // optional string version = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void metrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  // required .draiosproto.host hostinfo = 4;
  if (has_hostinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hostinfo(), output);
  }

  // repeated .draiosproto.process processes = 5;
  for (int i = 0; i < this->processes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->processes(i), output);
  }

  // repeated .draiosproto.thread threads = 6;
  for (int i = 0; i < this->threads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->threads(i), output);
  }

  // repeated .draiosproto.ipv4_connection ipv4_connections = 7;
  for (int i = 0; i < this->ipv4_connections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ipv4_connections(i), output);
  }

  // repeated .draiosproto.ipv4_network_interface ipv4_network_interfaces = 8;
  for (int i = 0; i < this->ipv4_network_interfaces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ipv4_network_interfaces(i), output);
  }

  // repeated .draiosproto.program programs = 9;
  for (int i = 0; i < this->programs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->programs(i), output);
  }

  // optional uint32 sampling_ratio = 10;
  if (has_sampling_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sampling_ratio(), output);
  }

  // optional string host_custom_name = 11;
  if (has_host_custom_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_custom_name().data(), this->host_custom_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->host_custom_name(), output);
  }

  // optional string host_tags = 12;
  if (has_host_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_tags().data(), this->host_tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->host_tags(), output);
  }

  // optional string host_custom_map = 13;
  if (has_host_custom_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_custom_map().data(), this->host_custom_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->host_custom_map(), output);
  }

  // optional bool is_host_hidden = 14;
  if (has_is_host_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_host_hidden(), output);
  }

  // optional string hidden_processes = 15;
  if (has_hidden_processes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hidden_processes().data(), this->hidden_processes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->hidden_processes(), output);
  }

  // optional string version = 16;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* metrics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // required .draiosproto.host hostinfo = 4;
  if (has_hostinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hostinfo(), target);
  }

  // repeated .draiosproto.process processes = 5;
  for (int i = 0; i < this->processes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->processes(i), target);
  }

  // repeated .draiosproto.thread threads = 6;
  for (int i = 0; i < this->threads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->threads(i), target);
  }

  // repeated .draiosproto.ipv4_connection ipv4_connections = 7;
  for (int i = 0; i < this->ipv4_connections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ipv4_connections(i), target);
  }

  // repeated .draiosproto.ipv4_network_interface ipv4_network_interfaces = 8;
  for (int i = 0; i < this->ipv4_network_interfaces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ipv4_network_interfaces(i), target);
  }

  // repeated .draiosproto.program programs = 9;
  for (int i = 0; i < this->programs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->programs(i), target);
  }

  // optional uint32 sampling_ratio = 10;
  if (has_sampling_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sampling_ratio(), target);
  }

  // optional string host_custom_name = 11;
  if (has_host_custom_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_custom_name().data(), this->host_custom_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->host_custom_name(), target);
  }

  // optional string host_tags = 12;
  if (has_host_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_tags().data(), this->host_tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->host_tags(), target);
  }

  // optional string host_custom_map = 13;
  if (has_host_custom_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_custom_map().data(), this->host_custom_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->host_custom_map(), target);
  }

  // optional bool is_host_hidden = 14;
  if (has_is_host_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_host_hidden(), target);
  }

  // optional string hidden_processes = 15;
  if (has_hidden_processes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hidden_processes().data(), this->hidden_processes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->hidden_processes(), target);
  }

  // optional string version = 16;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int metrics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // required .draiosproto.host hostinfo = 4;
    if (has_hostinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hostinfo());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 sampling_ratio = 10;
    if (has_sampling_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sampling_ratio());
    }

    // optional string host_custom_name = 11;
    if (has_host_custom_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_custom_name());
    }

    // optional string host_tags = 12;
    if (has_host_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_tags());
    }

    // optional string host_custom_map = 13;
    if (has_host_custom_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_custom_map());
    }

    // optional bool is_host_hidden = 14;
    if (has_is_host_hidden()) {
      total_size += 1 + 1;
    }

    // optional string hidden_processes = 15;
    if (has_hidden_processes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hidden_processes());
    }

    // optional string version = 16;
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  // repeated .draiosproto.program programs = 9;
  total_size += 1 * this->programs_size();
  for (int i = 0; i < this->programs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->programs(i));
  }

  // repeated .draiosproto.process processes = 5;
  total_size += 1 * this->processes_size();
  for (int i = 0; i < this->processes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->processes(i));
  }

  // repeated .draiosproto.thread threads = 6;
  total_size += 1 * this->threads_size();
  for (int i = 0; i < this->threads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->threads(i));
  }

  // repeated .draiosproto.ipv4_connection ipv4_connections = 7;
  total_size += 1 * this->ipv4_connections_size();
  for (int i = 0; i < this->ipv4_connections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ipv4_connections(i));
  }

  // repeated .draiosproto.ipv4_network_interface ipv4_network_interfaces = 8;
  total_size += 1 * this->ipv4_network_interfaces_size();
  for (int i = 0; i < this->ipv4_network_interfaces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ipv4_network_interfaces(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void metrics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const metrics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const metrics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void metrics::MergeFrom(const metrics& from) {
  GOOGLE_CHECK_NE(&from, this);
  programs_.MergeFrom(from.programs_);
  processes_.MergeFrom(from.processes_);
  threads_.MergeFrom(from.threads_);
  ipv4_connections_.MergeFrom(from.ipv4_connections_);
  ipv4_network_interfaces_.MergeFrom(from.ipv4_network_interfaces_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_hostinfo()) {
      mutable_hostinfo()->::draiosproto::host::MergeFrom(from.hostinfo());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_sampling_ratio()) {
      set_sampling_ratio(from.sampling_ratio());
    }
    if (from.has_host_custom_name()) {
      set_host_custom_name(from.host_custom_name());
    }
    if (from.has_host_tags()) {
      set_host_tags(from.host_tags());
    }
    if (from.has_host_custom_map()) {
      set_host_custom_map(from.host_custom_map());
    }
    if (from.has_is_host_hidden()) {
      set_is_host_hidden(from.is_host_hidden());
    }
    if (from.has_hidden_processes()) {
      set_hidden_processes(from.hidden_processes());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void metrics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void metrics::CopyFrom(const metrics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool metrics::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_hostinfo()) {
    if (!this->hostinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < programs_size(); i++) {
    if (!this->programs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < processes_size(); i++) {
    if (!this->processes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < threads_size(); i++) {
    if (!this->threads(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ipv4_connections_size(); i++) {
    if (!this->ipv4_connections(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ipv4_network_interfaces_size(); i++) {
    if (!this->ipv4_network_interfaces(i).IsInitialized()) return false;
  }
  return true;
}

void metrics::Swap(metrics* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(hostinfo_, other->hostinfo_);
    programs_.Swap(&other->programs_);
    processes_.Swap(&other->processes_);
    threads_.Swap(&other->threads_);
    ipv4_connections_.Swap(&other->ipv4_connections_);
    ipv4_network_interfaces_.Swap(&other->ipv4_network_interfaces_);
    std::swap(sampling_ratio_, other->sampling_ratio_);
    std::swap(host_custom_name_, other->host_custom_name_);
    std::swap(host_tags_, other->host_tags_);
    std::swap(host_custom_map_, other->host_custom_map_);
    std::swap(is_host_hidden_, other->is_host_hidden_);
    std::swap(hidden_processes_, other->hidden_processes_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata metrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = metrics_descriptor_;
  metadata.reflection = metrics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dump_request::kTimestampNsFieldNumber;
const int dump_request::kMachineIdFieldNumber;
const int dump_request::kCustomerIdFieldNumber;
const int dump_request::kDurationNsFieldNumber;
const int dump_request::kFiltersFieldNumber;
#endif  // !_MSC_VER

dump_request::dump_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dump_request::InitAsDefaultInstance() {
}

dump_request::dump_request(const dump_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dump_request::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_ns_ = GOOGLE_ULONGLONG(0);
  filters_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dump_request::~dump_request() {
  SharedDtor();
}

void dump_request::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (filters_ != &::google::protobuf::internal::kEmptyString) {
    delete filters_;
  }
  if (this != default_instance_) {
  }
}

void dump_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dump_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dump_request_descriptor_;
}

const dump_request& dump_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

dump_request* dump_request::default_instance_ = NULL;

dump_request* dump_request::New() const {
  return new dump_request;
}

void dump_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
    duration_ns_ = GOOGLE_ULONGLONG(0);
    if (has_filters()) {
      if (filters_ != &::google::protobuf::internal::kEmptyString) {
        filters_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dump_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_duration_ns;
        break;
      }

      // required uint64 duration_ns = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_ns_)));
          set_has_duration_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filters;
        break;
      }

      // optional string filters = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filters().data(), this->filters().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dump_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  // required uint64 duration_ns = 4;
  if (has_duration_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->duration_ns(), output);
  }

  // optional string filters = 5;
  if (has_filters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters().data(), this->filters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->filters(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dump_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // required uint64 duration_ns = 4;
  if (has_duration_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->duration_ns(), target);
  }

  // optional string filters = 5;
  if (has_filters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters().data(), this->filters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filters(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dump_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // required uint64 duration_ns = 4;
    if (has_duration_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duration_ns());
    }

    // optional string filters = 5;
    if (has_filters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filters());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dump_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dump_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dump_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dump_request::MergeFrom(const dump_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_duration_ns()) {
      set_duration_ns(from.duration_ns());
    }
    if (from.has_filters()) {
      set_filters(from.filters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dump_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dump_request::CopyFrom(const dump_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dump_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void dump_request::Swap(dump_request* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(duration_ns_, other->duration_ns_);
    std::swap(filters_, other->filters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dump_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dump_request_descriptor_;
  metadata.reflection = dump_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dump_response::kTimestampNsFieldNumber;
const int dump_response::kMachineIdFieldNumber;
const int dump_response::kCustomerIdFieldNumber;
const int dump_response::kContentFieldNumber;
const int dump_response::kErrorFieldNumber;
#endif  // !_MSC_VER

dump_response::dump_response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dump_response::InitAsDefaultInstance() {
}

dump_response::dump_response(const dump_response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dump_response::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dump_response::~dump_response() {
  SharedDtor();
}

void dump_response::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void dump_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dump_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dump_response_descriptor_;
}

const dump_response& dump_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

dump_response* dump_response::default_instance_ = NULL;

dump_response* dump_response::New() const {
  return new dump_response;
}

void dump_response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dump_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }

      // optional string error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dump_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  // optional bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->content(), output);
  }

  // optional string error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dump_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // optional bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // optional string error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dump_response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional string error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dump_response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dump_response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dump_response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dump_response::MergeFrom(const dump_response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dump_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dump_response::CopyFrom(const dump_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dump_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void dump_response::Swap(dump_response* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(content_, other->content_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dump_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dump_response_descriptor_;
  metadata.reflection = dump_response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ssh_open_channel::kTimestampNsFieldNumber;
const int ssh_open_channel::kMachineIdFieldNumber;
const int ssh_open_channel::kCustomerIdFieldNumber;
const int ssh_open_channel::kTokenFieldNumber;
const int ssh_open_channel::kUserFieldNumber;
const int ssh_open_channel::kPasswordFieldNumber;
const int ssh_open_channel::kKeyFieldNumber;
const int ssh_open_channel::kPassphraseFieldNumber;
const int ssh_open_channel::kPortFieldNumber;
#endif  // !_MSC_VER

ssh_open_channel::ssh_open_channel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssh_open_channel::InitAsDefaultInstance() {
}

ssh_open_channel::ssh_open_channel(const ssh_open_channel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssh_open_channel::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passphrase_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssh_open_channel::~ssh_open_channel() {
  SharedDtor();
}

void ssh_open_channel::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (passphrase_ != &::google::protobuf::internal::kEmptyString) {
    delete passphrase_;
  }
  if (this != default_instance_) {
  }
}

void ssh_open_channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssh_open_channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssh_open_channel_descriptor_;
}

const ssh_open_channel& ssh_open_channel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

ssh_open_channel* ssh_open_channel::default_instance_ = NULL;

ssh_open_channel* ssh_open_channel::New() const {
  return new ssh_open_channel;
}

void ssh_open_channel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_passphrase()) {
      if (passphrase_ != &::google::protobuf::internal::kEmptyString) {
        passphrase_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssh_open_channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // required string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // required string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_password;
        break;
      }

      // optional string password = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_key;
        break;
      }

      // optional string key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_passphrase;
        break;
      }

      // optional string passphrase = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passphrase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passphrase()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passphrase().data(), this->passphrase().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_port;
        break;
      }

      // optional uint32 port = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssh_open_channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(), output);
  }

  // required string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }

  // optional string password = 6;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->password(), output);
  }

  // optional string key = 7;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->key(), output);
  }

  // optional string passphrase = 8;
  if (has_passphrase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passphrase().data(), this->passphrase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->passphrase(), output);
  }

  // optional uint32 port = 9;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssh_open_channel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // required string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // optional string password = 6;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->password(), target);
  }

  // optional string key = 7;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->key(), target);
  }

  // optional string passphrase = 8;
  if (has_passphrase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passphrase().data(), this->passphrase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->passphrase(), target);
  }

  // optional uint32 port = 9;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssh_open_channel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // required string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string password = 6;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string key = 7;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string passphrase = 8;
    if (has_passphrase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passphrase());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 port = 9;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssh_open_channel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssh_open_channel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssh_open_channel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssh_open_channel::MergeFrom(const ssh_open_channel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_passphrase()) {
      set_passphrase(from.passphrase());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssh_open_channel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssh_open_channel::CopyFrom(const ssh_open_channel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssh_open_channel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void ssh_open_channel::Swap(ssh_open_channel* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(token_, other->token_);
    std::swap(user_, other->user_);
    std::swap(password_, other->password_);
    std::swap(key_, other->key_);
    std::swap(passphrase_, other->passphrase_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssh_open_channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssh_open_channel_descriptor_;
  metadata.reflection = ssh_open_channel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ssh_data::kTimestampNsFieldNumber;
const int ssh_data::kMachineIdFieldNumber;
const int ssh_data::kCustomerIdFieldNumber;
const int ssh_data::kTokenFieldNumber;
const int ssh_data::kDataFieldNumber;
const int ssh_data::kErrorFieldNumber;
const int ssh_data::kExitStatusFieldNumber;
#endif  // !_MSC_VER

ssh_data::ssh_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssh_data::InitAsDefaultInstance() {
}

ssh_data::ssh_data(const ssh_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssh_data::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exit_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssh_data::~ssh_data() {
  SharedDtor();
}

void ssh_data::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void ssh_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssh_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssh_data_descriptor_;
}

const ssh_data& ssh_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

ssh_data* ssh_data::default_instance_ = NULL;

ssh_data* ssh_data::New() const {
  return new ssh_data;
}

void ssh_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
    exit_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssh_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // required string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_error;
        break;
      }

      // optional string error = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exit_status;
        break;
      }

      // optional int32 exit_status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_status_)));
          set_has_exit_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssh_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }

  // optional string error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->error(), output);
  }

  // optional int32 exit_status = 7;
  if (has_exit_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exit_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssh_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // optional string error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->error(), target);
  }

  // optional int32 exit_status = 7;
  if (has_exit_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exit_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssh_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // required string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional string error = 6;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional int32 exit_status = 7;
    if (has_exit_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssh_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssh_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssh_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssh_data::MergeFrom(const ssh_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_exit_status()) {
      set_exit_status(from.exit_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssh_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssh_data::CopyFrom(const ssh_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssh_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void ssh_data::Swap(ssh_data* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(token_, other->token_);
    std::swap(data_, other->data_);
    std::swap(error_, other->error_);
    std::swap(exit_status_, other->exit_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssh_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssh_data_descriptor_;
  metadata.reflection = ssh_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ssh_close_channel::kTimestampNsFieldNumber;
const int ssh_close_channel::kMachineIdFieldNumber;
const int ssh_close_channel::kCustomerIdFieldNumber;
const int ssh_close_channel::kTokenFieldNumber;
#endif  // !_MSC_VER

ssh_close_channel::ssh_close_channel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssh_close_channel::InitAsDefaultInstance() {
}

ssh_close_channel::ssh_close_channel(const ssh_close_channel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssh_close_channel::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssh_close_channel::~ssh_close_channel() {
  SharedDtor();
}

void ssh_close_channel::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ssh_close_channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssh_close_channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssh_close_channel_descriptor_;
}

const ssh_close_channel& ssh_close_channel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

ssh_close_channel* ssh_close_channel::default_instance_ = NULL;

ssh_close_channel* ssh_close_channel::New() const {
  return new ssh_close_channel;
}

void ssh_close_channel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssh_close_channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // required string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssh_close_channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssh_close_channel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssh_close_channel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // required string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssh_close_channel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssh_close_channel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssh_close_channel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssh_close_channel::MergeFrom(const ssh_close_channel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssh_close_channel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssh_close_channel::CopyFrom(const ssh_close_channel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssh_close_channel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void ssh_close_channel::Swap(ssh_close_channel* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssh_close_channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssh_close_channel_descriptor_;
  metadata.reflection = ssh_close_channel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int auto_update_request::kTimestampNsFieldNumber;
const int auto_update_request::kMachineIdFieldNumber;
const int auto_update_request::kCustomerIdFieldNumber;
#endif  // !_MSC_VER

auto_update_request::auto_update_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void auto_update_request::InitAsDefaultInstance() {
}

auto_update_request::auto_update_request(const auto_update_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void auto_update_request::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auto_update_request::~auto_update_request() {
  SharedDtor();
}

void auto_update_request::SharedDtor() {
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_id_;
  }
  if (this != default_instance_) {
  }
}

void auto_update_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auto_update_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auto_update_request_descriptor_;
}

const auto_update_request& auto_update_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_draios_2eproto();
  return *default_instance_;
}

auto_update_request* auto_update_request::default_instance_ = NULL;

auto_update_request* auto_update_request::New() const {
  return new auto_update_request;
}

void auto_update_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_customer_id()) {
      if (customer_id_ != &::google::protobuf::internal::kEmptyString) {
        customer_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auto_update_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
          set_has_timestamp_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void auto_update_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* auto_update_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int auto_update_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp_ns = 1;
    if (has_timestamp_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_ns());
    }

    // required string machine_id = 2;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auto_update_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auto_update_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auto_update_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auto_update_request::MergeFrom(const auto_update_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auto_update_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auto_update_request::CopyFrom(const auto_update_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auto_update_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void auto_update_request::Swap(auto_update_request* other) {
  if (other != this) {
    std::swap(timestamp_ns_, other->timestamp_ns_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auto_update_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auto_update_request_descriptor_;
  metadata.reflection = auto_update_request_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace draiosproto

// @@protoc_insertion_point(global_scope)
