package draiosproto;

option optimize_for = LITE_RUNTIME;
option java_package = "com.draios.model.protobuf";
option java_outer_classname = "Agent";

message counter {
  optional uint64 time_ns = 1;
  optional uint32 count = 2;
  optional uint32 bytes = 3;
}

message time_categories {
	optional counter unknown = 1;
	optional counter other = 2;
	optional counter file = 3;
	optional counter net = 4;
	optional counter ipc = 5;
	optional counter memory = 6;
	optional counter process = 7;
	optional counter sleep = 8;
	optional counter system = 9;
	optional counter signal = 10;
	optional counter user = 11;
	optional counter time = 12;
	optional counter io_file = 13;
	optional counter io_net = 14;
	optional counter io_other = 15;
	optional counter wait = 16;
	optional counter processing = 17;
}

message transaction_categories {
	optional counter incoming = 1;
	optional counter outgoing = 2;
}

message connection_categories {
	optional counter server_incoming = 1;
	optional counter server_outgoing = 2;
	optional counter client_incoming = 3;
	optional counter client_outgoing = 4;
}
//
// HOST
// global host info.
//
message host {
  optional string hostname = 1; // The name of the host sending the data
  optional uint32 num_cpus = 2;	// Number of CPUs in the system
  repeated uint32 cpu_loads = 3;	// Array of CPU loads (0 to 100), with an entry for each CPU, with the 
  optional uint64 physical_memory_size_bytes = 4;	// Physical RAM size
}

//
// PROCESS
// info for a process, i.e. a collection of threads.
// NOTE: this is process info only, the main thread of a process will have a 
// separate thread message with tid=process pid.
//
message process {
  required uint64 pid = 1; // The ID of process this thread belongs to

  required string comm = 2;	// Command name (e.g. "top")
  required string exe = 3; // Full command name (e.g. "/bin/top")
  repeated string args = 4; // Command line arguments (e.g. "-d1")

  optional time_categories tcounters = 5; // The time counters for this thread
  optional transaction_categories transaction_counters = 6; // The transaction counters for this process
  optional uint64 local_transaction_delay = 7;	// the delay introduced by this process when processing transactions. 
                                                // It's calculated by subtracting outgoing connection time from incoming connection time. 
  optional uint32 health_score = 8; // the health score for this process. 0 means very crappy, 100 means very healthy.
  optional uint32 connection_queue_usage_pct = 9; // if this process is serving connections, the occupation of the connection queue FOR THE WORST THREAD IN THIS PROCESS (0=empty, 100=full)
  optional uint32 fd_usage_pct = 10; // the ratio (open FDs / total available FDs) FOR THE WORST THREAD IN THIS PROCESS. 0 means no FD in use, 100 means FD limit reached.
}

//
// THREAD
// This contains all the operational info (counters, etc.) for one of the threads.
//
message thread {
  required uint64 pid = 1; // The ID of process this thread belongs to
  required uint64 tid = 2; // The thread ID. If tid=pid, this is the main thread for this process.
  optional time_categories tcounters = 3; // The time counters for this thread

  // XXX Do we need this?
  //optional string cwd = 4; // Current working directory. This is set only if this thread has its 
                             // own working directory, which happens for main threads and threads 
							 // started with the CLONE_FS flag

  optional transaction_categories transaction_counters = 5; // The transaction counters for this thread
}

//
// IPv4 CONNECTION
//
message ipv4tuple {
  required uint32 sip = 1;
  required uint32 dip = 2;
  required uint32 sport = 3;
  required uint32 dport = 4;
  required uint32 l4proto = 5;
}

message ipv4_connection {
  required ipv4tuple tuple = 1;

  optional uint64 spid = 2; // The pid of the client
  optional uint64 stid = 3; // The tid of the client
  // XXX is this required?
  //optional uint64 sfd = 4; // The fd number of the client

  optional uint64 dpid = 5; // The pid of the server
  optional uint64 dtid = 6; // The tid of the server
  // XXX is this required?
  //optional uint64 dfd = 7; // The fd number of the server

  optional connection_categories counters = 8; // The counters for this connection
  optional transaction_categories transaction_counters = 9; // The transaction counters for this connection
}

//
// NETWORK INTERFACE
//
message ipv4_network_interface {
  required string name = 1; // ifconfig entry name, e.g. eth0
  required uint32 addr = 2; // IP address
  required uint32 netmask = 3; // netmask
  optional uint32 bcast = 4; // broadcast address
}

//
// ENTRY POINT MESSAGE
//
message metrics {
  required uint64 timestamp_ns = 1; // The message timestamp, in ns from epoch
  required string machine_id = 3; // The unique ID of the machine that is sending this data
  required string customer_id = 4; // The unique ID of the customer that this machine belongs to
  required host hostinfo = 5; // The list of processes
  repeated process processes = 6; // The list of processes
  repeated thread threads = 7; // The list of threads
  repeated ipv4_connection ipv4_connections = 8; // The list of threads
  repeated ipv4_network_interface ipv4_network_interfaces = 9; // The list of the machine network interfaces
}
