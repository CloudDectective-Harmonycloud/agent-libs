syntax = "proto2";

import "draios.proto";
package sdc_internal;

// Internal protobuf used by sysdig cloud agent components
// to talk each other. It uses some pieces in common with
// draios.proto so it can be more efficient

option optimize_for = SPEED;
//option java_package = "com.draios.model.protobuf";
//option java_outer_classname = "Agent";

message container_mounts {
    required string container_id = 1;
    repeated draiosproto.mounted_fs mounts = 2; 
}

message mounted_fs_response {
    repeated container_mounts containers = 1;
}

message container_info {
    required string id = 1;
    required uint64 pid = 2;
    required uint64 vpid = 3;
    required string root = 4;
}

message mounted_fs_request {
    repeated container_info containers = 1;
}

enum cointerface_message_type {
    PING = 1;
    PONG = 2;
    DOCKER_COMMAND = 3;
    DOCKER_COMMAND_RESULT = 4;
    SWARM_STATE_COMMAND = 5;
    SWARM_STATE_RESULT = 6;
    ORCHESTRATOR_STREAM_EVENTS_COMMAND = 7;
    ORCHESTRATOR_STREAM_EVENTS_RESULT = 8;
}

enum docker_cmd_type {
    STOP = 1;
    PAUSE = 2;
    UNPAUSE = 3;
}

message ping {
    required int64 token = 1;
}

message pong {
    required int64 token = 1;
    required int32 pid = 2;
    required uint64 memory_used = 3;
}

message docker_command {
    required docker_cmd_type cmd = 1;
    // Making optional in case other later commands want to work with images
    optional string container_id = 2;
}

message docker_command_result {
    required bool successful = 1;
    optional string errstr = 2;
}

message swarm_state_command {
    optional string container_id = 2;
}

message swarm_state_result {
    required bool successful = 1;
    optional string errstr = 2;
    optional draiosproto.swarm_state state = 3;
}

message orchestrator_events_stream_command {
}

enum congroup_event_type {
    ADDED = 1;
    REMOVED = 2;
    UPDATED = 3;
}

message congroup_update_event {
    required congroup_event_type type = 1;
    required draiosproto.congroup_uid uid = 2;
    required draiosproto.container_group object = 3;
}

service CoInterface {
    rpc PerformDockerCommand(docker_command) returns (docker_command_result) {}
    rpc PerformPing(ping) returns (pong) {}
    rpc PerformSwarmState(swarm_state_command) returns (swarm_state_result) {}
    rpc PerformOrchestratorEventsStream(orchestrator_events_stream_command) returns (stream congroup_update_event) {}
}
