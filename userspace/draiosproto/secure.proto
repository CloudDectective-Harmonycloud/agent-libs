syntax = "proto3";
package secure;

option optimize_for = SPEED;

message Audit {
    uint64 timestamp = 1;
    string hostname = 2;
    repeated Connection connections = 3;
    repeated ExecutedCommand executed_commands = 4;
    repeated K8sAudit k8s_audits = 5;
}

enum ConnectionStatus {
    CONNECTION_STATUS_CLOSED = 0; // For future uses
    CONNECTION_STATUS_PENDING = 1;// For future uses
    CONNECTION_STATUS_ESTABLISHED = 2;
    CONNECTION_STATUS_FAILED = 3;
}

// Only (nonexisting) -> ESTABLISHED / FAILED status will be considered
// This avoids to keep track of state transitions
message Connection {
    fixed32 client_ipv4 = 1;
    uint32 client_port = 2;
    uint32 client_pid = 3;
    fixed32 server_ipv4 = 4;
    uint32 server_port = 5;
    uint32 server_pid = 6;
    uint32 l4_protocol = 7;
    ConnectionStatus status = 8;
    uint32 error_code = 9;
    uint64 timestamp = 10;
    string container_id = 11;
    string comm = 12;
    string cmdline = 13;
}

// In some cases, a command has a category that identfies
// why it was run. Descriptions:
// CAT_NONE: no specific category
// CAT_CONTAINER: a process run in a container and *not* any
//                of the following more specific categories.
// CAT_HEALTHCHECK: part of a container healthcheck
// CAT_LIVENESS_PROBE: part of a k8s liveness probe
// CAT_READINESS_PROBE: part of a k8s readiness probe
enum CommandCategory {
    COMMAND_CATEGORY_NONE = 0;
    COMMAND_CATEGORY_CONTAINER = 1;
    COMMAND_CATEGORY_HEALTHCHECK = 2;
    COMMAND_CATEGORY_LIVENESS_PROBE = 3;
    COMMAND_CATEGORY_READINESS_PROBE = 4;
}

message ExecutedCommand {
    uint64 timestamp = 1;
    uint32 count = 2; // How many times this command has been repeated during the sample interval
    string cmdline = 3; // Program command line (e.g. "top -d1")
    string comm = 4; // Program executable name
    uint64 pid = 5; // Process pid
    uint64 ppid = 6; // Parent process pid
    uint64 uid = 7; // User ID
    string cwd = 8; // Process' current working directory
    uint64 login_shell_id = 9; // ID of the login shell (same as in the spy_users chisel)
    uint32 login_shell_distance = 10; // Distance from the login shell (same as in the spy_users chisel)
    uint32 tty = 11; // Tty
    CommandCategory category = 12;
    string container_id = 13; // Container id associated with the command, if exists
    string username = 14;  // User executing the command
}

message K8sAudit {
    string blob = 1; // String representation of Json Audit event
    string container_id = 2;
    string hostname = 3;
}