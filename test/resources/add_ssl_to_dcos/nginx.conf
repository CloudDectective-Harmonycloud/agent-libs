daemon off;

error_log /dev/stdout info;

events {
}

http {

    log_format add_request_body '$remote_addr - $remote_user [$time_local] '
                                '$request "$request_body" $status $http_x_auth_body $http_authorization $body_bytes_sent '
                                '"$http_referer" "$http_user_agent" "$gzip_ratio"';

    map_hash_bucket_size 1024;

    map $http_authorization $is_ok {
        default "0";

        "token=eyJhbGciOiJIUzI1NiIsImtpZCI6InNlY3JldCIsInR5cCI6IkpXVCJ9.eyJhdWQiOiIzeUY1VE9TemRsSTQ1UTF4c3B4emVvR0JlOWZOeG05bSIsImVtYWlsIjoibWFyay5zdGVtbUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiZXhwIjoxLjQ4MjE4NTE0M2UrMDksImlhdCI6MS40ODE3NTMxNDNlKzA5LCJpc3MiOiJodHRwczovL2Rjb3MuYXV0aDAuY29tLyIsInN" "1";
    }

    access_log /dev/stdout add_request_body;

    # This server handles returning auth tokens. It requires
    # authentication using a hardcoded username/password.
    server {
        listen          127.0.0.1:443 ssl;
        server_name     www.fake-dcos-enterprise.com;
        ssl_certificate www.fake-dcos-enterprise.com.crt;
        ssl_certificate_key www.fake-dcos-enterprise.com.key;

        location /log_sink {
            if ($http_x_auth_body = '{"password":"P@ssword1","uid":"admin"}') {
                return 200 '{"token": "eyJhbGciOiJIUzI1NiIsImtpZCI6InNlY3JldCIsInR5cCI6IkpXVCJ9.eyJhdWQiOiIzeUY1VE9TemRsSTQ1UTF4c3B4emVvR0JlOWZOeG05bSIsImVtYWlsIjoibWFyay5zdGVtbUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiZXhwIjoxLjQ4MjE4NTE0M2UrMDksImlhdCI6MS40ODE3NTMxNDNlKzA5LCJpc3MiOiJodHRwczovL2Rjb3MuYXV0aDAuY29tLyIsInN"}';
            }

            return 401;
        }

        location /acs/api/v1/auth/login {
            default_type application/json;

            if ($request_method != POST) {
                return 404;
            }

            # The variable $request_body is not generally available in
            # requests. It's only available when nginx is proxying. So
            # take the body of the request and set it as a header, and
            # redirect to a new target /log_sink. That will check the
            # header and either return the token or 401

            proxy_pass https://127.0.0.1:443/log_sink;
            proxy_set_header "X-Auth-Body" $request_body;
        }
    }

    # This server simply proxies everything on ports 5050/5051 to a
    # fixed IP address. It handles ssl termination and requires an
    # auth token in all requests (the token returned in the above
    # server)
    server {
        listen          127.0.0.1:5050 ssl;
        listen          127.0.0.1:5051 ssl;
        server_name     www.fake-dcos-enterprise.com;
        ssl_certificate www.fake-dcos-enterprise.com.crt;
        ssl_certificate_key www.fake-dcos-enterprise.com.key;

        # SSL terminate and proxy everything to
        # 172.17.0.2:5050. Require an auth token for all endpoints
        # other than the root and /version.

        location /version {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://172.17.0.2:$server_port;
        }

        location = / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://172.17.0.2:$server_port;
        }

        location / {

            if ($is_ok = 0) {
                return 401;
            }

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://172.17.0.2:$server_port;
        }
    }

}
