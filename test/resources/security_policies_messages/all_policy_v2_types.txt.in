policy_list {
  id: 1
  name: "Reading sensitive file"
  rule_names: "read_sensitive_file"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: EQ
  }
}
policy_list {
  id: 2
  name: "Don't read sensitive files below /tmp"
  rule_names: "read sample-sensitive-file-1.txt"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: EQ
  }
}
policy_list {
  id: 3
  name: "Don't write sensitive files below /tmp"
  rule_names: "write sample-sensitive-file-3.txt"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: EQ
  }
}
policy_list {
  id: 4
  name: "Don't let processes listen on tcp port 1234"
  rule_names: "listen tcp port 1234"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: EQ
  }
}
policy_list {
  id: 5
  name: "Don't let processes listen on udp port 12345"
  rule_names: "listen udp port 12345"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: EQ
  }
}
policy_list {
  id: 6
  name: "Don't let processes quotactl()"
  rule_names: "match quotactl"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: EQ
  }
}
policy_list {
  id: 7
  name: "Blacklist container busybox"
  rule_names: "match blacklist-image-name container"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: NOT_EQ
  }
}
policy_list {
  id: 8
  name: "Blacklist process ls"
  rule_names: "match process ls"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: EQ
  }
}
policy_list {
  id: 12
  name: "Testing filesystem prefixes"
  rule_names: "match /tmp/{one,two}"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: EQ
  }
}
policy_list {
  id: 14
  name: "Test container prefixes (1)"
  rule_names: "match my.domain.name/"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: NOT_EQ
  }
}
policy_list {
  id: 15
  name: "Test container prefixes (2)"
  rule_names: "match my.other.domain.name:12345/"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: NOT_EQ
  }
}
policy_list {
  id: 16
  name: "Test container prefixes (3)"
  rule_names: "match my.third.domain.name/cirros"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: NOT_EQ
  }
}
policy_list {
  id: 17
  name: "Test container prefixes (4)"
  rule_names: "match my.third.domain.name/tutum/curl:alpine"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: NOT_EQ
  }
}
policy_list {
  id: 18
  name: "Test inbound/outbound (TCP/UDP)"
  rule_names: "match inbound + outbound + tcp 22222"
  enabled: 1
  scope_predicates {
    key: "container.image"
    values: "curl:inout_test"
    op: EQ
  }
}
policy_list {
  id: 19
  name: "Testing filesystem root dir"
  rule_names: "match anything other than allowed/dev/proc paths"
  enabled: 1
  scope_predicates {
    key: "container.image"
    values: "busybox:test-root-writes"
    op: EQ
  }
}
policy_list {
  id: 21
  name: "Use-case policy - fs"
  rule_names: "match mnt etc for writes"
  rule_names: "match etc/passwd for reads"
  rule_names: "match bin for writes"
  enabled: 1
  scope_predicates {
    key: "container.image"
    values: "busybox:fs_usecase"
    op: EQ
  }
}
policy_list {
  id: 25
  name: "fs operations without fd"
  rule_names: "match test_no_fd_ops"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: EQ
  }
}
policy_list {
  id: 26
  name: "falco rule without event type"
  rule_names: "anything_for_banned_file"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: EQ
  }
}
policy_list {
  id: 27
  name: "falco rule to blacklist hosts"
  rule_names: "contacted_blacklisted_host"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: EQ
  }
}
policy_list {
  id: 28
  name: "K8s Deployment Created"
  rule_names: "k8s_deployment_created"
  enabled: 1
  policy_type: "k8s_audit"
}
policy_list {
  id: 29
  name: "policy scoped to docker swarm service"
  rule_names: "read_sensitive_file"
  enabled: 1
  scope_predicates {
    key: "swarm.service.name"
    values: "helloworld"
    op: EQ
  }
}

# This policy is not used in the tests, but tests the case of a policy
# referring to a falco rule that doesn't exist.
policy_list {
  id: 30
  name: "dangling policy with no falco rule"
  rule_names: "no_such_rule"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: EQ
  }
}
policy_list {
  id: 31
  name: "Detect busybox:some-tag 1"
  rule_names: "match busybox:some-tag"
  enabled: 1
}
policy_list {
  id: 32
  name: "Detect busybox:some-tag 2"
  rule_names: "match busybox:some-tag"
  enabled: 1
}
policy_list {
  id: 33
  name: "Testing container-only policy scopes"
  rule_names: "match /tmp/second"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: NOT_EQ
  }
}
policy_list {
  id: 34
  name: "Testing host-only policy scopes"
  rule_names: "match /tmp/third"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: EQ
  }
}
policy_list {
  id: 35
  name: "K8s Namespace Created (with scope)"
  rule_names: "k8s_namespace_created"
  enabled: 1
  policy_type: "k8s_audit"
  scope_predicates {
    key: "kubernetes.namespace.name"
    values: "some-namespace"
    op: EQ
  }
}
policy_list {
  id: 36
  name: "Stop on process gzip in container"
  rule_names: "match process gzip"
  actions {
    type: ACTION_STOP
    stop: {}
  }
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: NOT_EQ
  }
}
policy_list {
  id: 37
  name: "V2Stop on process bzip2 in container"
  rule_names: "match process bzip2"
  v2actions {
    type: V2ACTION_STOP
    stop: {}
  }
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: NOT_EQ
  }
}
policy_list {
  id: 38
  name: "Kill on process lzcat in container"
  rule_names: "match process lzcat"
  v2actions {
    type: V2ACTION_KILL
    kill: {}
  }
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: NOT_EQ
  }
}
policy_list {
  id: 39
  name: "Capture on process bunzip2 in container"
  rule_names: "match process bunzip2"
  actions {
    type: ACTION_CAPTURE
    capture: {
      before_event_ns: 0
      after_event_ns: 1000000000
    }
  }
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: NOT_EQ
  }
}
policy_list {
  id: 40
  name: "V2Capture on process bzcat in container"
  rule_names: "match process bzcat"
  v2actions {
    type: V2ACTION_CAPTURE
    capture: {
      before_event_ns: 0
      after_event_ns: 1000000000
    }
  }
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: NOT_EQ
  }
}
policy_list {
  id: 41
  name: "Policy With Undefined Action"
  rule_names: "read sample-sensitive-file-4.txt"
  v2actions {
    type: V2ACTION_UNKNOWN
  }
  enabled: 1
}
policy_list {
  id: 42
  name: "Policy with falco rule name substring"
  rule_names: "read_sensitive"
  enabled: 1
  scope_predicates {
    key: "container.id"
    values: ""
    op: EQ
  }
}
policy_list {
  id: 50
  name: "Whitelist syscalls for busybox:syscall-whitelist"
  rule_names: "busybox syscall-whitelist"
  enabled: 1
  scope_predicates {
    key: "container.name"
    values: "syscall-whitelist"
    op: EQ
  }
}
policy_list {
  id: 60
  name: "Scoped to cluster name=my-cluster"
  rule_names: "read sample-sensitive-file-5.txt"
  enabled: 1
  scope_predicates {
    key: "kubernetes.cluster.name"
    values: "my-cluster"
    op: EQ
  }
}
policy_list {
  id: 61
  name: "K8s Scoped to namespace=foo"
  rule_names: "k8s_namespace_created"
  rule_names: "k8s_deployment_created"
  enabled: 1
  policy_type: "k8s_audit"
  scope_predicates {
    key: "kubernetes.namespace.name"
    values: "foo"
    op: EQ
  }
}
policy_list {
  id: 62
  name: "K8s Scoped to cluster=my-cluster"
  rule_names: "k8s_namespace_created"
  rule_names: "k8s_deployment_created"
  enabled: 1
  policy_type: "k8s_audit"
  scope_predicates {
    key: "kubernetes.cluster.name"
    values: "my-cluster"
    op: EQ
  }
}
policy_list {
  id: 63
  name: "Policy with Unknown Type"
  rule_names: "unknown_source_rule"
  enabled: 1
  policy_type: "some-unknown-type"
}
falco_group {
  default_files {
    tag: "0.1.1test"
    files {
      filename: "falco_rules.yaml"
      variants {
        required_engine_version: 2
	content: "- required_engine_version: 2\n- rule: read_sensitive_file\n  desc: test program reading /tmp/sample-sensitive-file-*.txt\n  condition: proc.name in (tests,memcheck-amd64-,touch) and evt.type in (open, openat) and evt.is_open_read=true and evt.arg.name in (/tmp/sample-sensitive-file-2.txt)\n  output: tests read /tmp/sample-sensitive-file-*.txt (user=%user.name command=%proc.cmdline parent=%proc.pname file=%fd.name)\n  priority: WARNING\n- rule: read_overall_file\n  desc: test program reading /tmp/overall_file-*.txt\n  condition: proc.name in (tests,memcheck-amd64-) and evt.type in (open, openat) and evt.is_open_read=true and evt.arg.name in (/tmp/overall-order-3.txt)\n  output: tests read /tmp/overall-order-*.txt (user=%user.name command=%proc.cmdline parent=%proc.pname file=%fd.name)\n  priority: WARNING\n- rule: anything_for_banned_file\n  desc: any operation related to a banned file\n  condition: proc.name in (tests,memcheck-amd64-) and fd.name=/tmp/banned-file.txt\n  output: some operation related to /tmp/banned-file.txt (user=%user.name command=%proc.cmdline parent=%proc.pname file=%fd.name)\n  priority: INFO\n  warn_evttypes: false\n- list: blacklisted_hosts\n  items: [github.com, quora.com]\n- rule: contacted_blacklisted_host\n  desc: test program contacted a blacklisted host\n  condition: evt.type=connect and evt.dir=< and (evt.rawres = 0 or evt.res = EINPROGRESS) and fd.sport != 0 and fd.sip.name in (blacklisted_hosts)\n  output: tests contacted the blacklisted host %fd.sip.name (user=%user.name command=%proc.cmdline connection=%fd.name)\n  priority: WARNING\n- rule: k8s_deployment_created\n  desc: Detect any attempt to create a deployment\n  condition: (ka.verb=create) and (ka.target.resource=deployments)\n  output: K8s Deployment Created (user=%ka.user.name deployment=%ka.target.name ns=%ka.target.namespace resp=%ka.response.code decision=%ka.auth.decision reason=%ka.auth.reason)\n  priority: WARNING\n  source: k8s_audit\n  tags: [k8s]\n- rule: k8s_namespace_created\n  desc: Detect any attempt to create a namespace\n  condition: (ka.verb=create) and (ka.target.resource=namespaces)\n  output: K8s Namespace Created (user=%ka.user.name namespace=%ka.target.name resp=%ka.response.code decision=%ka.auth.decision reason=%ka.auth.reason)\n  priority: WARNING\n  source: k8s_audit\n  tags: [k8s]\n- rule: unknown_source_rule\n  desc: A rule with an unknown source\n  condition: gc.evt=connect\n  output: unknown output\n  priority: WARNING\n  source: some-unknown-type\n"
      }
    }
  }
  custom_files {
  }
}
