// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: draios.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "draios.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace draiosproto {

namespace {

const ::google::protobuf::Descriptor* counter_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* counter_time_bidirectional_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_time_bidirectional_reflection_ = NULL;
const ::google::protobuf::Descriptor* counter_bytes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_bytes_reflection_ = NULL;
const ::google::protobuf::Descriptor* counter_time_bytes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_time_bytes_reflection_ = NULL;
const ::google::protobuf::Descriptor* time_categories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  time_categories_reflection_ = NULL;
const ::google::protobuf::Descriptor* transaction_breakdown_categories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  transaction_breakdown_categories_reflection_ = NULL;
const ::google::protobuf::Descriptor* counter_syscall_errors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_syscall_errors_reflection_ = NULL;
const ::google::protobuf::Descriptor* resource_categories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  resource_categories_reflection_ = NULL;
const ::google::protobuf::Descriptor* connection_categories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  connection_categories_reflection_ = NULL;
const ::google::protobuf::Descriptor* process_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  process_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* command_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  command_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* counter_proto_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  counter_proto_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* url_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  url_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* status_code_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  status_code_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* http_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  http_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* sql_entry_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_entry_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* sql_query_type_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_query_type_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* sql_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* mongodb_collection_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mongodb_collection_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* mongodb_op_type_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mongodb_op_type_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* mongodb_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mongodb_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* jmx_attribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  jmx_attribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* jmx_bean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  jmx_bean_reflection_ = NULL;
const ::google::protobuf::Descriptor* java_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  java_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* statsd_tag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statsd_tag_reflection_ = NULL;
const ::google::protobuf::Descriptor* statsd_metric_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statsd_metric_reflection_ = NULL;
const ::google::protobuf::Descriptor* statsd_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statsd_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* app_tag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  app_tag_reflection_ = NULL;
const ::google::protobuf::Descriptor* app_metric_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  app_metric_reflection_ = NULL;
const ::google::protobuf::Descriptor* app_check_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  app_check_reflection_ = NULL;
const ::google::protobuf::Descriptor* app_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  app_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* network_by_port_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  network_by_port_reflection_ = NULL;
const ::google::protobuf::Descriptor* host_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  host_reflection_ = NULL;
const ::google::protobuf::Descriptor* process_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  process_reflection_ = NULL;
const ::google::protobuf::Descriptor* program_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  program_reflection_ = NULL;
const ::google::protobuf::Descriptor* ipv4tuple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ipv4tuple_reflection_ = NULL;
const ::google::protobuf::Descriptor* ipv4_connection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ipv4_connection_reflection_ = NULL;
const ::google::protobuf::Descriptor* ipv4_network_interface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ipv4_network_interface_reflection_ = NULL;
const ::google::protobuf::Descriptor* mounted_fs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mounted_fs_reflection_ = NULL;
const ::google::protobuf::Descriptor* file_stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  file_stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* container_port_mapping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  container_port_mapping_reflection_ = NULL;
const ::google::protobuf::Descriptor* container_label_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  container_label_reflection_ = NULL;
const ::google::protobuf::Descriptor* container_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  container_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_common_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_common_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_namespace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_namespace_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_node_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_pod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_pod_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_replication_controller_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_replication_controller_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_replica_set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_replica_set_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_service_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_service_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_service_net_port_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_service_net_port_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_deployment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_deployment_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_daemonset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_daemonset_reflection_ = NULL;
const ::google::protobuf::Descriptor* k8s_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  k8s_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* mesos_pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mesos_pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* mesos_common_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mesos_common_reflection_ = NULL;
const ::google::protobuf::Descriptor* mesos_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mesos_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* marathon_app_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marathon_app_reflection_ = NULL;
const ::google::protobuf::Descriptor* marathon_group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marathon_group_reflection_ = NULL;
const ::google::protobuf::Descriptor* mesos_framework_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mesos_framework_reflection_ = NULL;
const ::google::protobuf::Descriptor* mesos_slave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mesos_slave_reflection_ = NULL;
const ::google::protobuf::Descriptor* mesos_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mesos_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* metrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  metrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* dump_request_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dump_request_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* dump_request_stop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dump_request_stop_reflection_ = NULL;
const ::google::protobuf::Descriptor* dump_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dump_response_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssh_open_channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssh_open_channel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssh_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssh_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssh_close_channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssh_close_channel_reflection_ = NULL;
const ::google::protobuf::Descriptor* auto_update_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auto_update_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* dirty_shutdown_report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dirty_shutdown_report_reflection_ = NULL;
const ::google::protobuf::Descriptor* key_value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  key_value_reflection_ = NULL;
const ::google::protobuf::Descriptor* agent_event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  agent_event_reflection_ = NULL;
const ::google::protobuf::Descriptor* config_file_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  config_file_reflection_ = NULL;
const ::google::protobuf::Descriptor* config_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  config_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* error_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  error_message_reflection_ = NULL;
const ::google::protobuf::Descriptor* falco_subcategory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  falco_subcategory_reflection_ = NULL;
const ::google::protobuf::Descriptor* falco_subcategory_container_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  falco_subcategory_container_reflection_ = NULL;
const ::google::protobuf::Descriptor* falco_category_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  falco_category_reflection_ = NULL;
const ::google::protobuf::Descriptor* falco_prog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  falco_prog_reflection_ = NULL;
const ::google::protobuf::Descriptor* falco_container_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  falco_container_reflection_ = NULL;
const ::google::protobuf::Descriptor* falco_baseline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  falco_baseline_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* sql_statement_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* mongodb_op_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* unit_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* scale_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* jmx_metric_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* statsd_metric_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* app_metric_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* app_check_value_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* networkrole_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* message_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* container_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* error_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_draios_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_draios_2eproto() {
  protobuf_AddDesc_draios_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "draios.proto");
  GOOGLE_CHECK(file != NULL);
  counter_time_descriptor_ = file->message_type(0);
  static const int counter_time_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time, time_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time, time_percentage_),
  };
  counter_time_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      counter_time_descriptor_,
      counter_time::internal_default_instance(),
      counter_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time, _has_bits_),
      -1,
      -1,
      sizeof(counter_time),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time, _internal_metadata_));
  counter_time_bidirectional_descriptor_ = file->message_type(1);
  static const int counter_time_bidirectional_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, count_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, count_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, time_ns_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, time_ns_out_),
  };
  counter_time_bidirectional_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      counter_time_bidirectional_descriptor_,
      counter_time_bidirectional::internal_default_instance(),
      counter_time_bidirectional_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, _has_bits_),
      -1,
      -1,
      sizeof(counter_time_bidirectional),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bidirectional, _internal_metadata_));
  counter_bytes_descriptor_ = file->message_type(2);
  static const int counter_bytes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, count_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, count_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, bytes_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, bytes_out_),
  };
  counter_bytes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      counter_bytes_descriptor_,
      counter_bytes::internal_default_instance(),
      counter_bytes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, _has_bits_),
      -1,
      -1,
      sizeof(counter_bytes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_bytes, _internal_metadata_));
  counter_time_bytes_descriptor_ = file->message_type(3);
  static const int counter_time_bytes_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_ns_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_ns_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_ns_other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, count_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, count_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, count_other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, bytes_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, bytes_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, bytes_other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_percentage_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_percentage_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, time_percentage_other_),
  };
  counter_time_bytes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      counter_time_bytes_descriptor_,
      counter_time_bytes::internal_default_instance(),
      counter_time_bytes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, _has_bits_),
      -1,
      -1,
      sizeof(counter_time_bytes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_time_bytes, _internal_metadata_));
  time_categories_descriptor_ = file->message_type(4);
  static const int time_categories_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, unknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, ipc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, sleep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, system_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, io_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, io_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, io_other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, wait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, processing_),
  };
  time_categories_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      time_categories_descriptor_,
      time_categories::internal_default_instance(),
      time_categories_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, _has_bits_),
      -1,
      -1,
      sizeof(time_categories),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time_categories, _internal_metadata_));
  transaction_breakdown_categories_descriptor_ = file->message_type(5);
  static const int transaction_breakdown_categories_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, io_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, io_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, processing_),
  };
  transaction_breakdown_categories_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      transaction_breakdown_categories_descriptor_,
      transaction_breakdown_categories::internal_default_instance(),
      transaction_breakdown_categories_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, _has_bits_),
      -1,
      -1,
      sizeof(transaction_breakdown_categories),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transaction_breakdown_categories, _internal_metadata_));
  counter_syscall_errors_descriptor_ = file->message_type(6);
  static const int counter_syscall_errors_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, top_error_codes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, count_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, count_file_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, count_net_),
  };
  counter_syscall_errors_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      counter_syscall_errors_descriptor_,
      counter_syscall_errors::internal_default_instance(),
      counter_syscall_errors_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, _has_bits_),
      -1,
      -1,
      sizeof(counter_syscall_errors),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_syscall_errors, _internal_metadata_));
  resource_categories_descriptor_ = file->message_type(7);
  static const int resource_categories_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, capacity_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, stolen_capacity_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, connection_queue_usage_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, fd_usage_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, cpu_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, resident_memory_usage_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, virtual_memory_usage_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, swap_memory_usage_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, major_pagefaults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, minor_pagefaults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, fd_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, cpu_shares_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, cpu_shares_usage_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, memory_limit_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, swap_limit_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, cpu_quota_used_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, swap_memory_total_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, swap_memory_available_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, count_processes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, proc_start_count_),
  };
  resource_categories_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      resource_categories_descriptor_,
      resource_categories::internal_default_instance(),
      resource_categories_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, _has_bits_),
      -1,
      -1,
      sizeof(resource_categories),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resource_categories, _internal_metadata_));
  connection_categories_descriptor_ = file->message_type(8);
  static const int connection_categories_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, min_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, max_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, n_aggregated_connections_),
  };
  connection_categories_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      connection_categories_descriptor_,
      connection_categories::internal_default_instance(),
      connection_categories_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, _has_bits_),
      -1,
      -1,
      sizeof(connection_categories),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_categories, _internal_metadata_));
  process_details_descriptor_ = file->message_type(9);
  static const int process_details_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, comm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, exe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, container_id_),
  };
  process_details_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      process_details_descriptor_,
      process_details::internal_default_instance(),
      process_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, _has_bits_),
      -1,
      -1,
      sizeof(process_details),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process_details, _internal_metadata_));
  command_details_descriptor_ = file->message_type(10);
  static const int command_details_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command_details, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command_details, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command_details, cmdline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command_details, exe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command_details, parentcomm_),
  };
  command_details_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      command_details_descriptor_,
      command_details::internal_default_instance(),
      command_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command_details, _has_bits_),
      -1,
      -1,
      sizeof(command_details),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command_details, _internal_metadata_));
  counter_proto_entry_descriptor_ = file->message_type(11);
  static const int counter_proto_entry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, ncalls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, time_tot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, time_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, bytes_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, bytes_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, nerrors_),
  };
  counter_proto_entry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      counter_proto_entry_descriptor_,
      counter_proto_entry::internal_default_instance(),
      counter_proto_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, _has_bits_),
      -1,
      -1,
      sizeof(counter_proto_entry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(counter_proto_entry, _internal_metadata_));
  url_details_descriptor_ = file->message_type(12);
  static const int url_details_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_details, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_details, counters_),
  };
  url_details_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      url_details_descriptor_,
      url_details::internal_default_instance(),
      url_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_details, _has_bits_),
      -1,
      -1,
      sizeof(url_details),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_details, _internal_metadata_));
  status_code_details_descriptor_ = file->message_type(13);
  static const int status_code_details_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(status_code_details, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(status_code_details, ncalls_),
  };
  status_code_details_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      status_code_details_descriptor_,
      status_code_details::internal_default_instance(),
      status_code_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(status_code_details, _has_bits_),
      -1,
      -1,
      sizeof(status_code_details),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(status_code_details, _internal_metadata_));
  http_info_descriptor_ = file->message_type(14);
  static const int http_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(http_info, server_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(http_info, client_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(http_info, client_status_codes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(http_info, server_status_codes_),
  };
  http_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      http_info_descriptor_,
      http_info::internal_default_instance(),
      http_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(http_info, _has_bits_),
      -1,
      -1,
      sizeof(http_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(http_info, _internal_metadata_));
  sql_entry_details_descriptor_ = file->message_type(15);
  static const int sql_entry_details_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_entry_details, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_entry_details, counters_),
  };
  sql_entry_details_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sql_entry_details_descriptor_,
      sql_entry_details::internal_default_instance(),
      sql_entry_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_entry_details, _has_bits_),
      -1,
      -1,
      sizeof(sql_entry_details),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_entry_details, _internal_metadata_));
  sql_query_type_details_descriptor_ = file->message_type(16);
  static const int sql_query_type_details_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_query_type_details, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_query_type_details, counters_),
  };
  sql_query_type_details_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sql_query_type_details_descriptor_,
      sql_query_type_details::internal_default_instance(),
      sql_query_type_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_query_type_details, _has_bits_),
      -1,
      -1,
      sizeof(sql_query_type_details),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_query_type_details, _internal_metadata_));
  sql_info_descriptor_ = file->message_type(17);
  static const int sql_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, server_queries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, client_queries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, server_query_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, client_query_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, server_tables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, client_tables_),
  };
  sql_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sql_info_descriptor_,
      sql_info::internal_default_instance(),
      sql_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, _has_bits_),
      -1,
      -1,
      sizeof(sql_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_info, _internal_metadata_));
  mongodb_collection_details_descriptor_ = file->message_type(18);
  static const int mongodb_collection_details_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_collection_details, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_collection_details, counters_),
  };
  mongodb_collection_details_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      mongodb_collection_details_descriptor_,
      mongodb_collection_details::internal_default_instance(),
      mongodb_collection_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_collection_details, _has_bits_),
      -1,
      -1,
      sizeof(mongodb_collection_details),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_collection_details, _internal_metadata_));
  mongodb_op_type_details_descriptor_ = file->message_type(19);
  static const int mongodb_op_type_details_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_op_type_details, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_op_type_details, counters_),
  };
  mongodb_op_type_details_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      mongodb_op_type_details_descriptor_,
      mongodb_op_type_details::internal_default_instance(),
      mongodb_op_type_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_op_type_details, _has_bits_),
      -1,
      -1,
      sizeof(mongodb_op_type_details),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_op_type_details, _internal_metadata_));
  mongodb_info_descriptor_ = file->message_type(20);
  static const int mongodb_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_info, servers_ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_info, client_ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_info, server_collections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_info, client_collections_),
  };
  mongodb_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      mongodb_info_descriptor_,
      mongodb_info::internal_default_instance(),
      mongodb_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_info, _has_bits_),
      -1,
      -1,
      sizeof(mongodb_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mongodb_info, _internal_metadata_));
  jmx_attribute_descriptor_ = file->message_type(21);
  static const int jmx_attribute_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, subattributes_),
  };
  jmx_attribute_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      jmx_attribute_descriptor_,
      jmx_attribute::internal_default_instance(),
      jmx_attribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, _has_bits_),
      -1,
      -1,
      sizeof(jmx_attribute),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_attribute, _internal_metadata_));
  jmx_bean_descriptor_ = file->message_type(22);
  static const int jmx_bean_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_bean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_bean, attributes_),
  };
  jmx_bean_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      jmx_bean_descriptor_,
      jmx_bean::internal_default_instance(),
      jmx_bean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_bean, _has_bits_),
      -1,
      -1,
      sizeof(jmx_bean),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jmx_bean, _internal_metadata_));
  java_info_descriptor_ = file->message_type(23);
  static const int java_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(java_info, process_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(java_info, beans_),
  };
  java_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      java_info_descriptor_,
      java_info::internal_default_instance(),
      java_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(java_info, _has_bits_),
      -1,
      -1,
      sizeof(java_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(java_info, _internal_metadata_));
  statsd_tag_descriptor_ = file->message_type(24);
  static const int statsd_tag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_tag, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_tag, value_),
  };
  statsd_tag_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      statsd_tag_descriptor_,
      statsd_tag::internal_default_instance(),
      statsd_tag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_tag, _has_bits_),
      -1,
      -1,
      sizeof(statsd_tag),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_tag, _internal_metadata_));
  statsd_metric_descriptor_ = file->message_type(25);
  static const int statsd_metric_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, median_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, percentile_95_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, percentile_99_),
  };
  statsd_metric_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      statsd_metric_descriptor_,
      statsd_metric::internal_default_instance(),
      statsd_metric_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, _has_bits_),
      -1,
      -1,
      sizeof(statsd_metric),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_metric, _internal_metadata_));
  statsd_info_descriptor_ = file->message_type(26);
  static const int statsd_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_info, statsd_metrics_),
  };
  statsd_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      statsd_info_descriptor_,
      statsd_info::internal_default_instance(),
      statsd_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_info, _has_bits_),
      -1,
      -1,
      sizeof(statsd_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statsd_info, _internal_metadata_));
  app_tag_descriptor_ = file->message_type(27);
  static const int app_tag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_tag, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_tag, value_),
  };
  app_tag_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      app_tag_descriptor_,
      app_tag::internal_default_instance(),
      app_tag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_tag, _has_bits_),
      -1,
      -1,
      sizeof(app_tag),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_tag, _internal_metadata_));
  app_metric_descriptor_ = file->message_type(28);
  static const int app_metric_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_metric, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_metric, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_metric, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_metric, tags_),
  };
  app_metric_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      app_metric_descriptor_,
      app_metric::internal_default_instance(),
      app_metric_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_metric, _has_bits_),
      -1,
      -1,
      sizeof(app_metric),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_metric, _internal_metadata_));
  app_check_descriptor_ = file->message_type(29);
  static const int app_check_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_check, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_check, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_check, tags_),
  };
  app_check_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      app_check_descriptor_,
      app_check::internal_default_instance(),
      app_check_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_check, _has_bits_),
      -1,
      -1,
      sizeof(app_check),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_check, _internal_metadata_));
  app_info_descriptor_ = file->message_type(30);
  static const int app_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_info, process_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_info, metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_info, checks_),
  };
  app_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      app_info_descriptor_,
      app_info::internal_default_instance(),
      app_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_info, _has_bits_),
      -1,
      -1,
      sizeof(app_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_info, _internal_metadata_));
  proto_info_descriptor_ = file->message_type(31);
  static const int proto_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, http_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, mysql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, postgres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, mongodb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, java_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, statsd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, app_),
  };
  proto_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      proto_info_descriptor_,
      proto_info::internal_default_instance(),
      proto_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, _has_bits_),
      -1,
      -1,
      sizeof(proto_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_info, _internal_metadata_));
  network_by_port_descriptor_ = file->message_type(32);
  static const int network_by_port_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(network_by_port, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(network_by_port, counters_),
  };
  network_by_port_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      network_by_port_descriptor_,
      network_by_port::internal_default_instance(),
      network_by_port_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(network_by_port, _has_bits_),
      -1,
      -1,
      sizeof(network_by_port),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(network_by_port, _internal_metadata_));
  host_descriptor_ = file->message_type(33);
  static const int host_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, num_cpus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, cpu_loads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, cpu_steal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, physical_memory_size_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, tcounters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, reqcounters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, min_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, max_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, transaction_processing_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, next_tiers_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, resource_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, syscall_errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, external_io_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, network_by_serverports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, cpu_idle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, system_cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, user_cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, memory_bytes_available_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, iowait_cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, nice_cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, system_load_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, system_load_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, system_load_15_),
  };
  host_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      host_descriptor_,
      host::internal_default_instance(),
      host_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, _has_bits_),
      -1,
      -1,
      sizeof(host),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(host, _internal_metadata_));
  process_descriptor_ = file->message_type(34);
  static const int process_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, is_ipv4_transaction_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, is_unix_transaction_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, is_ipv4_transaction_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, is_unix_transaction_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, netrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, tcounters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, min_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, max_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, transaction_processing_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, next_tiers_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, resource_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, syscall_errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, protos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, start_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, count_processes_),
  };
  process_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      process_descriptor_,
      process::internal_default_instance(),
      process_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, _has_bits_),
      -1,
      -1,
      sizeof(process),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(process, _internal_metadata_));
  program_descriptor_ = file->message_type(35);
  static const int program_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(program, procinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(program, pids_),
  };
  program_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      program_descriptor_,
      program::internal_default_instance(),
      program_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(program, _has_bits_),
      -1,
      -1,
      sizeof(program),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(program, _internal_metadata_));
  ipv4tuple_descriptor_ = file->message_type(36);
  static const int ipv4tuple_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, sip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, dip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, sport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, dport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, l4proto_),
  };
  ipv4tuple_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ipv4tuple_descriptor_,
      ipv4tuple::internal_default_instance(),
      ipv4tuple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, _has_bits_),
      -1,
      -1,
      sizeof(ipv4tuple),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4tuple, _internal_metadata_));
  ipv4_connection_descriptor_ = file->message_type(37);
  static const int ipv4_connection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, tuple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, spid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, dpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, counters_),
  };
  ipv4_connection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ipv4_connection_descriptor_,
      ipv4_connection::internal_default_instance(),
      ipv4_connection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, _has_bits_),
      -1,
      -1,
      sizeof(ipv4_connection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_connection, _internal_metadata_));
  ipv4_network_interface_descriptor_ = file->message_type(38);
  static const int ipv4_network_interface_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, netmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, bcast_),
  };
  ipv4_network_interface_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ipv4_network_interface_descriptor_,
      ipv4_network_interface::internal_default_instance(),
      ipv4_network_interface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, _has_bits_),
      -1,
      -1,
      sizeof(ipv4_network_interface),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_network_interface, _internal_metadata_));
  mounted_fs_descriptor_ = file->message_type(39);
  static const int mounted_fs_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, mount_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, size_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, used_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, available_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, total_inodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, used_inodes_),
  };
  mounted_fs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      mounted_fs_descriptor_,
      mounted_fs::internal_default_instance(),
      mounted_fs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, _has_bits_),
      -1,
      -1,
      sizeof(mounted_fs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounted_fs, _internal_metadata_));
  file_stat_descriptor_ = file->message_type(40);
  static const int file_stat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_stat, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_stat, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_stat, time_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_stat, open_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_stat, errors_),
  };
  file_stat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      file_stat_descriptor_,
      file_stat::internal_default_instance(),
      file_stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_stat, _has_bits_),
      -1,
      -1,
      sizeof(file_stat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_stat, _internal_metadata_));
  container_port_mapping_descriptor_ = file->message_type(41);
  static const int container_port_mapping_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_port_mapping, host_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_port_mapping, host_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_port_mapping, container_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_port_mapping, container_port_),
  };
  container_port_mapping_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      container_port_mapping_descriptor_,
      container_port_mapping::internal_default_instance(),
      container_port_mapping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_port_mapping, _has_bits_),
      -1,
      -1,
      sizeof(container_port_mapping),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_port_mapping, _internal_metadata_));
  container_label_descriptor_ = file->message_type(42);
  static const int container_label_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_label, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_label, value_),
  };
  container_label_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      container_label_descriptor_,
      container_label::internal_default_instance(),
      container_label_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_label, _has_bits_),
      -1,
      -1,
      sizeof(container_label),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container_label, _internal_metadata_));
  container_descriptor_ = file->message_type(43);
  static const int container_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, tcounters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, reqcounters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, min_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, max_transaction_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, transaction_processing_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, next_tiers_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, resource_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, syscall_errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, port_mappings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, protos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, mounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, network_by_serverports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, mesos_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, image_id_),
  };
  container_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      container_descriptor_,
      container::internal_default_instance(),
      container_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, _has_bits_),
      -1,
      -1,
      sizeof(container),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(container, _internal_metadata_));
  k8s_pair_descriptor_ = file->message_type(44);
  static const int k8s_pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pair, value_),
  };
  k8s_pair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      k8s_pair_descriptor_,
      k8s_pair::internal_default_instance(),
      k8s_pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pair, _has_bits_),
      -1,
      -1,
      sizeof(k8s_pair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pair, _internal_metadata_));
  k8s_common_descriptor_ = file->message_type(45);
  static const int k8s_common_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_common, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_common, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_common, namespace__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_common, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_common, selectors_),
  };
  k8s_common_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      k8s_common_descriptor_,
      k8s_common::internal_default_instance(),
      k8s_common_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_common, _has_bits_),
      -1,
      -1,
      sizeof(k8s_common),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_common, _internal_metadata_));
  k8s_namespace_descriptor_ = file->message_type(46);
  static const int k8s_namespace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_namespace, common_),
  };
  k8s_namespace_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      k8s_namespace_descriptor_,
      k8s_namespace::internal_default_instance(),
      k8s_namespace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_namespace, _has_bits_),
      -1,
      -1,
      sizeof(k8s_namespace),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_namespace, _internal_metadata_));
  k8s_node_descriptor_ = file->message_type(47);
  static const int k8s_node_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_node, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_node, host_ips_),
  };
  k8s_node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      k8s_node_descriptor_,
      k8s_node::internal_default_instance(),
      k8s_node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_node, _has_bits_),
      -1,
      -1,
      sizeof(k8s_node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_node, _internal_metadata_));
  k8s_pod_descriptor_ = file->message_type(48);
  static const int k8s_pod_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, container_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, host_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, internal_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, restart_count_),
  };
  k8s_pod_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      k8s_pod_descriptor_,
      k8s_pod::internal_default_instance(),
      k8s_pod_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, _has_bits_),
      -1,
      -1,
      sizeof(k8s_pod),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_pod, _internal_metadata_));
  k8s_replication_controller_descriptor_ = file->message_type(49);
  static const int k8s_replication_controller_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replication_controller, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replication_controller, replicas_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replication_controller, replicas_running_),
  };
  k8s_replication_controller_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      k8s_replication_controller_descriptor_,
      k8s_replication_controller::internal_default_instance(),
      k8s_replication_controller_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replication_controller, _has_bits_),
      -1,
      -1,
      sizeof(k8s_replication_controller),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replication_controller, _internal_metadata_));
  k8s_replica_set_descriptor_ = file->message_type(50);
  static const int k8s_replica_set_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replica_set, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replica_set, replicas_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replica_set, replicas_running_),
  };
  k8s_replica_set_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      k8s_replica_set_descriptor_,
      k8s_replica_set::internal_default_instance(),
      k8s_replica_set_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replica_set, _has_bits_),
      -1,
      -1,
      sizeof(k8s_replica_set),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_replica_set, _internal_metadata_));
  k8s_service_descriptor_ = file->message_type(51);
  static const int k8s_service_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service, cluster_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service, ports_),
  };
  k8s_service_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      k8s_service_descriptor_,
      k8s_service::internal_default_instance(),
      k8s_service_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service, _has_bits_),
      -1,
      -1,
      sizeof(k8s_service),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service, _internal_metadata_));
  k8s_service_net_port_descriptor_ = k8s_service_descriptor_->nested_type(0);
  static const int k8s_service_net_port_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service_net_port, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service_net_port, target_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service_net_port, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service_net_port, node_port_),
  };
  k8s_service_net_port_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      k8s_service_net_port_descriptor_,
      k8s_service_net_port::internal_default_instance(),
      k8s_service_net_port_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service_net_port, _has_bits_),
      -1,
      -1,
      sizeof(k8s_service_net_port),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_service_net_port, _internal_metadata_));
  k8s_deployment_descriptor_ = file->message_type(52);
  static const int k8s_deployment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_deployment, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_deployment, replicas_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_deployment, replicas_running_),
  };
  k8s_deployment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      k8s_deployment_descriptor_,
      k8s_deployment::internal_default_instance(),
      k8s_deployment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_deployment, _has_bits_),
      -1,
      -1,
      sizeof(k8s_deployment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_deployment, _internal_metadata_));
  k8s_daemonset_descriptor_ = file->message_type(53);
  static const int k8s_daemonset_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_daemonset, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_daemonset, current_scheduled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_daemonset, desired_scheduled_),
  };
  k8s_daemonset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      k8s_daemonset_descriptor_,
      k8s_daemonset::internal_default_instance(),
      k8s_daemonset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_daemonset, _has_bits_),
      -1,
      -1,
      sizeof(k8s_daemonset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_daemonset, _internal_metadata_));
  k8s_state_descriptor_ = file->message_type(54);
  static const int k8s_state_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, namespaces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, pods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, controllers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, services_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, replica_sets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, deployments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, daemonsets_),
  };
  k8s_state_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      k8s_state_descriptor_,
      k8s_state::internal_default_instance(),
      k8s_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, _has_bits_),
      -1,
      -1,
      sizeof(k8s_state),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(k8s_state, _internal_metadata_));
  mesos_pair_descriptor_ = file->message_type(55);
  static const int mesos_pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_pair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_pair, value_),
  };
  mesos_pair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      mesos_pair_descriptor_,
      mesos_pair::internal_default_instance(),
      mesos_pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_pair, _has_bits_),
      -1,
      -1,
      sizeof(mesos_pair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_pair, _internal_metadata_));
  mesos_common_descriptor_ = file->message_type(56);
  static const int mesos_common_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_common, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_common, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_common, labels_),
  };
  mesos_common_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      mesos_common_descriptor_,
      mesos_common::internal_default_instance(),
      mesos_common_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_common, _has_bits_),
      -1,
      -1,
      sizeof(mesos_common),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_common, _internal_metadata_));
  mesos_task_descriptor_ = file->message_type(57);
  static const int mesos_task_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_task, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_task, slave_id_),
  };
  mesos_task_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      mesos_task_descriptor_,
      mesos_task::internal_default_instance(),
      mesos_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_task, _has_bits_),
      -1,
      -1,
      sizeof(mesos_task),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_task, _internal_metadata_));
  marathon_app_descriptor_ = file->message_type(58);
  static const int marathon_app_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_app, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_app, task_ids_),
  };
  marathon_app_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      marathon_app_descriptor_,
      marathon_app::internal_default_instance(),
      marathon_app_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_app, _has_bits_),
      -1,
      -1,
      sizeof(marathon_app),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_app, _internal_metadata_));
  marathon_group_descriptor_ = file->message_type(59);
  static const int marathon_group_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_group, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_group, apps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_group, groups_),
  };
  marathon_group_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      marathon_group_descriptor_,
      marathon_group::internal_default_instance(),
      marathon_group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_group, _has_bits_),
      -1,
      -1,
      sizeof(marathon_group),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marathon_group, _internal_metadata_));
  mesos_framework_descriptor_ = file->message_type(60);
  static const int mesos_framework_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_framework, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_framework, tasks_),
  };
  mesos_framework_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      mesos_framework_descriptor_,
      mesos_framework::internal_default_instance(),
      mesos_framework_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_framework, _has_bits_),
      -1,
      -1,
      sizeof(mesos_framework),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_framework, _internal_metadata_));
  mesos_slave_descriptor_ = file->message_type(61);
  static const int mesos_slave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_slave, common_),
  };
  mesos_slave_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      mesos_slave_descriptor_,
      mesos_slave::internal_default_instance(),
      mesos_slave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_slave, _has_bits_),
      -1,
      -1,
      sizeof(mesos_slave),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_slave, _internal_metadata_));
  mesos_state_descriptor_ = file->message_type(62);
  static const int mesos_state_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_state, frameworks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_state, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_state, slaves_),
  };
  mesos_state_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      mesos_state_descriptor_,
      mesos_state::internal_default_instance(),
      mesos_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_state, _has_bits_),
      -1,
      -1,
      sizeof(mesos_state),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mesos_state, _internal_metadata_));
  metrics_descriptor_ = file->message_type(63);
  static const int metrics_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, sampling_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, host_custom_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, host_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, is_host_hidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, hidden_processes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, hostinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, programs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, ipv4_connections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, ipv4_network_interfaces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, commands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, mounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, top_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, protos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, containers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, kubernetes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, mesos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, falcobl_),
  };
  metrics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      metrics_descriptor_,
      metrics::internal_default_instance(),
      metrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, _has_bits_),
      -1,
      -1,
      sizeof(metrics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metrics, _internal_metadata_));
  dump_request_start_descriptor_ = file->message_type(64);
  static const int dump_request_start_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, duration_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, filters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, token_),
  };
  dump_request_start_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      dump_request_start_descriptor_,
      dump_request_start::internal_default_instance(),
      dump_request_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, _has_bits_),
      -1,
      -1,
      sizeof(dump_request_start),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_start, _internal_metadata_));
  dump_request_stop_descriptor_ = file->message_type(65);
  static const int dump_request_stop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_stop, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_stop, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_stop, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_stop, token_),
  };
  dump_request_stop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      dump_request_stop_descriptor_,
      dump_request_stop::internal_default_instance(),
      dump_request_stop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_stop, _has_bits_),
      -1,
      -1,
      sizeof(dump_request_stop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_request_stop, _internal_metadata_));
  dump_response_descriptor_ = file->message_type(66);
  static const int dump_response_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, chunk_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, final_chunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, keep_alive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, final_size_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, token_),
  };
  dump_response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      dump_response_descriptor_,
      dump_response::internal_default_instance(),
      dump_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, _has_bits_),
      -1,
      -1,
      sizeof(dump_response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dump_response, _internal_metadata_));
  ssh_open_channel_descriptor_ = file->message_type(67);
  static const int ssh_open_channel_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, passphrase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, port_),
  };
  ssh_open_channel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ssh_open_channel_descriptor_,
      ssh_open_channel::internal_default_instance(),
      ssh_open_channel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, _has_bits_),
      -1,
      -1,
      sizeof(ssh_open_channel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_open_channel, _internal_metadata_));
  ssh_data_descriptor_ = file->message_type(68);
  static const int ssh_data_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, exit_status_),
  };
  ssh_data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ssh_data_descriptor_,
      ssh_data::internal_default_instance(),
      ssh_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, _has_bits_),
      -1,
      -1,
      sizeof(ssh_data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_data, _internal_metadata_));
  ssh_close_channel_descriptor_ = file->message_type(69);
  static const int ssh_close_channel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, token_),
  };
  ssh_close_channel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ssh_close_channel_descriptor_,
      ssh_close_channel::internal_default_instance(),
      ssh_close_channel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, _has_bits_),
      -1,
      -1,
      sizeof(ssh_close_channel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssh_close_channel, _internal_metadata_));
  auto_update_request_descriptor_ = file->message_type(70);
  static const int auto_update_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_update_request, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_update_request, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_update_request, customer_id_),
  };
  auto_update_request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      auto_update_request_descriptor_,
      auto_update_request::internal_default_instance(),
      auto_update_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_update_request, _has_bits_),
      -1,
      -1,
      sizeof(auto_update_request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_update_request, _internal_metadata_));
  dirty_shutdown_report_descriptor_ = file->message_type(71);
  static const int dirty_shutdown_report_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dirty_shutdown_report, timestamp_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dirty_shutdown_report, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dirty_shutdown_report, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dirty_shutdown_report, log_),
  };
  dirty_shutdown_report_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      dirty_shutdown_report_descriptor_,
      dirty_shutdown_report::internal_default_instance(),
      dirty_shutdown_report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dirty_shutdown_report, _has_bits_),
      -1,
      -1,
      sizeof(dirty_shutdown_report),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dirty_shutdown_report, _internal_metadata_));
  key_value_descriptor_ = file->message_type(72);
  static const int key_value_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(key_value, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(key_value, value_),
  };
  key_value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      key_value_descriptor_,
      key_value::internal_default_instance(),
      key_value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(key_value, _has_bits_),
      -1,
      -1,
      sizeof(key_value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(key_value, _internal_metadata_));
  agent_event_descriptor_ = file->message_type(73);
  static const int agent_event_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, timestamp_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, tags_),
  };
  agent_event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      agent_event_descriptor_,
      agent_event::internal_default_instance(),
      agent_event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, _has_bits_),
      -1,
      -1,
      sizeof(agent_event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_event, _internal_metadata_));
  config_file_descriptor_ = file->message_type(74);
  static const int config_file_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_file, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_file, content_),
  };
  config_file_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      config_file_descriptor_,
      config_file::internal_default_instance(),
      config_file_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_file, _has_bits_),
      -1,
      -1,
      sizeof(config_file),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_file, _internal_metadata_));
  config_data_descriptor_ = file->message_type(75);
  static const int config_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_data, config_files_),
  };
  config_data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      config_data_descriptor_,
      config_data::internal_default_instance(),
      config_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_data, _has_bits_),
      -1,
      -1,
      sizeof(config_data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_data, _internal_metadata_));
  error_message_descriptor_ = file->message_type(76);
  static const int error_message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_message, description_),
  };
  error_message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      error_message_descriptor_,
      error_message::internal_default_instance(),
      error_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_message, _has_bits_),
      -1,
      -1,
      sizeof(error_message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_message, _internal_metadata_));
  falco_subcategory_descriptor_ = file->message_type(77);
  static const int falco_subcategory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory, full_),
  };
  falco_subcategory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      falco_subcategory_descriptor_,
      falco_subcategory::internal_default_instance(),
      falco_subcategory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory, _has_bits_),
      -1,
      -1,
      sizeof(falco_subcategory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory, _internal_metadata_));
  falco_subcategory_container_descriptor_ = file->message_type(78);
  static const int falco_subcategory_container_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory_container, subcats_),
  };
  falco_subcategory_container_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      falco_subcategory_container_descriptor_,
      falco_subcategory_container::internal_default_instance(),
      falco_subcategory_container_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory_container, _has_bits_),
      -1,
      -1,
      sizeof(falco_subcategory_container),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_subcategory_container, _internal_metadata_));
  falco_category_descriptor_ = file->message_type(79);
  static const int falco_category_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_category, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_category, startup_subcats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_category, regular_subcats_),
  };
  falco_category_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      falco_category_descriptor_,
      falco_category::internal_default_instance(),
      falco_category_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_category, _has_bits_),
      -1,
      -1,
      sizeof(falco_category),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_category, _internal_metadata_));
  falco_prog_descriptor_ = file->message_type(80);
  static const int falco_prog_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, comm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, exe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, cats_),
  };
  falco_prog_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      falco_prog_descriptor_,
      falco_prog::internal_default_instance(),
      falco_prog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, _has_bits_),
      -1,
      -1,
      sizeof(falco_prog),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_prog, _internal_metadata_));
  falco_container_descriptor_ = file->message_type(81);
  static const int falco_container_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_container, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_container, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_container, image_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_container, image_id_),
  };
  falco_container_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      falco_container_descriptor_,
      falco_container::internal_default_instance(),
      falco_container_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_container, _has_bits_),
      -1,
      -1,
      sizeof(falco_container),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_container, _internal_metadata_));
  falco_baseline_descriptor_ = file->message_type(82);
  static const int falco_baseline_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_baseline, progs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_baseline, containers_),
  };
  falco_baseline_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      falco_baseline_descriptor_,
      falco_baseline::internal_default_instance(),
      falco_baseline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_baseline, _has_bits_),
      -1,
      -1,
      sizeof(falco_baseline),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(falco_baseline, _internal_metadata_));
  sql_statement_type_descriptor_ = file->enum_type(0);
  mongodb_op_type_descriptor_ = file->enum_type(1);
  unit_descriptor_ = file->enum_type(2);
  scale_descriptor_ = file->enum_type(3);
  jmx_metric_type_descriptor_ = file->enum_type(4);
  statsd_metric_type_descriptor_ = file->enum_type(5);
  app_metric_type_descriptor_ = file->enum_type(6);
  app_check_value_descriptor_ = file->enum_type(7);
  networkrole_descriptor_ = file->enum_type(8);
  message_type_descriptor_ = file->enum_type(9);
  container_type_descriptor_ = file->enum_type(10);
  error_type_descriptor_ = file->enum_type(11);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_draios_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      counter_time_descriptor_, counter_time::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      counter_time_bidirectional_descriptor_, counter_time_bidirectional::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      counter_bytes_descriptor_, counter_bytes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      counter_time_bytes_descriptor_, counter_time_bytes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      time_categories_descriptor_, time_categories::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      transaction_breakdown_categories_descriptor_, transaction_breakdown_categories::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      counter_syscall_errors_descriptor_, counter_syscall_errors::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      resource_categories_descriptor_, resource_categories::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      connection_categories_descriptor_, connection_categories::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      process_details_descriptor_, process_details::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      command_details_descriptor_, command_details::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      counter_proto_entry_descriptor_, counter_proto_entry::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      url_details_descriptor_, url_details::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      status_code_details_descriptor_, status_code_details::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      http_info_descriptor_, http_info::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sql_entry_details_descriptor_, sql_entry_details::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sql_query_type_details_descriptor_, sql_query_type_details::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sql_info_descriptor_, sql_info::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      mongodb_collection_details_descriptor_, mongodb_collection_details::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      mongodb_op_type_details_descriptor_, mongodb_op_type_details::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      mongodb_info_descriptor_, mongodb_info::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      jmx_attribute_descriptor_, jmx_attribute::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      jmx_bean_descriptor_, jmx_bean::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      java_info_descriptor_, java_info::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      statsd_tag_descriptor_, statsd_tag::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      statsd_metric_descriptor_, statsd_metric::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      statsd_info_descriptor_, statsd_info::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      app_tag_descriptor_, app_tag::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      app_metric_descriptor_, app_metric::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      app_check_descriptor_, app_check::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      app_info_descriptor_, app_info::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      proto_info_descriptor_, proto_info::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      network_by_port_descriptor_, network_by_port::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      host_descriptor_, host::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      process_descriptor_, process::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      program_descriptor_, program::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ipv4tuple_descriptor_, ipv4tuple::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ipv4_connection_descriptor_, ipv4_connection::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ipv4_network_interface_descriptor_, ipv4_network_interface::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      mounted_fs_descriptor_, mounted_fs::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      file_stat_descriptor_, file_stat::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      container_port_mapping_descriptor_, container_port_mapping::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      container_label_descriptor_, container_label::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      container_descriptor_, container::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      k8s_pair_descriptor_, k8s_pair::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      k8s_common_descriptor_, k8s_common::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      k8s_namespace_descriptor_, k8s_namespace::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      k8s_node_descriptor_, k8s_node::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      k8s_pod_descriptor_, k8s_pod::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      k8s_replication_controller_descriptor_, k8s_replication_controller::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      k8s_replica_set_descriptor_, k8s_replica_set::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      k8s_service_descriptor_, k8s_service::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      k8s_service_net_port_descriptor_, k8s_service_net_port::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      k8s_deployment_descriptor_, k8s_deployment::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      k8s_daemonset_descriptor_, k8s_daemonset::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      k8s_state_descriptor_, k8s_state::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      mesos_pair_descriptor_, mesos_pair::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      mesos_common_descriptor_, mesos_common::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      mesos_task_descriptor_, mesos_task::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      marathon_app_descriptor_, marathon_app::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      marathon_group_descriptor_, marathon_group::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      mesos_framework_descriptor_, mesos_framework::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      mesos_slave_descriptor_, mesos_slave::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      mesos_state_descriptor_, mesos_state::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      metrics_descriptor_, metrics::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      dump_request_start_descriptor_, dump_request_start::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      dump_request_stop_descriptor_, dump_request_stop::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      dump_response_descriptor_, dump_response::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ssh_open_channel_descriptor_, ssh_open_channel::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ssh_data_descriptor_, ssh_data::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ssh_close_channel_descriptor_, ssh_close_channel::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      auto_update_request_descriptor_, auto_update_request::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      dirty_shutdown_report_descriptor_, dirty_shutdown_report::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      key_value_descriptor_, key_value::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      agent_event_descriptor_, agent_event::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      config_file_descriptor_, config_file::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      config_data_descriptor_, config_data::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      error_message_descriptor_, error_message::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      falco_subcategory_descriptor_, falco_subcategory::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      falco_subcategory_container_descriptor_, falco_subcategory_container::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      falco_category_descriptor_, falco_category::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      falco_prog_descriptor_, falco_prog::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      falco_container_descriptor_, falco_container::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      falco_baseline_descriptor_, falco_baseline::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_draios_2eproto() {
  counter_time_default_instance_.Shutdown();
  delete counter_time_reflection_;
  counter_time_bidirectional_default_instance_.Shutdown();
  delete counter_time_bidirectional_reflection_;
  counter_bytes_default_instance_.Shutdown();
  delete counter_bytes_reflection_;
  counter_time_bytes_default_instance_.Shutdown();
  delete counter_time_bytes_reflection_;
  time_categories_default_instance_.Shutdown();
  delete time_categories_reflection_;
  transaction_breakdown_categories_default_instance_.Shutdown();
  delete transaction_breakdown_categories_reflection_;
  counter_syscall_errors_default_instance_.Shutdown();
  delete counter_syscall_errors_reflection_;
  resource_categories_default_instance_.Shutdown();
  delete resource_categories_reflection_;
  connection_categories_default_instance_.Shutdown();
  delete connection_categories_reflection_;
  process_details_default_instance_.Shutdown();
  delete process_details_reflection_;
  command_details_default_instance_.Shutdown();
  delete command_details_reflection_;
  counter_proto_entry_default_instance_.Shutdown();
  delete counter_proto_entry_reflection_;
  url_details_default_instance_.Shutdown();
  delete url_details_reflection_;
  status_code_details_default_instance_.Shutdown();
  delete status_code_details_reflection_;
  http_info_default_instance_.Shutdown();
  delete http_info_reflection_;
  sql_entry_details_default_instance_.Shutdown();
  delete sql_entry_details_reflection_;
  sql_query_type_details_default_instance_.Shutdown();
  delete sql_query_type_details_reflection_;
  sql_info_default_instance_.Shutdown();
  delete sql_info_reflection_;
  mongodb_collection_details_default_instance_.Shutdown();
  delete mongodb_collection_details_reflection_;
  mongodb_op_type_details_default_instance_.Shutdown();
  delete mongodb_op_type_details_reflection_;
  mongodb_info_default_instance_.Shutdown();
  delete mongodb_info_reflection_;
  jmx_attribute_default_instance_.Shutdown();
  delete jmx_attribute_reflection_;
  jmx_bean_default_instance_.Shutdown();
  delete jmx_bean_reflection_;
  java_info_default_instance_.Shutdown();
  delete java_info_reflection_;
  statsd_tag_default_instance_.Shutdown();
  delete statsd_tag_reflection_;
  statsd_metric_default_instance_.Shutdown();
  delete statsd_metric_reflection_;
  statsd_info_default_instance_.Shutdown();
  delete statsd_info_reflection_;
  app_tag_default_instance_.Shutdown();
  delete app_tag_reflection_;
  app_metric_default_instance_.Shutdown();
  delete app_metric_reflection_;
  app_check_default_instance_.Shutdown();
  delete app_check_reflection_;
  app_info_default_instance_.Shutdown();
  delete app_info_reflection_;
  proto_info_default_instance_.Shutdown();
  delete proto_info_reflection_;
  network_by_port_default_instance_.Shutdown();
  delete network_by_port_reflection_;
  host_default_instance_.Shutdown();
  delete host_reflection_;
  process_default_instance_.Shutdown();
  delete process_reflection_;
  program_default_instance_.Shutdown();
  delete program_reflection_;
  ipv4tuple_default_instance_.Shutdown();
  delete ipv4tuple_reflection_;
  ipv4_connection_default_instance_.Shutdown();
  delete ipv4_connection_reflection_;
  ipv4_network_interface_default_instance_.Shutdown();
  delete ipv4_network_interface_reflection_;
  mounted_fs_default_instance_.Shutdown();
  delete mounted_fs_reflection_;
  file_stat_default_instance_.Shutdown();
  delete file_stat_reflection_;
  container_port_mapping_default_instance_.Shutdown();
  delete container_port_mapping_reflection_;
  container_label_default_instance_.Shutdown();
  delete container_label_reflection_;
  container_default_instance_.Shutdown();
  delete container_reflection_;
  k8s_pair_default_instance_.Shutdown();
  delete k8s_pair_reflection_;
  k8s_common_default_instance_.Shutdown();
  delete k8s_common_reflection_;
  k8s_namespace_default_instance_.Shutdown();
  delete k8s_namespace_reflection_;
  k8s_node_default_instance_.Shutdown();
  delete k8s_node_reflection_;
  k8s_pod_default_instance_.Shutdown();
  delete k8s_pod_reflection_;
  k8s_replication_controller_default_instance_.Shutdown();
  delete k8s_replication_controller_reflection_;
  k8s_replica_set_default_instance_.Shutdown();
  delete k8s_replica_set_reflection_;
  k8s_service_default_instance_.Shutdown();
  delete k8s_service_reflection_;
  k8s_service_net_port_default_instance_.Shutdown();
  delete k8s_service_net_port_reflection_;
  k8s_deployment_default_instance_.Shutdown();
  delete k8s_deployment_reflection_;
  k8s_daemonset_default_instance_.Shutdown();
  delete k8s_daemonset_reflection_;
  k8s_state_default_instance_.Shutdown();
  delete k8s_state_reflection_;
  mesos_pair_default_instance_.Shutdown();
  delete mesos_pair_reflection_;
  mesos_common_default_instance_.Shutdown();
  delete mesos_common_reflection_;
  mesos_task_default_instance_.Shutdown();
  delete mesos_task_reflection_;
  marathon_app_default_instance_.Shutdown();
  delete marathon_app_reflection_;
  marathon_group_default_instance_.Shutdown();
  delete marathon_group_reflection_;
  mesos_framework_default_instance_.Shutdown();
  delete mesos_framework_reflection_;
  mesos_slave_default_instance_.Shutdown();
  delete mesos_slave_reflection_;
  mesos_state_default_instance_.Shutdown();
  delete mesos_state_reflection_;
  metrics_default_instance_.Shutdown();
  delete metrics_reflection_;
  dump_request_start_default_instance_.Shutdown();
  delete dump_request_start_reflection_;
  dump_request_stop_default_instance_.Shutdown();
  delete dump_request_stop_reflection_;
  dump_response_default_instance_.Shutdown();
  delete dump_response_reflection_;
  ssh_open_channel_default_instance_.Shutdown();
  delete ssh_open_channel_reflection_;
  ssh_data_default_instance_.Shutdown();
  delete ssh_data_reflection_;
  ssh_close_channel_default_instance_.Shutdown();
  delete ssh_close_channel_reflection_;
  auto_update_request_default_instance_.Shutdown();
  delete auto_update_request_reflection_;
  dirty_shutdown_report_default_instance_.Shutdown();
  delete dirty_shutdown_report_reflection_;
  key_value_default_instance_.Shutdown();
  delete key_value_reflection_;
  agent_event_default_instance_.Shutdown();
  delete agent_event_reflection_;
  config_file_default_instance_.Shutdown();
  delete config_file_reflection_;
  config_data_default_instance_.Shutdown();
  delete config_data_reflection_;
  error_message_default_instance_.Shutdown();
  delete error_message_reflection_;
  falco_subcategory_default_instance_.Shutdown();
  delete falco_subcategory_reflection_;
  falco_subcategory_container_default_instance_.Shutdown();
  delete falco_subcategory_container_reflection_;
  falco_category_default_instance_.Shutdown();
  delete falco_category_reflection_;
  falco_prog_default_instance_.Shutdown();
  delete falco_prog_reflection_;
  falco_container_default_instance_.Shutdown();
  delete falco_container_reflection_;
  falco_baseline_default_instance_.Shutdown();
  delete falco_baseline_reflection_;
}

void protobuf_InitDefaults_draios_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  counter_time_default_instance_.DefaultConstruct();
  counter_time_bidirectional_default_instance_.DefaultConstruct();
  counter_bytes_default_instance_.DefaultConstruct();
  counter_time_bytes_default_instance_.DefaultConstruct();
  time_categories_default_instance_.DefaultConstruct();
  transaction_breakdown_categories_default_instance_.DefaultConstruct();
  counter_syscall_errors_default_instance_.DefaultConstruct();
  resource_categories_default_instance_.DefaultConstruct();
  connection_categories_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  process_details_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  command_details_default_instance_.DefaultConstruct();
  counter_proto_entry_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  url_details_default_instance_.DefaultConstruct();
  status_code_details_default_instance_.DefaultConstruct();
  http_info_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  sql_entry_details_default_instance_.DefaultConstruct();
  sql_query_type_details_default_instance_.DefaultConstruct();
  sql_info_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  mongodb_collection_details_default_instance_.DefaultConstruct();
  mongodb_op_type_details_default_instance_.DefaultConstruct();
  mongodb_info_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  jmx_attribute_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  jmx_bean_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  java_info_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  statsd_tag_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  statsd_metric_default_instance_.DefaultConstruct();
  statsd_info_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  app_tag_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  app_metric_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  app_check_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  app_info_default_instance_.DefaultConstruct();
  proto_info_default_instance_.DefaultConstruct();
  network_by_port_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  host_default_instance_.DefaultConstruct();
  process_default_instance_.DefaultConstruct();
  program_default_instance_.DefaultConstruct();
  ipv4tuple_default_instance_.DefaultConstruct();
  ipv4_connection_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ipv4_network_interface_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  mounted_fs_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  file_stat_default_instance_.DefaultConstruct();
  container_port_mapping_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  container_label_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  container_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  k8s_pair_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  k8s_common_default_instance_.DefaultConstruct();
  k8s_namespace_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  k8s_node_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  k8s_pod_default_instance_.DefaultConstruct();
  k8s_replication_controller_default_instance_.DefaultConstruct();
  k8s_replica_set_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  k8s_service_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  k8s_service_net_port_default_instance_.DefaultConstruct();
  k8s_deployment_default_instance_.DefaultConstruct();
  k8s_daemonset_default_instance_.DefaultConstruct();
  k8s_state_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  mesos_pair_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  mesos_common_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  mesos_task_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  marathon_app_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  marathon_group_default_instance_.DefaultConstruct();
  mesos_framework_default_instance_.DefaultConstruct();
  mesos_slave_default_instance_.DefaultConstruct();
  mesos_state_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  metrics_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  dump_request_start_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  dump_request_stop_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  dump_response_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ssh_open_channel_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ssh_data_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ssh_close_channel_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  auto_update_request_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  dirty_shutdown_report_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  key_value_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  agent_event_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  config_file_default_instance_.DefaultConstruct();
  config_data_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  error_message_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  falco_subcategory_default_instance_.DefaultConstruct();
  falco_subcategory_container_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  falco_category_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  falco_prog_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  falco_container_default_instance_.DefaultConstruct();
  falco_baseline_default_instance_.DefaultConstruct();
  counter_time_default_instance_.get_mutable()->InitAsDefaultInstance();
  counter_time_bidirectional_default_instance_.get_mutable()->InitAsDefaultInstance();
  counter_bytes_default_instance_.get_mutable()->InitAsDefaultInstance();
  counter_time_bytes_default_instance_.get_mutable()->InitAsDefaultInstance();
  time_categories_default_instance_.get_mutable()->InitAsDefaultInstance();
  transaction_breakdown_categories_default_instance_.get_mutable()->InitAsDefaultInstance();
  counter_syscall_errors_default_instance_.get_mutable()->InitAsDefaultInstance();
  resource_categories_default_instance_.get_mutable()->InitAsDefaultInstance();
  connection_categories_default_instance_.get_mutable()->InitAsDefaultInstance();
  process_details_default_instance_.get_mutable()->InitAsDefaultInstance();
  command_details_default_instance_.get_mutable()->InitAsDefaultInstance();
  counter_proto_entry_default_instance_.get_mutable()->InitAsDefaultInstance();
  url_details_default_instance_.get_mutable()->InitAsDefaultInstance();
  status_code_details_default_instance_.get_mutable()->InitAsDefaultInstance();
  http_info_default_instance_.get_mutable()->InitAsDefaultInstance();
  sql_entry_details_default_instance_.get_mutable()->InitAsDefaultInstance();
  sql_query_type_details_default_instance_.get_mutable()->InitAsDefaultInstance();
  sql_info_default_instance_.get_mutable()->InitAsDefaultInstance();
  mongodb_collection_details_default_instance_.get_mutable()->InitAsDefaultInstance();
  mongodb_op_type_details_default_instance_.get_mutable()->InitAsDefaultInstance();
  mongodb_info_default_instance_.get_mutable()->InitAsDefaultInstance();
  jmx_attribute_default_instance_.get_mutable()->InitAsDefaultInstance();
  jmx_bean_default_instance_.get_mutable()->InitAsDefaultInstance();
  java_info_default_instance_.get_mutable()->InitAsDefaultInstance();
  statsd_tag_default_instance_.get_mutable()->InitAsDefaultInstance();
  statsd_metric_default_instance_.get_mutable()->InitAsDefaultInstance();
  statsd_info_default_instance_.get_mutable()->InitAsDefaultInstance();
  app_tag_default_instance_.get_mutable()->InitAsDefaultInstance();
  app_metric_default_instance_.get_mutable()->InitAsDefaultInstance();
  app_check_default_instance_.get_mutable()->InitAsDefaultInstance();
  app_info_default_instance_.get_mutable()->InitAsDefaultInstance();
  proto_info_default_instance_.get_mutable()->InitAsDefaultInstance();
  network_by_port_default_instance_.get_mutable()->InitAsDefaultInstance();
  host_default_instance_.get_mutable()->InitAsDefaultInstance();
  process_default_instance_.get_mutable()->InitAsDefaultInstance();
  program_default_instance_.get_mutable()->InitAsDefaultInstance();
  ipv4tuple_default_instance_.get_mutable()->InitAsDefaultInstance();
  ipv4_connection_default_instance_.get_mutable()->InitAsDefaultInstance();
  ipv4_network_interface_default_instance_.get_mutable()->InitAsDefaultInstance();
  mounted_fs_default_instance_.get_mutable()->InitAsDefaultInstance();
  file_stat_default_instance_.get_mutable()->InitAsDefaultInstance();
  container_port_mapping_default_instance_.get_mutable()->InitAsDefaultInstance();
  container_label_default_instance_.get_mutable()->InitAsDefaultInstance();
  container_default_instance_.get_mutable()->InitAsDefaultInstance();
  k8s_pair_default_instance_.get_mutable()->InitAsDefaultInstance();
  k8s_common_default_instance_.get_mutable()->InitAsDefaultInstance();
  k8s_namespace_default_instance_.get_mutable()->InitAsDefaultInstance();
  k8s_node_default_instance_.get_mutable()->InitAsDefaultInstance();
  k8s_pod_default_instance_.get_mutable()->InitAsDefaultInstance();
  k8s_replication_controller_default_instance_.get_mutable()->InitAsDefaultInstance();
  k8s_replica_set_default_instance_.get_mutable()->InitAsDefaultInstance();
  k8s_service_default_instance_.get_mutable()->InitAsDefaultInstance();
  k8s_service_net_port_default_instance_.get_mutable()->InitAsDefaultInstance();
  k8s_deployment_default_instance_.get_mutable()->InitAsDefaultInstance();
  k8s_daemonset_default_instance_.get_mutable()->InitAsDefaultInstance();
  k8s_state_default_instance_.get_mutable()->InitAsDefaultInstance();
  mesos_pair_default_instance_.get_mutable()->InitAsDefaultInstance();
  mesos_common_default_instance_.get_mutable()->InitAsDefaultInstance();
  mesos_task_default_instance_.get_mutable()->InitAsDefaultInstance();
  marathon_app_default_instance_.get_mutable()->InitAsDefaultInstance();
  marathon_group_default_instance_.get_mutable()->InitAsDefaultInstance();
  mesos_framework_default_instance_.get_mutable()->InitAsDefaultInstance();
  mesos_slave_default_instance_.get_mutable()->InitAsDefaultInstance();
  mesos_state_default_instance_.get_mutable()->InitAsDefaultInstance();
  metrics_default_instance_.get_mutable()->InitAsDefaultInstance();
  dump_request_start_default_instance_.get_mutable()->InitAsDefaultInstance();
  dump_request_stop_default_instance_.get_mutable()->InitAsDefaultInstance();
  dump_response_default_instance_.get_mutable()->InitAsDefaultInstance();
  ssh_open_channel_default_instance_.get_mutable()->InitAsDefaultInstance();
  ssh_data_default_instance_.get_mutable()->InitAsDefaultInstance();
  ssh_close_channel_default_instance_.get_mutable()->InitAsDefaultInstance();
  auto_update_request_default_instance_.get_mutable()->InitAsDefaultInstance();
  dirty_shutdown_report_default_instance_.get_mutable()->InitAsDefaultInstance();
  key_value_default_instance_.get_mutable()->InitAsDefaultInstance();
  agent_event_default_instance_.get_mutable()->InitAsDefaultInstance();
  config_file_default_instance_.get_mutable()->InitAsDefaultInstance();
  config_data_default_instance_.get_mutable()->InitAsDefaultInstance();
  error_message_default_instance_.get_mutable()->InitAsDefaultInstance();
  falco_subcategory_default_instance_.get_mutable()->InitAsDefaultInstance();
  falco_subcategory_container_default_instance_.get_mutable()->InitAsDefaultInstance();
  falco_category_default_instance_.get_mutable()->InitAsDefaultInstance();
  falco_prog_default_instance_.get_mutable()->InitAsDefaultInstance();
  falco_container_default_instance_.get_mutable()->InitAsDefaultInstance();
  falco_baseline_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_draios_2eproto_once_);
void protobuf_InitDefaults_draios_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_draios_2eproto_once_,
                 &protobuf_InitDefaults_draios_2eproto_impl);
}
void protobuf_AddDesc_draios_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_draios_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014draios.proto\022\013draiosproto\"G\n\014counter_t"
    "ime\022\r\n\005count\030\001 \002(\r\022\017\n\007time_ns\030\002 \002(\004\022\027\n\017t"
    "ime_percentage\030\003 \001(\r\"j\n\032counter_time_bid"
    "irectional\022\020\n\010count_in\030\001 \002(\r\022\021\n\tcount_ou"
    "t\030\002 \002(\r\022\022\n\ntime_ns_in\030\003 \002(\004\022\023\n\013time_ns_o"
    "ut\030\004 \002(\004\"Y\n\rcounter_bytes\022\020\n\010count_in\030\001 "
    "\002(\r\022\021\n\tcount_out\030\002 \002(\r\022\020\n\010bytes_in\030\003 \002(\r"
    "\022\021\n\tbytes_out\030\004 \002(\r\"\240\002\n\022counter_time_byt"
    "es\022\022\n\ntime_ns_in\030\001 \002(\004\022\023\n\013time_ns_out\030\002 "
    "\002(\004\022\025\n\rtime_ns_other\030\003 \002(\004\022\020\n\010count_in\030\004"
    " \002(\r\022\021\n\tcount_out\030\005 \002(\r\022\023\n\013count_other\030\006"
    " \002(\r\022\020\n\010bytes_in\030\007 \002(\r\022\021\n\tbytes_out\030\010 \002("
    "\r\022\023\n\013bytes_other\030\t \002(\r\022\032\n\022time_percentag"
    "e_in\030\n \001(\r\022\033\n\023time_percentage_out\030\013 \001(\r\022"
    "\035\n\025time_percentage_other\030\014 \001(\r\"\367\005\n\017time_"
    "categories\022*\n\007unknown\030\001 \001(\0132\031.draiosprot"
    "o.counter_time\022(\n\005other\030\002 \001(\0132\031.draiospr"
    "oto.counter_time\022\'\n\004file\030\003 \001(\0132\031.draiosp"
    "roto.counter_time\022&\n\003net\030\004 \001(\0132\031.draiosp"
    "roto.counter_time\022&\n\003ipc\030\005 \001(\0132\031.draiosp"
    "roto.counter_time\022)\n\006memory\030\006 \001(\0132\031.drai"
    "osproto.counter_time\022*\n\007process\030\007 \001(\0132\031."
    "draiosproto.counter_time\022(\n\005sleep\030\010 \001(\0132"
    "\031.draiosproto.counter_time\022)\n\006system\030\t \001"
    "(\0132\031.draiosproto.counter_time\022)\n\006signal\030"
    "\n \001(\0132\031.draiosproto.counter_time\022\'\n\004user"
    "\030\013 \001(\0132\031.draiosproto.counter_time\022\'\n\004tim"
    "e\030\014 \001(\0132\031.draiosproto.counter_time\0220\n\007io"
    "_file\030\r \001(\0132\037.draiosproto.counter_time_b"
    "ytes\022/\n\006io_net\030\016 \001(\0132\037.draiosproto.count"
    "er_time_bytes\0221\n\010io_other\030\017 \001(\0132\037.draios"
    "proto.counter_time_bytes\022\'\n\004wait\030\020 \001(\0132\031"
    ".draiosproto.counter_time\022-\n\nprocessing\030"
    "\021 \001(\0132\031.draiosproto.counter_time\"\336\001\n tra"
    "nsaction_breakdown_categories\022(\n\005other\030\002"
    " \001(\0132\031.draiosproto.counter_time\0220\n\007io_fi"
    "le\030\r \001(\0132\037.draiosproto.counter_time_byte"
    "s\022/\n\006io_net\030\016 \001(\0132\037.draiosproto.counter_"
    "time_bytes\022-\n\nprocessing\030\021 \001(\0132\031.draiosp"
    "roto.counter_time\"\200\001\n\026counter_syscall_er"
    "rors\022\r\n\005count\030\001 \002(\r\022\027\n\017top_error_codes\030\002"
    " \003(\r\022\022\n\ncount_file\030\004 \001(\r\022\027\n\017count_file_o"
    "pen\030\005 \001(\r\022\021\n\tcount_net\030\006 \001(\r\"\257\004\n\023resourc"
    "e_categories\022\026\n\016capacity_score\030\001 \001(\r\022\035\n\025"
    "stolen_capacity_score\030\006 \001(\r\022\"\n\032connectio"
    "n_queue_usage_pct\030\002 \001(\r\022\024\n\014fd_usage_pct\030"
    "\003 \001(\r\022\017\n\007cpu_pct\030\004 \001(\r\022 \n\030resident_memor"
    "y_usage_kb\030\005 \001(\r\022\037\n\027virtual_memory_usage"
    "_kb\030\r \001(\r\022\034\n\024swap_memory_usage_kb\030\016 \001(\r\022"
    "\030\n\020major_pagefaults\030\017 \001(\004\022\030\n\020minor_pagef"
    "aults\030\020 \001(\004\022\020\n\010fd_count\030\025 \001(\r\022\022\n\ncpu_sha"
    "res\030\030 \001(\r\022\034\n\024cpu_shares_usage_pct\030\031 \001(\r\022"
    "\027\n\017memory_limit_kb\030\032 \001(\r\022\025\n\rswap_limit_k"
    "b\030\033 \001(\r\022\032\n\022cpu_quota_used_pct\030\034 \001(\r\022\034\n\024s"
    "wap_memory_total_kb\030\035 \001(\r\022 \n\030swap_memory"
    "_available_kb\030\036 \001(\r\022\027\n\017count_processes\030\037"
    " \001(\004\022\030\n\020proc_start_count\030  \001(\004\"\356\002\n\025conne"
    "ction_categories\022*\n\006server\030\001 \001(\0132\032.draio"
    "sproto.counter_bytes\022*\n\006client\030\002 \001(\0132\032.d"
    "raiosproto.counter_bytes\022E\n\024transaction_"
    "counters\030\003 \001(\0132\'.draiosproto.counter_tim"
    "e_bidirectional\022I\n\030min_transaction_count"
    "ers\030\022 \001(\0132\'.draiosproto.counter_time_bid"
    "irectional\022I\n\030max_transaction_counters\030\023"
    " \001(\0132\'.draiosproto.counter_time_bidirect"
    "ional\022 \n\030n_aggregated_connections\030\004 \001(\r\""
    "P\n\017process_details\022\014\n\004comm\030\001 \002(\t\022\013\n\003exe\030"
    "\002 \002(\t\022\014\n\004args\030\003 \003(\t\022\024\n\014container_id\030\004 \001("
    "\t\"e\n\017command_details\022\021\n\ttimestamp\030\001 \002(\004\022"
    "\r\n\005count\030\002 \002(\r\022\017\n\007cmdline\030\003 \002(\t\022\013\n\003exe\030\004"
    " \002(\t\022\022\n\nparentcomm\030\005 \001(\t\"\177\n\023counter_prot"
    "o_entry\022\016\n\006ncalls\030\001 \002(\r\022\020\n\010time_tot\030\002 \002("
    "\004\022\020\n\010time_max\030\003 \002(\004\022\020\n\010bytes_in\030\004 \002(\004\022\021\n"
    "\tbytes_out\030\005 \002(\004\022\017\n\007nerrors\030\006 \002(\r\"N\n\013url"
    "_details\022\013\n\003url\030\001 \002(\t\0222\n\010counters\030\002 \002(\0132"
    " .draiosproto.counter_proto_entry\":\n\023sta"
    "tus_code_details\022\023\n\013status_code\030\001 \002(\r\022\016\n"
    "\006ncalls\030\002 \002(\r\"\347\001\n\thttp_info\022-\n\013server_ur"
    "ls\030\001 \003(\0132\030.draiosproto.url_details\022-\n\013cl"
    "ient_urls\030\002 \003(\0132\030.draiosproto.url_detail"
    "s\022=\n\023client_status_codes\030\003 \003(\0132 .draiosp"
    "roto.status_code_details\022=\n\023server_statu"
    "s_codes\030\004 \003(\0132 .draiosproto.status_code_"
    "details\"U\n\021sql_entry_details\022\014\n\004name\030\001 \002"
    "(\t\0222\n\010counters\030\002 \002(\0132 .draiosproto.count"
    "er_proto_entry\"{\n\026sql_query_type_details"
    "\022-\n\004type\030\001 \002(\0162\037.draiosproto.sql_stateme"
    "nt_type\0222\n\010counters\030\002 \002(\0132 .draiosproto."
    "counter_proto_entry\"\352\002\n\010sql_info\0226\n\016serv"
    "er_queries\030\001 \003(\0132\036.draiosproto.sql_entry"
    "_details\0226\n\016client_queries\030\002 \003(\0132\036.draio"
    "sproto.sql_entry_details\022\?\n\022server_query"
    "_types\030\003 \003(\0132#.draiosproto.sql_query_typ"
    "e_details\022\?\n\022client_query_types\030\004 \003(\0132#."
    "draiosproto.sql_query_type_details\0225\n\rse"
    "rver_tables\030\005 \003(\0132\036.draiosproto.sql_entr"
    "y_details\0225\n\rclient_tables\030\006 \003(\0132\036.draio"
    "sproto.sql_entry_details\"^\n\032mongodb_coll"
    "ection_details\022\014\n\004name\030\001 \002(\t\0222\n\010counters"
    "\030\002 \002(\0132 .draiosproto.counter_proto_entry"
    "\"w\n\027mongodb_op_type_details\022(\n\002op\030\001 \002(\0162"
    "\034.draiosproto.mongodb_op_type\0222\n\010counter"
    "s\030\002 \002(\0132 .draiosproto.counter_proto_entr"
    "y\"\215\002\n\014mongodb_info\0229\n\013servers_ops\030\001 \003(\0132"
    "$.draiosproto.mongodb_op_type_details\0228\n"
    "\nclient_ops\030\002 \003(\0132$.draiosproto.mongodb_"
    "op_type_details\022C\n\022server_collections\030\003 "
    "\003(\0132\'.draiosproto.mongodb_collection_det"
    "ails\022C\n\022client_collections\030\004 \003(\0132\'.draio"
    "sproto.mongodb_collection_details\"\336\001\n\rjm"
    "x_attribute\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\001"
    "\022\r\n\005alias\030\005 \001(\t\022*\n\004type\030\007 \001(\0162\034.draiospr"
    "oto.jmx_metric_type\022\037\n\004unit\030\010 \001(\0162\021.drai"
    "osproto.unit\022!\n\005scale\030\t \001(\0162\022.draiosprot"
    "o.scale\0221\n\rsubattributes\030\003 \003(\0132\032.draiosp"
    "roto.jmx_attribute\"H\n\010jmx_bean\022\014\n\004name\030\001"
    " \001(\t\022.\n\nattributes\030\002 \003(\0132\032.draiosproto.j"
    "mx_attribute\"G\n\tjava_info\022\024\n\014process_nam"
    "e\030\001 \001(\t\022$\n\005beans\030\002 \003(\0132\025.draiosproto.jmx"
    "_bean\"(\n\nstatsd_tag\022\013\n\003key\030\001 \002(\t\022\r\n\005valu"
    "e\030\002 \001(\t\"\366\001\n\rstatsd_metric\022\014\n\004name\030\001 \001(\t\022"
    "%\n\004tags\030\002 \003(\0132\027.draiosproto.statsd_tag\022-"
    "\n\004type\030\003 \001(\0162\037.draiosproto.statsd_metric"
    "_type\022\r\n\005value\030\004 \001(\001\022\013\n\003sum\030\005 \001(\001\022\013\n\003min"
    "\030\006 \001(\001\022\013\n\003max\030\007 \001(\001\022\r\n\005count\030\010 \001(\001\022\016\n\006me"
    "dian\030\t \001(\001\022\025\n\rpercentile_95\030\n \001(\001\022\025\n\rper"
    "centile_99\030\013 \001(\001\"A\n\013statsd_info\0222\n\016stats"
    "d_metrics\030\001 \003(\0132\032.draiosproto.statsd_met"
    "ric\"%\n\007app_tag\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \001"
    "(\t\"y\n\napp_metric\022\014\n\004name\030\001 \001(\t\022*\n\004type\030\002"
    " \001(\0162\034.draiosproto.app_metric_type\022\r\n\005va"
    "lue\030\003 \001(\001\022\"\n\004tags\030\004 \003(\0132\024.draiosproto.ap"
    "p_tag\"j\n\tapp_check\022\014\n\004name\030\001 \001(\t\022+\n\005valu"
    "e\030\002 \001(\0162\034.draiosproto.app_check_value\022\"\n"
    "\004tags\030\003 \003(\0132\024.draiosproto.app_tag\"r\n\010app"
    "_info\022\024\n\014process_name\030\001 \001(\t\022(\n\007metrics\030\002"
    " \003(\0132\027.draiosproto.app_metric\022&\n\006checks\030"
    "\003 \003(\0132\026.draiosproto.app_check\"\241\002\n\nproto_"
    "info\022$\n\004http\030\001 \001(\0132\026.draiosproto.http_in"
    "fo\022$\n\005mysql\030\002 \001(\0132\025.draiosproto.sql_info"
    "\022\'\n\010postgres\030\003 \001(\0132\025.draiosproto.sql_inf"
    "o\022*\n\007mongodb\030\004 \001(\0132\031.draiosproto.mongodb"
    "_info\022$\n\004java\030\005 \001(\0132\026.draiosproto.java_i"
    "nfo\022(\n\006statsd\030\006 \001(\0132\030.draiosproto.statsd"
    "_info\022\"\n\003app\030\007 \001(\0132\025.draiosproto.app_inf"
    "o\"U\n\017network_by_port\022\014\n\004port\030\001 \002(\r\0224\n\010co"
    "unters\030\002 \002(\0132\".draiosproto.connection_ca"
    "tegories\"\317\007\n\004host\022\020\n\010hostname\030\001 \001(\t\022\020\n\010n"
    "um_cpus\030\002 \001(\r\022\021\n\tcpu_loads\030\003 \003(\r\022\021\n\tcpu_"
    "steal\030\013 \003(\r\022\"\n\032physical_memory_size_byte"
    "s\030\004 \002(\004\022/\n\ttcounters\030\005 \001(\0132\034.draiosproto"
    ".time_categories\022B\n\013reqcounters\030\014 \001(\0132-."
    "draiosproto.transaction_breakdown_catego"
    "ries\022E\n\024transaction_counters\030\006 \001(\0132\'.dra"
    "iosproto.counter_time_bidirectional\022I\n\030m"
    "in_transaction_counters\030\026 \001(\0132\'.draiospr"
    "oto.counter_time_bidirectional\022I\n\030max_tr"
    "ansaction_counters\030\027 \001(\0132\'.draiosproto.c"
    "ounter_time_bidirectional\022$\n\034transaction"
    "_processing_delay\030\007 \001(\004\022\030\n\020next_tiers_de"
    "lay\030\r \001(\004\022;\n\021resource_counters\030\010 \001(\0132 .d"
    "raiosproto.resource_categories\022;\n\016syscal"
    "l_errors\030\t \001(\0132#.draiosproto.counter_sys"
    "call_errors\0228\n\017external_io_net\030\n \001(\0132\037.d"
    "raiosproto.counter_time_bytes\022<\n\026network"
    "_by_serverports\030\030 \003(\0132\034.draiosproto.netw"
    "ork_by_port\022\020\n\010cpu_idle\030\031 \003(\r\022\016\n\006uptime\030"
    "! \001(\004\022\022\n\nsystem_cpu\030\" \003(\r\022\020\n\010user_cpu\030# "
    "\003(\r\022!\n\031memory_bytes_available_kb\030$ \001(\004\022\022"
    "\n\niowait_cpu\030% \003(\r\022\020\n\010nice_cpu\030& \003(\r\022\025\n\r"
    "system_load_1\030) \001(\r\022\025\n\rsystem_load_5\030* \001"
    "(\r\022\026\n\016system_load_15\030+ \001(\r\"\370\005\n\007process\022-"
    "\n\007details\030\002 \001(\0132\034.draiosproto.process_de"
    "tails\022\"\n\032is_ipv4_transaction_server\030\003 \001("
    "\010\022\"\n\032is_unix_transaction_server\030\004 \001(\010\022\"\n"
    "\032is_ipv4_transaction_client\030\n \001(\010\022\"\n\032is_"
    "unix_transaction_client\030\013 \001(\010\022\017\n\007netrole"
    "\030\r \001(\r\022/\n\ttcounters\030\005 \001(\0132\034.draiosproto."
    "time_categories\022E\n\024transaction_counters\030"
    "\006 \001(\0132\'.draiosproto.counter_time_bidirec"
    "tional\022I\n\030min_transaction_counters\030\022 \001(\013"
    "2\'.draiosproto.counter_time_bidirectiona"
    "l\022I\n\030max_transaction_counters\030\023 \001(\0132\'.dr"
    "aiosproto.counter_time_bidirectional\022$\n\034"
    "transaction_processing_delay\030\007 \001(\004\022\030\n\020ne"
    "xt_tiers_delay\030\014 \001(\004\022;\n\021resource_counter"
    "s\030\010 \001(\0132 .draiosproto.resource_categorie"
    "s\022;\n\016syscall_errors\030\t \001(\0132#.draiosproto."
    "counter_syscall_errors\022\'\n\006protos\030\024 \001(\0132\027"
    ".draiosproto.proto_info\022\023\n\013start_count\030\025"
    " \001(\004\022\027\n\017count_processes\030\027 \001(\004\"\?\n\007program"
    "\022&\n\010procinfo\030\001 \002(\0132\024.draiosproto.process"
    "\022\014\n\004pids\030\002 \003(\004\"T\n\tipv4tuple\022\013\n\003sip\030\001 \002(\r"
    "\022\013\n\003dip\030\002 \002(\r\022\r\n\005sport\030\003 \002(\r\022\r\n\005dport\030\004 "
    "\002(\r\022\017\n\007l4proto\030\005 \002(\r\"\212\001\n\017ipv4_connection"
    "\022%\n\005tuple\030\001 \002(\0132\026.draiosproto.ipv4tuple\022"
    "\014\n\004spid\030\002 \001(\004\022\014\n\004dpid\030\005 \001(\004\0224\n\010counters\030"
    "\010 \002(\0132\".draiosproto.connection_categorie"
    "s\"T\n\026ipv4_network_interface\022\014\n\004name\030\001 \002("
    "\t\022\014\n\004addr\030\002 \002(\r\022\017\n\007netmask\030\003 \002(\r\022\r\n\005bcas"
    "t\030\004 \001(\r\"\251\001\n\nmounted_fs\022\016\n\006device\030\001 \002(\t\022\021"
    "\n\tmount_dir\030\002 \002(\t\022\014\n\004type\030\003 \002(\t\022\022\n\nsize_"
    "bytes\030\004 \002(\004\022\022\n\nused_bytes\030\005 \002(\004\022\027\n\017avail"
    "able_bytes\030\006 \002(\004\022\024\n\014total_inodes\030\n \001(\004\022\023"
    "\n\013used_inodes\030\013 \001(\004\"]\n\tfile_stat\022\014\n\004name"
    "\030\001 \002(\t\022\r\n\005bytes\030\002 \002(\r\022\017\n\007time_ns\030\003 \002(\004\022\022"
    "\n\nopen_count\030\004 \002(\r\022\016\n\006errors\030\005 \002(\r\"j\n\026co"
    "ntainer_port_mapping\022\017\n\007host_ip\030\001 \001(\r\022\021\n"
    "\thost_port\030\002 \001(\r\022\024\n\014container_ip\030\003 \001(\r\022\026"
    "\n\016container_port\030\004 \001(\r\"-\n\017container_labe"
    "l\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \001(\t\"\216\007\n\tcontai"
    "ner\022\n\n\002id\030\001 \002(\t\022)\n\004type\030\002 \001(\0162\033.draiospr"
    "oto.container_type\022\014\n\004name\030\003 \001(\t\022\r\n\005imag"
    "e\030\004 \001(\t\022/\n\ttcounters\030\005 \001(\0132\034.draiosproto"
    ".time_categories\022B\n\013reqcounters\030\006 \001(\0132-."
    "draiosproto.transaction_breakdown_catego"
    "ries\022E\n\024transaction_counters\030\007 \001(\0132\'.dra"
    "iosproto.counter_time_bidirectional\022I\n\030m"
    "in_transaction_counters\030\010 \001(\0132\'.draiospr"
    "oto.counter_time_bidirectional\022I\n\030max_tr"
    "ansaction_counters\030\t \001(\0132\'.draiosproto.c"
    "ounter_time_bidirectional\022$\n\034transaction"
    "_processing_delay\030\n \001(\004\022\030\n\020next_tiers_de"
    "lay\030\014 \001(\004\022;\n\021resource_counters\030\r \001(\0132 .d"
    "raiosproto.resource_categories\022;\n\016syscal"
    "l_errors\030\016 \001(\0132#.draiosproto.counter_sys"
    "call_errors\022:\n\rport_mappings\030\022 \003(\0132#.dra"
    "iosproto.container_port_mapping\022\'\n\006proto"
    "s\030\023 \001(\0132\027.draiosproto.proto_info\022,\n\006labe"
    "ls\030\024 \003(\0132\034.draiosproto.container_label\022\'"
    "\n\006mounts\030\025 \003(\0132\027.draiosproto.mounted_fs\022"
    "<\n\026network_by_serverports\030\026 \003(\0132\034.draios"
    "proto.network_by_port\022\025\n\rmesos_task_id\030\027"
    " \001(\t\022\020\n\010image_id\030\030 \001(\t\"&\n\010k8s_pair\022\013\n\003ke"
    "y\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\213\001\n\nk8s_common\022\014\n"
    "\004name\030\001 \002(\t\022\013\n\003uid\030\002 \002(\t\022\021\n\tnamespace\030\003 "
    "\001(\t\022%\n\006labels\030\004 \003(\0132\025.draiosproto.k8s_pa"
    "ir\022(\n\tselectors\030\005 \003(\0132\025.draiosproto.k8s_"
    "pair\"8\n\rk8s_namespace\022\'\n\006common\030\001 \002(\0132\027."
    "draiosproto.k8s_common\"E\n\010k8s_node\022\'\n\006co"
    "mmon\030\001 \002(\0132\027.draiosproto.k8s_common\022\020\n\010h"
    "ost_ips\030\002 \003(\t\"\231\001\n\007k8s_pod\022\'\n\006common\030\001 \002("
    "\0132\027.draiosproto.k8s_common\022\025\n\rcontainer_"
    "ids\030\002 \003(\t\022\021\n\tnode_name\030\003 \001(\t\022\017\n\007host_ip\030"
    "\004 \001(\t\022\023\n\013internal_ip\030\005 \001(\t\022\025\n\rrestart_co"
    "unt\030\006 \001(\r\"y\n\032k8s_replication_controller\022"
    "\'\n\006common\030\001 \002(\0132\027.draiosproto.k8s_common"
    "\022\030\n\020replicas_desired\030\002 \001(\r\022\030\n\020replicas_r"
    "unning\030\003 \001(\r\"n\n\017k8s_replica_set\022\'\n\006commo"
    "n\030\001 \002(\0132\027.draiosproto.k8s_common\022\030\n\020repl"
    "icas_desired\030\002 \001(\r\022\030\n\020replicas_running\030\003"
    " \001(\r\"\320\001\n\013k8s_service\022\'\n\006common\030\001 \002(\0132\027.d"
    "raiosproto.k8s_common\022\022\n\ncluster_ip\030\002 \001("
    "\t\0220\n\005ports\030\003 \003(\0132!.draiosproto.k8s_servi"
    "ce.net_port\032R\n\010net_port\022\014\n\004port\030\001 \002(\r\022\023\n"
    "\013target_port\030\002 \002(\r\022\020\n\010protocol\030\003 \001(\t\022\021\n\t"
    "node_port\030\004 \001(\r\"m\n\016k8s_deployment\022\'\n\006com"
    "mon\030\001 \002(\0132\027.draiosproto.k8s_common\022\030\n\020re"
    "plicas_desired\030\002 \001(\r\022\030\n\020replicas_running"
    "\030\003 \001(\r\"n\n\rk8s_daemonset\022\'\n\006common\030\001 \002(\0132"
    "\027.draiosproto.k8s_common\022\031\n\021current_sche"
    "duled\030\002 \001(\r\022\031\n\021desired_scheduled\030\003 \001(\r\"\205"
    "\003\n\tk8s_state\022.\n\nnamespaces\030\001 \003(\0132\032.draio"
    "sproto.k8s_namespace\022$\n\005nodes\030\002 \003(\0132\025.dr"
    "aiosproto.k8s_node\022\"\n\004pods\030\003 \003(\0132\024.draio"
    "sproto.k8s_pod\022<\n\013controllers\030\004 \003(\0132\'.dr"
    "aiosproto.k8s_replication_controller\022*\n\010"
    "services\030\005 \003(\0132\030.draiosproto.k8s_service"
    "\0222\n\014replica_sets\030\006 \003(\0132\034.draiosproto.k8s"
    "_replica_set\0220\n\013deployments\030\007 \003(\0132\033.drai"
    "osproto.k8s_deployment\022.\n\ndaemonsets\030\010 \003"
    "(\0132\032.draiosproto.k8s_daemonset\"(\n\nmesos_"
    "pair\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"R\n\014meso"
    "s_common\022\013\n\003uid\030\001 \002(\t\022\014\n\004name\030\002 \001(\t\022\'\n\006l"
    "abels\030\003 \003(\0132\027.draiosproto.mesos_pair\"I\n\n"
    "mesos_task\022)\n\006common\030\001 \002(\0132\031.draiosproto"
    ".mesos_common\022\020\n\010slave_id\030\002 \002(\t\",\n\014marat"
    "hon_app\022\n\n\002id\030\001 \002(\t\022\020\n\010task_ids\030\002 \003(\t\"r\n"
    "\016marathon_group\022\n\n\002id\030\001 \002(\t\022\'\n\004apps\030\002 \003("
    "\0132\031.draiosproto.marathon_app\022+\n\006groups\030\003"
    " \003(\0132\033.draiosproto.marathon_group\"d\n\017mes"
    "os_framework\022)\n\006common\030\001 \002(\0132\031.draiospro"
    "to.mesos_common\022&\n\005tasks\030\002 \003(\0132\027.draiosp"
    "roto.mesos_task\"8\n\013mesos_slave\022)\n\006common"
    "\030\001 \002(\0132\031.draiosproto.mesos_common\"\226\001\n\013me"
    "sos_state\0220\n\nframeworks\030\001 \003(\0132\034.draiospr"
    "oto.mesos_framework\022+\n\006groups\030\002 \003(\0132\033.dr"
    "aiosproto.marathon_group\022(\n\006slaves\030\003 \003(\013"
    "2\030.draiosproto.mesos_slave\"\266\006\n\007metrics\022\024"
    "\n\014timestamp_ns\030\001 \002(\004\022\022\n\nmachine_id\030\002 \002(\t"
    "\022\023\n\013customer_id\030\003 \001(\t\022\026\n\016sampling_ratio\030"
    "\n \001(\r\022\030\n\020host_custom_name\030\013 \001(\t\022\021\n\thost_"
    "tags\030\014 \001(\t\022\026\n\016is_host_hidden\030\016 \001(\010\022\030\n\020hi"
    "dden_processes\030\017 \001(\t\022\017\n\007version\030\020 \001(\t\022\023\n"
    "\013instance_id\030\025 \001(\t\022#\n\010hostinfo\030\004 \001(\0132\021.d"
    "raiosproto.host\022&\n\010programs\030\t \003(\0132\024.drai"
    "osproto.program\0226\n\020ipv4_connections\030\007 \003("
    "\0132\034.draiosproto.ipv4_connection\022D\n\027ipv4_"
    "network_interfaces\030\010 \003(\0132#.draiosproto.i"
    "pv4_network_interface\022.\n\010commands\030\021 \003(\0132"
    "\034.draiosproto.command_details\022\'\n\006mounts\030"
    "\022 \003(\0132\027.draiosproto.mounted_fs\022)\n\ttop_fi"
    "les\030\023 \003(\0132\026.draiosproto.file_stat\022\'\n\006pro"
    "tos\030\024 \001(\0132\027.draiosproto.proto_info\022*\n\nco"
    "ntainers\030\026 \003(\0132\026.draiosproto.container\022*"
    "\n\nkubernetes\030\030 \001(\0132\026.draiosproto.k8s_sta"
    "te\022\'\n\005mesos\030\031 \001(\0132\030.draiosproto.mesos_st"
    "ate\022(\n\006events\030\032 \003(\0132\030.draiosproto.agent_"
    "event\022,\n\007falcobl\030\033 \001(\0132\033.draiosproto.fal"
    "co_baseline\"\232\001\n\022dump_request_start\022\024\n\014ti"
    "mestamp_ns\030\001 \002(\004\022\022\n\nmachine_id\030\002 \002(\t\022\023\n\013"
    "customer_id\030\003 \001(\t\022\023\n\013duration_ns\030\004 \001(\004\022\017"
    "\n\007filters\030\005 \001(\t\022\020\n\010max_size\030\007 \001(\004\022\r\n\005tok"
    "en\030\006 \002(\t\"a\n\021dump_request_stop\022\024\n\014timesta"
    "mp_ns\030\001 \002(\004\022\022\n\nmachine_id\030\002 \002(\t\022\023\n\013custo"
    "mer_id\030\003 \001(\t\022\r\n\005token\030\004 \002(\t\"\322\001\n\rdump_res"
    "ponse\022\024\n\014timestamp_ns\030\001 \002(\004\022\022\n\nmachine_i"
    "d\030\002 \002(\t\022\023\n\013customer_id\030\003 \001(\t\022\020\n\010chunk_no"
    "\030\007 \001(\r\022\023\n\013final_chunk\030\010 \001(\010\022\022\n\nkeep_aliv"
    "e\030\t \001(\010\022\017\n\007content\030\004 \001(\014\022\030\n\020final_size_b"
    "ytes\030\n \001(\004\022\r\n\005error\030\005 \001(\t\022\r\n\005token\030\006 \002(\t"
    "\"\257\001\n\020ssh_open_channel\022\024\n\014timestamp_ns\030\001 "
    "\002(\004\022\022\n\nmachine_id\030\002 \002(\t\022\023\n\013customer_id\030\003"
    " \001(\t\022\r\n\005token\030\004 \002(\t\022\014\n\004user\030\005 \002(\t\022\020\n\010pas"
    "sword\030\006 \001(\t\022\013\n\003key\030\007 \001(\t\022\022\n\npassphrase\030\010"
    " \001(\t\022\014\n\004port\030\t \001(\r\"\212\001\n\010ssh_data\022\024\n\014times"
    "tamp_ns\030\001 \002(\004\022\022\n\nmachine_id\030\002 \002(\t\022\023\n\013cus"
    "tomer_id\030\003 \001(\t\022\r\n\005token\030\004 \002(\t\022\014\n\004data\030\005 "
    "\001(\014\022\r\n\005error\030\006 \001(\t\022\023\n\013exit_status\030\007 \001(\005\""
    "a\n\021ssh_close_channel\022\024\n\014timestamp_ns\030\001 \002"
    "(\004\022\022\n\nmachine_id\030\002 \002(\t\022\023\n\013customer_id\030\003 "
    "\001(\t\022\r\n\005token\030\004 \002(\t\"T\n\023auto_update_reques"
    "t\022\024\n\014timestamp_ns\030\001 \002(\004\022\022\n\nmachine_id\030\002 "
    "\002(\t\022\023\n\013customer_id\030\003 \001(\t\"c\n\025dirty_shutdo"
    "wn_report\022\024\n\014timestamp_ns\030\001 \002(\004\022\022\n\nmachi"
    "ne_id\030\002 \002(\t\022\023\n\013customer_id\030\003 \001(\t\022\013\n\003log\030"
    "\004 \002(\t\"\'\n\tkey_value\022\013\n\003key\030\001 \002(\t\022\r\n\005value"
    "\030\002 \002(\t\"\217\001\n\013agent_event\022\025\n\rtimestamp_sec\030"
    "\001 \001(\004\022\r\n\005scope\030\002 \001(\t\022\r\n\005title\030\003 \001(\t\022\023\n\013d"
    "escription\030\004 \001(\t\022\020\n\010severity\030\005 \001(\r\022$\n\004ta"
    "gs\030\006 \003(\0132\026.draiosproto.key_value\",\n\013conf"
    "ig_file\022\014\n\004name\030\001 \001(\t\022\017\n\007content\030\002 \001(\t\"="
    "\n\013config_data\022.\n\014config_files\030\001 \003(\0132\030.dr"
    "aiosproto.config_file\"K\n\rerror_message\022%"
    "\n\004type\030\001 \001(\0162\027.draiosproto.error_type\022\023\n"
    "\013description\030\002 \001(\t\":\n\021falco_subcategory\022"
    "\014\n\004name\030\001 \002(\t\022\t\n\001d\030\002 \003(\t\022\014\n\004full\030\003 \001(\010\"N"
    "\n\033falco_subcategory_container\022/\n\007subcats"
    "\030\001 \003(\0132\036.draiosproto.falco_subcategory\"\244"
    "\001\n\016falco_category\022\014\n\004name\030\001 \002(\t\022A\n\017start"
    "up_subcats\030\002 \003(\0132(.draiosproto.falco_sub"
    "category_container\022A\n\017regular_subcats\030\003 "
    "\003(\0132(.draiosproto.falco_subcategory_cont"
    "ainer\"\207\001\n\nfalco_prog\022\014\n\004comm\030\001 \002(\t\022\013\n\003ex"
    "e\030\002 \002(\t\022\014\n\004args\030\003 \003(\t\022\017\n\007user_id\030\004 \002(\004\022\024"
    "\n\014container_id\030\005 \001(\t\022)\n\004cats\030\006 \003(\0132\033.dra"
    "iosproto.falco_category\"Q\n\017falco_contain"
    "er\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\022\n\nimage_na"
    "me\030\003 \001(\t\022\020\n\010image_id\030\004 \001(\t\"j\n\016falco_base"
    "line\022&\n\005progs\030\001 \003(\0132\027.draiosproto.falco_"
    "prog\0220\n\ncontainers\030\002 \003(\0132\034.draiosproto.f"
    "alco_container*\346\001\n\022sql_statement_type\022\014\n"
    "\010SOP_NONE\020\000\022\016\n\nSOP_SELECT\020\001\022\016\n\nSOP_INSER"
    "T\020\002\022\013\n\007SOP_SET\020\003\022\016\n\nSOP_CREATE\020\004\022\016\n\nSOP_"
    "DELETE\020\005\022\014\n\010SOP_DROP\020\006\022\017\n\013SOP_REPLACE\020\007\022"
    "\016\n\nSOP_UPDATE\020\010\022\013\n\007SOP_USE\020\t\022\014\n\010SOP_SHOW"
    "\020\n\022\014\n\010SOP_LOCK\020\013\022\016\n\nSOP_UNLOCK\020\014\022\r\n\tSOP_"
    "ALTER\020\r*\206\003\n\017mongodb_op_type\022\023\n\017MONGODB_O"
    "P_NONE\020\000\022\025\n\021MONGODB_OP_INSERT\020\001\022\025\n\021MONGO"
    "DB_OP_UPDATE\020\002\022\025\n\021MONGODB_OP_DELETE\020\003\022\027\n"
    "\023MONGODB_OP_GET_MORE\020\004\022\033\n\027MONGODB_OP_KIL"
    "L_CURSORS\020\005\022\023\n\017MONGODB_OP_FIND\020\006\022\030\n\024MONG"
    "ODB_OP_AGGREGATE\020\007\022\026\n\022MONGODB_OP_COMMAND"
    "\020\010\022\024\n\020MONGODB_OP_COUNT\020\t\022\027\n\023MONGODB_OP_D"
    "ISTINCT\020\n\022\031\n\025MONGODB_OP_MAP_REDUCE\020\013\022\027\n\023"
    "MONGODB_OP_GEO_NEAR\020\014\022\031\n\025MONGODB_OP_GEO_"
    "SEARCH\020\r\022\036\n\032MONGODB_OP_FIND_AND_MODIFY\020\016"
    "*G\n\004unit\022\r\n\tUNIT_NONE\020\000\022\017\n\013UNIT_SECOND\020\001"
    "\022\r\n\tUNIT_BYTE\020\002\022\020\n\014UNIT_PERCENT\020\003*\221\002\n\005sc"
    "ale\022\016\n\nSCALE_NONE\020\000\022\017\n\013SCALE_MILLI\020\001\022\017\n\013"
    "SCALE_MICRO\020\002\022\016\n\nSCALE_NANO\020\003\022\020\n\014SCALE_M"
    "INUTE\020\004\022\016\n\nSCALE_HOUR\020\005\022\r\n\tSCALE_DAY\020\006\022\016"
    "\n\nSCALE_KILO\020\007\022\016\n\nSCALE_MEGA\020\010\022\016\n\nSCALE_"
    "GIGA\020\t\022\016\n\nSCALE_TERA\020\n\022\016\n\nSCALE_KIBI\020\013\022\016"
    "\n\nSCALE_MEBI\020\014\022\016\n\nSCALE_GIBI\020\r\022\016\n\nSCALE_"
    "TEBI\020\016\022\025\n\021SCALE_PERCENT_0_1\020\017*I\n\017jmx_met"
    "ric_type\022\033\n\027JMX_METRIC_TYPE_COUNTER\020\001\022\031\n"
    "\025JMX_METRIC_TYPE_GAUGE\020\002*^\n\022statsd_metri"
    "c_type\022\020\n\014STATSD_COUNT\020\001\022\024\n\020STATSD_HISTO"
    "GRAM\020\002\022\020\n\014STATSD_GAUGE\020\003\022\016\n\nSTATSD_SET\020\004"
    "*F\n\017app_metric_type\022\031\n\025APP_METRIC_TYPE_G"
    "AUGE\020\001\022\030\n\024APP_METRIC_TYPE_RATE\020\002*\201\001\n\017app"
    "_check_value\022\026\n\022APP_CHECK_VALUE_OK\020\000\022\033\n\027"
    "APP_CHECK_VALUE_WARNING\020\001\022\034\n\030APP_CHECK_V"
    "ALUE_CRITICAL\020\002\022\033\n\027APP_CHECK_VALUE_UNKNO"
    "WN\020\003*\251\001\n\013networkrole\022\010\n\004NONE\020\000\022\030\n\024IS_LOC"
    "AL_IPV4_SERVER\020\001\022\031\n\025IS_REMOTE_IPV4_SERVE"
    "R\020\002\022\022\n\016IS_UNIX_SERVER\020\004\022\030\n\024IS_LOCAL_IPV4"
    "_CLIENT\020\010\022\031\n\025IS_REMOTE_IPV4_CLIENT\020\020\022\022\n\016"
    "IS_UNIX_CLIENT\020 *\360\001\n\014message_type\022\013\n\007MET"
    "RICS\020\001\022\026\n\022DUMP_REQUEST_START\020\002\022\025\n\021DUMP_R"
    "EQUEST_STOP\020\004\022\021\n\rDUMP_RESPONSE\020\003\022\024\n\020SSH_"
    "OPEN_CHANNEL\020\006\022\025\n\021SSH_CLOSE_CHANNEL\020\007\022\014\n"
    "\010SSH_DATA\020\010\022\027\n\023AUTO_UPDATE_REQUEST\020\t\022\031\n\025"
    "DIRTY_SHUTDOWN_REPORT\020\n\022\017\n\013CONFIG_DATA\020\013"
    "\022\021\n\rERROR_MESSAGE\020\014*J\n\016container_type\022\n\n"
    "\006DOCKER\020\001\022\007\n\003LXC\020\002\022\017\n\013LIBVIRT_LXC\020\003\022\t\n\005M"
    "ESOS\020\004\022\007\n\003RKT\020\005*W\n\nerror_type\022\022\n\016ERR_CON"
    "N_LIMIT\020\001\022\034\n\030ERR_INVALID_CUSTOMER_KEY\020\002\022"
    "\027\n\023ERR_DUPLICATE_AGENT\020\003B$\n\031com.draios.m"
    "odel.protobufB\005AgentH\001", 16422);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "draios.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_draios_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_draios_2eproto_once_);
void protobuf_AddDesc_draios_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_draios_2eproto_once_,
                 &protobuf_AddDesc_draios_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_draios_2eproto {
  StaticDescriptorInitializer_draios_2eproto() {
    protobuf_AddDesc_draios_2eproto();
  }
} static_descriptor_initializer_draios_2eproto_;
const ::google::protobuf::EnumDescriptor* sql_statement_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_statement_type_descriptor_;
}
bool sql_statement_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* mongodb_op_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mongodb_op_type_descriptor_;
}
bool mongodb_op_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* unit_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_descriptor_;
}
bool unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* scale_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scale_descriptor_;
}
bool scale_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* jmx_metric_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return jmx_metric_type_descriptor_;
}
bool jmx_metric_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* statsd_metric_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statsd_metric_type_descriptor_;
}
bool statsd_metric_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* app_metric_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return app_metric_type_descriptor_;
}
bool app_metric_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* app_check_value_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return app_check_value_descriptor_;
}
bool app_check_value_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* networkrole_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return networkrole_descriptor_;
}
bool networkrole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* message_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return message_type_descriptor_;
}
bool message_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* container_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return container_type_descriptor_;
}
bool container_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* error_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return error_type_descriptor_;
}
bool error_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int counter_time::kCountFieldNumber;
const int counter_time::kTimeNsFieldNumber;
const int counter_time::kTimePercentageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

counter_time::counter_time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.counter_time)
}

void counter_time::InitAsDefaultInstance() {
}

counter_time::counter_time(const counter_time& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.counter_time)
}

void counter_time::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&time_ns_, 0, reinterpret_cast<char*>(&time_percentage_) -
    reinterpret_cast<char*>(&time_ns_) + sizeof(time_percentage_));
}

counter_time::~counter_time() {
  // @@protoc_insertion_point(destructor:draiosproto.counter_time)
  SharedDtor();
}

void counter_time::SharedDtor() {
}

void counter_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_time_descriptor_;
}

const counter_time& counter_time::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<counter_time> counter_time_default_instance_;

counter_time* counter_time::New(::google::protobuf::Arena* arena) const {
  counter_time* n = new counter_time;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void counter_time::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.counter_time)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(counter_time, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<counter_time*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_ns_, time_percentage_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool counter_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.counter_time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (tag == 8) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_ns;
        break;
      }

      // required uint64 time_ns = 2;
      case 2: {
        if (tag == 16) {
         parse_time_ns:
          set_has_time_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_percentage;
        break;
      }

      // optional uint32 time_percentage = 3;
      case 3: {
        if (tag == 24) {
         parse_time_percentage:
          set_has_time_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_percentage_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.counter_time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.counter_time)
  return false;
#undef DO_
}

void counter_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.counter_time)
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // required uint64 time_ns = 2;
  if (has_time_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time_ns(), output);
  }

  // optional uint32 time_percentage = 3;
  if (has_time_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_percentage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.counter_time)
}

::google::protobuf::uint8* counter_time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.counter_time)
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // required uint64 time_ns = 2;
  if (has_time_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time_ns(), target);
  }

  // optional uint32 time_percentage = 3;
  if (has_time_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_percentage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.counter_time)
  return target;
}

size_t counter_time::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.counter_time)
  size_t total_size = 0;

  if (has_count()) {
    // required uint32 count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  if (has_time_ns()) {
    // required uint64 time_ns = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_ns());
  }

  return total_size;
}
size_t counter_time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.counter_time)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

    // required uint64 time_ns = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_ns());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 time_percentage = 3;
  if (has_time_percentage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_percentage());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.counter_time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const counter_time* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const counter_time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.counter_time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.counter_time)
    UnsafeMergeFrom(*source);
  }
}

void counter_time::MergeFrom(const counter_time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.counter_time)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void counter_time::UnsafeMergeFrom(const counter_time& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_time_ns()) {
      set_time_ns(from.time_ns());
    }
    if (from.has_time_percentage()) {
      set_time_percentage(from.time_percentage());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void counter_time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.counter_time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_time::CopyFrom(const counter_time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.counter_time)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool counter_time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void counter_time::Swap(counter_time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void counter_time::InternalSwap(counter_time* other) {
  std::swap(count_, other->count_);
  std::swap(time_ns_, other->time_ns_);
  std::swap(time_percentage_, other->time_percentage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata counter_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_time_descriptor_;
  metadata.reflection = counter_time_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// counter_time

// required uint32 count = 1;
bool counter_time::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void counter_time::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void counter_time::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void counter_time::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 counter_time::count() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time.count)
  return count_;
}
void counter_time::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time.count)
}

// required uint64 time_ns = 2;
bool counter_time::has_time_ns() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void counter_time::set_has_time_ns() {
  _has_bits_[0] |= 0x00000002u;
}
void counter_time::clear_has_time_ns() {
  _has_bits_[0] &= ~0x00000002u;
}
void counter_time::clear_time_ns() {
  time_ns_ = GOOGLE_ULONGLONG(0);
  clear_has_time_ns();
}
::google::protobuf::uint64 counter_time::time_ns() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time.time_ns)
  return time_ns_;
}
void counter_time::set_time_ns(::google::protobuf::uint64 value) {
  set_has_time_ns();
  time_ns_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time.time_ns)
}

// optional uint32 time_percentage = 3;
bool counter_time::has_time_percentage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void counter_time::set_has_time_percentage() {
  _has_bits_[0] |= 0x00000004u;
}
void counter_time::clear_has_time_percentage() {
  _has_bits_[0] &= ~0x00000004u;
}
void counter_time::clear_time_percentage() {
  time_percentage_ = 0u;
  clear_has_time_percentage();
}
::google::protobuf::uint32 counter_time::time_percentage() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time.time_percentage)
  return time_percentage_;
}
void counter_time::set_time_percentage(::google::protobuf::uint32 value) {
  set_has_time_percentage();
  time_percentage_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time.time_percentage)
}

inline const counter_time* counter_time::internal_default_instance() {
  return &counter_time_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int counter_time_bidirectional::kCountInFieldNumber;
const int counter_time_bidirectional::kCountOutFieldNumber;
const int counter_time_bidirectional::kTimeNsInFieldNumber;
const int counter_time_bidirectional::kTimeNsOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

counter_time_bidirectional::counter_time_bidirectional()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.counter_time_bidirectional)
}

void counter_time_bidirectional::InitAsDefaultInstance() {
}

counter_time_bidirectional::counter_time_bidirectional(const counter_time_bidirectional& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.counter_time_bidirectional)
}

void counter_time_bidirectional::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&count_in_, 0, reinterpret_cast<char*>(&time_ns_out_) -
    reinterpret_cast<char*>(&count_in_) + sizeof(time_ns_out_));
}

counter_time_bidirectional::~counter_time_bidirectional() {
  // @@protoc_insertion_point(destructor:draiosproto.counter_time_bidirectional)
  SharedDtor();
}

void counter_time_bidirectional::SharedDtor() {
}

void counter_time_bidirectional::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_time_bidirectional::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_time_bidirectional_descriptor_;
}

const counter_time_bidirectional& counter_time_bidirectional::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<counter_time_bidirectional> counter_time_bidirectional_default_instance_;

counter_time_bidirectional* counter_time_bidirectional::New(::google::protobuf::Arena* arena) const {
  counter_time_bidirectional* n = new counter_time_bidirectional;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void counter_time_bidirectional::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.counter_time_bidirectional)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(counter_time_bidirectional, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<counter_time_bidirectional*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(count_in_, time_ns_out_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool counter_time_bidirectional::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.counter_time_bidirectional)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count_in = 1;
      case 1: {
        if (tag == 8) {
          set_has_count_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_in_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count_out;
        break;
      }

      // required uint32 count_out = 2;
      case 2: {
        if (tag == 16) {
         parse_count_out:
          set_has_count_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_out_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_ns_in;
        break;
      }

      // required uint64 time_ns_in = 3;
      case 3: {
        if (tag == 24) {
         parse_time_ns_in:
          set_has_time_ns_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_in_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_ns_out;
        break;
      }

      // required uint64 time_ns_out = 4;
      case 4: {
        if (tag == 32) {
         parse_time_ns_out:
          set_has_time_ns_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_out_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.counter_time_bidirectional)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.counter_time_bidirectional)
  return false;
#undef DO_
}

void counter_time_bidirectional::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.counter_time_bidirectional)
  // required uint32 count_in = 1;
  if (has_count_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count_in(), output);
  }

  // required uint32 count_out = 2;
  if (has_count_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count_out(), output);
  }

  // required uint64 time_ns_in = 3;
  if (has_time_ns_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_ns_in(), output);
  }

  // required uint64 time_ns_out = 4;
  if (has_time_ns_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time_ns_out(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.counter_time_bidirectional)
}

::google::protobuf::uint8* counter_time_bidirectional::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.counter_time_bidirectional)
  // required uint32 count_in = 1;
  if (has_count_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count_in(), target);
  }

  // required uint32 count_out = 2;
  if (has_count_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count_out(), target);
  }

  // required uint64 time_ns_in = 3;
  if (has_time_ns_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time_ns_in(), target);
  }

  // required uint64 time_ns_out = 4;
  if (has_time_ns_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time_ns_out(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.counter_time_bidirectional)
  return target;
}

size_t counter_time_bidirectional::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.counter_time_bidirectional)
  size_t total_size = 0;

  if (has_count_in()) {
    // required uint32 count_in = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_in());
  }

  if (has_count_out()) {
    // required uint32 count_out = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_out());
  }

  if (has_time_ns_in()) {
    // required uint64 time_ns_in = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_ns_in());
  }

  if (has_time_ns_out()) {
    // required uint64 time_ns_out = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_ns_out());
  }

  return total_size;
}
size_t counter_time_bidirectional::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.counter_time_bidirectional)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 count_in = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_in());

    // required uint32 count_out = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_out());

    // required uint64 time_ns_in = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_ns_in());

    // required uint64 time_ns_out = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_ns_out());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_time_bidirectional::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.counter_time_bidirectional)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const counter_time_bidirectional* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const counter_time_bidirectional>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.counter_time_bidirectional)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.counter_time_bidirectional)
    UnsafeMergeFrom(*source);
  }
}

void counter_time_bidirectional::MergeFrom(const counter_time_bidirectional& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.counter_time_bidirectional)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void counter_time_bidirectional::UnsafeMergeFrom(const counter_time_bidirectional& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count_in()) {
      set_count_in(from.count_in());
    }
    if (from.has_count_out()) {
      set_count_out(from.count_out());
    }
    if (from.has_time_ns_in()) {
      set_time_ns_in(from.time_ns_in());
    }
    if (from.has_time_ns_out()) {
      set_time_ns_out(from.time_ns_out());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void counter_time_bidirectional::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.counter_time_bidirectional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_time_bidirectional::CopyFrom(const counter_time_bidirectional& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.counter_time_bidirectional)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool counter_time_bidirectional::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void counter_time_bidirectional::Swap(counter_time_bidirectional* other) {
  if (other == this) return;
  InternalSwap(other);
}
void counter_time_bidirectional::InternalSwap(counter_time_bidirectional* other) {
  std::swap(count_in_, other->count_in_);
  std::swap(count_out_, other->count_out_);
  std::swap(time_ns_in_, other->time_ns_in_);
  std::swap(time_ns_out_, other->time_ns_out_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata counter_time_bidirectional::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_time_bidirectional_descriptor_;
  metadata.reflection = counter_time_bidirectional_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// counter_time_bidirectional

// required uint32 count_in = 1;
bool counter_time_bidirectional::has_count_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void counter_time_bidirectional::set_has_count_in() {
  _has_bits_[0] |= 0x00000001u;
}
void counter_time_bidirectional::clear_has_count_in() {
  _has_bits_[0] &= ~0x00000001u;
}
void counter_time_bidirectional::clear_count_in() {
  count_in_ = 0u;
  clear_has_count_in();
}
::google::protobuf::uint32 counter_time_bidirectional::count_in() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bidirectional.count_in)
  return count_in_;
}
void counter_time_bidirectional::set_count_in(::google::protobuf::uint32 value) {
  set_has_count_in();
  count_in_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bidirectional.count_in)
}

// required uint32 count_out = 2;
bool counter_time_bidirectional::has_count_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void counter_time_bidirectional::set_has_count_out() {
  _has_bits_[0] |= 0x00000002u;
}
void counter_time_bidirectional::clear_has_count_out() {
  _has_bits_[0] &= ~0x00000002u;
}
void counter_time_bidirectional::clear_count_out() {
  count_out_ = 0u;
  clear_has_count_out();
}
::google::protobuf::uint32 counter_time_bidirectional::count_out() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bidirectional.count_out)
  return count_out_;
}
void counter_time_bidirectional::set_count_out(::google::protobuf::uint32 value) {
  set_has_count_out();
  count_out_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bidirectional.count_out)
}

// required uint64 time_ns_in = 3;
bool counter_time_bidirectional::has_time_ns_in() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void counter_time_bidirectional::set_has_time_ns_in() {
  _has_bits_[0] |= 0x00000004u;
}
void counter_time_bidirectional::clear_has_time_ns_in() {
  _has_bits_[0] &= ~0x00000004u;
}
void counter_time_bidirectional::clear_time_ns_in() {
  time_ns_in_ = GOOGLE_ULONGLONG(0);
  clear_has_time_ns_in();
}
::google::protobuf::uint64 counter_time_bidirectional::time_ns_in() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bidirectional.time_ns_in)
  return time_ns_in_;
}
void counter_time_bidirectional::set_time_ns_in(::google::protobuf::uint64 value) {
  set_has_time_ns_in();
  time_ns_in_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bidirectional.time_ns_in)
}

// required uint64 time_ns_out = 4;
bool counter_time_bidirectional::has_time_ns_out() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void counter_time_bidirectional::set_has_time_ns_out() {
  _has_bits_[0] |= 0x00000008u;
}
void counter_time_bidirectional::clear_has_time_ns_out() {
  _has_bits_[0] &= ~0x00000008u;
}
void counter_time_bidirectional::clear_time_ns_out() {
  time_ns_out_ = GOOGLE_ULONGLONG(0);
  clear_has_time_ns_out();
}
::google::protobuf::uint64 counter_time_bidirectional::time_ns_out() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bidirectional.time_ns_out)
  return time_ns_out_;
}
void counter_time_bidirectional::set_time_ns_out(::google::protobuf::uint64 value) {
  set_has_time_ns_out();
  time_ns_out_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bidirectional.time_ns_out)
}

inline const counter_time_bidirectional* counter_time_bidirectional::internal_default_instance() {
  return &counter_time_bidirectional_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int counter_bytes::kCountInFieldNumber;
const int counter_bytes::kCountOutFieldNumber;
const int counter_bytes::kBytesInFieldNumber;
const int counter_bytes::kBytesOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

counter_bytes::counter_bytes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.counter_bytes)
}

void counter_bytes::InitAsDefaultInstance() {
}

counter_bytes::counter_bytes(const counter_bytes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.counter_bytes)
}

void counter_bytes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&count_in_, 0, reinterpret_cast<char*>(&bytes_out_) -
    reinterpret_cast<char*>(&count_in_) + sizeof(bytes_out_));
}

counter_bytes::~counter_bytes() {
  // @@protoc_insertion_point(destructor:draiosproto.counter_bytes)
  SharedDtor();
}

void counter_bytes::SharedDtor() {
}

void counter_bytes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_bytes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_bytes_descriptor_;
}

const counter_bytes& counter_bytes::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<counter_bytes> counter_bytes_default_instance_;

counter_bytes* counter_bytes::New(::google::protobuf::Arena* arena) const {
  counter_bytes* n = new counter_bytes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void counter_bytes::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.counter_bytes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(counter_bytes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<counter_bytes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(count_in_, bytes_out_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool counter_bytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.counter_bytes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count_in = 1;
      case 1: {
        if (tag == 8) {
          set_has_count_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_in_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count_out;
        break;
      }

      // required uint32 count_out = 2;
      case 2: {
        if (tag == 16) {
         parse_count_out:
          set_has_count_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_out_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bytes_in;
        break;
      }

      // required uint32 bytes_in = 3;
      case 3: {
        if (tag == 24) {
         parse_bytes_in:
          set_has_bytes_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_in_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bytes_out;
        break;
      }

      // required uint32 bytes_out = 4;
      case 4: {
        if (tag == 32) {
         parse_bytes_out:
          set_has_bytes_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_out_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.counter_bytes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.counter_bytes)
  return false;
#undef DO_
}

void counter_bytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.counter_bytes)
  // required uint32 count_in = 1;
  if (has_count_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count_in(), output);
  }

  // required uint32 count_out = 2;
  if (has_count_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count_out(), output);
  }

  // required uint32 bytes_in = 3;
  if (has_bytes_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bytes_in(), output);
  }

  // required uint32 bytes_out = 4;
  if (has_bytes_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bytes_out(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.counter_bytes)
}

::google::protobuf::uint8* counter_bytes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.counter_bytes)
  // required uint32 count_in = 1;
  if (has_count_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count_in(), target);
  }

  // required uint32 count_out = 2;
  if (has_count_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count_out(), target);
  }

  // required uint32 bytes_in = 3;
  if (has_bytes_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bytes_in(), target);
  }

  // required uint32 bytes_out = 4;
  if (has_bytes_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bytes_out(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.counter_bytes)
  return target;
}

size_t counter_bytes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.counter_bytes)
  size_t total_size = 0;

  if (has_count_in()) {
    // required uint32 count_in = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_in());
  }

  if (has_count_out()) {
    // required uint32 count_out = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_out());
  }

  if (has_bytes_in()) {
    // required uint32 bytes_in = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytes_in());
  }

  if (has_bytes_out()) {
    // required uint32 bytes_out = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytes_out());
  }

  return total_size;
}
size_t counter_bytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.counter_bytes)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 count_in = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_in());

    // required uint32 count_out = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_out());

    // required uint32 bytes_in = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytes_in());

    // required uint32 bytes_out = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytes_out());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_bytes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.counter_bytes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const counter_bytes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const counter_bytes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.counter_bytes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.counter_bytes)
    UnsafeMergeFrom(*source);
  }
}

void counter_bytes::MergeFrom(const counter_bytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.counter_bytes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void counter_bytes::UnsafeMergeFrom(const counter_bytes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count_in()) {
      set_count_in(from.count_in());
    }
    if (from.has_count_out()) {
      set_count_out(from.count_out());
    }
    if (from.has_bytes_in()) {
      set_bytes_in(from.bytes_in());
    }
    if (from.has_bytes_out()) {
      set_bytes_out(from.bytes_out());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void counter_bytes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.counter_bytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_bytes::CopyFrom(const counter_bytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.counter_bytes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool counter_bytes::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void counter_bytes::Swap(counter_bytes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void counter_bytes::InternalSwap(counter_bytes* other) {
  std::swap(count_in_, other->count_in_);
  std::swap(count_out_, other->count_out_);
  std::swap(bytes_in_, other->bytes_in_);
  std::swap(bytes_out_, other->bytes_out_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata counter_bytes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_bytes_descriptor_;
  metadata.reflection = counter_bytes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// counter_bytes

// required uint32 count_in = 1;
bool counter_bytes::has_count_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void counter_bytes::set_has_count_in() {
  _has_bits_[0] |= 0x00000001u;
}
void counter_bytes::clear_has_count_in() {
  _has_bits_[0] &= ~0x00000001u;
}
void counter_bytes::clear_count_in() {
  count_in_ = 0u;
  clear_has_count_in();
}
::google::protobuf::uint32 counter_bytes::count_in() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_bytes.count_in)
  return count_in_;
}
void counter_bytes::set_count_in(::google::protobuf::uint32 value) {
  set_has_count_in();
  count_in_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_bytes.count_in)
}

// required uint32 count_out = 2;
bool counter_bytes::has_count_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void counter_bytes::set_has_count_out() {
  _has_bits_[0] |= 0x00000002u;
}
void counter_bytes::clear_has_count_out() {
  _has_bits_[0] &= ~0x00000002u;
}
void counter_bytes::clear_count_out() {
  count_out_ = 0u;
  clear_has_count_out();
}
::google::protobuf::uint32 counter_bytes::count_out() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_bytes.count_out)
  return count_out_;
}
void counter_bytes::set_count_out(::google::protobuf::uint32 value) {
  set_has_count_out();
  count_out_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_bytes.count_out)
}

// required uint32 bytes_in = 3;
bool counter_bytes::has_bytes_in() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void counter_bytes::set_has_bytes_in() {
  _has_bits_[0] |= 0x00000004u;
}
void counter_bytes::clear_has_bytes_in() {
  _has_bits_[0] &= ~0x00000004u;
}
void counter_bytes::clear_bytes_in() {
  bytes_in_ = 0u;
  clear_has_bytes_in();
}
::google::protobuf::uint32 counter_bytes::bytes_in() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_bytes.bytes_in)
  return bytes_in_;
}
void counter_bytes::set_bytes_in(::google::protobuf::uint32 value) {
  set_has_bytes_in();
  bytes_in_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_bytes.bytes_in)
}

// required uint32 bytes_out = 4;
bool counter_bytes::has_bytes_out() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void counter_bytes::set_has_bytes_out() {
  _has_bits_[0] |= 0x00000008u;
}
void counter_bytes::clear_has_bytes_out() {
  _has_bits_[0] &= ~0x00000008u;
}
void counter_bytes::clear_bytes_out() {
  bytes_out_ = 0u;
  clear_has_bytes_out();
}
::google::protobuf::uint32 counter_bytes::bytes_out() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_bytes.bytes_out)
  return bytes_out_;
}
void counter_bytes::set_bytes_out(::google::protobuf::uint32 value) {
  set_has_bytes_out();
  bytes_out_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_bytes.bytes_out)
}

inline const counter_bytes* counter_bytes::internal_default_instance() {
  return &counter_bytes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int counter_time_bytes::kTimeNsInFieldNumber;
const int counter_time_bytes::kTimeNsOutFieldNumber;
const int counter_time_bytes::kTimeNsOtherFieldNumber;
const int counter_time_bytes::kCountInFieldNumber;
const int counter_time_bytes::kCountOutFieldNumber;
const int counter_time_bytes::kCountOtherFieldNumber;
const int counter_time_bytes::kBytesInFieldNumber;
const int counter_time_bytes::kBytesOutFieldNumber;
const int counter_time_bytes::kBytesOtherFieldNumber;
const int counter_time_bytes::kTimePercentageInFieldNumber;
const int counter_time_bytes::kTimePercentageOutFieldNumber;
const int counter_time_bytes::kTimePercentageOtherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

counter_time_bytes::counter_time_bytes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.counter_time_bytes)
}

void counter_time_bytes::InitAsDefaultInstance() {
}

counter_time_bytes::counter_time_bytes(const counter_time_bytes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.counter_time_bytes)
}

void counter_time_bytes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&time_ns_in_, 0, reinterpret_cast<char*>(&time_percentage_other_) -
    reinterpret_cast<char*>(&time_ns_in_) + sizeof(time_percentage_other_));
}

counter_time_bytes::~counter_time_bytes() {
  // @@protoc_insertion_point(destructor:draiosproto.counter_time_bytes)
  SharedDtor();
}

void counter_time_bytes::SharedDtor() {
}

void counter_time_bytes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_time_bytes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_time_bytes_descriptor_;
}

const counter_time_bytes& counter_time_bytes::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<counter_time_bytes> counter_time_bytes_default_instance_;

counter_time_bytes* counter_time_bytes::New(::google::protobuf::Arena* arena) const {
  counter_time_bytes* n = new counter_time_bytes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void counter_time_bytes::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.counter_time_bytes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(counter_time_bytes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<counter_time_bytes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_ns_in_, bytes_out_);
  ZR_(bytes_other_, time_percentage_other_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool counter_time_bytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.counter_time_bytes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time_ns_in = 1;
      case 1: {
        if (tag == 8) {
          set_has_time_ns_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_in_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_ns_out;
        break;
      }

      // required uint64 time_ns_out = 2;
      case 2: {
        if (tag == 16) {
         parse_time_ns_out:
          set_has_time_ns_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_out_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_ns_other;
        break;
      }

      // required uint64 time_ns_other = 3;
      case 3: {
        if (tag == 24) {
         parse_time_ns_other:
          set_has_time_ns_other();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_other_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count_in;
        break;
      }

      // required uint32 count_in = 4;
      case 4: {
        if (tag == 32) {
         parse_count_in:
          set_has_count_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_in_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count_out;
        break;
      }

      // required uint32 count_out = 5;
      case 5: {
        if (tag == 40) {
         parse_count_out:
          set_has_count_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_out_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count_other;
        break;
      }

      // required uint32 count_other = 6;
      case 6: {
        if (tag == 48) {
         parse_count_other:
          set_has_count_other();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_other_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bytes_in;
        break;
      }

      // required uint32 bytes_in = 7;
      case 7: {
        if (tag == 56) {
         parse_bytes_in:
          set_has_bytes_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_in_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bytes_out;
        break;
      }

      // required uint32 bytes_out = 8;
      case 8: {
        if (tag == 64) {
         parse_bytes_out:
          set_has_bytes_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_out_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bytes_other;
        break;
      }

      // required uint32 bytes_other = 9;
      case 9: {
        if (tag == 72) {
         parse_bytes_other:
          set_has_bytes_other();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_other_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_time_percentage_in;
        break;
      }

      // optional uint32 time_percentage_in = 10;
      case 10: {
        if (tag == 80) {
         parse_time_percentage_in:
          set_has_time_percentage_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_percentage_in_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_time_percentage_out;
        break;
      }

      // optional uint32 time_percentage_out = 11;
      case 11: {
        if (tag == 88) {
         parse_time_percentage_out:
          set_has_time_percentage_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_percentage_out_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_time_percentage_other;
        break;
      }

      // optional uint32 time_percentage_other = 12;
      case 12: {
        if (tag == 96) {
         parse_time_percentage_other:
          set_has_time_percentage_other();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_percentage_other_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.counter_time_bytes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.counter_time_bytes)
  return false;
#undef DO_
}

void counter_time_bytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.counter_time_bytes)
  // required uint64 time_ns_in = 1;
  if (has_time_ns_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_ns_in(), output);
  }

  // required uint64 time_ns_out = 2;
  if (has_time_ns_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time_ns_out(), output);
  }

  // required uint64 time_ns_other = 3;
  if (has_time_ns_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_ns_other(), output);
  }

  // required uint32 count_in = 4;
  if (has_count_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count_in(), output);
  }

  // required uint32 count_out = 5;
  if (has_count_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count_out(), output);
  }

  // required uint32 count_other = 6;
  if (has_count_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count_other(), output);
  }

  // required uint32 bytes_in = 7;
  if (has_bytes_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bytes_in(), output);
  }

  // required uint32 bytes_out = 8;
  if (has_bytes_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bytes_out(), output);
  }

  // required uint32 bytes_other = 9;
  if (has_bytes_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->bytes_other(), output);
  }

  // optional uint32 time_percentage_in = 10;
  if (has_time_percentage_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->time_percentage_in(), output);
  }

  // optional uint32 time_percentage_out = 11;
  if (has_time_percentage_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->time_percentage_out(), output);
  }

  // optional uint32 time_percentage_other = 12;
  if (has_time_percentage_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->time_percentage_other(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.counter_time_bytes)
}

::google::protobuf::uint8* counter_time_bytes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.counter_time_bytes)
  // required uint64 time_ns_in = 1;
  if (has_time_ns_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_ns_in(), target);
  }

  // required uint64 time_ns_out = 2;
  if (has_time_ns_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time_ns_out(), target);
  }

  // required uint64 time_ns_other = 3;
  if (has_time_ns_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time_ns_other(), target);
  }

  // required uint32 count_in = 4;
  if (has_count_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count_in(), target);
  }

  // required uint32 count_out = 5;
  if (has_count_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count_out(), target);
  }

  // required uint32 count_other = 6;
  if (has_count_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count_other(), target);
  }

  // required uint32 bytes_in = 7;
  if (has_bytes_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bytes_in(), target);
  }

  // required uint32 bytes_out = 8;
  if (has_bytes_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bytes_out(), target);
  }

  // required uint32 bytes_other = 9;
  if (has_bytes_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->bytes_other(), target);
  }

  // optional uint32 time_percentage_in = 10;
  if (has_time_percentage_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->time_percentage_in(), target);
  }

  // optional uint32 time_percentage_out = 11;
  if (has_time_percentage_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->time_percentage_out(), target);
  }

  // optional uint32 time_percentage_other = 12;
  if (has_time_percentage_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->time_percentage_other(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.counter_time_bytes)
  return target;
}

size_t counter_time_bytes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.counter_time_bytes)
  size_t total_size = 0;

  if (has_time_ns_in()) {
    // required uint64 time_ns_in = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_ns_in());
  }

  if (has_time_ns_out()) {
    // required uint64 time_ns_out = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_ns_out());
  }

  if (has_time_ns_other()) {
    // required uint64 time_ns_other = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_ns_other());
  }

  if (has_count_in()) {
    // required uint32 count_in = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_in());
  }

  if (has_count_out()) {
    // required uint32 count_out = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_out());
  }

  if (has_count_other()) {
    // required uint32 count_other = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_other());
  }

  if (has_bytes_in()) {
    // required uint32 bytes_in = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytes_in());
  }

  if (has_bytes_out()) {
    // required uint32 bytes_out = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytes_out());
  }

  if (has_bytes_other()) {
    // required uint32 bytes_other = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytes_other());
  }

  return total_size;
}
size_t counter_time_bytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.counter_time_bytes)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required uint64 time_ns_in = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_ns_in());

    // required uint64 time_ns_out = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_ns_out());

    // required uint64 time_ns_other = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_ns_other());

    // required uint32 count_in = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_in());

    // required uint32 count_out = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_out());

    // required uint32 count_other = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_other());

    // required uint32 bytes_in = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytes_in());

    // required uint32 bytes_out = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytes_out());

    // required uint32 bytes_other = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytes_other());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[9 / 32] & 3584u) {
    // optional uint32 time_percentage_in = 10;
    if (has_time_percentage_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_percentage_in());
    }

    // optional uint32 time_percentage_out = 11;
    if (has_time_percentage_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_percentage_out());
    }

    // optional uint32 time_percentage_other = 12;
    if (has_time_percentage_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_percentage_other());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_time_bytes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.counter_time_bytes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const counter_time_bytes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const counter_time_bytes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.counter_time_bytes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.counter_time_bytes)
    UnsafeMergeFrom(*source);
  }
}

void counter_time_bytes::MergeFrom(const counter_time_bytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.counter_time_bytes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void counter_time_bytes::UnsafeMergeFrom(const counter_time_bytes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_ns_in()) {
      set_time_ns_in(from.time_ns_in());
    }
    if (from.has_time_ns_out()) {
      set_time_ns_out(from.time_ns_out());
    }
    if (from.has_time_ns_other()) {
      set_time_ns_other(from.time_ns_other());
    }
    if (from.has_count_in()) {
      set_count_in(from.count_in());
    }
    if (from.has_count_out()) {
      set_count_out(from.count_out());
    }
    if (from.has_count_other()) {
      set_count_other(from.count_other());
    }
    if (from.has_bytes_in()) {
      set_bytes_in(from.bytes_in());
    }
    if (from.has_bytes_out()) {
      set_bytes_out(from.bytes_out());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bytes_other()) {
      set_bytes_other(from.bytes_other());
    }
    if (from.has_time_percentage_in()) {
      set_time_percentage_in(from.time_percentage_in());
    }
    if (from.has_time_percentage_out()) {
      set_time_percentage_out(from.time_percentage_out());
    }
    if (from.has_time_percentage_other()) {
      set_time_percentage_other(from.time_percentage_other());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void counter_time_bytes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.counter_time_bytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_time_bytes::CopyFrom(const counter_time_bytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.counter_time_bytes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool counter_time_bytes::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void counter_time_bytes::Swap(counter_time_bytes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void counter_time_bytes::InternalSwap(counter_time_bytes* other) {
  std::swap(time_ns_in_, other->time_ns_in_);
  std::swap(time_ns_out_, other->time_ns_out_);
  std::swap(time_ns_other_, other->time_ns_other_);
  std::swap(count_in_, other->count_in_);
  std::swap(count_out_, other->count_out_);
  std::swap(count_other_, other->count_other_);
  std::swap(bytes_in_, other->bytes_in_);
  std::swap(bytes_out_, other->bytes_out_);
  std::swap(bytes_other_, other->bytes_other_);
  std::swap(time_percentage_in_, other->time_percentage_in_);
  std::swap(time_percentage_out_, other->time_percentage_out_);
  std::swap(time_percentage_other_, other->time_percentage_other_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata counter_time_bytes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_time_bytes_descriptor_;
  metadata.reflection = counter_time_bytes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// counter_time_bytes

// required uint64 time_ns_in = 1;
bool counter_time_bytes::has_time_ns_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void counter_time_bytes::set_has_time_ns_in() {
  _has_bits_[0] |= 0x00000001u;
}
void counter_time_bytes::clear_has_time_ns_in() {
  _has_bits_[0] &= ~0x00000001u;
}
void counter_time_bytes::clear_time_ns_in() {
  time_ns_in_ = GOOGLE_ULONGLONG(0);
  clear_has_time_ns_in();
}
::google::protobuf::uint64 counter_time_bytes::time_ns_in() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bytes.time_ns_in)
  return time_ns_in_;
}
void counter_time_bytes::set_time_ns_in(::google::protobuf::uint64 value) {
  set_has_time_ns_in();
  time_ns_in_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bytes.time_ns_in)
}

// required uint64 time_ns_out = 2;
bool counter_time_bytes::has_time_ns_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void counter_time_bytes::set_has_time_ns_out() {
  _has_bits_[0] |= 0x00000002u;
}
void counter_time_bytes::clear_has_time_ns_out() {
  _has_bits_[0] &= ~0x00000002u;
}
void counter_time_bytes::clear_time_ns_out() {
  time_ns_out_ = GOOGLE_ULONGLONG(0);
  clear_has_time_ns_out();
}
::google::protobuf::uint64 counter_time_bytes::time_ns_out() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bytes.time_ns_out)
  return time_ns_out_;
}
void counter_time_bytes::set_time_ns_out(::google::protobuf::uint64 value) {
  set_has_time_ns_out();
  time_ns_out_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bytes.time_ns_out)
}

// required uint64 time_ns_other = 3;
bool counter_time_bytes::has_time_ns_other() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void counter_time_bytes::set_has_time_ns_other() {
  _has_bits_[0] |= 0x00000004u;
}
void counter_time_bytes::clear_has_time_ns_other() {
  _has_bits_[0] &= ~0x00000004u;
}
void counter_time_bytes::clear_time_ns_other() {
  time_ns_other_ = GOOGLE_ULONGLONG(0);
  clear_has_time_ns_other();
}
::google::protobuf::uint64 counter_time_bytes::time_ns_other() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bytes.time_ns_other)
  return time_ns_other_;
}
void counter_time_bytes::set_time_ns_other(::google::protobuf::uint64 value) {
  set_has_time_ns_other();
  time_ns_other_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bytes.time_ns_other)
}

// required uint32 count_in = 4;
bool counter_time_bytes::has_count_in() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void counter_time_bytes::set_has_count_in() {
  _has_bits_[0] |= 0x00000008u;
}
void counter_time_bytes::clear_has_count_in() {
  _has_bits_[0] &= ~0x00000008u;
}
void counter_time_bytes::clear_count_in() {
  count_in_ = 0u;
  clear_has_count_in();
}
::google::protobuf::uint32 counter_time_bytes::count_in() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bytes.count_in)
  return count_in_;
}
void counter_time_bytes::set_count_in(::google::protobuf::uint32 value) {
  set_has_count_in();
  count_in_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bytes.count_in)
}

// required uint32 count_out = 5;
bool counter_time_bytes::has_count_out() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void counter_time_bytes::set_has_count_out() {
  _has_bits_[0] |= 0x00000010u;
}
void counter_time_bytes::clear_has_count_out() {
  _has_bits_[0] &= ~0x00000010u;
}
void counter_time_bytes::clear_count_out() {
  count_out_ = 0u;
  clear_has_count_out();
}
::google::protobuf::uint32 counter_time_bytes::count_out() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bytes.count_out)
  return count_out_;
}
void counter_time_bytes::set_count_out(::google::protobuf::uint32 value) {
  set_has_count_out();
  count_out_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bytes.count_out)
}

// required uint32 count_other = 6;
bool counter_time_bytes::has_count_other() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void counter_time_bytes::set_has_count_other() {
  _has_bits_[0] |= 0x00000020u;
}
void counter_time_bytes::clear_has_count_other() {
  _has_bits_[0] &= ~0x00000020u;
}
void counter_time_bytes::clear_count_other() {
  count_other_ = 0u;
  clear_has_count_other();
}
::google::protobuf::uint32 counter_time_bytes::count_other() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bytes.count_other)
  return count_other_;
}
void counter_time_bytes::set_count_other(::google::protobuf::uint32 value) {
  set_has_count_other();
  count_other_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bytes.count_other)
}

// required uint32 bytes_in = 7;
bool counter_time_bytes::has_bytes_in() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void counter_time_bytes::set_has_bytes_in() {
  _has_bits_[0] |= 0x00000040u;
}
void counter_time_bytes::clear_has_bytes_in() {
  _has_bits_[0] &= ~0x00000040u;
}
void counter_time_bytes::clear_bytes_in() {
  bytes_in_ = 0u;
  clear_has_bytes_in();
}
::google::protobuf::uint32 counter_time_bytes::bytes_in() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bytes.bytes_in)
  return bytes_in_;
}
void counter_time_bytes::set_bytes_in(::google::protobuf::uint32 value) {
  set_has_bytes_in();
  bytes_in_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bytes.bytes_in)
}

// required uint32 bytes_out = 8;
bool counter_time_bytes::has_bytes_out() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void counter_time_bytes::set_has_bytes_out() {
  _has_bits_[0] |= 0x00000080u;
}
void counter_time_bytes::clear_has_bytes_out() {
  _has_bits_[0] &= ~0x00000080u;
}
void counter_time_bytes::clear_bytes_out() {
  bytes_out_ = 0u;
  clear_has_bytes_out();
}
::google::protobuf::uint32 counter_time_bytes::bytes_out() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bytes.bytes_out)
  return bytes_out_;
}
void counter_time_bytes::set_bytes_out(::google::protobuf::uint32 value) {
  set_has_bytes_out();
  bytes_out_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bytes.bytes_out)
}

// required uint32 bytes_other = 9;
bool counter_time_bytes::has_bytes_other() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void counter_time_bytes::set_has_bytes_other() {
  _has_bits_[0] |= 0x00000100u;
}
void counter_time_bytes::clear_has_bytes_other() {
  _has_bits_[0] &= ~0x00000100u;
}
void counter_time_bytes::clear_bytes_other() {
  bytes_other_ = 0u;
  clear_has_bytes_other();
}
::google::protobuf::uint32 counter_time_bytes::bytes_other() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bytes.bytes_other)
  return bytes_other_;
}
void counter_time_bytes::set_bytes_other(::google::protobuf::uint32 value) {
  set_has_bytes_other();
  bytes_other_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bytes.bytes_other)
}

// optional uint32 time_percentage_in = 10;
bool counter_time_bytes::has_time_percentage_in() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void counter_time_bytes::set_has_time_percentage_in() {
  _has_bits_[0] |= 0x00000200u;
}
void counter_time_bytes::clear_has_time_percentage_in() {
  _has_bits_[0] &= ~0x00000200u;
}
void counter_time_bytes::clear_time_percentage_in() {
  time_percentage_in_ = 0u;
  clear_has_time_percentage_in();
}
::google::protobuf::uint32 counter_time_bytes::time_percentage_in() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bytes.time_percentage_in)
  return time_percentage_in_;
}
void counter_time_bytes::set_time_percentage_in(::google::protobuf::uint32 value) {
  set_has_time_percentage_in();
  time_percentage_in_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bytes.time_percentage_in)
}

// optional uint32 time_percentage_out = 11;
bool counter_time_bytes::has_time_percentage_out() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void counter_time_bytes::set_has_time_percentage_out() {
  _has_bits_[0] |= 0x00000400u;
}
void counter_time_bytes::clear_has_time_percentage_out() {
  _has_bits_[0] &= ~0x00000400u;
}
void counter_time_bytes::clear_time_percentage_out() {
  time_percentage_out_ = 0u;
  clear_has_time_percentage_out();
}
::google::protobuf::uint32 counter_time_bytes::time_percentage_out() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bytes.time_percentage_out)
  return time_percentage_out_;
}
void counter_time_bytes::set_time_percentage_out(::google::protobuf::uint32 value) {
  set_has_time_percentage_out();
  time_percentage_out_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bytes.time_percentage_out)
}

// optional uint32 time_percentage_other = 12;
bool counter_time_bytes::has_time_percentage_other() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void counter_time_bytes::set_has_time_percentage_other() {
  _has_bits_[0] |= 0x00000800u;
}
void counter_time_bytes::clear_has_time_percentage_other() {
  _has_bits_[0] &= ~0x00000800u;
}
void counter_time_bytes::clear_time_percentage_other() {
  time_percentage_other_ = 0u;
  clear_has_time_percentage_other();
}
::google::protobuf::uint32 counter_time_bytes::time_percentage_other() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_time_bytes.time_percentage_other)
  return time_percentage_other_;
}
void counter_time_bytes::set_time_percentage_other(::google::protobuf::uint32 value) {
  set_has_time_percentage_other();
  time_percentage_other_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_time_bytes.time_percentage_other)
}

inline const counter_time_bytes* counter_time_bytes::internal_default_instance() {
  return &counter_time_bytes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int time_categories::kUnknownFieldNumber;
const int time_categories::kOtherFieldNumber;
const int time_categories::kFileFieldNumber;
const int time_categories::kNetFieldNumber;
const int time_categories::kIpcFieldNumber;
const int time_categories::kMemoryFieldNumber;
const int time_categories::kProcessFieldNumber;
const int time_categories::kSleepFieldNumber;
const int time_categories::kSystemFieldNumber;
const int time_categories::kSignalFieldNumber;
const int time_categories::kUserFieldNumber;
const int time_categories::kTimeFieldNumber;
const int time_categories::kIoFileFieldNumber;
const int time_categories::kIoNetFieldNumber;
const int time_categories::kIoOtherFieldNumber;
const int time_categories::kWaitFieldNumber;
const int time_categories::kProcessingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

time_categories::time_categories()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.time_categories)
}

void time_categories::InitAsDefaultInstance() {
  unknown_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
  other_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
  file_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
  net_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
  ipc_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
  memory_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
  process_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
  sleep_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
  system_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
  signal_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
  user_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
  time_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
  io_file_ = const_cast< ::draiosproto::counter_time_bytes*>(
      ::draiosproto::counter_time_bytes::internal_default_instance());
  io_net_ = const_cast< ::draiosproto::counter_time_bytes*>(
      ::draiosproto::counter_time_bytes::internal_default_instance());
  io_other_ = const_cast< ::draiosproto::counter_time_bytes*>(
      ::draiosproto::counter_time_bytes::internal_default_instance());
  wait_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
  processing_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
}

time_categories::time_categories(const time_categories& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.time_categories)
}

void time_categories::SharedCtor() {
  _cached_size_ = 0;
  unknown_ = NULL;
  other_ = NULL;
  file_ = NULL;
  net_ = NULL;
  ipc_ = NULL;
  memory_ = NULL;
  process_ = NULL;
  sleep_ = NULL;
  system_ = NULL;
  signal_ = NULL;
  user_ = NULL;
  time_ = NULL;
  io_file_ = NULL;
  io_net_ = NULL;
  io_other_ = NULL;
  wait_ = NULL;
  processing_ = NULL;
}

time_categories::~time_categories() {
  // @@protoc_insertion_point(destructor:draiosproto.time_categories)
  SharedDtor();
}

void time_categories::SharedDtor() {
  if (this != &time_categories_default_instance_.get()) {
    delete unknown_;
    delete other_;
    delete file_;
    delete net_;
    delete ipc_;
    delete memory_;
    delete process_;
    delete sleep_;
    delete system_;
    delete signal_;
    delete user_;
    delete time_;
    delete io_file_;
    delete io_net_;
    delete io_other_;
    delete wait_;
    delete processing_;
  }
}

void time_categories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* time_categories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return time_categories_descriptor_;
}

const time_categories& time_categories::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<time_categories> time_categories_default_instance_;

time_categories* time_categories::New(::google::protobuf::Arena* arena) const {
  time_categories* n = new time_categories;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void time_categories::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.time_categories)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_unknown()) {
      if (unknown_ != NULL) unknown_->::draiosproto::counter_time::Clear();
    }
    if (has_other()) {
      if (other_ != NULL) other_->::draiosproto::counter_time::Clear();
    }
    if (has_file()) {
      if (file_ != NULL) file_->::draiosproto::counter_time::Clear();
    }
    if (has_net()) {
      if (net_ != NULL) net_->::draiosproto::counter_time::Clear();
    }
    if (has_ipc()) {
      if (ipc_ != NULL) ipc_->::draiosproto::counter_time::Clear();
    }
    if (has_memory()) {
      if (memory_ != NULL) memory_->::draiosproto::counter_time::Clear();
    }
    if (has_process()) {
      if (process_ != NULL) process_->::draiosproto::counter_time::Clear();
    }
    if (has_sleep()) {
      if (sleep_ != NULL) sleep_->::draiosproto::counter_time::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_system()) {
      if (system_ != NULL) system_->::draiosproto::counter_time::Clear();
    }
    if (has_signal()) {
      if (signal_ != NULL) signal_->::draiosproto::counter_time::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::draiosproto::counter_time::Clear();
    }
    if (has_time()) {
      if (time_ != NULL) time_->::draiosproto::counter_time::Clear();
    }
    if (has_io_file()) {
      if (io_file_ != NULL) io_file_->::draiosproto::counter_time_bytes::Clear();
    }
    if (has_io_net()) {
      if (io_net_ != NULL) io_net_->::draiosproto::counter_time_bytes::Clear();
    }
    if (has_io_other()) {
      if (io_other_ != NULL) io_other_->::draiosproto::counter_time_bytes::Clear();
    }
    if (has_wait()) {
      if (wait_ != NULL) wait_->::draiosproto::counter_time::Clear();
    }
  }
  if (has_processing()) {
    if (processing_ != NULL) processing_->::draiosproto::counter_time::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool time_categories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.time_categories)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .draiosproto.counter_time unknown = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unknown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_other;
        break;
      }

      // optional .draiosproto.counter_time other = 2;
      case 2: {
        if (tag == 18) {
         parse_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file;
        break;
      }

      // optional .draiosproto.counter_time file = 3;
      case 3: {
        if (tag == 26) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_net;
        break;
      }

      // optional .draiosproto.counter_time net = 4;
      case 4: {
        if (tag == 34) {
         parse_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ipc;
        break;
      }

      // optional .draiosproto.counter_time ipc = 5;
      case 5: {
        if (tag == 42) {
         parse_ipc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_memory;
        break;
      }

      // optional .draiosproto.counter_time memory = 6;
      case 6: {
        if (tag == 50) {
         parse_memory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_process;
        break;
      }

      // optional .draiosproto.counter_time process = 7;
      case 7: {
        if (tag == 58) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_process()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sleep;
        break;
      }

      // optional .draiosproto.counter_time sleep = 8;
      case 8: {
        if (tag == 66) {
         parse_sleep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sleep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_system;
        break;
      }

      // optional .draiosproto.counter_time system = 9;
      case 9: {
        if (tag == 74) {
         parse_system:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_signal;
        break;
      }

      // optional .draiosproto.counter_time signal = 10;
      case 10: {
        if (tag == 82) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_user;
        break;
      }

      // optional .draiosproto.counter_time user = 11;
      case 11: {
        if (tag == 90) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_time;
        break;
      }

      // optional .draiosproto.counter_time time = 12;
      case 12: {
        if (tag == 98) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_io_file;
        break;
      }

      // optional .draiosproto.counter_time_bytes io_file = 13;
      case 13: {
        if (tag == 106) {
         parse_io_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_io_net;
        break;
      }

      // optional .draiosproto.counter_time_bytes io_net = 14;
      case 14: {
        if (tag == 114) {
         parse_io_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_net()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_io_other;
        break;
      }

      // optional .draiosproto.counter_time_bytes io_other = 15;
      case 15: {
        if (tag == 122) {
         parse_io_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_other()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_wait;
        break;
      }

      // optional .draiosproto.counter_time wait = 16;
      case 16: {
        if (tag == 130) {
         parse_wait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_processing;
        break;
      }

      // optional .draiosproto.counter_time processing = 17;
      case 17: {
        if (tag == 138) {
         parse_processing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.time_categories)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.time_categories)
  return false;
#undef DO_
}

void time_categories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.time_categories)
  // optional .draiosproto.counter_time unknown = 1;
  if (has_unknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->unknown_, output);
  }

  // optional .draiosproto.counter_time other = 2;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->other_, output);
  }

  // optional .draiosproto.counter_time file = 3;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->file_, output);
  }

  // optional .draiosproto.counter_time net = 4;
  if (has_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->net_, output);
  }

  // optional .draiosproto.counter_time ipc = 5;
  if (has_ipc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ipc_, output);
  }

  // optional .draiosproto.counter_time memory = 6;
  if (has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->memory_, output);
  }

  // optional .draiosproto.counter_time process = 7;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->process_, output);
  }

  // optional .draiosproto.counter_time sleep = 8;
  if (has_sleep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->sleep_, output);
  }

  // optional .draiosproto.counter_time system = 9;
  if (has_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->system_, output);
  }

  // optional .draiosproto.counter_time signal = 10;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->signal_, output);
  }

  // optional .draiosproto.counter_time user = 11;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->user_, output);
  }

  // optional .draiosproto.counter_time time = 12;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->time_, output);
  }

  // optional .draiosproto.counter_time_bytes io_file = 13;
  if (has_io_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->io_file_, output);
  }

  // optional .draiosproto.counter_time_bytes io_net = 14;
  if (has_io_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->io_net_, output);
  }

  // optional .draiosproto.counter_time_bytes io_other = 15;
  if (has_io_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->io_other_, output);
  }

  // optional .draiosproto.counter_time wait = 16;
  if (has_wait()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->wait_, output);
  }

  // optional .draiosproto.counter_time processing = 17;
  if (has_processing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->processing_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.time_categories)
}

::google::protobuf::uint8* time_categories::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.time_categories)
  // optional .draiosproto.counter_time unknown = 1;
  if (has_unknown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->unknown_, false, target);
  }

  // optional .draiosproto.counter_time other = 2;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->other_, false, target);
  }

  // optional .draiosproto.counter_time file = 3;
  if (has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->file_, false, target);
  }

  // optional .draiosproto.counter_time net = 4;
  if (has_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->net_, false, target);
  }

  // optional .draiosproto.counter_time ipc = 5;
  if (has_ipc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ipc_, false, target);
  }

  // optional .draiosproto.counter_time memory = 6;
  if (has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->memory_, false, target);
  }

  // optional .draiosproto.counter_time process = 7;
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->process_, false, target);
  }

  // optional .draiosproto.counter_time sleep = 8;
  if (has_sleep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->sleep_, false, target);
  }

  // optional .draiosproto.counter_time system = 9;
  if (has_system()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->system_, false, target);
  }

  // optional .draiosproto.counter_time signal = 10;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->signal_, false, target);
  }

  // optional .draiosproto.counter_time user = 11;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->user_, false, target);
  }

  // optional .draiosproto.counter_time time = 12;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->time_, false, target);
  }

  // optional .draiosproto.counter_time_bytes io_file = 13;
  if (has_io_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->io_file_, false, target);
  }

  // optional .draiosproto.counter_time_bytes io_net = 14;
  if (has_io_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->io_net_, false, target);
  }

  // optional .draiosproto.counter_time_bytes io_other = 15;
  if (has_io_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->io_other_, false, target);
  }

  // optional .draiosproto.counter_time wait = 16;
  if (has_wait()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->wait_, false, target);
  }

  // optional .draiosproto.counter_time processing = 17;
  if (has_processing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->processing_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.time_categories)
  return target;
}

size_t time_categories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.time_categories)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .draiosproto.counter_time unknown = 1;
    if (has_unknown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unknown_);
    }

    // optional .draiosproto.counter_time other = 2;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->other_);
    }

    // optional .draiosproto.counter_time file = 3;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->file_);
    }

    // optional .draiosproto.counter_time net = 4;
    if (has_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->net_);
    }

    // optional .draiosproto.counter_time ipc = 5;
    if (has_ipc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ipc_);
    }

    // optional .draiosproto.counter_time memory = 6;
    if (has_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->memory_);
    }

    // optional .draiosproto.counter_time process = 7;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->process_);
    }

    // optional .draiosproto.counter_time sleep = 8;
    if (has_sleep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sleep_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .draiosproto.counter_time system = 9;
    if (has_system()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->system_);
    }

    // optional .draiosproto.counter_time signal = 10;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->signal_);
    }

    // optional .draiosproto.counter_time user = 11;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_);
    }

    // optional .draiosproto.counter_time time = 12;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_);
    }

    // optional .draiosproto.counter_time_bytes io_file = 13;
    if (has_io_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->io_file_);
    }

    // optional .draiosproto.counter_time_bytes io_net = 14;
    if (has_io_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->io_net_);
    }

    // optional .draiosproto.counter_time_bytes io_other = 15;
    if (has_io_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->io_other_);
    }

    // optional .draiosproto.counter_time wait = 16;
    if (has_wait()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wait_);
    }

  }
  // optional .draiosproto.counter_time processing = 17;
  if (has_processing()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->processing_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void time_categories::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.time_categories)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const time_categories* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const time_categories>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.time_categories)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.time_categories)
    UnsafeMergeFrom(*source);
  }
}

void time_categories::MergeFrom(const time_categories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.time_categories)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void time_categories::UnsafeMergeFrom(const time_categories& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unknown()) {
      mutable_unknown()->::draiosproto::counter_time::MergeFrom(from.unknown());
    }
    if (from.has_other()) {
      mutable_other()->::draiosproto::counter_time::MergeFrom(from.other());
    }
    if (from.has_file()) {
      mutable_file()->::draiosproto::counter_time::MergeFrom(from.file());
    }
    if (from.has_net()) {
      mutable_net()->::draiosproto::counter_time::MergeFrom(from.net());
    }
    if (from.has_ipc()) {
      mutable_ipc()->::draiosproto::counter_time::MergeFrom(from.ipc());
    }
    if (from.has_memory()) {
      mutable_memory()->::draiosproto::counter_time::MergeFrom(from.memory());
    }
    if (from.has_process()) {
      mutable_process()->::draiosproto::counter_time::MergeFrom(from.process());
    }
    if (from.has_sleep()) {
      mutable_sleep()->::draiosproto::counter_time::MergeFrom(from.sleep());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_system()) {
      mutable_system()->::draiosproto::counter_time::MergeFrom(from.system());
    }
    if (from.has_signal()) {
      mutable_signal()->::draiosproto::counter_time::MergeFrom(from.signal());
    }
    if (from.has_user()) {
      mutable_user()->::draiosproto::counter_time::MergeFrom(from.user());
    }
    if (from.has_time()) {
      mutable_time()->::draiosproto::counter_time::MergeFrom(from.time());
    }
    if (from.has_io_file()) {
      mutable_io_file()->::draiosproto::counter_time_bytes::MergeFrom(from.io_file());
    }
    if (from.has_io_net()) {
      mutable_io_net()->::draiosproto::counter_time_bytes::MergeFrom(from.io_net());
    }
    if (from.has_io_other()) {
      mutable_io_other()->::draiosproto::counter_time_bytes::MergeFrom(from.io_other());
    }
    if (from.has_wait()) {
      mutable_wait()->::draiosproto::counter_time::MergeFrom(from.wait());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_processing()) {
      mutable_processing()->::draiosproto::counter_time::MergeFrom(from.processing());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void time_categories::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.time_categories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void time_categories::CopyFrom(const time_categories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.time_categories)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool time_categories::IsInitialized() const {

  if (has_unknown()) {
    if (!this->unknown_->IsInitialized()) return false;
  }
  if (has_other()) {
    if (!this->other_->IsInitialized()) return false;
  }
  if (has_file()) {
    if (!this->file_->IsInitialized()) return false;
  }
  if (has_net()) {
    if (!this->net_->IsInitialized()) return false;
  }
  if (has_ipc()) {
    if (!this->ipc_->IsInitialized()) return false;
  }
  if (has_memory()) {
    if (!this->memory_->IsInitialized()) return false;
  }
  if (has_process()) {
    if (!this->process_->IsInitialized()) return false;
  }
  if (has_sleep()) {
    if (!this->sleep_->IsInitialized()) return false;
  }
  if (has_system()) {
    if (!this->system_->IsInitialized()) return false;
  }
  if (has_signal()) {
    if (!this->signal_->IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  if (has_time()) {
    if (!this->time_->IsInitialized()) return false;
  }
  if (has_io_file()) {
    if (!this->io_file_->IsInitialized()) return false;
  }
  if (has_io_net()) {
    if (!this->io_net_->IsInitialized()) return false;
  }
  if (has_io_other()) {
    if (!this->io_other_->IsInitialized()) return false;
  }
  if (has_wait()) {
    if (!this->wait_->IsInitialized()) return false;
  }
  if (has_processing()) {
    if (!this->processing_->IsInitialized()) return false;
  }
  return true;
}

void time_categories::Swap(time_categories* other) {
  if (other == this) return;
  InternalSwap(other);
}
void time_categories::InternalSwap(time_categories* other) {
  std::swap(unknown_, other->unknown_);
  std::swap(other_, other->other_);
  std::swap(file_, other->file_);
  std::swap(net_, other->net_);
  std::swap(ipc_, other->ipc_);
  std::swap(memory_, other->memory_);
  std::swap(process_, other->process_);
  std::swap(sleep_, other->sleep_);
  std::swap(system_, other->system_);
  std::swap(signal_, other->signal_);
  std::swap(user_, other->user_);
  std::swap(time_, other->time_);
  std::swap(io_file_, other->io_file_);
  std::swap(io_net_, other->io_net_);
  std::swap(io_other_, other->io_other_);
  std::swap(wait_, other->wait_);
  std::swap(processing_, other->processing_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata time_categories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = time_categories_descriptor_;
  metadata.reflection = time_categories_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// time_categories

// optional .draiosproto.counter_time unknown = 1;
bool time_categories::has_unknown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void time_categories::set_has_unknown() {
  _has_bits_[0] |= 0x00000001u;
}
void time_categories::clear_has_unknown() {
  _has_bits_[0] &= ~0x00000001u;
}
void time_categories::clear_unknown() {
  if (unknown_ != NULL) unknown_->::draiosproto::counter_time::Clear();
  clear_has_unknown();
}
const ::draiosproto::counter_time& time_categories::unknown() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.unknown)
  return unknown_ != NULL ? *unknown_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* time_categories::mutable_unknown() {
  set_has_unknown();
  if (unknown_ == NULL) {
    unknown_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.unknown)
  return unknown_;
}
::draiosproto::counter_time* time_categories::release_unknown() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.unknown)
  clear_has_unknown();
  ::draiosproto::counter_time* temp = unknown_;
  unknown_ = NULL;
  return temp;
}
void time_categories::set_allocated_unknown(::draiosproto::counter_time* unknown) {
  delete unknown_;
  unknown_ = unknown;
  if (unknown) {
    set_has_unknown();
  } else {
    clear_has_unknown();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.unknown)
}

// optional .draiosproto.counter_time other = 2;
bool time_categories::has_other() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void time_categories::set_has_other() {
  _has_bits_[0] |= 0x00000002u;
}
void time_categories::clear_has_other() {
  _has_bits_[0] &= ~0x00000002u;
}
void time_categories::clear_other() {
  if (other_ != NULL) other_->::draiosproto::counter_time::Clear();
  clear_has_other();
}
const ::draiosproto::counter_time& time_categories::other() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.other)
  return other_ != NULL ? *other_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* time_categories::mutable_other() {
  set_has_other();
  if (other_ == NULL) {
    other_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.other)
  return other_;
}
::draiosproto::counter_time* time_categories::release_other() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.other)
  clear_has_other();
  ::draiosproto::counter_time* temp = other_;
  other_ = NULL;
  return temp;
}
void time_categories::set_allocated_other(::draiosproto::counter_time* other) {
  delete other_;
  other_ = other;
  if (other) {
    set_has_other();
  } else {
    clear_has_other();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.other)
}

// optional .draiosproto.counter_time file = 3;
bool time_categories::has_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void time_categories::set_has_file() {
  _has_bits_[0] |= 0x00000004u;
}
void time_categories::clear_has_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void time_categories::clear_file() {
  if (file_ != NULL) file_->::draiosproto::counter_time::Clear();
  clear_has_file();
}
const ::draiosproto::counter_time& time_categories::file() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.file)
  return file_ != NULL ? *file_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* time_categories::mutable_file() {
  set_has_file();
  if (file_ == NULL) {
    file_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.file)
  return file_;
}
::draiosproto::counter_time* time_categories::release_file() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.file)
  clear_has_file();
  ::draiosproto::counter_time* temp = file_;
  file_ = NULL;
  return temp;
}
void time_categories::set_allocated_file(::draiosproto::counter_time* file) {
  delete file_;
  file_ = file;
  if (file) {
    set_has_file();
  } else {
    clear_has_file();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.file)
}

// optional .draiosproto.counter_time net = 4;
bool time_categories::has_net() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void time_categories::set_has_net() {
  _has_bits_[0] |= 0x00000008u;
}
void time_categories::clear_has_net() {
  _has_bits_[0] &= ~0x00000008u;
}
void time_categories::clear_net() {
  if (net_ != NULL) net_->::draiosproto::counter_time::Clear();
  clear_has_net();
}
const ::draiosproto::counter_time& time_categories::net() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.net)
  return net_ != NULL ? *net_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* time_categories::mutable_net() {
  set_has_net();
  if (net_ == NULL) {
    net_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.net)
  return net_;
}
::draiosproto::counter_time* time_categories::release_net() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.net)
  clear_has_net();
  ::draiosproto::counter_time* temp = net_;
  net_ = NULL;
  return temp;
}
void time_categories::set_allocated_net(::draiosproto::counter_time* net) {
  delete net_;
  net_ = net;
  if (net) {
    set_has_net();
  } else {
    clear_has_net();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.net)
}

// optional .draiosproto.counter_time ipc = 5;
bool time_categories::has_ipc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void time_categories::set_has_ipc() {
  _has_bits_[0] |= 0x00000010u;
}
void time_categories::clear_has_ipc() {
  _has_bits_[0] &= ~0x00000010u;
}
void time_categories::clear_ipc() {
  if (ipc_ != NULL) ipc_->::draiosproto::counter_time::Clear();
  clear_has_ipc();
}
const ::draiosproto::counter_time& time_categories::ipc() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.ipc)
  return ipc_ != NULL ? *ipc_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* time_categories::mutable_ipc() {
  set_has_ipc();
  if (ipc_ == NULL) {
    ipc_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.ipc)
  return ipc_;
}
::draiosproto::counter_time* time_categories::release_ipc() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.ipc)
  clear_has_ipc();
  ::draiosproto::counter_time* temp = ipc_;
  ipc_ = NULL;
  return temp;
}
void time_categories::set_allocated_ipc(::draiosproto::counter_time* ipc) {
  delete ipc_;
  ipc_ = ipc;
  if (ipc) {
    set_has_ipc();
  } else {
    clear_has_ipc();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.ipc)
}

// optional .draiosproto.counter_time memory = 6;
bool time_categories::has_memory() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void time_categories::set_has_memory() {
  _has_bits_[0] |= 0x00000020u;
}
void time_categories::clear_has_memory() {
  _has_bits_[0] &= ~0x00000020u;
}
void time_categories::clear_memory() {
  if (memory_ != NULL) memory_->::draiosproto::counter_time::Clear();
  clear_has_memory();
}
const ::draiosproto::counter_time& time_categories::memory() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.memory)
  return memory_ != NULL ? *memory_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* time_categories::mutable_memory() {
  set_has_memory();
  if (memory_ == NULL) {
    memory_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.memory)
  return memory_;
}
::draiosproto::counter_time* time_categories::release_memory() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.memory)
  clear_has_memory();
  ::draiosproto::counter_time* temp = memory_;
  memory_ = NULL;
  return temp;
}
void time_categories::set_allocated_memory(::draiosproto::counter_time* memory) {
  delete memory_;
  memory_ = memory;
  if (memory) {
    set_has_memory();
  } else {
    clear_has_memory();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.memory)
}

// optional .draiosproto.counter_time process = 7;
bool time_categories::has_process() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void time_categories::set_has_process() {
  _has_bits_[0] |= 0x00000040u;
}
void time_categories::clear_has_process() {
  _has_bits_[0] &= ~0x00000040u;
}
void time_categories::clear_process() {
  if (process_ != NULL) process_->::draiosproto::counter_time::Clear();
  clear_has_process();
}
const ::draiosproto::counter_time& time_categories::process() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.process)
  return process_ != NULL ? *process_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* time_categories::mutable_process() {
  set_has_process();
  if (process_ == NULL) {
    process_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.process)
  return process_;
}
::draiosproto::counter_time* time_categories::release_process() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.process)
  clear_has_process();
  ::draiosproto::counter_time* temp = process_;
  process_ = NULL;
  return temp;
}
void time_categories::set_allocated_process(::draiosproto::counter_time* process) {
  delete process_;
  process_ = process;
  if (process) {
    set_has_process();
  } else {
    clear_has_process();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.process)
}

// optional .draiosproto.counter_time sleep = 8;
bool time_categories::has_sleep() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void time_categories::set_has_sleep() {
  _has_bits_[0] |= 0x00000080u;
}
void time_categories::clear_has_sleep() {
  _has_bits_[0] &= ~0x00000080u;
}
void time_categories::clear_sleep() {
  if (sleep_ != NULL) sleep_->::draiosproto::counter_time::Clear();
  clear_has_sleep();
}
const ::draiosproto::counter_time& time_categories::sleep() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.sleep)
  return sleep_ != NULL ? *sleep_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* time_categories::mutable_sleep() {
  set_has_sleep();
  if (sleep_ == NULL) {
    sleep_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.sleep)
  return sleep_;
}
::draiosproto::counter_time* time_categories::release_sleep() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.sleep)
  clear_has_sleep();
  ::draiosproto::counter_time* temp = sleep_;
  sleep_ = NULL;
  return temp;
}
void time_categories::set_allocated_sleep(::draiosproto::counter_time* sleep) {
  delete sleep_;
  sleep_ = sleep;
  if (sleep) {
    set_has_sleep();
  } else {
    clear_has_sleep();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.sleep)
}

// optional .draiosproto.counter_time system = 9;
bool time_categories::has_system() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void time_categories::set_has_system() {
  _has_bits_[0] |= 0x00000100u;
}
void time_categories::clear_has_system() {
  _has_bits_[0] &= ~0x00000100u;
}
void time_categories::clear_system() {
  if (system_ != NULL) system_->::draiosproto::counter_time::Clear();
  clear_has_system();
}
const ::draiosproto::counter_time& time_categories::system() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.system)
  return system_ != NULL ? *system_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* time_categories::mutable_system() {
  set_has_system();
  if (system_ == NULL) {
    system_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.system)
  return system_;
}
::draiosproto::counter_time* time_categories::release_system() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.system)
  clear_has_system();
  ::draiosproto::counter_time* temp = system_;
  system_ = NULL;
  return temp;
}
void time_categories::set_allocated_system(::draiosproto::counter_time* system) {
  delete system_;
  system_ = system;
  if (system) {
    set_has_system();
  } else {
    clear_has_system();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.system)
}

// optional .draiosproto.counter_time signal = 10;
bool time_categories::has_signal() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void time_categories::set_has_signal() {
  _has_bits_[0] |= 0x00000200u;
}
void time_categories::clear_has_signal() {
  _has_bits_[0] &= ~0x00000200u;
}
void time_categories::clear_signal() {
  if (signal_ != NULL) signal_->::draiosproto::counter_time::Clear();
  clear_has_signal();
}
const ::draiosproto::counter_time& time_categories::signal() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.signal)
  return signal_ != NULL ? *signal_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* time_categories::mutable_signal() {
  set_has_signal();
  if (signal_ == NULL) {
    signal_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.signal)
  return signal_;
}
::draiosproto::counter_time* time_categories::release_signal() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.signal)
  clear_has_signal();
  ::draiosproto::counter_time* temp = signal_;
  signal_ = NULL;
  return temp;
}
void time_categories::set_allocated_signal(::draiosproto::counter_time* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    set_has_signal();
  } else {
    clear_has_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.signal)
}

// optional .draiosproto.counter_time user = 11;
bool time_categories::has_user() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void time_categories::set_has_user() {
  _has_bits_[0] |= 0x00000400u;
}
void time_categories::clear_has_user() {
  _has_bits_[0] &= ~0x00000400u;
}
void time_categories::clear_user() {
  if (user_ != NULL) user_->::draiosproto::counter_time::Clear();
  clear_has_user();
}
const ::draiosproto::counter_time& time_categories::user() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.user)
  return user_ != NULL ? *user_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* time_categories::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.user)
  return user_;
}
::draiosproto::counter_time* time_categories::release_user() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.user)
  clear_has_user();
  ::draiosproto::counter_time* temp = user_;
  user_ = NULL;
  return temp;
}
void time_categories::set_allocated_user(::draiosproto::counter_time* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.user)
}

// optional .draiosproto.counter_time time = 12;
bool time_categories::has_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void time_categories::set_has_time() {
  _has_bits_[0] |= 0x00000800u;
}
void time_categories::clear_has_time() {
  _has_bits_[0] &= ~0x00000800u;
}
void time_categories::clear_time() {
  if (time_ != NULL) time_->::draiosproto::counter_time::Clear();
  clear_has_time();
}
const ::draiosproto::counter_time& time_categories::time() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.time)
  return time_ != NULL ? *time_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* time_categories::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.time)
  return time_;
}
::draiosproto::counter_time* time_categories::release_time() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.time)
  clear_has_time();
  ::draiosproto::counter_time* temp = time_;
  time_ = NULL;
  return temp;
}
void time_categories::set_allocated_time(::draiosproto::counter_time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.time)
}

// optional .draiosproto.counter_time_bytes io_file = 13;
bool time_categories::has_io_file() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void time_categories::set_has_io_file() {
  _has_bits_[0] |= 0x00001000u;
}
void time_categories::clear_has_io_file() {
  _has_bits_[0] &= ~0x00001000u;
}
void time_categories::clear_io_file() {
  if (io_file_ != NULL) io_file_->::draiosproto::counter_time_bytes::Clear();
  clear_has_io_file();
}
const ::draiosproto::counter_time_bytes& time_categories::io_file() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.io_file)
  return io_file_ != NULL ? *io_file_
                         : *::draiosproto::counter_time_bytes::internal_default_instance();
}
::draiosproto::counter_time_bytes* time_categories::mutable_io_file() {
  set_has_io_file();
  if (io_file_ == NULL) {
    io_file_ = new ::draiosproto::counter_time_bytes;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.io_file)
  return io_file_;
}
::draiosproto::counter_time_bytes* time_categories::release_io_file() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.io_file)
  clear_has_io_file();
  ::draiosproto::counter_time_bytes* temp = io_file_;
  io_file_ = NULL;
  return temp;
}
void time_categories::set_allocated_io_file(::draiosproto::counter_time_bytes* io_file) {
  delete io_file_;
  io_file_ = io_file;
  if (io_file) {
    set_has_io_file();
  } else {
    clear_has_io_file();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.io_file)
}

// optional .draiosproto.counter_time_bytes io_net = 14;
bool time_categories::has_io_net() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void time_categories::set_has_io_net() {
  _has_bits_[0] |= 0x00002000u;
}
void time_categories::clear_has_io_net() {
  _has_bits_[0] &= ~0x00002000u;
}
void time_categories::clear_io_net() {
  if (io_net_ != NULL) io_net_->::draiosproto::counter_time_bytes::Clear();
  clear_has_io_net();
}
const ::draiosproto::counter_time_bytes& time_categories::io_net() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.io_net)
  return io_net_ != NULL ? *io_net_
                         : *::draiosproto::counter_time_bytes::internal_default_instance();
}
::draiosproto::counter_time_bytes* time_categories::mutable_io_net() {
  set_has_io_net();
  if (io_net_ == NULL) {
    io_net_ = new ::draiosproto::counter_time_bytes;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.io_net)
  return io_net_;
}
::draiosproto::counter_time_bytes* time_categories::release_io_net() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.io_net)
  clear_has_io_net();
  ::draiosproto::counter_time_bytes* temp = io_net_;
  io_net_ = NULL;
  return temp;
}
void time_categories::set_allocated_io_net(::draiosproto::counter_time_bytes* io_net) {
  delete io_net_;
  io_net_ = io_net;
  if (io_net) {
    set_has_io_net();
  } else {
    clear_has_io_net();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.io_net)
}

// optional .draiosproto.counter_time_bytes io_other = 15;
bool time_categories::has_io_other() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void time_categories::set_has_io_other() {
  _has_bits_[0] |= 0x00004000u;
}
void time_categories::clear_has_io_other() {
  _has_bits_[0] &= ~0x00004000u;
}
void time_categories::clear_io_other() {
  if (io_other_ != NULL) io_other_->::draiosproto::counter_time_bytes::Clear();
  clear_has_io_other();
}
const ::draiosproto::counter_time_bytes& time_categories::io_other() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.io_other)
  return io_other_ != NULL ? *io_other_
                         : *::draiosproto::counter_time_bytes::internal_default_instance();
}
::draiosproto::counter_time_bytes* time_categories::mutable_io_other() {
  set_has_io_other();
  if (io_other_ == NULL) {
    io_other_ = new ::draiosproto::counter_time_bytes;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.io_other)
  return io_other_;
}
::draiosproto::counter_time_bytes* time_categories::release_io_other() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.io_other)
  clear_has_io_other();
  ::draiosproto::counter_time_bytes* temp = io_other_;
  io_other_ = NULL;
  return temp;
}
void time_categories::set_allocated_io_other(::draiosproto::counter_time_bytes* io_other) {
  delete io_other_;
  io_other_ = io_other;
  if (io_other) {
    set_has_io_other();
  } else {
    clear_has_io_other();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.io_other)
}

// optional .draiosproto.counter_time wait = 16;
bool time_categories::has_wait() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void time_categories::set_has_wait() {
  _has_bits_[0] |= 0x00008000u;
}
void time_categories::clear_has_wait() {
  _has_bits_[0] &= ~0x00008000u;
}
void time_categories::clear_wait() {
  if (wait_ != NULL) wait_->::draiosproto::counter_time::Clear();
  clear_has_wait();
}
const ::draiosproto::counter_time& time_categories::wait() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.wait)
  return wait_ != NULL ? *wait_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* time_categories::mutable_wait() {
  set_has_wait();
  if (wait_ == NULL) {
    wait_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.wait)
  return wait_;
}
::draiosproto::counter_time* time_categories::release_wait() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.wait)
  clear_has_wait();
  ::draiosproto::counter_time* temp = wait_;
  wait_ = NULL;
  return temp;
}
void time_categories::set_allocated_wait(::draiosproto::counter_time* wait) {
  delete wait_;
  wait_ = wait;
  if (wait) {
    set_has_wait();
  } else {
    clear_has_wait();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.wait)
}

// optional .draiosproto.counter_time processing = 17;
bool time_categories::has_processing() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void time_categories::set_has_processing() {
  _has_bits_[0] |= 0x00010000u;
}
void time_categories::clear_has_processing() {
  _has_bits_[0] &= ~0x00010000u;
}
void time_categories::clear_processing() {
  if (processing_ != NULL) processing_->::draiosproto::counter_time::Clear();
  clear_has_processing();
}
const ::draiosproto::counter_time& time_categories::processing() const {
  // @@protoc_insertion_point(field_get:draiosproto.time_categories.processing)
  return processing_ != NULL ? *processing_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* time_categories::mutable_processing() {
  set_has_processing();
  if (processing_ == NULL) {
    processing_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.time_categories.processing)
  return processing_;
}
::draiosproto::counter_time* time_categories::release_processing() {
  // @@protoc_insertion_point(field_release:draiosproto.time_categories.processing)
  clear_has_processing();
  ::draiosproto::counter_time* temp = processing_;
  processing_ = NULL;
  return temp;
}
void time_categories::set_allocated_processing(::draiosproto::counter_time* processing) {
  delete processing_;
  processing_ = processing;
  if (processing) {
    set_has_processing();
  } else {
    clear_has_processing();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.time_categories.processing)
}

inline const time_categories* time_categories::internal_default_instance() {
  return &time_categories_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int transaction_breakdown_categories::kOtherFieldNumber;
const int transaction_breakdown_categories::kIoFileFieldNumber;
const int transaction_breakdown_categories::kIoNetFieldNumber;
const int transaction_breakdown_categories::kProcessingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

transaction_breakdown_categories::transaction_breakdown_categories()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.transaction_breakdown_categories)
}

void transaction_breakdown_categories::InitAsDefaultInstance() {
  other_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
  io_file_ = const_cast< ::draiosproto::counter_time_bytes*>(
      ::draiosproto::counter_time_bytes::internal_default_instance());
  io_net_ = const_cast< ::draiosproto::counter_time_bytes*>(
      ::draiosproto::counter_time_bytes::internal_default_instance());
  processing_ = const_cast< ::draiosproto::counter_time*>(
      ::draiosproto::counter_time::internal_default_instance());
}

transaction_breakdown_categories::transaction_breakdown_categories(const transaction_breakdown_categories& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.transaction_breakdown_categories)
}

void transaction_breakdown_categories::SharedCtor() {
  _cached_size_ = 0;
  other_ = NULL;
  io_file_ = NULL;
  io_net_ = NULL;
  processing_ = NULL;
}

transaction_breakdown_categories::~transaction_breakdown_categories() {
  // @@protoc_insertion_point(destructor:draiosproto.transaction_breakdown_categories)
  SharedDtor();
}

void transaction_breakdown_categories::SharedDtor() {
  if (this != &transaction_breakdown_categories_default_instance_.get()) {
    delete other_;
    delete io_file_;
    delete io_net_;
    delete processing_;
  }
}

void transaction_breakdown_categories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* transaction_breakdown_categories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return transaction_breakdown_categories_descriptor_;
}

const transaction_breakdown_categories& transaction_breakdown_categories::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<transaction_breakdown_categories> transaction_breakdown_categories_default_instance_;

transaction_breakdown_categories* transaction_breakdown_categories::New(::google::protobuf::Arena* arena) const {
  transaction_breakdown_categories* n = new transaction_breakdown_categories;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void transaction_breakdown_categories::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.transaction_breakdown_categories)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_other()) {
      if (other_ != NULL) other_->::draiosproto::counter_time::Clear();
    }
    if (has_io_file()) {
      if (io_file_ != NULL) io_file_->::draiosproto::counter_time_bytes::Clear();
    }
    if (has_io_net()) {
      if (io_net_ != NULL) io_net_->::draiosproto::counter_time_bytes::Clear();
    }
    if (has_processing()) {
      if (processing_ != NULL) processing_->::draiosproto::counter_time::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool transaction_breakdown_categories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.transaction_breakdown_categories)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .draiosproto.counter_time other = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_io_file;
        break;
      }

      // optional .draiosproto.counter_time_bytes io_file = 13;
      case 13: {
        if (tag == 106) {
         parse_io_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_io_net;
        break;
      }

      // optional .draiosproto.counter_time_bytes io_net = 14;
      case 14: {
        if (tag == 114) {
         parse_io_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_net()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_processing;
        break;
      }

      // optional .draiosproto.counter_time processing = 17;
      case 17: {
        if (tag == 138) {
         parse_processing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.transaction_breakdown_categories)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.transaction_breakdown_categories)
  return false;
#undef DO_
}

void transaction_breakdown_categories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.transaction_breakdown_categories)
  // optional .draiosproto.counter_time other = 2;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->other_, output);
  }

  // optional .draiosproto.counter_time_bytes io_file = 13;
  if (has_io_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->io_file_, output);
  }

  // optional .draiosproto.counter_time_bytes io_net = 14;
  if (has_io_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->io_net_, output);
  }

  // optional .draiosproto.counter_time processing = 17;
  if (has_processing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->processing_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.transaction_breakdown_categories)
}

::google::protobuf::uint8* transaction_breakdown_categories::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.transaction_breakdown_categories)
  // optional .draiosproto.counter_time other = 2;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->other_, false, target);
  }

  // optional .draiosproto.counter_time_bytes io_file = 13;
  if (has_io_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->io_file_, false, target);
  }

  // optional .draiosproto.counter_time_bytes io_net = 14;
  if (has_io_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->io_net_, false, target);
  }

  // optional .draiosproto.counter_time processing = 17;
  if (has_processing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->processing_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.transaction_breakdown_categories)
  return target;
}

size_t transaction_breakdown_categories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.transaction_breakdown_categories)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .draiosproto.counter_time other = 2;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->other_);
    }

    // optional .draiosproto.counter_time_bytes io_file = 13;
    if (has_io_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->io_file_);
    }

    // optional .draiosproto.counter_time_bytes io_net = 14;
    if (has_io_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->io_net_);
    }

    // optional .draiosproto.counter_time processing = 17;
    if (has_processing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->processing_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void transaction_breakdown_categories::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.transaction_breakdown_categories)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const transaction_breakdown_categories* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const transaction_breakdown_categories>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.transaction_breakdown_categories)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.transaction_breakdown_categories)
    UnsafeMergeFrom(*source);
  }
}

void transaction_breakdown_categories::MergeFrom(const transaction_breakdown_categories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.transaction_breakdown_categories)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void transaction_breakdown_categories::UnsafeMergeFrom(const transaction_breakdown_categories& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_other()) {
      mutable_other()->::draiosproto::counter_time::MergeFrom(from.other());
    }
    if (from.has_io_file()) {
      mutable_io_file()->::draiosproto::counter_time_bytes::MergeFrom(from.io_file());
    }
    if (from.has_io_net()) {
      mutable_io_net()->::draiosproto::counter_time_bytes::MergeFrom(from.io_net());
    }
    if (from.has_processing()) {
      mutable_processing()->::draiosproto::counter_time::MergeFrom(from.processing());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void transaction_breakdown_categories::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.transaction_breakdown_categories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transaction_breakdown_categories::CopyFrom(const transaction_breakdown_categories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.transaction_breakdown_categories)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool transaction_breakdown_categories::IsInitialized() const {

  if (has_other()) {
    if (!this->other_->IsInitialized()) return false;
  }
  if (has_io_file()) {
    if (!this->io_file_->IsInitialized()) return false;
  }
  if (has_io_net()) {
    if (!this->io_net_->IsInitialized()) return false;
  }
  if (has_processing()) {
    if (!this->processing_->IsInitialized()) return false;
  }
  return true;
}

void transaction_breakdown_categories::Swap(transaction_breakdown_categories* other) {
  if (other == this) return;
  InternalSwap(other);
}
void transaction_breakdown_categories::InternalSwap(transaction_breakdown_categories* other) {
  std::swap(other_, other->other_);
  std::swap(io_file_, other->io_file_);
  std::swap(io_net_, other->io_net_);
  std::swap(processing_, other->processing_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata transaction_breakdown_categories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = transaction_breakdown_categories_descriptor_;
  metadata.reflection = transaction_breakdown_categories_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// transaction_breakdown_categories

// optional .draiosproto.counter_time other = 2;
bool transaction_breakdown_categories::has_other() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void transaction_breakdown_categories::set_has_other() {
  _has_bits_[0] |= 0x00000001u;
}
void transaction_breakdown_categories::clear_has_other() {
  _has_bits_[0] &= ~0x00000001u;
}
void transaction_breakdown_categories::clear_other() {
  if (other_ != NULL) other_->::draiosproto::counter_time::Clear();
  clear_has_other();
}
const ::draiosproto::counter_time& transaction_breakdown_categories::other() const {
  // @@protoc_insertion_point(field_get:draiosproto.transaction_breakdown_categories.other)
  return other_ != NULL ? *other_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* transaction_breakdown_categories::mutable_other() {
  set_has_other();
  if (other_ == NULL) {
    other_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.transaction_breakdown_categories.other)
  return other_;
}
::draiosproto::counter_time* transaction_breakdown_categories::release_other() {
  // @@protoc_insertion_point(field_release:draiosproto.transaction_breakdown_categories.other)
  clear_has_other();
  ::draiosproto::counter_time* temp = other_;
  other_ = NULL;
  return temp;
}
void transaction_breakdown_categories::set_allocated_other(::draiosproto::counter_time* other) {
  delete other_;
  other_ = other;
  if (other) {
    set_has_other();
  } else {
    clear_has_other();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.transaction_breakdown_categories.other)
}

// optional .draiosproto.counter_time_bytes io_file = 13;
bool transaction_breakdown_categories::has_io_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void transaction_breakdown_categories::set_has_io_file() {
  _has_bits_[0] |= 0x00000002u;
}
void transaction_breakdown_categories::clear_has_io_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void transaction_breakdown_categories::clear_io_file() {
  if (io_file_ != NULL) io_file_->::draiosproto::counter_time_bytes::Clear();
  clear_has_io_file();
}
const ::draiosproto::counter_time_bytes& transaction_breakdown_categories::io_file() const {
  // @@protoc_insertion_point(field_get:draiosproto.transaction_breakdown_categories.io_file)
  return io_file_ != NULL ? *io_file_
                         : *::draiosproto::counter_time_bytes::internal_default_instance();
}
::draiosproto::counter_time_bytes* transaction_breakdown_categories::mutable_io_file() {
  set_has_io_file();
  if (io_file_ == NULL) {
    io_file_ = new ::draiosproto::counter_time_bytes;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.transaction_breakdown_categories.io_file)
  return io_file_;
}
::draiosproto::counter_time_bytes* transaction_breakdown_categories::release_io_file() {
  // @@protoc_insertion_point(field_release:draiosproto.transaction_breakdown_categories.io_file)
  clear_has_io_file();
  ::draiosproto::counter_time_bytes* temp = io_file_;
  io_file_ = NULL;
  return temp;
}
void transaction_breakdown_categories::set_allocated_io_file(::draiosproto::counter_time_bytes* io_file) {
  delete io_file_;
  io_file_ = io_file;
  if (io_file) {
    set_has_io_file();
  } else {
    clear_has_io_file();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.transaction_breakdown_categories.io_file)
}

// optional .draiosproto.counter_time_bytes io_net = 14;
bool transaction_breakdown_categories::has_io_net() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void transaction_breakdown_categories::set_has_io_net() {
  _has_bits_[0] |= 0x00000004u;
}
void transaction_breakdown_categories::clear_has_io_net() {
  _has_bits_[0] &= ~0x00000004u;
}
void transaction_breakdown_categories::clear_io_net() {
  if (io_net_ != NULL) io_net_->::draiosproto::counter_time_bytes::Clear();
  clear_has_io_net();
}
const ::draiosproto::counter_time_bytes& transaction_breakdown_categories::io_net() const {
  // @@protoc_insertion_point(field_get:draiosproto.transaction_breakdown_categories.io_net)
  return io_net_ != NULL ? *io_net_
                         : *::draiosproto::counter_time_bytes::internal_default_instance();
}
::draiosproto::counter_time_bytes* transaction_breakdown_categories::mutable_io_net() {
  set_has_io_net();
  if (io_net_ == NULL) {
    io_net_ = new ::draiosproto::counter_time_bytes;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.transaction_breakdown_categories.io_net)
  return io_net_;
}
::draiosproto::counter_time_bytes* transaction_breakdown_categories::release_io_net() {
  // @@protoc_insertion_point(field_release:draiosproto.transaction_breakdown_categories.io_net)
  clear_has_io_net();
  ::draiosproto::counter_time_bytes* temp = io_net_;
  io_net_ = NULL;
  return temp;
}
void transaction_breakdown_categories::set_allocated_io_net(::draiosproto::counter_time_bytes* io_net) {
  delete io_net_;
  io_net_ = io_net;
  if (io_net) {
    set_has_io_net();
  } else {
    clear_has_io_net();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.transaction_breakdown_categories.io_net)
}

// optional .draiosproto.counter_time processing = 17;
bool transaction_breakdown_categories::has_processing() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void transaction_breakdown_categories::set_has_processing() {
  _has_bits_[0] |= 0x00000008u;
}
void transaction_breakdown_categories::clear_has_processing() {
  _has_bits_[0] &= ~0x00000008u;
}
void transaction_breakdown_categories::clear_processing() {
  if (processing_ != NULL) processing_->::draiosproto::counter_time::Clear();
  clear_has_processing();
}
const ::draiosproto::counter_time& transaction_breakdown_categories::processing() const {
  // @@protoc_insertion_point(field_get:draiosproto.transaction_breakdown_categories.processing)
  return processing_ != NULL ? *processing_
                         : *::draiosproto::counter_time::internal_default_instance();
}
::draiosproto::counter_time* transaction_breakdown_categories::mutable_processing() {
  set_has_processing();
  if (processing_ == NULL) {
    processing_ = new ::draiosproto::counter_time;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.transaction_breakdown_categories.processing)
  return processing_;
}
::draiosproto::counter_time* transaction_breakdown_categories::release_processing() {
  // @@protoc_insertion_point(field_release:draiosproto.transaction_breakdown_categories.processing)
  clear_has_processing();
  ::draiosproto::counter_time* temp = processing_;
  processing_ = NULL;
  return temp;
}
void transaction_breakdown_categories::set_allocated_processing(::draiosproto::counter_time* processing) {
  delete processing_;
  processing_ = processing;
  if (processing) {
    set_has_processing();
  } else {
    clear_has_processing();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.transaction_breakdown_categories.processing)
}

inline const transaction_breakdown_categories* transaction_breakdown_categories::internal_default_instance() {
  return &transaction_breakdown_categories_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int counter_syscall_errors::kCountFieldNumber;
const int counter_syscall_errors::kTopErrorCodesFieldNumber;
const int counter_syscall_errors::kCountFileFieldNumber;
const int counter_syscall_errors::kCountFileOpenFieldNumber;
const int counter_syscall_errors::kCountNetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

counter_syscall_errors::counter_syscall_errors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.counter_syscall_errors)
}

void counter_syscall_errors::InitAsDefaultInstance() {
}

counter_syscall_errors::counter_syscall_errors(const counter_syscall_errors& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.counter_syscall_errors)
}

void counter_syscall_errors::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&count_, 0, reinterpret_cast<char*>(&count_net_) -
    reinterpret_cast<char*>(&count_) + sizeof(count_net_));
}

counter_syscall_errors::~counter_syscall_errors() {
  // @@protoc_insertion_point(destructor:draiosproto.counter_syscall_errors)
  SharedDtor();
}

void counter_syscall_errors::SharedDtor() {
}

void counter_syscall_errors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_syscall_errors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_syscall_errors_descriptor_;
}

const counter_syscall_errors& counter_syscall_errors::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<counter_syscall_errors> counter_syscall_errors_default_instance_;

counter_syscall_errors* counter_syscall_errors::New(::google::protobuf::Arena* arena) const {
  counter_syscall_errors* n = new counter_syscall_errors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void counter_syscall_errors::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.counter_syscall_errors)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(counter_syscall_errors, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<counter_syscall_errors*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(count_, count_net_);

#undef ZR_HELPER_
#undef ZR_

  top_error_codes_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool counter_syscall_errors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.counter_syscall_errors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (tag == 8) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_top_error_codes;
        break;
      }

      // repeated uint32 top_error_codes = 2;
      case 2: {
        if (tag == 16) {
         parse_top_error_codes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_top_error_codes())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_top_error_codes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_top_error_codes;
        if (input->ExpectTag(32)) goto parse_count_file;
        break;
      }

      // optional uint32 count_file = 4;
      case 4: {
        if (tag == 32) {
         parse_count_file:
          set_has_count_file();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_file_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count_file_open;
        break;
      }

      // optional uint32 count_file_open = 5;
      case 5: {
        if (tag == 40) {
         parse_count_file_open:
          set_has_count_file_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_file_open_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count_net;
        break;
      }

      // optional uint32 count_net = 6;
      case 6: {
        if (tag == 48) {
         parse_count_net:
          set_has_count_net();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_net_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.counter_syscall_errors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.counter_syscall_errors)
  return false;
#undef DO_
}

void counter_syscall_errors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.counter_syscall_errors)
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated uint32 top_error_codes = 2;
  for (int i = 0; i < this->top_error_codes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->top_error_codes(i), output);
  }

  // optional uint32 count_file = 4;
  if (has_count_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count_file(), output);
  }

  // optional uint32 count_file_open = 5;
  if (has_count_file_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count_file_open(), output);
  }

  // optional uint32 count_net = 6;
  if (has_count_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count_net(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.counter_syscall_errors)
}

::google::protobuf::uint8* counter_syscall_errors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.counter_syscall_errors)
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated uint32 top_error_codes = 2;
  for (int i = 0; i < this->top_error_codes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->top_error_codes(i), target);
  }

  // optional uint32 count_file = 4;
  if (has_count_file()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count_file(), target);
  }

  // optional uint32 count_file_open = 5;
  if (has_count_file_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count_file_open(), target);
  }

  // optional uint32 count_net = 6;
  if (has_count_net()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count_net(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.counter_syscall_errors)
  return target;
}

size_t counter_syscall_errors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.counter_syscall_errors)
  size_t total_size = 0;

  // required uint32 count = 1;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }
  if (_has_bits_[2 / 32] & 28u) {
    // optional uint32 count_file = 4;
    if (has_count_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_file());
    }

    // optional uint32 count_file_open = 5;
    if (has_count_file_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_file_open());
    }

    // optional uint32 count_net = 6;
    if (has_count_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_net());
    }

  }
  // repeated uint32 top_error_codes = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->top_error_codes_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->top_error_codes(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->top_error_codes_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_syscall_errors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.counter_syscall_errors)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const counter_syscall_errors* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const counter_syscall_errors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.counter_syscall_errors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.counter_syscall_errors)
    UnsafeMergeFrom(*source);
  }
}

void counter_syscall_errors::MergeFrom(const counter_syscall_errors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.counter_syscall_errors)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void counter_syscall_errors::UnsafeMergeFrom(const counter_syscall_errors& from) {
  GOOGLE_DCHECK(&from != this);
  top_error_codes_.UnsafeMergeFrom(from.top_error_codes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_count_file()) {
      set_count_file(from.count_file());
    }
    if (from.has_count_file_open()) {
      set_count_file_open(from.count_file_open());
    }
    if (from.has_count_net()) {
      set_count_net(from.count_net());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void counter_syscall_errors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.counter_syscall_errors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_syscall_errors::CopyFrom(const counter_syscall_errors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.counter_syscall_errors)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool counter_syscall_errors::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void counter_syscall_errors::Swap(counter_syscall_errors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void counter_syscall_errors::InternalSwap(counter_syscall_errors* other) {
  std::swap(count_, other->count_);
  top_error_codes_.UnsafeArenaSwap(&other->top_error_codes_);
  std::swap(count_file_, other->count_file_);
  std::swap(count_file_open_, other->count_file_open_);
  std::swap(count_net_, other->count_net_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata counter_syscall_errors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_syscall_errors_descriptor_;
  metadata.reflection = counter_syscall_errors_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// counter_syscall_errors

// required uint32 count = 1;
bool counter_syscall_errors::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void counter_syscall_errors::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void counter_syscall_errors::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void counter_syscall_errors::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 counter_syscall_errors::count() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_syscall_errors.count)
  return count_;
}
void counter_syscall_errors::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_syscall_errors.count)
}

// repeated uint32 top_error_codes = 2;
int counter_syscall_errors::top_error_codes_size() const {
  return top_error_codes_.size();
}
void counter_syscall_errors::clear_top_error_codes() {
  top_error_codes_.Clear();
}
::google::protobuf::uint32 counter_syscall_errors::top_error_codes(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_syscall_errors.top_error_codes)
  return top_error_codes_.Get(index);
}
void counter_syscall_errors::set_top_error_codes(int index, ::google::protobuf::uint32 value) {
  top_error_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:draiosproto.counter_syscall_errors.top_error_codes)
}
void counter_syscall_errors::add_top_error_codes(::google::protobuf::uint32 value) {
  top_error_codes_.Add(value);
  // @@protoc_insertion_point(field_add:draiosproto.counter_syscall_errors.top_error_codes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
counter_syscall_errors::top_error_codes() const {
  // @@protoc_insertion_point(field_list:draiosproto.counter_syscall_errors.top_error_codes)
  return top_error_codes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
counter_syscall_errors::mutable_top_error_codes() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.counter_syscall_errors.top_error_codes)
  return &top_error_codes_;
}

// optional uint32 count_file = 4;
bool counter_syscall_errors::has_count_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void counter_syscall_errors::set_has_count_file() {
  _has_bits_[0] |= 0x00000004u;
}
void counter_syscall_errors::clear_has_count_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void counter_syscall_errors::clear_count_file() {
  count_file_ = 0u;
  clear_has_count_file();
}
::google::protobuf::uint32 counter_syscall_errors::count_file() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_syscall_errors.count_file)
  return count_file_;
}
void counter_syscall_errors::set_count_file(::google::protobuf::uint32 value) {
  set_has_count_file();
  count_file_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_syscall_errors.count_file)
}

// optional uint32 count_file_open = 5;
bool counter_syscall_errors::has_count_file_open() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void counter_syscall_errors::set_has_count_file_open() {
  _has_bits_[0] |= 0x00000008u;
}
void counter_syscall_errors::clear_has_count_file_open() {
  _has_bits_[0] &= ~0x00000008u;
}
void counter_syscall_errors::clear_count_file_open() {
  count_file_open_ = 0u;
  clear_has_count_file_open();
}
::google::protobuf::uint32 counter_syscall_errors::count_file_open() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_syscall_errors.count_file_open)
  return count_file_open_;
}
void counter_syscall_errors::set_count_file_open(::google::protobuf::uint32 value) {
  set_has_count_file_open();
  count_file_open_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_syscall_errors.count_file_open)
}

// optional uint32 count_net = 6;
bool counter_syscall_errors::has_count_net() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void counter_syscall_errors::set_has_count_net() {
  _has_bits_[0] |= 0x00000010u;
}
void counter_syscall_errors::clear_has_count_net() {
  _has_bits_[0] &= ~0x00000010u;
}
void counter_syscall_errors::clear_count_net() {
  count_net_ = 0u;
  clear_has_count_net();
}
::google::protobuf::uint32 counter_syscall_errors::count_net() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_syscall_errors.count_net)
  return count_net_;
}
void counter_syscall_errors::set_count_net(::google::protobuf::uint32 value) {
  set_has_count_net();
  count_net_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_syscall_errors.count_net)
}

inline const counter_syscall_errors* counter_syscall_errors::internal_default_instance() {
  return &counter_syscall_errors_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int resource_categories::kCapacityScoreFieldNumber;
const int resource_categories::kStolenCapacityScoreFieldNumber;
const int resource_categories::kConnectionQueueUsagePctFieldNumber;
const int resource_categories::kFdUsagePctFieldNumber;
const int resource_categories::kCpuPctFieldNumber;
const int resource_categories::kResidentMemoryUsageKbFieldNumber;
const int resource_categories::kVirtualMemoryUsageKbFieldNumber;
const int resource_categories::kSwapMemoryUsageKbFieldNumber;
const int resource_categories::kMajorPagefaultsFieldNumber;
const int resource_categories::kMinorPagefaultsFieldNumber;
const int resource_categories::kFdCountFieldNumber;
const int resource_categories::kCpuSharesFieldNumber;
const int resource_categories::kCpuSharesUsagePctFieldNumber;
const int resource_categories::kMemoryLimitKbFieldNumber;
const int resource_categories::kSwapLimitKbFieldNumber;
const int resource_categories::kCpuQuotaUsedPctFieldNumber;
const int resource_categories::kSwapMemoryTotalKbFieldNumber;
const int resource_categories::kSwapMemoryAvailableKbFieldNumber;
const int resource_categories::kCountProcessesFieldNumber;
const int resource_categories::kProcStartCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

resource_categories::resource_categories()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.resource_categories)
}

void resource_categories::InitAsDefaultInstance() {
}

resource_categories::resource_categories(const resource_categories& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.resource_categories)
}

void resource_categories::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&capacity_score_, 0, reinterpret_cast<char*>(&proc_start_count_) -
    reinterpret_cast<char*>(&capacity_score_) + sizeof(proc_start_count_));
}

resource_categories::~resource_categories() {
  // @@protoc_insertion_point(destructor:draiosproto.resource_categories)
  SharedDtor();
}

void resource_categories::SharedDtor() {
}

void resource_categories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* resource_categories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return resource_categories_descriptor_;
}

const resource_categories& resource_categories::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<resource_categories> resource_categories_default_instance_;

resource_categories* resource_categories::New(::google::protobuf::Arena* arena) const {
  resource_categories* n = new resource_categories;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void resource_categories::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.resource_categories)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(resource_categories, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<resource_categories*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(capacity_score_, swap_memory_usage_kb_);
  ZR_(major_pagefaults_, cpu_quota_used_pct_);
  ZR_(swap_memory_total_kb_, proc_start_count_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool resource_categories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.resource_categories)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 capacity_score = 1;
      case 1: {
        if (tag == 8) {
          set_has_capacity_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_score_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_connection_queue_usage_pct;
        break;
      }

      // optional uint32 connection_queue_usage_pct = 2;
      case 2: {
        if (tag == 16) {
         parse_connection_queue_usage_pct:
          set_has_connection_queue_usage_pct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connection_queue_usage_pct_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fd_usage_pct;
        break;
      }

      // optional uint32 fd_usage_pct = 3;
      case 3: {
        if (tag == 24) {
         parse_fd_usage_pct:
          set_has_fd_usage_pct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fd_usage_pct_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cpu_pct;
        break;
      }

      // optional uint32 cpu_pct = 4;
      case 4: {
        if (tag == 32) {
         parse_cpu_pct:
          set_has_cpu_pct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_pct_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_resident_memory_usage_kb;
        break;
      }

      // optional uint32 resident_memory_usage_kb = 5;
      case 5: {
        if (tag == 40) {
         parse_resident_memory_usage_kb:
          set_has_resident_memory_usage_kb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resident_memory_usage_kb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stolen_capacity_score;
        break;
      }

      // optional uint32 stolen_capacity_score = 6;
      case 6: {
        if (tag == 48) {
         parse_stolen_capacity_score:
          set_has_stolen_capacity_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stolen_capacity_score_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_virtual_memory_usage_kb;
        break;
      }

      // optional uint32 virtual_memory_usage_kb = 13;
      case 13: {
        if (tag == 104) {
         parse_virtual_memory_usage_kb:
          set_has_virtual_memory_usage_kb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &virtual_memory_usage_kb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_swap_memory_usage_kb;
        break;
      }

      // optional uint32 swap_memory_usage_kb = 14;
      case 14: {
        if (tag == 112) {
         parse_swap_memory_usage_kb:
          set_has_swap_memory_usage_kb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swap_memory_usage_kb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_major_pagefaults;
        break;
      }

      // optional uint64 major_pagefaults = 15;
      case 15: {
        if (tag == 120) {
         parse_major_pagefaults:
          set_has_major_pagefaults();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &major_pagefaults_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_minor_pagefaults;
        break;
      }

      // optional uint64 minor_pagefaults = 16;
      case 16: {
        if (tag == 128) {
         parse_minor_pagefaults:
          set_has_minor_pagefaults();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minor_pagefaults_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_fd_count;
        break;
      }

      // optional uint32 fd_count = 21;
      case 21: {
        if (tag == 168) {
         parse_fd_count:
          set_has_fd_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fd_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_cpu_shares;
        break;
      }

      // optional uint32 cpu_shares = 24;
      case 24: {
        if (tag == 192) {
         parse_cpu_shares:
          set_has_cpu_shares();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_shares_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_cpu_shares_usage_pct;
        break;
      }

      // optional uint32 cpu_shares_usage_pct = 25;
      case 25: {
        if (tag == 200) {
         parse_cpu_shares_usage_pct:
          set_has_cpu_shares_usage_pct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_shares_usage_pct_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_memory_limit_kb;
        break;
      }

      // optional uint32 memory_limit_kb = 26;
      case 26: {
        if (tag == 208) {
         parse_memory_limit_kb:
          set_has_memory_limit_kb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memory_limit_kb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_swap_limit_kb;
        break;
      }

      // optional uint32 swap_limit_kb = 27;
      case 27: {
        if (tag == 216) {
         parse_swap_limit_kb:
          set_has_swap_limit_kb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swap_limit_kb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_cpu_quota_used_pct;
        break;
      }

      // optional uint32 cpu_quota_used_pct = 28;
      case 28: {
        if (tag == 224) {
         parse_cpu_quota_used_pct:
          set_has_cpu_quota_used_pct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_quota_used_pct_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_swap_memory_total_kb;
        break;
      }

      // optional uint32 swap_memory_total_kb = 29;
      case 29: {
        if (tag == 232) {
         parse_swap_memory_total_kb:
          set_has_swap_memory_total_kb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swap_memory_total_kb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_swap_memory_available_kb;
        break;
      }

      // optional uint32 swap_memory_available_kb = 30;
      case 30: {
        if (tag == 240) {
         parse_swap_memory_available_kb:
          set_has_swap_memory_available_kb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swap_memory_available_kb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_count_processes;
        break;
      }

      // optional uint64 count_processes = 31;
      case 31: {
        if (tag == 248) {
         parse_count_processes:
          set_has_count_processes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_processes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_proc_start_count;
        break;
      }

      // optional uint64 proc_start_count = 32;
      case 32: {
        if (tag == 256) {
         parse_proc_start_count:
          set_has_proc_start_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_start_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.resource_categories)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.resource_categories)
  return false;
#undef DO_
}

void resource_categories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.resource_categories)
  // optional uint32 capacity_score = 1;
  if (has_capacity_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->capacity_score(), output);
  }

  // optional uint32 connection_queue_usage_pct = 2;
  if (has_connection_queue_usage_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->connection_queue_usage_pct(), output);
  }

  // optional uint32 fd_usage_pct = 3;
  if (has_fd_usage_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fd_usage_pct(), output);
  }

  // optional uint32 cpu_pct = 4;
  if (has_cpu_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cpu_pct(), output);
  }

  // optional uint32 resident_memory_usage_kb = 5;
  if (has_resident_memory_usage_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resident_memory_usage_kb(), output);
  }

  // optional uint32 stolen_capacity_score = 6;
  if (has_stolen_capacity_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stolen_capacity_score(), output);
  }

  // optional uint32 virtual_memory_usage_kb = 13;
  if (has_virtual_memory_usage_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->virtual_memory_usage_kb(), output);
  }

  // optional uint32 swap_memory_usage_kb = 14;
  if (has_swap_memory_usage_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->swap_memory_usage_kb(), output);
  }

  // optional uint64 major_pagefaults = 15;
  if (has_major_pagefaults()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->major_pagefaults(), output);
  }

  // optional uint64 minor_pagefaults = 16;
  if (has_minor_pagefaults()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->minor_pagefaults(), output);
  }

  // optional uint32 fd_count = 21;
  if (has_fd_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->fd_count(), output);
  }

  // optional uint32 cpu_shares = 24;
  if (has_cpu_shares()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->cpu_shares(), output);
  }

  // optional uint32 cpu_shares_usage_pct = 25;
  if (has_cpu_shares_usage_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->cpu_shares_usage_pct(), output);
  }

  // optional uint32 memory_limit_kb = 26;
  if (has_memory_limit_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->memory_limit_kb(), output);
  }

  // optional uint32 swap_limit_kb = 27;
  if (has_swap_limit_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->swap_limit_kb(), output);
  }

  // optional uint32 cpu_quota_used_pct = 28;
  if (has_cpu_quota_used_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->cpu_quota_used_pct(), output);
  }

  // optional uint32 swap_memory_total_kb = 29;
  if (has_swap_memory_total_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->swap_memory_total_kb(), output);
  }

  // optional uint32 swap_memory_available_kb = 30;
  if (has_swap_memory_available_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->swap_memory_available_kb(), output);
  }

  // optional uint64 count_processes = 31;
  if (has_count_processes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->count_processes(), output);
  }

  // optional uint64 proc_start_count = 32;
  if (has_proc_start_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->proc_start_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.resource_categories)
}

::google::protobuf::uint8* resource_categories::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.resource_categories)
  // optional uint32 capacity_score = 1;
  if (has_capacity_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->capacity_score(), target);
  }

  // optional uint32 connection_queue_usage_pct = 2;
  if (has_connection_queue_usage_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->connection_queue_usage_pct(), target);
  }

  // optional uint32 fd_usage_pct = 3;
  if (has_fd_usage_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fd_usage_pct(), target);
  }

  // optional uint32 cpu_pct = 4;
  if (has_cpu_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cpu_pct(), target);
  }

  // optional uint32 resident_memory_usage_kb = 5;
  if (has_resident_memory_usage_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resident_memory_usage_kb(), target);
  }

  // optional uint32 stolen_capacity_score = 6;
  if (has_stolen_capacity_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stolen_capacity_score(), target);
  }

  // optional uint32 virtual_memory_usage_kb = 13;
  if (has_virtual_memory_usage_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->virtual_memory_usage_kb(), target);
  }

  // optional uint32 swap_memory_usage_kb = 14;
  if (has_swap_memory_usage_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->swap_memory_usage_kb(), target);
  }

  // optional uint64 major_pagefaults = 15;
  if (has_major_pagefaults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->major_pagefaults(), target);
  }

  // optional uint64 minor_pagefaults = 16;
  if (has_minor_pagefaults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->minor_pagefaults(), target);
  }

  // optional uint32 fd_count = 21;
  if (has_fd_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->fd_count(), target);
  }

  // optional uint32 cpu_shares = 24;
  if (has_cpu_shares()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->cpu_shares(), target);
  }

  // optional uint32 cpu_shares_usage_pct = 25;
  if (has_cpu_shares_usage_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->cpu_shares_usage_pct(), target);
  }

  // optional uint32 memory_limit_kb = 26;
  if (has_memory_limit_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->memory_limit_kb(), target);
  }

  // optional uint32 swap_limit_kb = 27;
  if (has_swap_limit_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->swap_limit_kb(), target);
  }

  // optional uint32 cpu_quota_used_pct = 28;
  if (has_cpu_quota_used_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->cpu_quota_used_pct(), target);
  }

  // optional uint32 swap_memory_total_kb = 29;
  if (has_swap_memory_total_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->swap_memory_total_kb(), target);
  }

  // optional uint32 swap_memory_available_kb = 30;
  if (has_swap_memory_available_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->swap_memory_available_kb(), target);
  }

  // optional uint64 count_processes = 31;
  if (has_count_processes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->count_processes(), target);
  }

  // optional uint64 proc_start_count = 32;
  if (has_proc_start_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->proc_start_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.resource_categories)
  return target;
}

size_t resource_categories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.resource_categories)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 capacity_score = 1;
    if (has_capacity_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capacity_score());
    }

    // optional uint32 stolen_capacity_score = 6;
    if (has_stolen_capacity_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stolen_capacity_score());
    }

    // optional uint32 connection_queue_usage_pct = 2;
    if (has_connection_queue_usage_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connection_queue_usage_pct());
    }

    // optional uint32 fd_usage_pct = 3;
    if (has_fd_usage_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fd_usage_pct());
    }

    // optional uint32 cpu_pct = 4;
    if (has_cpu_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_pct());
    }

    // optional uint32 resident_memory_usage_kb = 5;
    if (has_resident_memory_usage_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resident_memory_usage_kb());
    }

    // optional uint32 virtual_memory_usage_kb = 13;
    if (has_virtual_memory_usage_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->virtual_memory_usage_kb());
    }

    // optional uint32 swap_memory_usage_kb = 14;
    if (has_swap_memory_usage_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->swap_memory_usage_kb());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint64 major_pagefaults = 15;
    if (has_major_pagefaults()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->major_pagefaults());
    }

    // optional uint64 minor_pagefaults = 16;
    if (has_minor_pagefaults()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->minor_pagefaults());
    }

    // optional uint32 fd_count = 21;
    if (has_fd_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fd_count());
    }

    // optional uint32 cpu_shares = 24;
    if (has_cpu_shares()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_shares());
    }

    // optional uint32 cpu_shares_usage_pct = 25;
    if (has_cpu_shares_usage_pct()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_shares_usage_pct());
    }

    // optional uint32 memory_limit_kb = 26;
    if (has_memory_limit_kb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memory_limit_kb());
    }

    // optional uint32 swap_limit_kb = 27;
    if (has_swap_limit_kb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->swap_limit_kb());
    }

    // optional uint32 cpu_quota_used_pct = 28;
    if (has_cpu_quota_used_pct()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_quota_used_pct());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional uint32 swap_memory_total_kb = 29;
    if (has_swap_memory_total_kb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->swap_memory_total_kb());
    }

    // optional uint32 swap_memory_available_kb = 30;
    if (has_swap_memory_available_kb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->swap_memory_available_kb());
    }

    // optional uint64 count_processes = 31;
    if (has_count_processes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count_processes());
    }

    // optional uint64 proc_start_count = 32;
    if (has_proc_start_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_start_count());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void resource_categories::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.resource_categories)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const resource_categories* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const resource_categories>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.resource_categories)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.resource_categories)
    UnsafeMergeFrom(*source);
  }
}

void resource_categories::MergeFrom(const resource_categories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.resource_categories)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void resource_categories::UnsafeMergeFrom(const resource_categories& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_capacity_score()) {
      set_capacity_score(from.capacity_score());
    }
    if (from.has_stolen_capacity_score()) {
      set_stolen_capacity_score(from.stolen_capacity_score());
    }
    if (from.has_connection_queue_usage_pct()) {
      set_connection_queue_usage_pct(from.connection_queue_usage_pct());
    }
    if (from.has_fd_usage_pct()) {
      set_fd_usage_pct(from.fd_usage_pct());
    }
    if (from.has_cpu_pct()) {
      set_cpu_pct(from.cpu_pct());
    }
    if (from.has_resident_memory_usage_kb()) {
      set_resident_memory_usage_kb(from.resident_memory_usage_kb());
    }
    if (from.has_virtual_memory_usage_kb()) {
      set_virtual_memory_usage_kb(from.virtual_memory_usage_kb());
    }
    if (from.has_swap_memory_usage_kb()) {
      set_swap_memory_usage_kb(from.swap_memory_usage_kb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_major_pagefaults()) {
      set_major_pagefaults(from.major_pagefaults());
    }
    if (from.has_minor_pagefaults()) {
      set_minor_pagefaults(from.minor_pagefaults());
    }
    if (from.has_fd_count()) {
      set_fd_count(from.fd_count());
    }
    if (from.has_cpu_shares()) {
      set_cpu_shares(from.cpu_shares());
    }
    if (from.has_cpu_shares_usage_pct()) {
      set_cpu_shares_usage_pct(from.cpu_shares_usage_pct());
    }
    if (from.has_memory_limit_kb()) {
      set_memory_limit_kb(from.memory_limit_kb());
    }
    if (from.has_swap_limit_kb()) {
      set_swap_limit_kb(from.swap_limit_kb());
    }
    if (from.has_cpu_quota_used_pct()) {
      set_cpu_quota_used_pct(from.cpu_quota_used_pct());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_swap_memory_total_kb()) {
      set_swap_memory_total_kb(from.swap_memory_total_kb());
    }
    if (from.has_swap_memory_available_kb()) {
      set_swap_memory_available_kb(from.swap_memory_available_kb());
    }
    if (from.has_count_processes()) {
      set_count_processes(from.count_processes());
    }
    if (from.has_proc_start_count()) {
      set_proc_start_count(from.proc_start_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void resource_categories::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.resource_categories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void resource_categories::CopyFrom(const resource_categories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.resource_categories)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool resource_categories::IsInitialized() const {

  return true;
}

void resource_categories::Swap(resource_categories* other) {
  if (other == this) return;
  InternalSwap(other);
}
void resource_categories::InternalSwap(resource_categories* other) {
  std::swap(capacity_score_, other->capacity_score_);
  std::swap(stolen_capacity_score_, other->stolen_capacity_score_);
  std::swap(connection_queue_usage_pct_, other->connection_queue_usage_pct_);
  std::swap(fd_usage_pct_, other->fd_usage_pct_);
  std::swap(cpu_pct_, other->cpu_pct_);
  std::swap(resident_memory_usage_kb_, other->resident_memory_usage_kb_);
  std::swap(virtual_memory_usage_kb_, other->virtual_memory_usage_kb_);
  std::swap(swap_memory_usage_kb_, other->swap_memory_usage_kb_);
  std::swap(major_pagefaults_, other->major_pagefaults_);
  std::swap(minor_pagefaults_, other->minor_pagefaults_);
  std::swap(fd_count_, other->fd_count_);
  std::swap(cpu_shares_, other->cpu_shares_);
  std::swap(cpu_shares_usage_pct_, other->cpu_shares_usage_pct_);
  std::swap(memory_limit_kb_, other->memory_limit_kb_);
  std::swap(swap_limit_kb_, other->swap_limit_kb_);
  std::swap(cpu_quota_used_pct_, other->cpu_quota_used_pct_);
  std::swap(swap_memory_total_kb_, other->swap_memory_total_kb_);
  std::swap(swap_memory_available_kb_, other->swap_memory_available_kb_);
  std::swap(count_processes_, other->count_processes_);
  std::swap(proc_start_count_, other->proc_start_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata resource_categories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = resource_categories_descriptor_;
  metadata.reflection = resource_categories_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// resource_categories

// optional uint32 capacity_score = 1;
bool resource_categories::has_capacity_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void resource_categories::set_has_capacity_score() {
  _has_bits_[0] |= 0x00000001u;
}
void resource_categories::clear_has_capacity_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void resource_categories::clear_capacity_score() {
  capacity_score_ = 0u;
  clear_has_capacity_score();
}
::google::protobuf::uint32 resource_categories::capacity_score() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.capacity_score)
  return capacity_score_;
}
void resource_categories::set_capacity_score(::google::protobuf::uint32 value) {
  set_has_capacity_score();
  capacity_score_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.capacity_score)
}

// optional uint32 stolen_capacity_score = 6;
bool resource_categories::has_stolen_capacity_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void resource_categories::set_has_stolen_capacity_score() {
  _has_bits_[0] |= 0x00000002u;
}
void resource_categories::clear_has_stolen_capacity_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void resource_categories::clear_stolen_capacity_score() {
  stolen_capacity_score_ = 0u;
  clear_has_stolen_capacity_score();
}
::google::protobuf::uint32 resource_categories::stolen_capacity_score() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.stolen_capacity_score)
  return stolen_capacity_score_;
}
void resource_categories::set_stolen_capacity_score(::google::protobuf::uint32 value) {
  set_has_stolen_capacity_score();
  stolen_capacity_score_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.stolen_capacity_score)
}

// optional uint32 connection_queue_usage_pct = 2;
bool resource_categories::has_connection_queue_usage_pct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void resource_categories::set_has_connection_queue_usage_pct() {
  _has_bits_[0] |= 0x00000004u;
}
void resource_categories::clear_has_connection_queue_usage_pct() {
  _has_bits_[0] &= ~0x00000004u;
}
void resource_categories::clear_connection_queue_usage_pct() {
  connection_queue_usage_pct_ = 0u;
  clear_has_connection_queue_usage_pct();
}
::google::protobuf::uint32 resource_categories::connection_queue_usage_pct() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.connection_queue_usage_pct)
  return connection_queue_usage_pct_;
}
void resource_categories::set_connection_queue_usage_pct(::google::protobuf::uint32 value) {
  set_has_connection_queue_usage_pct();
  connection_queue_usage_pct_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.connection_queue_usage_pct)
}

// optional uint32 fd_usage_pct = 3;
bool resource_categories::has_fd_usage_pct() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void resource_categories::set_has_fd_usage_pct() {
  _has_bits_[0] |= 0x00000008u;
}
void resource_categories::clear_has_fd_usage_pct() {
  _has_bits_[0] &= ~0x00000008u;
}
void resource_categories::clear_fd_usage_pct() {
  fd_usage_pct_ = 0u;
  clear_has_fd_usage_pct();
}
::google::protobuf::uint32 resource_categories::fd_usage_pct() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.fd_usage_pct)
  return fd_usage_pct_;
}
void resource_categories::set_fd_usage_pct(::google::protobuf::uint32 value) {
  set_has_fd_usage_pct();
  fd_usage_pct_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.fd_usage_pct)
}

// optional uint32 cpu_pct = 4;
bool resource_categories::has_cpu_pct() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void resource_categories::set_has_cpu_pct() {
  _has_bits_[0] |= 0x00000010u;
}
void resource_categories::clear_has_cpu_pct() {
  _has_bits_[0] &= ~0x00000010u;
}
void resource_categories::clear_cpu_pct() {
  cpu_pct_ = 0u;
  clear_has_cpu_pct();
}
::google::protobuf::uint32 resource_categories::cpu_pct() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.cpu_pct)
  return cpu_pct_;
}
void resource_categories::set_cpu_pct(::google::protobuf::uint32 value) {
  set_has_cpu_pct();
  cpu_pct_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.cpu_pct)
}

// optional uint32 resident_memory_usage_kb = 5;
bool resource_categories::has_resident_memory_usage_kb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void resource_categories::set_has_resident_memory_usage_kb() {
  _has_bits_[0] |= 0x00000020u;
}
void resource_categories::clear_has_resident_memory_usage_kb() {
  _has_bits_[0] &= ~0x00000020u;
}
void resource_categories::clear_resident_memory_usage_kb() {
  resident_memory_usage_kb_ = 0u;
  clear_has_resident_memory_usage_kb();
}
::google::protobuf::uint32 resource_categories::resident_memory_usage_kb() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.resident_memory_usage_kb)
  return resident_memory_usage_kb_;
}
void resource_categories::set_resident_memory_usage_kb(::google::protobuf::uint32 value) {
  set_has_resident_memory_usage_kb();
  resident_memory_usage_kb_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.resident_memory_usage_kb)
}

// optional uint32 virtual_memory_usage_kb = 13;
bool resource_categories::has_virtual_memory_usage_kb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void resource_categories::set_has_virtual_memory_usage_kb() {
  _has_bits_[0] |= 0x00000040u;
}
void resource_categories::clear_has_virtual_memory_usage_kb() {
  _has_bits_[0] &= ~0x00000040u;
}
void resource_categories::clear_virtual_memory_usage_kb() {
  virtual_memory_usage_kb_ = 0u;
  clear_has_virtual_memory_usage_kb();
}
::google::protobuf::uint32 resource_categories::virtual_memory_usage_kb() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.virtual_memory_usage_kb)
  return virtual_memory_usage_kb_;
}
void resource_categories::set_virtual_memory_usage_kb(::google::protobuf::uint32 value) {
  set_has_virtual_memory_usage_kb();
  virtual_memory_usage_kb_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.virtual_memory_usage_kb)
}

// optional uint32 swap_memory_usage_kb = 14;
bool resource_categories::has_swap_memory_usage_kb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void resource_categories::set_has_swap_memory_usage_kb() {
  _has_bits_[0] |= 0x00000080u;
}
void resource_categories::clear_has_swap_memory_usage_kb() {
  _has_bits_[0] &= ~0x00000080u;
}
void resource_categories::clear_swap_memory_usage_kb() {
  swap_memory_usage_kb_ = 0u;
  clear_has_swap_memory_usage_kb();
}
::google::protobuf::uint32 resource_categories::swap_memory_usage_kb() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.swap_memory_usage_kb)
  return swap_memory_usage_kb_;
}
void resource_categories::set_swap_memory_usage_kb(::google::protobuf::uint32 value) {
  set_has_swap_memory_usage_kb();
  swap_memory_usage_kb_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.swap_memory_usage_kb)
}

// optional uint64 major_pagefaults = 15;
bool resource_categories::has_major_pagefaults() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void resource_categories::set_has_major_pagefaults() {
  _has_bits_[0] |= 0x00000100u;
}
void resource_categories::clear_has_major_pagefaults() {
  _has_bits_[0] &= ~0x00000100u;
}
void resource_categories::clear_major_pagefaults() {
  major_pagefaults_ = GOOGLE_ULONGLONG(0);
  clear_has_major_pagefaults();
}
::google::protobuf::uint64 resource_categories::major_pagefaults() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.major_pagefaults)
  return major_pagefaults_;
}
void resource_categories::set_major_pagefaults(::google::protobuf::uint64 value) {
  set_has_major_pagefaults();
  major_pagefaults_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.major_pagefaults)
}

// optional uint64 minor_pagefaults = 16;
bool resource_categories::has_minor_pagefaults() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void resource_categories::set_has_minor_pagefaults() {
  _has_bits_[0] |= 0x00000200u;
}
void resource_categories::clear_has_minor_pagefaults() {
  _has_bits_[0] &= ~0x00000200u;
}
void resource_categories::clear_minor_pagefaults() {
  minor_pagefaults_ = GOOGLE_ULONGLONG(0);
  clear_has_minor_pagefaults();
}
::google::protobuf::uint64 resource_categories::minor_pagefaults() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.minor_pagefaults)
  return minor_pagefaults_;
}
void resource_categories::set_minor_pagefaults(::google::protobuf::uint64 value) {
  set_has_minor_pagefaults();
  minor_pagefaults_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.minor_pagefaults)
}

// optional uint32 fd_count = 21;
bool resource_categories::has_fd_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void resource_categories::set_has_fd_count() {
  _has_bits_[0] |= 0x00000400u;
}
void resource_categories::clear_has_fd_count() {
  _has_bits_[0] &= ~0x00000400u;
}
void resource_categories::clear_fd_count() {
  fd_count_ = 0u;
  clear_has_fd_count();
}
::google::protobuf::uint32 resource_categories::fd_count() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.fd_count)
  return fd_count_;
}
void resource_categories::set_fd_count(::google::protobuf::uint32 value) {
  set_has_fd_count();
  fd_count_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.fd_count)
}

// optional uint32 cpu_shares = 24;
bool resource_categories::has_cpu_shares() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void resource_categories::set_has_cpu_shares() {
  _has_bits_[0] |= 0x00000800u;
}
void resource_categories::clear_has_cpu_shares() {
  _has_bits_[0] &= ~0x00000800u;
}
void resource_categories::clear_cpu_shares() {
  cpu_shares_ = 0u;
  clear_has_cpu_shares();
}
::google::protobuf::uint32 resource_categories::cpu_shares() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.cpu_shares)
  return cpu_shares_;
}
void resource_categories::set_cpu_shares(::google::protobuf::uint32 value) {
  set_has_cpu_shares();
  cpu_shares_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.cpu_shares)
}

// optional uint32 cpu_shares_usage_pct = 25;
bool resource_categories::has_cpu_shares_usage_pct() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void resource_categories::set_has_cpu_shares_usage_pct() {
  _has_bits_[0] |= 0x00001000u;
}
void resource_categories::clear_has_cpu_shares_usage_pct() {
  _has_bits_[0] &= ~0x00001000u;
}
void resource_categories::clear_cpu_shares_usage_pct() {
  cpu_shares_usage_pct_ = 0u;
  clear_has_cpu_shares_usage_pct();
}
::google::protobuf::uint32 resource_categories::cpu_shares_usage_pct() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.cpu_shares_usage_pct)
  return cpu_shares_usage_pct_;
}
void resource_categories::set_cpu_shares_usage_pct(::google::protobuf::uint32 value) {
  set_has_cpu_shares_usage_pct();
  cpu_shares_usage_pct_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.cpu_shares_usage_pct)
}

// optional uint32 memory_limit_kb = 26;
bool resource_categories::has_memory_limit_kb() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void resource_categories::set_has_memory_limit_kb() {
  _has_bits_[0] |= 0x00002000u;
}
void resource_categories::clear_has_memory_limit_kb() {
  _has_bits_[0] &= ~0x00002000u;
}
void resource_categories::clear_memory_limit_kb() {
  memory_limit_kb_ = 0u;
  clear_has_memory_limit_kb();
}
::google::protobuf::uint32 resource_categories::memory_limit_kb() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.memory_limit_kb)
  return memory_limit_kb_;
}
void resource_categories::set_memory_limit_kb(::google::protobuf::uint32 value) {
  set_has_memory_limit_kb();
  memory_limit_kb_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.memory_limit_kb)
}

// optional uint32 swap_limit_kb = 27;
bool resource_categories::has_swap_limit_kb() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void resource_categories::set_has_swap_limit_kb() {
  _has_bits_[0] |= 0x00004000u;
}
void resource_categories::clear_has_swap_limit_kb() {
  _has_bits_[0] &= ~0x00004000u;
}
void resource_categories::clear_swap_limit_kb() {
  swap_limit_kb_ = 0u;
  clear_has_swap_limit_kb();
}
::google::protobuf::uint32 resource_categories::swap_limit_kb() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.swap_limit_kb)
  return swap_limit_kb_;
}
void resource_categories::set_swap_limit_kb(::google::protobuf::uint32 value) {
  set_has_swap_limit_kb();
  swap_limit_kb_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.swap_limit_kb)
}

// optional uint32 cpu_quota_used_pct = 28;
bool resource_categories::has_cpu_quota_used_pct() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void resource_categories::set_has_cpu_quota_used_pct() {
  _has_bits_[0] |= 0x00008000u;
}
void resource_categories::clear_has_cpu_quota_used_pct() {
  _has_bits_[0] &= ~0x00008000u;
}
void resource_categories::clear_cpu_quota_used_pct() {
  cpu_quota_used_pct_ = 0u;
  clear_has_cpu_quota_used_pct();
}
::google::protobuf::uint32 resource_categories::cpu_quota_used_pct() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.cpu_quota_used_pct)
  return cpu_quota_used_pct_;
}
void resource_categories::set_cpu_quota_used_pct(::google::protobuf::uint32 value) {
  set_has_cpu_quota_used_pct();
  cpu_quota_used_pct_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.cpu_quota_used_pct)
}

// optional uint32 swap_memory_total_kb = 29;
bool resource_categories::has_swap_memory_total_kb() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void resource_categories::set_has_swap_memory_total_kb() {
  _has_bits_[0] |= 0x00010000u;
}
void resource_categories::clear_has_swap_memory_total_kb() {
  _has_bits_[0] &= ~0x00010000u;
}
void resource_categories::clear_swap_memory_total_kb() {
  swap_memory_total_kb_ = 0u;
  clear_has_swap_memory_total_kb();
}
::google::protobuf::uint32 resource_categories::swap_memory_total_kb() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.swap_memory_total_kb)
  return swap_memory_total_kb_;
}
void resource_categories::set_swap_memory_total_kb(::google::protobuf::uint32 value) {
  set_has_swap_memory_total_kb();
  swap_memory_total_kb_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.swap_memory_total_kb)
}

// optional uint32 swap_memory_available_kb = 30;
bool resource_categories::has_swap_memory_available_kb() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void resource_categories::set_has_swap_memory_available_kb() {
  _has_bits_[0] |= 0x00020000u;
}
void resource_categories::clear_has_swap_memory_available_kb() {
  _has_bits_[0] &= ~0x00020000u;
}
void resource_categories::clear_swap_memory_available_kb() {
  swap_memory_available_kb_ = 0u;
  clear_has_swap_memory_available_kb();
}
::google::protobuf::uint32 resource_categories::swap_memory_available_kb() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.swap_memory_available_kb)
  return swap_memory_available_kb_;
}
void resource_categories::set_swap_memory_available_kb(::google::protobuf::uint32 value) {
  set_has_swap_memory_available_kb();
  swap_memory_available_kb_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.swap_memory_available_kb)
}

// optional uint64 count_processes = 31;
bool resource_categories::has_count_processes() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void resource_categories::set_has_count_processes() {
  _has_bits_[0] |= 0x00040000u;
}
void resource_categories::clear_has_count_processes() {
  _has_bits_[0] &= ~0x00040000u;
}
void resource_categories::clear_count_processes() {
  count_processes_ = GOOGLE_ULONGLONG(0);
  clear_has_count_processes();
}
::google::protobuf::uint64 resource_categories::count_processes() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.count_processes)
  return count_processes_;
}
void resource_categories::set_count_processes(::google::protobuf::uint64 value) {
  set_has_count_processes();
  count_processes_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.count_processes)
}

// optional uint64 proc_start_count = 32;
bool resource_categories::has_proc_start_count() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void resource_categories::set_has_proc_start_count() {
  _has_bits_[0] |= 0x00080000u;
}
void resource_categories::clear_has_proc_start_count() {
  _has_bits_[0] &= ~0x00080000u;
}
void resource_categories::clear_proc_start_count() {
  proc_start_count_ = GOOGLE_ULONGLONG(0);
  clear_has_proc_start_count();
}
::google::protobuf::uint64 resource_categories::proc_start_count() const {
  // @@protoc_insertion_point(field_get:draiosproto.resource_categories.proc_start_count)
  return proc_start_count_;
}
void resource_categories::set_proc_start_count(::google::protobuf::uint64 value) {
  set_has_proc_start_count();
  proc_start_count_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.resource_categories.proc_start_count)
}

inline const resource_categories* resource_categories::internal_default_instance() {
  return &resource_categories_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int connection_categories::kServerFieldNumber;
const int connection_categories::kClientFieldNumber;
const int connection_categories::kTransactionCountersFieldNumber;
const int connection_categories::kMinTransactionCountersFieldNumber;
const int connection_categories::kMaxTransactionCountersFieldNumber;
const int connection_categories::kNAggregatedConnectionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

connection_categories::connection_categories()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.connection_categories)
}

void connection_categories::InitAsDefaultInstance() {
  server_ = const_cast< ::draiosproto::counter_bytes*>(
      ::draiosproto::counter_bytes::internal_default_instance());
  client_ = const_cast< ::draiosproto::counter_bytes*>(
      ::draiosproto::counter_bytes::internal_default_instance());
  transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(
      ::draiosproto::counter_time_bidirectional::internal_default_instance());
  min_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(
      ::draiosproto::counter_time_bidirectional::internal_default_instance());
  max_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(
      ::draiosproto::counter_time_bidirectional::internal_default_instance());
}

connection_categories::connection_categories(const connection_categories& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.connection_categories)
}

void connection_categories::SharedCtor() {
  _cached_size_ = 0;
  server_ = NULL;
  client_ = NULL;
  transaction_counters_ = NULL;
  min_transaction_counters_ = NULL;
  max_transaction_counters_ = NULL;
  n_aggregated_connections_ = 0u;
}

connection_categories::~connection_categories() {
  // @@protoc_insertion_point(destructor:draiosproto.connection_categories)
  SharedDtor();
}

void connection_categories::SharedDtor() {
  if (this != &connection_categories_default_instance_.get()) {
    delete server_;
    delete client_;
    delete transaction_counters_;
    delete min_transaction_counters_;
    delete max_transaction_counters_;
  }
}

void connection_categories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* connection_categories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connection_categories_descriptor_;
}

const connection_categories& connection_categories::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<connection_categories> connection_categories_default_instance_;

connection_categories* connection_categories::New(::google::protobuf::Arena* arena) const {
  connection_categories* n = new connection_categories;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void connection_categories::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.connection_categories)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_server()) {
      if (server_ != NULL) server_->::draiosproto::counter_bytes::Clear();
    }
    if (has_client()) {
      if (client_ != NULL) client_->::draiosproto::counter_bytes::Clear();
    }
    if (has_transaction_counters()) {
      if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    if (has_min_transaction_counters()) {
      if (min_transaction_counters_ != NULL) min_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    if (has_max_transaction_counters()) {
      if (max_transaction_counters_ != NULL) max_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    n_aggregated_connections_ = 0u;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool connection_categories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.connection_categories)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .draiosproto.counter_bytes server = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client;
        break;
      }

      // optional .draiosproto.counter_bytes client = 2;
      case 2: {
        if (tag == 18) {
         parse_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional transaction_counters = 3;
      case 3: {
        if (tag == 26) {
         parse_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_n_aggregated_connections;
        break;
      }

      // optional uint32 n_aggregated_connections = 4;
      case 4: {
        if (tag == 32) {
         parse_n_aggregated_connections:
          set_has_n_aggregated_connections();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_aggregated_connections_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_min_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
      case 18: {
        if (tag == 146) {
         parse_min_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_transaction_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_max_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
      case 19: {
        if (tag == 154) {
         parse_max_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_transaction_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.connection_categories)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.connection_categories)
  return false;
#undef DO_
}

void connection_categories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.connection_categories)
  // optional .draiosproto.counter_bytes server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->server_, output);
  }

  // optional .draiosproto.counter_bytes client = 2;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->client_, output);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 3;
  if (has_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->transaction_counters_, output);
  }

  // optional uint32 n_aggregated_connections = 4;
  if (has_n_aggregated_connections()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->n_aggregated_connections(), output);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
  if (has_min_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->min_transaction_counters_, output);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
  if (has_max_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->max_transaction_counters_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.connection_categories)
}

::google::protobuf::uint8* connection_categories::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.connection_categories)
  // optional .draiosproto.counter_bytes server = 1;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->server_, false, target);
  }

  // optional .draiosproto.counter_bytes client = 2;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->client_, false, target);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 3;
  if (has_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->transaction_counters_, false, target);
  }

  // optional uint32 n_aggregated_connections = 4;
  if (has_n_aggregated_connections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->n_aggregated_connections(), target);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
  if (has_min_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->min_transaction_counters_, false, target);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
  if (has_max_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->max_transaction_counters_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.connection_categories)
  return target;
}

size_t connection_categories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.connection_categories)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .draiosproto.counter_bytes server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->server_);
    }

    // optional .draiosproto.counter_bytes client = 2;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->client_);
    }

    // optional .draiosproto.counter_time_bidirectional transaction_counters = 3;
    if (has_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_counters_);
    }

    // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
    if (has_min_transaction_counters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->min_transaction_counters_);
    }

    // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
    if (has_max_transaction_counters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->max_transaction_counters_);
    }

    // optional uint32 n_aggregated_connections = 4;
    if (has_n_aggregated_connections()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_aggregated_connections());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void connection_categories::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.connection_categories)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const connection_categories* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const connection_categories>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.connection_categories)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.connection_categories)
    UnsafeMergeFrom(*source);
  }
}

void connection_categories::MergeFrom(const connection_categories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.connection_categories)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void connection_categories::UnsafeMergeFrom(const connection_categories& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      mutable_server()->::draiosproto::counter_bytes::MergeFrom(from.server());
    }
    if (from.has_client()) {
      mutable_client()->::draiosproto::counter_bytes::MergeFrom(from.client());
    }
    if (from.has_transaction_counters()) {
      mutable_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.transaction_counters());
    }
    if (from.has_min_transaction_counters()) {
      mutable_min_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.min_transaction_counters());
    }
    if (from.has_max_transaction_counters()) {
      mutable_max_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.max_transaction_counters());
    }
    if (from.has_n_aggregated_connections()) {
      set_n_aggregated_connections(from.n_aggregated_connections());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void connection_categories::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.connection_categories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void connection_categories::CopyFrom(const connection_categories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.connection_categories)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool connection_categories::IsInitialized() const {

  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  if (has_client()) {
    if (!this->client_->IsInitialized()) return false;
  }
  if (has_transaction_counters()) {
    if (!this->transaction_counters_->IsInitialized()) return false;
  }
  if (has_min_transaction_counters()) {
    if (!this->min_transaction_counters_->IsInitialized()) return false;
  }
  if (has_max_transaction_counters()) {
    if (!this->max_transaction_counters_->IsInitialized()) return false;
  }
  return true;
}

void connection_categories::Swap(connection_categories* other) {
  if (other == this) return;
  InternalSwap(other);
}
void connection_categories::InternalSwap(connection_categories* other) {
  std::swap(server_, other->server_);
  std::swap(client_, other->client_);
  std::swap(transaction_counters_, other->transaction_counters_);
  std::swap(min_transaction_counters_, other->min_transaction_counters_);
  std::swap(max_transaction_counters_, other->max_transaction_counters_);
  std::swap(n_aggregated_connections_, other->n_aggregated_connections_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata connection_categories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = connection_categories_descriptor_;
  metadata.reflection = connection_categories_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// connection_categories

// optional .draiosproto.counter_bytes server = 1;
bool connection_categories::has_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void connection_categories::set_has_server() {
  _has_bits_[0] |= 0x00000001u;
}
void connection_categories::clear_has_server() {
  _has_bits_[0] &= ~0x00000001u;
}
void connection_categories::clear_server() {
  if (server_ != NULL) server_->::draiosproto::counter_bytes::Clear();
  clear_has_server();
}
const ::draiosproto::counter_bytes& connection_categories::server() const {
  // @@protoc_insertion_point(field_get:draiosproto.connection_categories.server)
  return server_ != NULL ? *server_
                         : *::draiosproto::counter_bytes::internal_default_instance();
}
::draiosproto::counter_bytes* connection_categories::mutable_server() {
  set_has_server();
  if (server_ == NULL) {
    server_ = new ::draiosproto::counter_bytes;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.connection_categories.server)
  return server_;
}
::draiosproto::counter_bytes* connection_categories::release_server() {
  // @@protoc_insertion_point(field_release:draiosproto.connection_categories.server)
  clear_has_server();
  ::draiosproto::counter_bytes* temp = server_;
  server_ = NULL;
  return temp;
}
void connection_categories::set_allocated_server(::draiosproto::counter_bytes* server) {
  delete server_;
  server_ = server;
  if (server) {
    set_has_server();
  } else {
    clear_has_server();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.connection_categories.server)
}

// optional .draiosproto.counter_bytes client = 2;
bool connection_categories::has_client() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void connection_categories::set_has_client() {
  _has_bits_[0] |= 0x00000002u;
}
void connection_categories::clear_has_client() {
  _has_bits_[0] &= ~0x00000002u;
}
void connection_categories::clear_client() {
  if (client_ != NULL) client_->::draiosproto::counter_bytes::Clear();
  clear_has_client();
}
const ::draiosproto::counter_bytes& connection_categories::client() const {
  // @@protoc_insertion_point(field_get:draiosproto.connection_categories.client)
  return client_ != NULL ? *client_
                         : *::draiosproto::counter_bytes::internal_default_instance();
}
::draiosproto::counter_bytes* connection_categories::mutable_client() {
  set_has_client();
  if (client_ == NULL) {
    client_ = new ::draiosproto::counter_bytes;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.connection_categories.client)
  return client_;
}
::draiosproto::counter_bytes* connection_categories::release_client() {
  // @@protoc_insertion_point(field_release:draiosproto.connection_categories.client)
  clear_has_client();
  ::draiosproto::counter_bytes* temp = client_;
  client_ = NULL;
  return temp;
}
void connection_categories::set_allocated_client(::draiosproto::counter_bytes* client) {
  delete client_;
  client_ = client;
  if (client) {
    set_has_client();
  } else {
    clear_has_client();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.connection_categories.client)
}

// optional .draiosproto.counter_time_bidirectional transaction_counters = 3;
bool connection_categories::has_transaction_counters() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void connection_categories::set_has_transaction_counters() {
  _has_bits_[0] |= 0x00000004u;
}
void connection_categories::clear_has_transaction_counters() {
  _has_bits_[0] &= ~0x00000004u;
}
void connection_categories::clear_transaction_counters() {
  if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
  clear_has_transaction_counters();
}
const ::draiosproto::counter_time_bidirectional& connection_categories::transaction_counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.connection_categories.transaction_counters)
  return transaction_counters_ != NULL ? *transaction_counters_
                         : *::draiosproto::counter_time_bidirectional::internal_default_instance();
}
::draiosproto::counter_time_bidirectional* connection_categories::mutable_transaction_counters() {
  set_has_transaction_counters();
  if (transaction_counters_ == NULL) {
    transaction_counters_ = new ::draiosproto::counter_time_bidirectional;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.connection_categories.transaction_counters)
  return transaction_counters_;
}
::draiosproto::counter_time_bidirectional* connection_categories::release_transaction_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.connection_categories.transaction_counters)
  clear_has_transaction_counters();
  ::draiosproto::counter_time_bidirectional* temp = transaction_counters_;
  transaction_counters_ = NULL;
  return temp;
}
void connection_categories::set_allocated_transaction_counters(::draiosproto::counter_time_bidirectional* transaction_counters) {
  delete transaction_counters_;
  transaction_counters_ = transaction_counters;
  if (transaction_counters) {
    set_has_transaction_counters();
  } else {
    clear_has_transaction_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.connection_categories.transaction_counters)
}

// optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
bool connection_categories::has_min_transaction_counters() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void connection_categories::set_has_min_transaction_counters() {
  _has_bits_[0] |= 0x00000008u;
}
void connection_categories::clear_has_min_transaction_counters() {
  _has_bits_[0] &= ~0x00000008u;
}
void connection_categories::clear_min_transaction_counters() {
  if (min_transaction_counters_ != NULL) min_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
  clear_has_min_transaction_counters();
}
const ::draiosproto::counter_time_bidirectional& connection_categories::min_transaction_counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.connection_categories.min_transaction_counters)
  return min_transaction_counters_ != NULL ? *min_transaction_counters_
                         : *::draiosproto::counter_time_bidirectional::internal_default_instance();
}
::draiosproto::counter_time_bidirectional* connection_categories::mutable_min_transaction_counters() {
  set_has_min_transaction_counters();
  if (min_transaction_counters_ == NULL) {
    min_transaction_counters_ = new ::draiosproto::counter_time_bidirectional;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.connection_categories.min_transaction_counters)
  return min_transaction_counters_;
}
::draiosproto::counter_time_bidirectional* connection_categories::release_min_transaction_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.connection_categories.min_transaction_counters)
  clear_has_min_transaction_counters();
  ::draiosproto::counter_time_bidirectional* temp = min_transaction_counters_;
  min_transaction_counters_ = NULL;
  return temp;
}
void connection_categories::set_allocated_min_transaction_counters(::draiosproto::counter_time_bidirectional* min_transaction_counters) {
  delete min_transaction_counters_;
  min_transaction_counters_ = min_transaction_counters;
  if (min_transaction_counters) {
    set_has_min_transaction_counters();
  } else {
    clear_has_min_transaction_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.connection_categories.min_transaction_counters)
}

// optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
bool connection_categories::has_max_transaction_counters() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void connection_categories::set_has_max_transaction_counters() {
  _has_bits_[0] |= 0x00000010u;
}
void connection_categories::clear_has_max_transaction_counters() {
  _has_bits_[0] &= ~0x00000010u;
}
void connection_categories::clear_max_transaction_counters() {
  if (max_transaction_counters_ != NULL) max_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
  clear_has_max_transaction_counters();
}
const ::draiosproto::counter_time_bidirectional& connection_categories::max_transaction_counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.connection_categories.max_transaction_counters)
  return max_transaction_counters_ != NULL ? *max_transaction_counters_
                         : *::draiosproto::counter_time_bidirectional::internal_default_instance();
}
::draiosproto::counter_time_bidirectional* connection_categories::mutable_max_transaction_counters() {
  set_has_max_transaction_counters();
  if (max_transaction_counters_ == NULL) {
    max_transaction_counters_ = new ::draiosproto::counter_time_bidirectional;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.connection_categories.max_transaction_counters)
  return max_transaction_counters_;
}
::draiosproto::counter_time_bidirectional* connection_categories::release_max_transaction_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.connection_categories.max_transaction_counters)
  clear_has_max_transaction_counters();
  ::draiosproto::counter_time_bidirectional* temp = max_transaction_counters_;
  max_transaction_counters_ = NULL;
  return temp;
}
void connection_categories::set_allocated_max_transaction_counters(::draiosproto::counter_time_bidirectional* max_transaction_counters) {
  delete max_transaction_counters_;
  max_transaction_counters_ = max_transaction_counters;
  if (max_transaction_counters) {
    set_has_max_transaction_counters();
  } else {
    clear_has_max_transaction_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.connection_categories.max_transaction_counters)
}

// optional uint32 n_aggregated_connections = 4;
bool connection_categories::has_n_aggregated_connections() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void connection_categories::set_has_n_aggregated_connections() {
  _has_bits_[0] |= 0x00000020u;
}
void connection_categories::clear_has_n_aggregated_connections() {
  _has_bits_[0] &= ~0x00000020u;
}
void connection_categories::clear_n_aggregated_connections() {
  n_aggregated_connections_ = 0u;
  clear_has_n_aggregated_connections();
}
::google::protobuf::uint32 connection_categories::n_aggregated_connections() const {
  // @@protoc_insertion_point(field_get:draiosproto.connection_categories.n_aggregated_connections)
  return n_aggregated_connections_;
}
void connection_categories::set_n_aggregated_connections(::google::protobuf::uint32 value) {
  set_has_n_aggregated_connections();
  n_aggregated_connections_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.connection_categories.n_aggregated_connections)
}

inline const connection_categories* connection_categories::internal_default_instance() {
  return &connection_categories_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int process_details::kCommFieldNumber;
const int process_details::kExeFieldNumber;
const int process_details::kArgsFieldNumber;
const int process_details::kContainerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

process_details::process_details()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.process_details)
}

void process_details::InitAsDefaultInstance() {
}

process_details::process_details(const process_details& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.process_details)
}

void process_details::SharedCtor() {
  _cached_size_ = 0;
  comm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

process_details::~process_details() {
  // @@protoc_insertion_point(destructor:draiosproto.process_details)
  SharedDtor();
}

void process_details::SharedDtor() {
  comm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exe_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void process_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* process_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return process_details_descriptor_;
}

const process_details& process_details::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<process_details> process_details_default_instance_;

process_details* process_details::New(::google::protobuf::Arena* arena) const {
  process_details* n = new process_details;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void process_details::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.process_details)
  if (_has_bits_[0 / 32] & 11u) {
    if (has_comm()) {
      comm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_exe()) {
      exe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_container_id()) {
      container_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  args_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool process_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.process_details)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string comm = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comm().data(), this->comm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.process_details.comm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exe;
        break;
      }

      // required string exe = 2;
      case 2: {
        if (tag == 18) {
         parse_exe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exe().data(), this->exe().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.process_details.exe");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }

      // repeated string args = 3;
      case 3: {
        if (tag == 26) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->args(this->args_size() - 1).data(),
            this->args(this->args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.process_details.args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_args;
        if (input->ExpectTag(34)) goto parse_container_id;
        break;
      }

      // optional string container_id = 4;
      case 4: {
        if (tag == 34) {
         parse_container_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->container_id().data(), this->container_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.process_details.container_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.process_details)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.process_details)
  return false;
#undef DO_
}

void process_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.process_details)
  // required string comm = 1;
  if (has_comm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comm().data(), this->comm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.process_details.comm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->comm(), output);
  }

  // required string exe = 2;
  if (has_exe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exe().data(), this->exe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.process_details.exe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exe(), output);
  }

  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.process_details.args");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->args(i), output);
  }

  // optional string container_id = 4;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.process_details.container_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->container_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.process_details)
}

::google::protobuf::uint8* process_details::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.process_details)
  // required string comm = 1;
  if (has_comm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comm().data(), this->comm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.process_details.comm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->comm(), target);
  }

  // required string exe = 2;
  if (has_exe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exe().data(), this->exe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.process_details.exe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exe(), target);
  }

  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.process_details.args");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->args(i), target);
  }

  // optional string container_id = 4;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.process_details.container_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->container_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.process_details)
  return target;
}

size_t process_details::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.process_details)
  size_t total_size = 0;

  if (has_comm()) {
    // required string comm = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comm());
  }

  if (has_exe()) {
    // required string exe = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exe());
  }

  return total_size;
}
size_t process_details::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.process_details)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string comm = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comm());

    // required string exe = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exe());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string container_id = 4;
  if (has_container_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->container_id());
  }

  // repeated string args = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void process_details::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.process_details)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const process_details* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const process_details>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.process_details)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.process_details)
    UnsafeMergeFrom(*source);
  }
}

void process_details::MergeFrom(const process_details& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.process_details)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void process_details::UnsafeMergeFrom(const process_details& from) {
  GOOGLE_DCHECK(&from != this);
  args_.UnsafeMergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comm()) {
      set_has_comm();
      comm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comm_);
    }
    if (from.has_exe()) {
      set_has_exe();
      exe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exe_);
    }
    if (from.has_container_id()) {
      set_has_container_id();
      container_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void process_details::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.process_details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void process_details::CopyFrom(const process_details& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.process_details)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool process_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void process_details::Swap(process_details* other) {
  if (other == this) return;
  InternalSwap(other);
}
void process_details::InternalSwap(process_details* other) {
  comm_.Swap(&other->comm_);
  exe_.Swap(&other->exe_);
  args_.UnsafeArenaSwap(&other->args_);
  container_id_.Swap(&other->container_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata process_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = process_details_descriptor_;
  metadata.reflection = process_details_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// process_details

// required string comm = 1;
bool process_details::has_comm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void process_details::set_has_comm() {
  _has_bits_[0] |= 0x00000001u;
}
void process_details::clear_has_comm() {
  _has_bits_[0] &= ~0x00000001u;
}
void process_details::clear_comm() {
  comm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comm();
}
const ::std::string& process_details::comm() const {
  // @@protoc_insertion_point(field_get:draiosproto.process_details.comm)
  return comm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void process_details::set_comm(const ::std::string& value) {
  set_has_comm();
  comm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.process_details.comm)
}
void process_details::set_comm(const char* value) {
  set_has_comm();
  comm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.process_details.comm)
}
void process_details::set_comm(const char* value, size_t size) {
  set_has_comm();
  comm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.process_details.comm)
}
::std::string* process_details::mutable_comm() {
  set_has_comm();
  // @@protoc_insertion_point(field_mutable:draiosproto.process_details.comm)
  return comm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* process_details::release_comm() {
  // @@protoc_insertion_point(field_release:draiosproto.process_details.comm)
  clear_has_comm();
  return comm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void process_details::set_allocated_comm(::std::string* comm) {
  if (comm != NULL) {
    set_has_comm();
  } else {
    clear_has_comm();
  }
  comm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.process_details.comm)
}

// required string exe = 2;
bool process_details::has_exe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void process_details::set_has_exe() {
  _has_bits_[0] |= 0x00000002u;
}
void process_details::clear_has_exe() {
  _has_bits_[0] &= ~0x00000002u;
}
void process_details::clear_exe() {
  exe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exe();
}
const ::std::string& process_details::exe() const {
  // @@protoc_insertion_point(field_get:draiosproto.process_details.exe)
  return exe_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void process_details::set_exe(const ::std::string& value) {
  set_has_exe();
  exe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.process_details.exe)
}
void process_details::set_exe(const char* value) {
  set_has_exe();
  exe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.process_details.exe)
}
void process_details::set_exe(const char* value, size_t size) {
  set_has_exe();
  exe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.process_details.exe)
}
::std::string* process_details::mutable_exe() {
  set_has_exe();
  // @@protoc_insertion_point(field_mutable:draiosproto.process_details.exe)
  return exe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* process_details::release_exe() {
  // @@protoc_insertion_point(field_release:draiosproto.process_details.exe)
  clear_has_exe();
  return exe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void process_details::set_allocated_exe(::std::string* exe) {
  if (exe != NULL) {
    set_has_exe();
  } else {
    clear_has_exe();
  }
  exe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exe);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.process_details.exe)
}

// repeated string args = 3;
int process_details::args_size() const {
  return args_.size();
}
void process_details::clear_args() {
  args_.Clear();
}
const ::std::string& process_details::args(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.process_details.args)
  return args_.Get(index);
}
::std::string* process_details::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.process_details.args)
  return args_.Mutable(index);
}
void process_details::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:draiosproto.process_details.args)
  args_.Mutable(index)->assign(value);
}
void process_details::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:draiosproto.process_details.args)
}
void process_details::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:draiosproto.process_details.args)
}
::std::string* process_details::add_args() {
  // @@protoc_insertion_point(field_add_mutable:draiosproto.process_details.args)
  return args_.Add();
}
void process_details::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:draiosproto.process_details.args)
}
void process_details::add_args(const char* value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:draiosproto.process_details.args)
}
void process_details::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:draiosproto.process_details.args)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
process_details::args() const {
  // @@protoc_insertion_point(field_list:draiosproto.process_details.args)
  return args_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
process_details::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.process_details.args)
  return &args_;
}

// optional string container_id = 4;
bool process_details::has_container_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void process_details::set_has_container_id() {
  _has_bits_[0] |= 0x00000008u;
}
void process_details::clear_has_container_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void process_details::clear_container_id() {
  container_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_container_id();
}
const ::std::string& process_details::container_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.process_details.container_id)
  return container_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void process_details::set_container_id(const ::std::string& value) {
  set_has_container_id();
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.process_details.container_id)
}
void process_details::set_container_id(const char* value) {
  set_has_container_id();
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.process_details.container_id)
}
void process_details::set_container_id(const char* value, size_t size) {
  set_has_container_id();
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.process_details.container_id)
}
::std::string* process_details::mutable_container_id() {
  set_has_container_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.process_details.container_id)
  return container_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* process_details::release_container_id() {
  // @@protoc_insertion_point(field_release:draiosproto.process_details.container_id)
  clear_has_container_id();
  return container_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void process_details::set_allocated_container_id(::std::string* container_id) {
  if (container_id != NULL) {
    set_has_container_id();
  } else {
    clear_has_container_id();
  }
  container_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.process_details.container_id)
}

inline const process_details* process_details::internal_default_instance() {
  return &process_details_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_details::kTimestampFieldNumber;
const int command_details::kCountFieldNumber;
const int command_details::kCmdlineFieldNumber;
const int command_details::kExeFieldNumber;
const int command_details::kParentcommFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_details::command_details()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.command_details)
}

void command_details::InitAsDefaultInstance() {
}

command_details::command_details(const command_details& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.command_details)
}

void command_details::SharedCtor() {
  _cached_size_ = 0;
  cmdline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parentcomm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(count_));
}

command_details::~command_details() {
  // @@protoc_insertion_point(destructor:draiosproto.command_details)
  SharedDtor();
}

void command_details::SharedDtor() {
  cmdline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exe_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parentcomm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return command_details_descriptor_;
}

const command_details& command_details::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<command_details> command_details_default_instance_;

command_details* command_details::New(::google::protobuf::Arena* arena) const {
  command_details* n = new command_details;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_details::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.command_details)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(command_details, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<command_details*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(timestamp_, count_);
    if (has_cmdline()) {
      cmdline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_exe()) {
      exe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_parentcomm()) {
      parentcomm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool command_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.command_details)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cmdline;
        break;
      }

      // required string cmdline = 3;
      case 3: {
        if (tag == 26) {
         parse_cmdline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmdline().data(), this->cmdline().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.command_details.cmdline");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exe;
        break;
      }

      // required string exe = 4;
      case 4: {
        if (tag == 34) {
         parse_exe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exe().data(), this->exe().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.command_details.exe");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_parentcomm;
        break;
      }

      // optional string parentcomm = 5;
      case 5: {
        if (tag == 42) {
         parse_parentcomm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentcomm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parentcomm().data(), this->parentcomm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.command_details.parentcomm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.command_details)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.command_details)
  return false;
#undef DO_
}

void command_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.command_details)
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required string cmdline = 3;
  if (has_cmdline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdline().data(), this->cmdline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.command_details.cmdline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cmdline(), output);
  }

  // required string exe = 4;
  if (has_exe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exe().data(), this->exe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.command_details.exe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exe(), output);
  }

  // optional string parentcomm = 5;
  if (has_parentcomm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parentcomm().data(), this->parentcomm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.command_details.parentcomm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->parentcomm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.command_details)
}

::google::protobuf::uint8* command_details::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.command_details)
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required string cmdline = 3;
  if (has_cmdline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdline().data(), this->cmdline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.command_details.cmdline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cmdline(), target);
  }

  // required string exe = 4;
  if (has_exe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exe().data(), this->exe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.command_details.exe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exe(), target);
  }

  // optional string parentcomm = 5;
  if (has_parentcomm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parentcomm().data(), this->parentcomm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.command_details.parentcomm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->parentcomm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.command_details)
  return target;
}

size_t command_details::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.command_details)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required uint64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  if (has_count()) {
    // required uint32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  if (has_cmdline()) {
    // required string cmdline = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmdline());
  }

  if (has_exe()) {
    // required string exe = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exe());
  }

  return total_size;
}
size_t command_details::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.command_details)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

    // required uint32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

    // required string cmdline = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmdline());

    // required string exe = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exe());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string parentcomm = 5;
  if (has_parentcomm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parentcomm());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_details::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.command_details)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const command_details* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_details>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.command_details)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.command_details)
    UnsafeMergeFrom(*source);
  }
}

void command_details::MergeFrom(const command_details& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.command_details)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void command_details::UnsafeMergeFrom(const command_details& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_cmdline()) {
      set_has_cmdline();
      cmdline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmdline_);
    }
    if (from.has_exe()) {
      set_has_exe();
      exe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exe_);
    }
    if (from.has_parentcomm()) {
      set_has_parentcomm();
      parentcomm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parentcomm_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void command_details::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.command_details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_details::CopyFrom(const command_details& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.command_details)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool command_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void command_details::Swap(command_details* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_details::InternalSwap(command_details* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(count_, other->count_);
  cmdline_.Swap(&other->cmdline_);
  exe_.Swap(&other->exe_);
  parentcomm_.Swap(&other->parentcomm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = command_details_descriptor_;
  metadata.reflection = command_details_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// command_details

// required uint64 timestamp = 1;
bool command_details::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void command_details::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void command_details::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void command_details::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 command_details::timestamp() const {
  // @@protoc_insertion_point(field_get:draiosproto.command_details.timestamp)
  return timestamp_;
}
void command_details::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.command_details.timestamp)
}

// required uint32 count = 2;
bool command_details::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void command_details::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void command_details::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void command_details::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 command_details::count() const {
  // @@protoc_insertion_point(field_get:draiosproto.command_details.count)
  return count_;
}
void command_details::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.command_details.count)
}

// required string cmdline = 3;
bool command_details::has_cmdline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void command_details::set_has_cmdline() {
  _has_bits_[0] |= 0x00000004u;
}
void command_details::clear_has_cmdline() {
  _has_bits_[0] &= ~0x00000004u;
}
void command_details::clear_cmdline() {
  cmdline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmdline();
}
const ::std::string& command_details::cmdline() const {
  // @@protoc_insertion_point(field_get:draiosproto.command_details.cmdline)
  return cmdline_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void command_details::set_cmdline(const ::std::string& value) {
  set_has_cmdline();
  cmdline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.command_details.cmdline)
}
void command_details::set_cmdline(const char* value) {
  set_has_cmdline();
  cmdline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.command_details.cmdline)
}
void command_details::set_cmdline(const char* value, size_t size) {
  set_has_cmdline();
  cmdline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.command_details.cmdline)
}
::std::string* command_details::mutable_cmdline() {
  set_has_cmdline();
  // @@protoc_insertion_point(field_mutable:draiosproto.command_details.cmdline)
  return cmdline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* command_details::release_cmdline() {
  // @@protoc_insertion_point(field_release:draiosproto.command_details.cmdline)
  clear_has_cmdline();
  return cmdline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void command_details::set_allocated_cmdline(::std::string* cmdline) {
  if (cmdline != NULL) {
    set_has_cmdline();
  } else {
    clear_has_cmdline();
  }
  cmdline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmdline);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.command_details.cmdline)
}

// required string exe = 4;
bool command_details::has_exe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void command_details::set_has_exe() {
  _has_bits_[0] |= 0x00000008u;
}
void command_details::clear_has_exe() {
  _has_bits_[0] &= ~0x00000008u;
}
void command_details::clear_exe() {
  exe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exe();
}
const ::std::string& command_details::exe() const {
  // @@protoc_insertion_point(field_get:draiosproto.command_details.exe)
  return exe_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void command_details::set_exe(const ::std::string& value) {
  set_has_exe();
  exe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.command_details.exe)
}
void command_details::set_exe(const char* value) {
  set_has_exe();
  exe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.command_details.exe)
}
void command_details::set_exe(const char* value, size_t size) {
  set_has_exe();
  exe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.command_details.exe)
}
::std::string* command_details::mutable_exe() {
  set_has_exe();
  // @@protoc_insertion_point(field_mutable:draiosproto.command_details.exe)
  return exe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* command_details::release_exe() {
  // @@protoc_insertion_point(field_release:draiosproto.command_details.exe)
  clear_has_exe();
  return exe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void command_details::set_allocated_exe(::std::string* exe) {
  if (exe != NULL) {
    set_has_exe();
  } else {
    clear_has_exe();
  }
  exe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exe);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.command_details.exe)
}

// optional string parentcomm = 5;
bool command_details::has_parentcomm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void command_details::set_has_parentcomm() {
  _has_bits_[0] |= 0x00000010u;
}
void command_details::clear_has_parentcomm() {
  _has_bits_[0] &= ~0x00000010u;
}
void command_details::clear_parentcomm() {
  parentcomm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parentcomm();
}
const ::std::string& command_details::parentcomm() const {
  // @@protoc_insertion_point(field_get:draiosproto.command_details.parentcomm)
  return parentcomm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void command_details::set_parentcomm(const ::std::string& value) {
  set_has_parentcomm();
  parentcomm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.command_details.parentcomm)
}
void command_details::set_parentcomm(const char* value) {
  set_has_parentcomm();
  parentcomm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.command_details.parentcomm)
}
void command_details::set_parentcomm(const char* value, size_t size) {
  set_has_parentcomm();
  parentcomm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.command_details.parentcomm)
}
::std::string* command_details::mutable_parentcomm() {
  set_has_parentcomm();
  // @@protoc_insertion_point(field_mutable:draiosproto.command_details.parentcomm)
  return parentcomm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* command_details::release_parentcomm() {
  // @@protoc_insertion_point(field_release:draiosproto.command_details.parentcomm)
  clear_has_parentcomm();
  return parentcomm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void command_details::set_allocated_parentcomm(::std::string* parentcomm) {
  if (parentcomm != NULL) {
    set_has_parentcomm();
  } else {
    clear_has_parentcomm();
  }
  parentcomm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parentcomm);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.command_details.parentcomm)
}

inline const command_details* command_details::internal_default_instance() {
  return &command_details_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int counter_proto_entry::kNcallsFieldNumber;
const int counter_proto_entry::kTimeTotFieldNumber;
const int counter_proto_entry::kTimeMaxFieldNumber;
const int counter_proto_entry::kBytesInFieldNumber;
const int counter_proto_entry::kBytesOutFieldNumber;
const int counter_proto_entry::kNerrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

counter_proto_entry::counter_proto_entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.counter_proto_entry)
}

void counter_proto_entry::InitAsDefaultInstance() {
}

counter_proto_entry::counter_proto_entry(const counter_proto_entry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.counter_proto_entry)
}

void counter_proto_entry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&time_tot_, 0, reinterpret_cast<char*>(&bytes_out_) -
    reinterpret_cast<char*>(&time_tot_) + sizeof(bytes_out_));
}

counter_proto_entry::~counter_proto_entry() {
  // @@protoc_insertion_point(destructor:draiosproto.counter_proto_entry)
  SharedDtor();
}

void counter_proto_entry::SharedDtor() {
}

void counter_proto_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* counter_proto_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return counter_proto_entry_descriptor_;
}

const counter_proto_entry& counter_proto_entry::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<counter_proto_entry> counter_proto_entry_default_instance_;

counter_proto_entry* counter_proto_entry::New(::google::protobuf::Arena* arena) const {
  counter_proto_entry* n = new counter_proto_entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void counter_proto_entry::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.counter_proto_entry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(counter_proto_entry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<counter_proto_entry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_tot_, bytes_out_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool counter_proto_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.counter_proto_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ncalls = 1;
      case 1: {
        if (tag == 8) {
          set_has_ncalls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ncalls_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_tot;
        break;
      }

      // required uint64 time_tot = 2;
      case 2: {
        if (tag == 16) {
         parse_time_tot:
          set_has_time_tot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_tot_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_max;
        break;
      }

      // required uint64 time_max = 3;
      case 3: {
        if (tag == 24) {
         parse_time_max:
          set_has_time_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bytes_in;
        break;
      }

      // required uint64 bytes_in = 4;
      case 4: {
        if (tag == 32) {
         parse_bytes_in:
          set_has_bytes_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_in_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bytes_out;
        break;
      }

      // required uint64 bytes_out = 5;
      case 5: {
        if (tag == 40) {
         parse_bytes_out:
          set_has_bytes_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_out_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nerrors;
        break;
      }

      // required uint32 nerrors = 6;
      case 6: {
        if (tag == 48) {
         parse_nerrors:
          set_has_nerrors();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nerrors_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.counter_proto_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.counter_proto_entry)
  return false;
#undef DO_
}

void counter_proto_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.counter_proto_entry)
  // required uint32 ncalls = 1;
  if (has_ncalls()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ncalls(), output);
  }

  // required uint64 time_tot = 2;
  if (has_time_tot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time_tot(), output);
  }

  // required uint64 time_max = 3;
  if (has_time_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_max(), output);
  }

  // required uint64 bytes_in = 4;
  if (has_bytes_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bytes_in(), output);
  }

  // required uint64 bytes_out = 5;
  if (has_bytes_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bytes_out(), output);
  }

  // required uint32 nerrors = 6;
  if (has_nerrors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nerrors(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.counter_proto_entry)
}

::google::protobuf::uint8* counter_proto_entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.counter_proto_entry)
  // required uint32 ncalls = 1;
  if (has_ncalls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ncalls(), target);
  }

  // required uint64 time_tot = 2;
  if (has_time_tot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time_tot(), target);
  }

  // required uint64 time_max = 3;
  if (has_time_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time_max(), target);
  }

  // required uint64 bytes_in = 4;
  if (has_bytes_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bytes_in(), target);
  }

  // required uint64 bytes_out = 5;
  if (has_bytes_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->bytes_out(), target);
  }

  // required uint32 nerrors = 6;
  if (has_nerrors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->nerrors(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.counter_proto_entry)
  return target;
}

size_t counter_proto_entry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.counter_proto_entry)
  size_t total_size = 0;

  if (has_ncalls()) {
    // required uint32 ncalls = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ncalls());
  }

  if (has_time_tot()) {
    // required uint64 time_tot = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_tot());
  }

  if (has_time_max()) {
    // required uint64 time_max = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_max());
  }

  if (has_bytes_in()) {
    // required uint64 bytes_in = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_in());
  }

  if (has_bytes_out()) {
    // required uint64 bytes_out = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_out());
  }

  if (has_nerrors()) {
    // required uint32 nerrors = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nerrors());
  }

  return total_size;
}
size_t counter_proto_entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.counter_proto_entry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint32 ncalls = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ncalls());

    // required uint64 time_tot = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_tot());

    // required uint64 time_max = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_max());

    // required uint64 bytes_in = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_in());

    // required uint64 bytes_out = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_out());

    // required uint32 nerrors = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nerrors());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void counter_proto_entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.counter_proto_entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const counter_proto_entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const counter_proto_entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.counter_proto_entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.counter_proto_entry)
    UnsafeMergeFrom(*source);
  }
}

void counter_proto_entry::MergeFrom(const counter_proto_entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.counter_proto_entry)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void counter_proto_entry::UnsafeMergeFrom(const counter_proto_entry& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ncalls()) {
      set_ncalls(from.ncalls());
    }
    if (from.has_time_tot()) {
      set_time_tot(from.time_tot());
    }
    if (from.has_time_max()) {
      set_time_max(from.time_max());
    }
    if (from.has_bytes_in()) {
      set_bytes_in(from.bytes_in());
    }
    if (from.has_bytes_out()) {
      set_bytes_out(from.bytes_out());
    }
    if (from.has_nerrors()) {
      set_nerrors(from.nerrors());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void counter_proto_entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.counter_proto_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void counter_proto_entry::CopyFrom(const counter_proto_entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.counter_proto_entry)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool counter_proto_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void counter_proto_entry::Swap(counter_proto_entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void counter_proto_entry::InternalSwap(counter_proto_entry* other) {
  std::swap(ncalls_, other->ncalls_);
  std::swap(time_tot_, other->time_tot_);
  std::swap(time_max_, other->time_max_);
  std::swap(bytes_in_, other->bytes_in_);
  std::swap(bytes_out_, other->bytes_out_);
  std::swap(nerrors_, other->nerrors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata counter_proto_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = counter_proto_entry_descriptor_;
  metadata.reflection = counter_proto_entry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// counter_proto_entry

// required uint32 ncalls = 1;
bool counter_proto_entry::has_ncalls() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void counter_proto_entry::set_has_ncalls() {
  _has_bits_[0] |= 0x00000001u;
}
void counter_proto_entry::clear_has_ncalls() {
  _has_bits_[0] &= ~0x00000001u;
}
void counter_proto_entry::clear_ncalls() {
  ncalls_ = 0u;
  clear_has_ncalls();
}
::google::protobuf::uint32 counter_proto_entry::ncalls() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_proto_entry.ncalls)
  return ncalls_;
}
void counter_proto_entry::set_ncalls(::google::protobuf::uint32 value) {
  set_has_ncalls();
  ncalls_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_proto_entry.ncalls)
}

// required uint64 time_tot = 2;
bool counter_proto_entry::has_time_tot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void counter_proto_entry::set_has_time_tot() {
  _has_bits_[0] |= 0x00000002u;
}
void counter_proto_entry::clear_has_time_tot() {
  _has_bits_[0] &= ~0x00000002u;
}
void counter_proto_entry::clear_time_tot() {
  time_tot_ = GOOGLE_ULONGLONG(0);
  clear_has_time_tot();
}
::google::protobuf::uint64 counter_proto_entry::time_tot() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_proto_entry.time_tot)
  return time_tot_;
}
void counter_proto_entry::set_time_tot(::google::protobuf::uint64 value) {
  set_has_time_tot();
  time_tot_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_proto_entry.time_tot)
}

// required uint64 time_max = 3;
bool counter_proto_entry::has_time_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void counter_proto_entry::set_has_time_max() {
  _has_bits_[0] |= 0x00000004u;
}
void counter_proto_entry::clear_has_time_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void counter_proto_entry::clear_time_max() {
  time_max_ = GOOGLE_ULONGLONG(0);
  clear_has_time_max();
}
::google::protobuf::uint64 counter_proto_entry::time_max() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_proto_entry.time_max)
  return time_max_;
}
void counter_proto_entry::set_time_max(::google::protobuf::uint64 value) {
  set_has_time_max();
  time_max_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_proto_entry.time_max)
}

// required uint64 bytes_in = 4;
bool counter_proto_entry::has_bytes_in() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void counter_proto_entry::set_has_bytes_in() {
  _has_bits_[0] |= 0x00000008u;
}
void counter_proto_entry::clear_has_bytes_in() {
  _has_bits_[0] &= ~0x00000008u;
}
void counter_proto_entry::clear_bytes_in() {
  bytes_in_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_in();
}
::google::protobuf::uint64 counter_proto_entry::bytes_in() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_proto_entry.bytes_in)
  return bytes_in_;
}
void counter_proto_entry::set_bytes_in(::google::protobuf::uint64 value) {
  set_has_bytes_in();
  bytes_in_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_proto_entry.bytes_in)
}

// required uint64 bytes_out = 5;
bool counter_proto_entry::has_bytes_out() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void counter_proto_entry::set_has_bytes_out() {
  _has_bits_[0] |= 0x00000010u;
}
void counter_proto_entry::clear_has_bytes_out() {
  _has_bits_[0] &= ~0x00000010u;
}
void counter_proto_entry::clear_bytes_out() {
  bytes_out_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_out();
}
::google::protobuf::uint64 counter_proto_entry::bytes_out() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_proto_entry.bytes_out)
  return bytes_out_;
}
void counter_proto_entry::set_bytes_out(::google::protobuf::uint64 value) {
  set_has_bytes_out();
  bytes_out_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_proto_entry.bytes_out)
}

// required uint32 nerrors = 6;
bool counter_proto_entry::has_nerrors() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void counter_proto_entry::set_has_nerrors() {
  _has_bits_[0] |= 0x00000020u;
}
void counter_proto_entry::clear_has_nerrors() {
  _has_bits_[0] &= ~0x00000020u;
}
void counter_proto_entry::clear_nerrors() {
  nerrors_ = 0u;
  clear_has_nerrors();
}
::google::protobuf::uint32 counter_proto_entry::nerrors() const {
  // @@protoc_insertion_point(field_get:draiosproto.counter_proto_entry.nerrors)
  return nerrors_;
}
void counter_proto_entry::set_nerrors(::google::protobuf::uint32 value) {
  set_has_nerrors();
  nerrors_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.counter_proto_entry.nerrors)
}

inline const counter_proto_entry* counter_proto_entry::internal_default_instance() {
  return &counter_proto_entry_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int url_details::kUrlFieldNumber;
const int url_details::kCountersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

url_details::url_details()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.url_details)
}

void url_details::InitAsDefaultInstance() {
  counters_ = const_cast< ::draiosproto::counter_proto_entry*>(
      ::draiosproto::counter_proto_entry::internal_default_instance());
}

url_details::url_details(const url_details& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.url_details)
}

void url_details::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  counters_ = NULL;
}

url_details::~url_details() {
  // @@protoc_insertion_point(destructor:draiosproto.url_details)
  SharedDtor();
}

void url_details::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &url_details_default_instance_.get()) {
    delete counters_;
  }
}

void url_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* url_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return url_details_descriptor_;
}

const url_details& url_details::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<url_details> url_details_default_instance_;

url_details* url_details::New(::google::protobuf::Arena* arena) const {
  url_details* n = new url_details;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void url_details::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.url_details)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_counters()) {
      if (counters_ != NULL) counters_->::draiosproto::counter_proto_entry::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool url_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.url_details)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.url_details.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_counters;
        break;
      }

      // required .draiosproto.counter_proto_entry counters = 2;
      case 2: {
        if (tag == 18) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.url_details)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.url_details)
  return false;
#undef DO_
}

void url_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.url_details)
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.url_details.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->counters_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.url_details)
}

::google::protobuf::uint8* url_details::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.url_details)
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.url_details.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->counters_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.url_details)
  return target;
}

size_t url_details::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.url_details)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_counters()) {
    // required .draiosproto.counter_proto_entry counters = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counters_);
  }

  return total_size;
}
size_t url_details::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.url_details)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required .draiosproto.counter_proto_entry counters = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counters_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void url_details::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.url_details)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const url_details* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const url_details>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.url_details)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.url_details)
    UnsafeMergeFrom(*source);
  }
}

void url_details::MergeFrom(const url_details& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.url_details)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void url_details::UnsafeMergeFrom(const url_details& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_counters()) {
      mutable_counters()->::draiosproto::counter_proto_entry::MergeFrom(from.counters());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void url_details::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.url_details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void url_details::CopyFrom(const url_details& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.url_details)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool url_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_counters()) {
    if (!this->counters_->IsInitialized()) return false;
  }
  return true;
}

void url_details::Swap(url_details* other) {
  if (other == this) return;
  InternalSwap(other);
}
void url_details::InternalSwap(url_details* other) {
  url_.Swap(&other->url_);
  std::swap(counters_, other->counters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata url_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = url_details_descriptor_;
  metadata.reflection = url_details_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// url_details

// required string url = 1;
bool url_details::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void url_details::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void url_details::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void url_details::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& url_details::url() const {
  // @@protoc_insertion_point(field_get:draiosproto.url_details.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void url_details::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.url_details.url)
}
void url_details::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.url_details.url)
}
void url_details::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.url_details.url)
}
::std::string* url_details::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:draiosproto.url_details.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* url_details::release_url() {
  // @@protoc_insertion_point(field_release:draiosproto.url_details.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void url_details::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.url_details.url)
}

// required .draiosproto.counter_proto_entry counters = 2;
bool url_details::has_counters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void url_details::set_has_counters() {
  _has_bits_[0] |= 0x00000002u;
}
void url_details::clear_has_counters() {
  _has_bits_[0] &= ~0x00000002u;
}
void url_details::clear_counters() {
  if (counters_ != NULL) counters_->::draiosproto::counter_proto_entry::Clear();
  clear_has_counters();
}
const ::draiosproto::counter_proto_entry& url_details::counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.url_details.counters)
  return counters_ != NULL ? *counters_
                         : *::draiosproto::counter_proto_entry::internal_default_instance();
}
::draiosproto::counter_proto_entry* url_details::mutable_counters() {
  set_has_counters();
  if (counters_ == NULL) {
    counters_ = new ::draiosproto::counter_proto_entry;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.url_details.counters)
  return counters_;
}
::draiosproto::counter_proto_entry* url_details::release_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.url_details.counters)
  clear_has_counters();
  ::draiosproto::counter_proto_entry* temp = counters_;
  counters_ = NULL;
  return temp;
}
void url_details::set_allocated_counters(::draiosproto::counter_proto_entry* counters) {
  delete counters_;
  counters_ = counters;
  if (counters) {
    set_has_counters();
  } else {
    clear_has_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.url_details.counters)
}

inline const url_details* url_details::internal_default_instance() {
  return &url_details_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int status_code_details::kStatusCodeFieldNumber;
const int status_code_details::kNcallsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

status_code_details::status_code_details()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.status_code_details)
}

void status_code_details::InitAsDefaultInstance() {
}

status_code_details::status_code_details(const status_code_details& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.status_code_details)
}

void status_code_details::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&status_code_, 0, reinterpret_cast<char*>(&ncalls_) -
    reinterpret_cast<char*>(&status_code_) + sizeof(ncalls_));
}

status_code_details::~status_code_details() {
  // @@protoc_insertion_point(destructor:draiosproto.status_code_details)
  SharedDtor();
}

void status_code_details::SharedDtor() {
}

void status_code_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* status_code_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return status_code_details_descriptor_;
}

const status_code_details& status_code_details::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<status_code_details> status_code_details_default_instance_;

status_code_details* status_code_details::New(::google::protobuf::Arena* arena) const {
  status_code_details* n = new status_code_details;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void status_code_details::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.status_code_details)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(status_code_details, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<status_code_details*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_code_, ncalls_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool status_code_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.status_code_details)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status_code = 1;
      case 1: {
        if (tag == 8) {
          set_has_status_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_code_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ncalls;
        break;
      }

      // required uint32 ncalls = 2;
      case 2: {
        if (tag == 16) {
         parse_ncalls:
          set_has_ncalls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ncalls_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.status_code_details)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.status_code_details)
  return false;
#undef DO_
}

void status_code_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.status_code_details)
  // required uint32 status_code = 1;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status_code(), output);
  }

  // required uint32 ncalls = 2;
  if (has_ncalls()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ncalls(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.status_code_details)
}

::google::protobuf::uint8* status_code_details::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.status_code_details)
  // required uint32 status_code = 1;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status_code(), target);
  }

  // required uint32 ncalls = 2;
  if (has_ncalls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ncalls(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.status_code_details)
  return target;
}

size_t status_code_details::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.status_code_details)
  size_t total_size = 0;

  if (has_status_code()) {
    // required uint32 status_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status_code());
  }

  if (has_ncalls()) {
    // required uint32 ncalls = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ncalls());
  }

  return total_size;
}
size_t status_code_details::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.status_code_details)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 status_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status_code());

    // required uint32 ncalls = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ncalls());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void status_code_details::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.status_code_details)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const status_code_details* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const status_code_details>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.status_code_details)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.status_code_details)
    UnsafeMergeFrom(*source);
  }
}

void status_code_details::MergeFrom(const status_code_details& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.status_code_details)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void status_code_details::UnsafeMergeFrom(const status_code_details& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_ncalls()) {
      set_ncalls(from.ncalls());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void status_code_details::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.status_code_details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void status_code_details::CopyFrom(const status_code_details& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.status_code_details)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool status_code_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void status_code_details::Swap(status_code_details* other) {
  if (other == this) return;
  InternalSwap(other);
}
void status_code_details::InternalSwap(status_code_details* other) {
  std::swap(status_code_, other->status_code_);
  std::swap(ncalls_, other->ncalls_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata status_code_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = status_code_details_descriptor_;
  metadata.reflection = status_code_details_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// status_code_details

// required uint32 status_code = 1;
bool status_code_details::has_status_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void status_code_details::set_has_status_code() {
  _has_bits_[0] |= 0x00000001u;
}
void status_code_details::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void status_code_details::clear_status_code() {
  status_code_ = 0u;
  clear_has_status_code();
}
::google::protobuf::uint32 status_code_details::status_code() const {
  // @@protoc_insertion_point(field_get:draiosproto.status_code_details.status_code)
  return status_code_;
}
void status_code_details::set_status_code(::google::protobuf::uint32 value) {
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.status_code_details.status_code)
}

// required uint32 ncalls = 2;
bool status_code_details::has_ncalls() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void status_code_details::set_has_ncalls() {
  _has_bits_[0] |= 0x00000002u;
}
void status_code_details::clear_has_ncalls() {
  _has_bits_[0] &= ~0x00000002u;
}
void status_code_details::clear_ncalls() {
  ncalls_ = 0u;
  clear_has_ncalls();
}
::google::protobuf::uint32 status_code_details::ncalls() const {
  // @@protoc_insertion_point(field_get:draiosproto.status_code_details.ncalls)
  return ncalls_;
}
void status_code_details::set_ncalls(::google::protobuf::uint32 value) {
  set_has_ncalls();
  ncalls_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.status_code_details.ncalls)
}

inline const status_code_details* status_code_details::internal_default_instance() {
  return &status_code_details_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int http_info::kServerUrlsFieldNumber;
const int http_info::kClientUrlsFieldNumber;
const int http_info::kClientStatusCodesFieldNumber;
const int http_info::kServerStatusCodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

http_info::http_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.http_info)
}

void http_info::InitAsDefaultInstance() {
}

http_info::http_info(const http_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.http_info)
}

void http_info::SharedCtor() {
  _cached_size_ = 0;
}

http_info::~http_info() {
  // @@protoc_insertion_point(destructor:draiosproto.http_info)
  SharedDtor();
}

void http_info::SharedDtor() {
}

void http_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* http_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return http_info_descriptor_;
}

const http_info& http_info::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<http_info> http_info_default_instance_;

http_info* http_info::New(::google::protobuf::Arena* arena) const {
  http_info* n = new http_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void http_info::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.http_info)
  server_urls_.Clear();
  client_urls_.Clear();
  client_status_codes_.Clear();
  server_status_codes_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool http_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.http_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.url_details server_urls = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_server_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_server_urls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_server_urls;
        if (input->ExpectTag(18)) goto parse_loop_client_urls;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.url_details client_urls = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_client_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_client_urls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_client_urls;
        if (input->ExpectTag(26)) goto parse_loop_client_status_codes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.status_code_details client_status_codes = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_client_status_codes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_client_status_codes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_client_status_codes;
        if (input->ExpectTag(34)) goto parse_loop_server_status_codes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.status_code_details server_status_codes = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_server_status_codes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_server_status_codes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_server_status_codes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.http_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.http_info)
  return false;
#undef DO_
}

void http_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.http_info)
  // repeated .draiosproto.url_details server_urls = 1;
  for (unsigned int i = 0, n = this->server_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_urls(i), output);
  }

  // repeated .draiosproto.url_details client_urls = 2;
  for (unsigned int i = 0, n = this->client_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client_urls(i), output);
  }

  // repeated .draiosproto.status_code_details client_status_codes = 3;
  for (unsigned int i = 0, n = this->client_status_codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->client_status_codes(i), output);
  }

  // repeated .draiosproto.status_code_details server_status_codes = 4;
  for (unsigned int i = 0, n = this->server_status_codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->server_status_codes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.http_info)
}

::google::protobuf::uint8* http_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.http_info)
  // repeated .draiosproto.url_details server_urls = 1;
  for (unsigned int i = 0, n = this->server_urls_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->server_urls(i), false, target);
  }

  // repeated .draiosproto.url_details client_urls = 2;
  for (unsigned int i = 0, n = this->client_urls_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->client_urls(i), false, target);
  }

  // repeated .draiosproto.status_code_details client_status_codes = 3;
  for (unsigned int i = 0, n = this->client_status_codes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->client_status_codes(i), false, target);
  }

  // repeated .draiosproto.status_code_details server_status_codes = 4;
  for (unsigned int i = 0, n = this->server_status_codes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->server_status_codes(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.http_info)
  return target;
}

size_t http_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.http_info)
  size_t total_size = 0;

  // repeated .draiosproto.url_details server_urls = 1;
  {
    unsigned int count = this->server_urls_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_urls(i));
    }
  }

  // repeated .draiosproto.url_details client_urls = 2;
  {
    unsigned int count = this->client_urls_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_urls(i));
    }
  }

  // repeated .draiosproto.status_code_details client_status_codes = 3;
  {
    unsigned int count = this->client_status_codes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_status_codes(i));
    }
  }

  // repeated .draiosproto.status_code_details server_status_codes = 4;
  {
    unsigned int count = this->server_status_codes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_status_codes(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void http_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.http_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const http_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const http_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.http_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.http_info)
    UnsafeMergeFrom(*source);
  }
}

void http_info::MergeFrom(const http_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.http_info)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void http_info::UnsafeMergeFrom(const http_info& from) {
  GOOGLE_DCHECK(&from != this);
  server_urls_.MergeFrom(from.server_urls_);
  client_urls_.MergeFrom(from.client_urls_);
  client_status_codes_.MergeFrom(from.client_status_codes_);
  server_status_codes_.MergeFrom(from.server_status_codes_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void http_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.http_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void http_info::CopyFrom(const http_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.http_info)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool http_info::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->server_urls())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->client_urls())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->client_status_codes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->server_status_codes())) return false;
  return true;
}

void http_info::Swap(http_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void http_info::InternalSwap(http_info* other) {
  server_urls_.UnsafeArenaSwap(&other->server_urls_);
  client_urls_.UnsafeArenaSwap(&other->client_urls_);
  client_status_codes_.UnsafeArenaSwap(&other->client_status_codes_);
  server_status_codes_.UnsafeArenaSwap(&other->server_status_codes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata http_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = http_info_descriptor_;
  metadata.reflection = http_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// http_info

// repeated .draiosproto.url_details server_urls = 1;
int http_info::server_urls_size() const {
  return server_urls_.size();
}
void http_info::clear_server_urls() {
  server_urls_.Clear();
}
const ::draiosproto::url_details& http_info::server_urls(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.http_info.server_urls)
  return server_urls_.Get(index);
}
::draiosproto::url_details* http_info::mutable_server_urls(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.http_info.server_urls)
  return server_urls_.Mutable(index);
}
::draiosproto::url_details* http_info::add_server_urls() {
  // @@protoc_insertion_point(field_add:draiosproto.http_info.server_urls)
  return server_urls_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::url_details >*
http_info::mutable_server_urls() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.http_info.server_urls)
  return &server_urls_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::url_details >&
http_info::server_urls() const {
  // @@protoc_insertion_point(field_list:draiosproto.http_info.server_urls)
  return server_urls_;
}

// repeated .draiosproto.url_details client_urls = 2;
int http_info::client_urls_size() const {
  return client_urls_.size();
}
void http_info::clear_client_urls() {
  client_urls_.Clear();
}
const ::draiosproto::url_details& http_info::client_urls(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.http_info.client_urls)
  return client_urls_.Get(index);
}
::draiosproto::url_details* http_info::mutable_client_urls(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.http_info.client_urls)
  return client_urls_.Mutable(index);
}
::draiosproto::url_details* http_info::add_client_urls() {
  // @@protoc_insertion_point(field_add:draiosproto.http_info.client_urls)
  return client_urls_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::url_details >*
http_info::mutable_client_urls() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.http_info.client_urls)
  return &client_urls_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::url_details >&
http_info::client_urls() const {
  // @@protoc_insertion_point(field_list:draiosproto.http_info.client_urls)
  return client_urls_;
}

// repeated .draiosproto.status_code_details client_status_codes = 3;
int http_info::client_status_codes_size() const {
  return client_status_codes_.size();
}
void http_info::clear_client_status_codes() {
  client_status_codes_.Clear();
}
const ::draiosproto::status_code_details& http_info::client_status_codes(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.http_info.client_status_codes)
  return client_status_codes_.Get(index);
}
::draiosproto::status_code_details* http_info::mutable_client_status_codes(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.http_info.client_status_codes)
  return client_status_codes_.Mutable(index);
}
::draiosproto::status_code_details* http_info::add_client_status_codes() {
  // @@protoc_insertion_point(field_add:draiosproto.http_info.client_status_codes)
  return client_status_codes_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::status_code_details >*
http_info::mutable_client_status_codes() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.http_info.client_status_codes)
  return &client_status_codes_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::status_code_details >&
http_info::client_status_codes() const {
  // @@protoc_insertion_point(field_list:draiosproto.http_info.client_status_codes)
  return client_status_codes_;
}

// repeated .draiosproto.status_code_details server_status_codes = 4;
int http_info::server_status_codes_size() const {
  return server_status_codes_.size();
}
void http_info::clear_server_status_codes() {
  server_status_codes_.Clear();
}
const ::draiosproto::status_code_details& http_info::server_status_codes(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.http_info.server_status_codes)
  return server_status_codes_.Get(index);
}
::draiosproto::status_code_details* http_info::mutable_server_status_codes(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.http_info.server_status_codes)
  return server_status_codes_.Mutable(index);
}
::draiosproto::status_code_details* http_info::add_server_status_codes() {
  // @@protoc_insertion_point(field_add:draiosproto.http_info.server_status_codes)
  return server_status_codes_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::status_code_details >*
http_info::mutable_server_status_codes() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.http_info.server_status_codes)
  return &server_status_codes_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::status_code_details >&
http_info::server_status_codes() const {
  // @@protoc_insertion_point(field_list:draiosproto.http_info.server_status_codes)
  return server_status_codes_;
}

inline const http_info* http_info::internal_default_instance() {
  return &http_info_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sql_entry_details::kNameFieldNumber;
const int sql_entry_details::kCountersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_entry_details::sql_entry_details()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.sql_entry_details)
}

void sql_entry_details::InitAsDefaultInstance() {
  counters_ = const_cast< ::draiosproto::counter_proto_entry*>(
      ::draiosproto::counter_proto_entry::internal_default_instance());
}

sql_entry_details::sql_entry_details(const sql_entry_details& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.sql_entry_details)
}

void sql_entry_details::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  counters_ = NULL;
}

sql_entry_details::~sql_entry_details() {
  // @@protoc_insertion_point(destructor:draiosproto.sql_entry_details)
  SharedDtor();
}

void sql_entry_details::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &sql_entry_details_default_instance_.get()) {
    delete counters_;
  }
}

void sql_entry_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_entry_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_entry_details_descriptor_;
}

const sql_entry_details& sql_entry_details::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sql_entry_details> sql_entry_details_default_instance_;

sql_entry_details* sql_entry_details::New(::google::protobuf::Arena* arena) const {
  sql_entry_details* n = new sql_entry_details;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sql_entry_details::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.sql_entry_details)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_counters()) {
      if (counters_ != NULL) counters_->::draiosproto::counter_proto_entry::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool sql_entry_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.sql_entry_details)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.sql_entry_details.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_counters;
        break;
      }

      // required .draiosproto.counter_proto_entry counters = 2;
      case 2: {
        if (tag == 18) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.sql_entry_details)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.sql_entry_details)
  return false;
#undef DO_
}

void sql_entry_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.sql_entry_details)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.sql_entry_details.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->counters_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.sql_entry_details)
}

::google::protobuf::uint8* sql_entry_details::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.sql_entry_details)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.sql_entry_details.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->counters_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.sql_entry_details)
  return target;
}

size_t sql_entry_details::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.sql_entry_details)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_counters()) {
    // required .draiosproto.counter_proto_entry counters = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counters_);
  }

  return total_size;
}
size_t sql_entry_details::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.sql_entry_details)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .draiosproto.counter_proto_entry counters = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counters_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_entry_details::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.sql_entry_details)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sql_entry_details* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sql_entry_details>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.sql_entry_details)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.sql_entry_details)
    UnsafeMergeFrom(*source);
  }
}

void sql_entry_details::MergeFrom(const sql_entry_details& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.sql_entry_details)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sql_entry_details::UnsafeMergeFrom(const sql_entry_details& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_counters()) {
      mutable_counters()->::draiosproto::counter_proto_entry::MergeFrom(from.counters());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void sql_entry_details::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.sql_entry_details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_entry_details::CopyFrom(const sql_entry_details& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.sql_entry_details)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sql_entry_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_counters()) {
    if (!this->counters_->IsInitialized()) return false;
  }
  return true;
}

void sql_entry_details::Swap(sql_entry_details* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_entry_details::InternalSwap(sql_entry_details* other) {
  name_.Swap(&other->name_);
  std::swap(counters_, other->counters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sql_entry_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_entry_details_descriptor_;
  metadata.reflection = sql_entry_details_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sql_entry_details

// required string name = 1;
bool sql_entry_details::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void sql_entry_details::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void sql_entry_details::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void sql_entry_details::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& sql_entry_details::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.sql_entry_details.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sql_entry_details::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.sql_entry_details.name)
}
void sql_entry_details::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.sql_entry_details.name)
}
void sql_entry_details::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.sql_entry_details.name)
}
::std::string* sql_entry_details::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.sql_entry_details.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* sql_entry_details::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.sql_entry_details.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sql_entry_details::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.sql_entry_details.name)
}

// required .draiosproto.counter_proto_entry counters = 2;
bool sql_entry_details::has_counters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void sql_entry_details::set_has_counters() {
  _has_bits_[0] |= 0x00000002u;
}
void sql_entry_details::clear_has_counters() {
  _has_bits_[0] &= ~0x00000002u;
}
void sql_entry_details::clear_counters() {
  if (counters_ != NULL) counters_->::draiosproto::counter_proto_entry::Clear();
  clear_has_counters();
}
const ::draiosproto::counter_proto_entry& sql_entry_details::counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.sql_entry_details.counters)
  return counters_ != NULL ? *counters_
                         : *::draiosproto::counter_proto_entry::internal_default_instance();
}
::draiosproto::counter_proto_entry* sql_entry_details::mutable_counters() {
  set_has_counters();
  if (counters_ == NULL) {
    counters_ = new ::draiosproto::counter_proto_entry;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.sql_entry_details.counters)
  return counters_;
}
::draiosproto::counter_proto_entry* sql_entry_details::release_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.sql_entry_details.counters)
  clear_has_counters();
  ::draiosproto::counter_proto_entry* temp = counters_;
  counters_ = NULL;
  return temp;
}
void sql_entry_details::set_allocated_counters(::draiosproto::counter_proto_entry* counters) {
  delete counters_;
  counters_ = counters;
  if (counters) {
    set_has_counters();
  } else {
    clear_has_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.sql_entry_details.counters)
}

inline const sql_entry_details* sql_entry_details::internal_default_instance() {
  return &sql_entry_details_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sql_query_type_details::kTypeFieldNumber;
const int sql_query_type_details::kCountersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_query_type_details::sql_query_type_details()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.sql_query_type_details)
}

void sql_query_type_details::InitAsDefaultInstance() {
  counters_ = const_cast< ::draiosproto::counter_proto_entry*>(
      ::draiosproto::counter_proto_entry::internal_default_instance());
}

sql_query_type_details::sql_query_type_details(const sql_query_type_details& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.sql_query_type_details)
}

void sql_query_type_details::SharedCtor() {
  _cached_size_ = 0;
  counters_ = NULL;
  type_ = 0;
}

sql_query_type_details::~sql_query_type_details() {
  // @@protoc_insertion_point(destructor:draiosproto.sql_query_type_details)
  SharedDtor();
}

void sql_query_type_details::SharedDtor() {
  if (this != &sql_query_type_details_default_instance_.get()) {
    delete counters_;
  }
}

void sql_query_type_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_query_type_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_query_type_details_descriptor_;
}

const sql_query_type_details& sql_query_type_details::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sql_query_type_details> sql_query_type_details_default_instance_;

sql_query_type_details* sql_query_type_details::New(::google::protobuf::Arena* arena) const {
  sql_query_type_details* n = new sql_query_type_details;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sql_query_type_details::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.sql_query_type_details)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 0;
    if (has_counters()) {
      if (counters_ != NULL) counters_->::draiosproto::counter_proto_entry::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool sql_query_type_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.sql_query_type_details)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.sql_statement_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::sql_statement_type_IsValid(value)) {
            set_type(static_cast< ::draiosproto::sql_statement_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_counters;
        break;
      }

      // required .draiosproto.counter_proto_entry counters = 2;
      case 2: {
        if (tag == 18) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.sql_query_type_details)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.sql_query_type_details)
  return false;
#undef DO_
}

void sql_query_type_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.sql_query_type_details)
  // required .draiosproto.sql_statement_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->counters_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.sql_query_type_details)
}

::google::protobuf::uint8* sql_query_type_details::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.sql_query_type_details)
  // required .draiosproto.sql_statement_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->counters_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.sql_query_type_details)
  return target;
}

size_t sql_query_type_details::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.sql_query_type_details)
  size_t total_size = 0;

  if (has_type()) {
    // required .draiosproto.sql_statement_type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_counters()) {
    // required .draiosproto.counter_proto_entry counters = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counters_);
  }

  return total_size;
}
size_t sql_query_type_details::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.sql_query_type_details)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .draiosproto.sql_statement_type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required .draiosproto.counter_proto_entry counters = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counters_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_query_type_details::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.sql_query_type_details)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sql_query_type_details* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sql_query_type_details>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.sql_query_type_details)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.sql_query_type_details)
    UnsafeMergeFrom(*source);
  }
}

void sql_query_type_details::MergeFrom(const sql_query_type_details& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.sql_query_type_details)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sql_query_type_details::UnsafeMergeFrom(const sql_query_type_details& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_counters()) {
      mutable_counters()->::draiosproto::counter_proto_entry::MergeFrom(from.counters());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void sql_query_type_details::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.sql_query_type_details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_query_type_details::CopyFrom(const sql_query_type_details& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.sql_query_type_details)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sql_query_type_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_counters()) {
    if (!this->counters_->IsInitialized()) return false;
  }
  return true;
}

void sql_query_type_details::Swap(sql_query_type_details* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_query_type_details::InternalSwap(sql_query_type_details* other) {
  std::swap(type_, other->type_);
  std::swap(counters_, other->counters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sql_query_type_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_query_type_details_descriptor_;
  metadata.reflection = sql_query_type_details_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sql_query_type_details

// required .draiosproto.sql_statement_type type = 1;
bool sql_query_type_details::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void sql_query_type_details::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void sql_query_type_details::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void sql_query_type_details::clear_type() {
  type_ = 0;
  clear_has_type();
}
::draiosproto::sql_statement_type sql_query_type_details::type() const {
  // @@protoc_insertion_point(field_get:draiosproto.sql_query_type_details.type)
  return static_cast< ::draiosproto::sql_statement_type >(type_);
}
void sql_query_type_details::set_type(::draiosproto::sql_statement_type value) {
  assert(::draiosproto::sql_statement_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.sql_query_type_details.type)
}

// required .draiosproto.counter_proto_entry counters = 2;
bool sql_query_type_details::has_counters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void sql_query_type_details::set_has_counters() {
  _has_bits_[0] |= 0x00000002u;
}
void sql_query_type_details::clear_has_counters() {
  _has_bits_[0] &= ~0x00000002u;
}
void sql_query_type_details::clear_counters() {
  if (counters_ != NULL) counters_->::draiosproto::counter_proto_entry::Clear();
  clear_has_counters();
}
const ::draiosproto::counter_proto_entry& sql_query_type_details::counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.sql_query_type_details.counters)
  return counters_ != NULL ? *counters_
                         : *::draiosproto::counter_proto_entry::internal_default_instance();
}
::draiosproto::counter_proto_entry* sql_query_type_details::mutable_counters() {
  set_has_counters();
  if (counters_ == NULL) {
    counters_ = new ::draiosproto::counter_proto_entry;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.sql_query_type_details.counters)
  return counters_;
}
::draiosproto::counter_proto_entry* sql_query_type_details::release_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.sql_query_type_details.counters)
  clear_has_counters();
  ::draiosproto::counter_proto_entry* temp = counters_;
  counters_ = NULL;
  return temp;
}
void sql_query_type_details::set_allocated_counters(::draiosproto::counter_proto_entry* counters) {
  delete counters_;
  counters_ = counters;
  if (counters) {
    set_has_counters();
  } else {
    clear_has_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.sql_query_type_details.counters)
}

inline const sql_query_type_details* sql_query_type_details::internal_default_instance() {
  return &sql_query_type_details_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sql_info::kServerQueriesFieldNumber;
const int sql_info::kClientQueriesFieldNumber;
const int sql_info::kServerQueryTypesFieldNumber;
const int sql_info::kClientQueryTypesFieldNumber;
const int sql_info::kServerTablesFieldNumber;
const int sql_info::kClientTablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_info::sql_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.sql_info)
}

void sql_info::InitAsDefaultInstance() {
}

sql_info::sql_info(const sql_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.sql_info)
}

void sql_info::SharedCtor() {
  _cached_size_ = 0;
}

sql_info::~sql_info() {
  // @@protoc_insertion_point(destructor:draiosproto.sql_info)
  SharedDtor();
}

void sql_info::SharedDtor() {
}

void sql_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_info_descriptor_;
}

const sql_info& sql_info::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sql_info> sql_info_default_instance_;

sql_info* sql_info::New(::google::protobuf::Arena* arena) const {
  sql_info* n = new sql_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sql_info::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.sql_info)
  server_queries_.Clear();
  client_queries_.Clear();
  server_query_types_.Clear();
  client_query_types_.Clear();
  server_tables_.Clear();
  client_tables_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool sql_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.sql_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.sql_entry_details server_queries = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_server_queries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_server_queries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_server_queries;
        if (input->ExpectTag(18)) goto parse_loop_client_queries;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.sql_entry_details client_queries = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_client_queries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_client_queries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_client_queries;
        if (input->ExpectTag(26)) goto parse_loop_server_query_types;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.sql_query_type_details server_query_types = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_server_query_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_server_query_types()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_server_query_types;
        if (input->ExpectTag(34)) goto parse_loop_client_query_types;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.sql_query_type_details client_query_types = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_client_query_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_client_query_types()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_client_query_types;
        if (input->ExpectTag(42)) goto parse_loop_server_tables;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.sql_entry_details server_tables = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_server_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_server_tables()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_server_tables;
        if (input->ExpectTag(50)) goto parse_loop_client_tables;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.sql_entry_details client_tables = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_client_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_client_tables()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_client_tables;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.sql_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.sql_info)
  return false;
#undef DO_
}

void sql_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.sql_info)
  // repeated .draiosproto.sql_entry_details server_queries = 1;
  for (unsigned int i = 0, n = this->server_queries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_queries(i), output);
  }

  // repeated .draiosproto.sql_entry_details client_queries = 2;
  for (unsigned int i = 0, n = this->client_queries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client_queries(i), output);
  }

  // repeated .draiosproto.sql_query_type_details server_query_types = 3;
  for (unsigned int i = 0, n = this->server_query_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->server_query_types(i), output);
  }

  // repeated .draiosproto.sql_query_type_details client_query_types = 4;
  for (unsigned int i = 0, n = this->client_query_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->client_query_types(i), output);
  }

  // repeated .draiosproto.sql_entry_details server_tables = 5;
  for (unsigned int i = 0, n = this->server_tables_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->server_tables(i), output);
  }

  // repeated .draiosproto.sql_entry_details client_tables = 6;
  for (unsigned int i = 0, n = this->client_tables_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->client_tables(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.sql_info)
}

::google::protobuf::uint8* sql_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.sql_info)
  // repeated .draiosproto.sql_entry_details server_queries = 1;
  for (unsigned int i = 0, n = this->server_queries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->server_queries(i), false, target);
  }

  // repeated .draiosproto.sql_entry_details client_queries = 2;
  for (unsigned int i = 0, n = this->client_queries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->client_queries(i), false, target);
  }

  // repeated .draiosproto.sql_query_type_details server_query_types = 3;
  for (unsigned int i = 0, n = this->server_query_types_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->server_query_types(i), false, target);
  }

  // repeated .draiosproto.sql_query_type_details client_query_types = 4;
  for (unsigned int i = 0, n = this->client_query_types_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->client_query_types(i), false, target);
  }

  // repeated .draiosproto.sql_entry_details server_tables = 5;
  for (unsigned int i = 0, n = this->server_tables_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->server_tables(i), false, target);
  }

  // repeated .draiosproto.sql_entry_details client_tables = 6;
  for (unsigned int i = 0, n = this->client_tables_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->client_tables(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.sql_info)
  return target;
}

size_t sql_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.sql_info)
  size_t total_size = 0;

  // repeated .draiosproto.sql_entry_details server_queries = 1;
  {
    unsigned int count = this->server_queries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_queries(i));
    }
  }

  // repeated .draiosproto.sql_entry_details client_queries = 2;
  {
    unsigned int count = this->client_queries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_queries(i));
    }
  }

  // repeated .draiosproto.sql_query_type_details server_query_types = 3;
  {
    unsigned int count = this->server_query_types_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_query_types(i));
    }
  }

  // repeated .draiosproto.sql_query_type_details client_query_types = 4;
  {
    unsigned int count = this->client_query_types_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_query_types(i));
    }
  }

  // repeated .draiosproto.sql_entry_details server_tables = 5;
  {
    unsigned int count = this->server_tables_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_tables(i));
    }
  }

  // repeated .draiosproto.sql_entry_details client_tables = 6;
  {
    unsigned int count = this->client_tables_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_tables(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.sql_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sql_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sql_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.sql_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.sql_info)
    UnsafeMergeFrom(*source);
  }
}

void sql_info::MergeFrom(const sql_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.sql_info)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sql_info::UnsafeMergeFrom(const sql_info& from) {
  GOOGLE_DCHECK(&from != this);
  server_queries_.MergeFrom(from.server_queries_);
  client_queries_.MergeFrom(from.client_queries_);
  server_query_types_.MergeFrom(from.server_query_types_);
  client_query_types_.MergeFrom(from.client_query_types_);
  server_tables_.MergeFrom(from.server_tables_);
  client_tables_.MergeFrom(from.client_tables_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void sql_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.sql_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_info::CopyFrom(const sql_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.sql_info)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sql_info::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->server_queries())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->client_queries())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->server_query_types())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->client_query_types())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->server_tables())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->client_tables())) return false;
  return true;
}

void sql_info::Swap(sql_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_info::InternalSwap(sql_info* other) {
  server_queries_.UnsafeArenaSwap(&other->server_queries_);
  client_queries_.UnsafeArenaSwap(&other->client_queries_);
  server_query_types_.UnsafeArenaSwap(&other->server_query_types_);
  client_query_types_.UnsafeArenaSwap(&other->client_query_types_);
  server_tables_.UnsafeArenaSwap(&other->server_tables_);
  client_tables_.UnsafeArenaSwap(&other->client_tables_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sql_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_info_descriptor_;
  metadata.reflection = sql_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sql_info

// repeated .draiosproto.sql_entry_details server_queries = 1;
int sql_info::server_queries_size() const {
  return server_queries_.size();
}
void sql_info::clear_server_queries() {
  server_queries_.Clear();
}
const ::draiosproto::sql_entry_details& sql_info::server_queries(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.sql_info.server_queries)
  return server_queries_.Get(index);
}
::draiosproto::sql_entry_details* sql_info::mutable_server_queries(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.sql_info.server_queries)
  return server_queries_.Mutable(index);
}
::draiosproto::sql_entry_details* sql_info::add_server_queries() {
  // @@protoc_insertion_point(field_add:draiosproto.sql_info.server_queries)
  return server_queries_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::sql_entry_details >*
sql_info::mutable_server_queries() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.sql_info.server_queries)
  return &server_queries_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::sql_entry_details >&
sql_info::server_queries() const {
  // @@protoc_insertion_point(field_list:draiosproto.sql_info.server_queries)
  return server_queries_;
}

// repeated .draiosproto.sql_entry_details client_queries = 2;
int sql_info::client_queries_size() const {
  return client_queries_.size();
}
void sql_info::clear_client_queries() {
  client_queries_.Clear();
}
const ::draiosproto::sql_entry_details& sql_info::client_queries(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.sql_info.client_queries)
  return client_queries_.Get(index);
}
::draiosproto::sql_entry_details* sql_info::mutable_client_queries(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.sql_info.client_queries)
  return client_queries_.Mutable(index);
}
::draiosproto::sql_entry_details* sql_info::add_client_queries() {
  // @@protoc_insertion_point(field_add:draiosproto.sql_info.client_queries)
  return client_queries_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::sql_entry_details >*
sql_info::mutable_client_queries() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.sql_info.client_queries)
  return &client_queries_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::sql_entry_details >&
sql_info::client_queries() const {
  // @@protoc_insertion_point(field_list:draiosproto.sql_info.client_queries)
  return client_queries_;
}

// repeated .draiosproto.sql_query_type_details server_query_types = 3;
int sql_info::server_query_types_size() const {
  return server_query_types_.size();
}
void sql_info::clear_server_query_types() {
  server_query_types_.Clear();
}
const ::draiosproto::sql_query_type_details& sql_info::server_query_types(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.sql_info.server_query_types)
  return server_query_types_.Get(index);
}
::draiosproto::sql_query_type_details* sql_info::mutable_server_query_types(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.sql_info.server_query_types)
  return server_query_types_.Mutable(index);
}
::draiosproto::sql_query_type_details* sql_info::add_server_query_types() {
  // @@protoc_insertion_point(field_add:draiosproto.sql_info.server_query_types)
  return server_query_types_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::sql_query_type_details >*
sql_info::mutable_server_query_types() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.sql_info.server_query_types)
  return &server_query_types_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::sql_query_type_details >&
sql_info::server_query_types() const {
  // @@protoc_insertion_point(field_list:draiosproto.sql_info.server_query_types)
  return server_query_types_;
}

// repeated .draiosproto.sql_query_type_details client_query_types = 4;
int sql_info::client_query_types_size() const {
  return client_query_types_.size();
}
void sql_info::clear_client_query_types() {
  client_query_types_.Clear();
}
const ::draiosproto::sql_query_type_details& sql_info::client_query_types(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.sql_info.client_query_types)
  return client_query_types_.Get(index);
}
::draiosproto::sql_query_type_details* sql_info::mutable_client_query_types(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.sql_info.client_query_types)
  return client_query_types_.Mutable(index);
}
::draiosproto::sql_query_type_details* sql_info::add_client_query_types() {
  // @@protoc_insertion_point(field_add:draiosproto.sql_info.client_query_types)
  return client_query_types_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::sql_query_type_details >*
sql_info::mutable_client_query_types() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.sql_info.client_query_types)
  return &client_query_types_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::sql_query_type_details >&
sql_info::client_query_types() const {
  // @@protoc_insertion_point(field_list:draiosproto.sql_info.client_query_types)
  return client_query_types_;
}

// repeated .draiosproto.sql_entry_details server_tables = 5;
int sql_info::server_tables_size() const {
  return server_tables_.size();
}
void sql_info::clear_server_tables() {
  server_tables_.Clear();
}
const ::draiosproto::sql_entry_details& sql_info::server_tables(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.sql_info.server_tables)
  return server_tables_.Get(index);
}
::draiosproto::sql_entry_details* sql_info::mutable_server_tables(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.sql_info.server_tables)
  return server_tables_.Mutable(index);
}
::draiosproto::sql_entry_details* sql_info::add_server_tables() {
  // @@protoc_insertion_point(field_add:draiosproto.sql_info.server_tables)
  return server_tables_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::sql_entry_details >*
sql_info::mutable_server_tables() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.sql_info.server_tables)
  return &server_tables_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::sql_entry_details >&
sql_info::server_tables() const {
  // @@protoc_insertion_point(field_list:draiosproto.sql_info.server_tables)
  return server_tables_;
}

// repeated .draiosproto.sql_entry_details client_tables = 6;
int sql_info::client_tables_size() const {
  return client_tables_.size();
}
void sql_info::clear_client_tables() {
  client_tables_.Clear();
}
const ::draiosproto::sql_entry_details& sql_info::client_tables(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.sql_info.client_tables)
  return client_tables_.Get(index);
}
::draiosproto::sql_entry_details* sql_info::mutable_client_tables(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.sql_info.client_tables)
  return client_tables_.Mutable(index);
}
::draiosproto::sql_entry_details* sql_info::add_client_tables() {
  // @@protoc_insertion_point(field_add:draiosproto.sql_info.client_tables)
  return client_tables_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::sql_entry_details >*
sql_info::mutable_client_tables() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.sql_info.client_tables)
  return &client_tables_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::sql_entry_details >&
sql_info::client_tables() const {
  // @@protoc_insertion_point(field_list:draiosproto.sql_info.client_tables)
  return client_tables_;
}

inline const sql_info* sql_info::internal_default_instance() {
  return &sql_info_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongodb_collection_details::kNameFieldNumber;
const int mongodb_collection_details::kCountersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongodb_collection_details::mongodb_collection_details()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.mongodb_collection_details)
}

void mongodb_collection_details::InitAsDefaultInstance() {
  counters_ = const_cast< ::draiosproto::counter_proto_entry*>(
      ::draiosproto::counter_proto_entry::internal_default_instance());
}

mongodb_collection_details::mongodb_collection_details(const mongodb_collection_details& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.mongodb_collection_details)
}

void mongodb_collection_details::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  counters_ = NULL;
}

mongodb_collection_details::~mongodb_collection_details() {
  // @@protoc_insertion_point(destructor:draiosproto.mongodb_collection_details)
  SharedDtor();
}

void mongodb_collection_details::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &mongodb_collection_details_default_instance_.get()) {
    delete counters_;
  }
}

void mongodb_collection_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mongodb_collection_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mongodb_collection_details_descriptor_;
}

const mongodb_collection_details& mongodb_collection_details::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<mongodb_collection_details> mongodb_collection_details_default_instance_;

mongodb_collection_details* mongodb_collection_details::New(::google::protobuf::Arena* arena) const {
  mongodb_collection_details* n = new mongodb_collection_details;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mongodb_collection_details::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.mongodb_collection_details)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_counters()) {
      if (counters_ != NULL) counters_->::draiosproto::counter_proto_entry::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool mongodb_collection_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.mongodb_collection_details)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.mongodb_collection_details.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_counters;
        break;
      }

      // required .draiosproto.counter_proto_entry counters = 2;
      case 2: {
        if (tag == 18) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.mongodb_collection_details)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.mongodb_collection_details)
  return false;
#undef DO_
}

void mongodb_collection_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.mongodb_collection_details)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mongodb_collection_details.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->counters_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.mongodb_collection_details)
}

::google::protobuf::uint8* mongodb_collection_details::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.mongodb_collection_details)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mongodb_collection_details.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->counters_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.mongodb_collection_details)
  return target;
}

size_t mongodb_collection_details::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.mongodb_collection_details)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_counters()) {
    // required .draiosproto.counter_proto_entry counters = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counters_);
  }

  return total_size;
}
size_t mongodb_collection_details::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.mongodb_collection_details)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .draiosproto.counter_proto_entry counters = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counters_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mongodb_collection_details::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.mongodb_collection_details)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const mongodb_collection_details* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mongodb_collection_details>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.mongodb_collection_details)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.mongodb_collection_details)
    UnsafeMergeFrom(*source);
  }
}

void mongodb_collection_details::MergeFrom(const mongodb_collection_details& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.mongodb_collection_details)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void mongodb_collection_details::UnsafeMergeFrom(const mongodb_collection_details& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_counters()) {
      mutable_counters()->::draiosproto::counter_proto_entry::MergeFrom(from.counters());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void mongodb_collection_details::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.mongodb_collection_details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongodb_collection_details::CopyFrom(const mongodb_collection_details& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.mongodb_collection_details)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool mongodb_collection_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_counters()) {
    if (!this->counters_->IsInitialized()) return false;
  }
  return true;
}

void mongodb_collection_details::Swap(mongodb_collection_details* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongodb_collection_details::InternalSwap(mongodb_collection_details* other) {
  name_.Swap(&other->name_);
  std::swap(counters_, other->counters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mongodb_collection_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mongodb_collection_details_descriptor_;
  metadata.reflection = mongodb_collection_details_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mongodb_collection_details

// required string name = 1;
bool mongodb_collection_details::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mongodb_collection_details::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void mongodb_collection_details::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void mongodb_collection_details::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& mongodb_collection_details::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.mongodb_collection_details.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mongodb_collection_details::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.mongodb_collection_details.name)
}
void mongodb_collection_details::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.mongodb_collection_details.name)
}
void mongodb_collection_details::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.mongodb_collection_details.name)
}
::std::string* mongodb_collection_details::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.mongodb_collection_details.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mongodb_collection_details::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.mongodb_collection_details.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mongodb_collection_details::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.mongodb_collection_details.name)
}

// required .draiosproto.counter_proto_entry counters = 2;
bool mongodb_collection_details::has_counters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void mongodb_collection_details::set_has_counters() {
  _has_bits_[0] |= 0x00000002u;
}
void mongodb_collection_details::clear_has_counters() {
  _has_bits_[0] &= ~0x00000002u;
}
void mongodb_collection_details::clear_counters() {
  if (counters_ != NULL) counters_->::draiosproto::counter_proto_entry::Clear();
  clear_has_counters();
}
const ::draiosproto::counter_proto_entry& mongodb_collection_details::counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.mongodb_collection_details.counters)
  return counters_ != NULL ? *counters_
                         : *::draiosproto::counter_proto_entry::internal_default_instance();
}
::draiosproto::counter_proto_entry* mongodb_collection_details::mutable_counters() {
  set_has_counters();
  if (counters_ == NULL) {
    counters_ = new ::draiosproto::counter_proto_entry;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.mongodb_collection_details.counters)
  return counters_;
}
::draiosproto::counter_proto_entry* mongodb_collection_details::release_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.mongodb_collection_details.counters)
  clear_has_counters();
  ::draiosproto::counter_proto_entry* temp = counters_;
  counters_ = NULL;
  return temp;
}
void mongodb_collection_details::set_allocated_counters(::draiosproto::counter_proto_entry* counters) {
  delete counters_;
  counters_ = counters;
  if (counters) {
    set_has_counters();
  } else {
    clear_has_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.mongodb_collection_details.counters)
}

inline const mongodb_collection_details* mongodb_collection_details::internal_default_instance() {
  return &mongodb_collection_details_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongodb_op_type_details::kOpFieldNumber;
const int mongodb_op_type_details::kCountersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongodb_op_type_details::mongodb_op_type_details()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.mongodb_op_type_details)
}

void mongodb_op_type_details::InitAsDefaultInstance() {
  counters_ = const_cast< ::draiosproto::counter_proto_entry*>(
      ::draiosproto::counter_proto_entry::internal_default_instance());
}

mongodb_op_type_details::mongodb_op_type_details(const mongodb_op_type_details& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.mongodb_op_type_details)
}

void mongodb_op_type_details::SharedCtor() {
  _cached_size_ = 0;
  counters_ = NULL;
  op_ = 0;
}

mongodb_op_type_details::~mongodb_op_type_details() {
  // @@protoc_insertion_point(destructor:draiosproto.mongodb_op_type_details)
  SharedDtor();
}

void mongodb_op_type_details::SharedDtor() {
  if (this != &mongodb_op_type_details_default_instance_.get()) {
    delete counters_;
  }
}

void mongodb_op_type_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mongodb_op_type_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mongodb_op_type_details_descriptor_;
}

const mongodb_op_type_details& mongodb_op_type_details::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<mongodb_op_type_details> mongodb_op_type_details_default_instance_;

mongodb_op_type_details* mongodb_op_type_details::New(::google::protobuf::Arena* arena) const {
  mongodb_op_type_details* n = new mongodb_op_type_details;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mongodb_op_type_details::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.mongodb_op_type_details)
  if (_has_bits_[0 / 32] & 3u) {
    op_ = 0;
    if (has_counters()) {
      if (counters_ != NULL) counters_->::draiosproto::counter_proto_entry::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool mongodb_op_type_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.mongodb_op_type_details)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.mongodb_op_type op = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::mongodb_op_type_IsValid(value)) {
            set_op(static_cast< ::draiosproto::mongodb_op_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_counters;
        break;
      }

      // required .draiosproto.counter_proto_entry counters = 2;
      case 2: {
        if (tag == 18) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.mongodb_op_type_details)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.mongodb_op_type_details)
  return false;
#undef DO_
}

void mongodb_op_type_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.mongodb_op_type_details)
  // required .draiosproto.mongodb_op_type op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->counters_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.mongodb_op_type_details)
}

::google::protobuf::uint8* mongodb_op_type_details::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.mongodb_op_type_details)
  // required .draiosproto.mongodb_op_type op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // required .draiosproto.counter_proto_entry counters = 2;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->counters_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.mongodb_op_type_details)
  return target;
}

size_t mongodb_op_type_details::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.mongodb_op_type_details)
  size_t total_size = 0;

  if (has_op()) {
    // required .draiosproto.mongodb_op_type op = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  if (has_counters()) {
    // required .draiosproto.counter_proto_entry counters = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counters_);
  }

  return total_size;
}
size_t mongodb_op_type_details::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.mongodb_op_type_details)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .draiosproto.mongodb_op_type op = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());

    // required .draiosproto.counter_proto_entry counters = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counters_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mongodb_op_type_details::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.mongodb_op_type_details)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const mongodb_op_type_details* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mongodb_op_type_details>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.mongodb_op_type_details)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.mongodb_op_type_details)
    UnsafeMergeFrom(*source);
  }
}

void mongodb_op_type_details::MergeFrom(const mongodb_op_type_details& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.mongodb_op_type_details)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void mongodb_op_type_details::UnsafeMergeFrom(const mongodb_op_type_details& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_counters()) {
      mutable_counters()->::draiosproto::counter_proto_entry::MergeFrom(from.counters());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void mongodb_op_type_details::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.mongodb_op_type_details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongodb_op_type_details::CopyFrom(const mongodb_op_type_details& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.mongodb_op_type_details)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool mongodb_op_type_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_counters()) {
    if (!this->counters_->IsInitialized()) return false;
  }
  return true;
}

void mongodb_op_type_details::Swap(mongodb_op_type_details* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongodb_op_type_details::InternalSwap(mongodb_op_type_details* other) {
  std::swap(op_, other->op_);
  std::swap(counters_, other->counters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mongodb_op_type_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mongodb_op_type_details_descriptor_;
  metadata.reflection = mongodb_op_type_details_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mongodb_op_type_details

// required .draiosproto.mongodb_op_type op = 1;
bool mongodb_op_type_details::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mongodb_op_type_details::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
void mongodb_op_type_details::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
void mongodb_op_type_details::clear_op() {
  op_ = 0;
  clear_has_op();
}
::draiosproto::mongodb_op_type mongodb_op_type_details::op() const {
  // @@protoc_insertion_point(field_get:draiosproto.mongodb_op_type_details.op)
  return static_cast< ::draiosproto::mongodb_op_type >(op_);
}
void mongodb_op_type_details::set_op(::draiosproto::mongodb_op_type value) {
  assert(::draiosproto::mongodb_op_type_IsValid(value));
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.mongodb_op_type_details.op)
}

// required .draiosproto.counter_proto_entry counters = 2;
bool mongodb_op_type_details::has_counters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void mongodb_op_type_details::set_has_counters() {
  _has_bits_[0] |= 0x00000002u;
}
void mongodb_op_type_details::clear_has_counters() {
  _has_bits_[0] &= ~0x00000002u;
}
void mongodb_op_type_details::clear_counters() {
  if (counters_ != NULL) counters_->::draiosproto::counter_proto_entry::Clear();
  clear_has_counters();
}
const ::draiosproto::counter_proto_entry& mongodb_op_type_details::counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.mongodb_op_type_details.counters)
  return counters_ != NULL ? *counters_
                         : *::draiosproto::counter_proto_entry::internal_default_instance();
}
::draiosproto::counter_proto_entry* mongodb_op_type_details::mutable_counters() {
  set_has_counters();
  if (counters_ == NULL) {
    counters_ = new ::draiosproto::counter_proto_entry;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.mongodb_op_type_details.counters)
  return counters_;
}
::draiosproto::counter_proto_entry* mongodb_op_type_details::release_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.mongodb_op_type_details.counters)
  clear_has_counters();
  ::draiosproto::counter_proto_entry* temp = counters_;
  counters_ = NULL;
  return temp;
}
void mongodb_op_type_details::set_allocated_counters(::draiosproto::counter_proto_entry* counters) {
  delete counters_;
  counters_ = counters;
  if (counters) {
    set_has_counters();
  } else {
    clear_has_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.mongodb_op_type_details.counters)
}

inline const mongodb_op_type_details* mongodb_op_type_details::internal_default_instance() {
  return &mongodb_op_type_details_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongodb_info::kServersOpsFieldNumber;
const int mongodb_info::kClientOpsFieldNumber;
const int mongodb_info::kServerCollectionsFieldNumber;
const int mongodb_info::kClientCollectionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongodb_info::mongodb_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.mongodb_info)
}

void mongodb_info::InitAsDefaultInstance() {
}

mongodb_info::mongodb_info(const mongodb_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.mongodb_info)
}

void mongodb_info::SharedCtor() {
  _cached_size_ = 0;
}

mongodb_info::~mongodb_info() {
  // @@protoc_insertion_point(destructor:draiosproto.mongodb_info)
  SharedDtor();
}

void mongodb_info::SharedDtor() {
}

void mongodb_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mongodb_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mongodb_info_descriptor_;
}

const mongodb_info& mongodb_info::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<mongodb_info> mongodb_info_default_instance_;

mongodb_info* mongodb_info::New(::google::protobuf::Arena* arena) const {
  mongodb_info* n = new mongodb_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mongodb_info::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.mongodb_info)
  servers_ops_.Clear();
  client_ops_.Clear();
  server_collections_.Clear();
  client_collections_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool mongodb_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.mongodb_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.mongodb_op_type_details servers_ops = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_servers_ops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_servers_ops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_servers_ops;
        if (input->ExpectTag(18)) goto parse_loop_client_ops;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.mongodb_op_type_details client_ops = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_client_ops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_client_ops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_client_ops;
        if (input->ExpectTag(26)) goto parse_loop_server_collections;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.mongodb_collection_details server_collections = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_server_collections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_server_collections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_server_collections;
        if (input->ExpectTag(34)) goto parse_loop_client_collections;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.mongodb_collection_details client_collections = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_client_collections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_client_collections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_client_collections;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.mongodb_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.mongodb_info)
  return false;
#undef DO_
}

void mongodb_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.mongodb_info)
  // repeated .draiosproto.mongodb_op_type_details servers_ops = 1;
  for (unsigned int i = 0, n = this->servers_ops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers_ops(i), output);
  }

  // repeated .draiosproto.mongodb_op_type_details client_ops = 2;
  for (unsigned int i = 0, n = this->client_ops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client_ops(i), output);
  }

  // repeated .draiosproto.mongodb_collection_details server_collections = 3;
  for (unsigned int i = 0, n = this->server_collections_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->server_collections(i), output);
  }

  // repeated .draiosproto.mongodb_collection_details client_collections = 4;
  for (unsigned int i = 0, n = this->client_collections_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->client_collections(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.mongodb_info)
}

::google::protobuf::uint8* mongodb_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.mongodb_info)
  // repeated .draiosproto.mongodb_op_type_details servers_ops = 1;
  for (unsigned int i = 0, n = this->servers_ops_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->servers_ops(i), false, target);
  }

  // repeated .draiosproto.mongodb_op_type_details client_ops = 2;
  for (unsigned int i = 0, n = this->client_ops_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->client_ops(i), false, target);
  }

  // repeated .draiosproto.mongodb_collection_details server_collections = 3;
  for (unsigned int i = 0, n = this->server_collections_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->server_collections(i), false, target);
  }

  // repeated .draiosproto.mongodb_collection_details client_collections = 4;
  for (unsigned int i = 0, n = this->client_collections_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->client_collections(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.mongodb_info)
  return target;
}

size_t mongodb_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.mongodb_info)
  size_t total_size = 0;

  // repeated .draiosproto.mongodb_op_type_details servers_ops = 1;
  {
    unsigned int count = this->servers_ops_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servers_ops(i));
    }
  }

  // repeated .draiosproto.mongodb_op_type_details client_ops = 2;
  {
    unsigned int count = this->client_ops_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_ops(i));
    }
  }

  // repeated .draiosproto.mongodb_collection_details server_collections = 3;
  {
    unsigned int count = this->server_collections_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_collections(i));
    }
  }

  // repeated .draiosproto.mongodb_collection_details client_collections = 4;
  {
    unsigned int count = this->client_collections_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_collections(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mongodb_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.mongodb_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const mongodb_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mongodb_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.mongodb_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.mongodb_info)
    UnsafeMergeFrom(*source);
  }
}

void mongodb_info::MergeFrom(const mongodb_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.mongodb_info)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void mongodb_info::UnsafeMergeFrom(const mongodb_info& from) {
  GOOGLE_DCHECK(&from != this);
  servers_ops_.MergeFrom(from.servers_ops_);
  client_ops_.MergeFrom(from.client_ops_);
  server_collections_.MergeFrom(from.server_collections_);
  client_collections_.MergeFrom(from.client_collections_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void mongodb_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.mongodb_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongodb_info::CopyFrom(const mongodb_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.mongodb_info)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool mongodb_info::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->servers_ops())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->client_ops())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->server_collections())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->client_collections())) return false;
  return true;
}

void mongodb_info::Swap(mongodb_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongodb_info::InternalSwap(mongodb_info* other) {
  servers_ops_.UnsafeArenaSwap(&other->servers_ops_);
  client_ops_.UnsafeArenaSwap(&other->client_ops_);
  server_collections_.UnsafeArenaSwap(&other->server_collections_);
  client_collections_.UnsafeArenaSwap(&other->client_collections_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mongodb_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mongodb_info_descriptor_;
  metadata.reflection = mongodb_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mongodb_info

// repeated .draiosproto.mongodb_op_type_details servers_ops = 1;
int mongodb_info::servers_ops_size() const {
  return servers_ops_.size();
}
void mongodb_info::clear_servers_ops() {
  servers_ops_.Clear();
}
const ::draiosproto::mongodb_op_type_details& mongodb_info::servers_ops(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.mongodb_info.servers_ops)
  return servers_ops_.Get(index);
}
::draiosproto::mongodb_op_type_details* mongodb_info::mutable_servers_ops(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.mongodb_info.servers_ops)
  return servers_ops_.Mutable(index);
}
::draiosproto::mongodb_op_type_details* mongodb_info::add_servers_ops() {
  // @@protoc_insertion_point(field_add:draiosproto.mongodb_info.servers_ops)
  return servers_ops_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::mongodb_op_type_details >*
mongodb_info::mutable_servers_ops() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.mongodb_info.servers_ops)
  return &servers_ops_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::mongodb_op_type_details >&
mongodb_info::servers_ops() const {
  // @@protoc_insertion_point(field_list:draiosproto.mongodb_info.servers_ops)
  return servers_ops_;
}

// repeated .draiosproto.mongodb_op_type_details client_ops = 2;
int mongodb_info::client_ops_size() const {
  return client_ops_.size();
}
void mongodb_info::clear_client_ops() {
  client_ops_.Clear();
}
const ::draiosproto::mongodb_op_type_details& mongodb_info::client_ops(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.mongodb_info.client_ops)
  return client_ops_.Get(index);
}
::draiosproto::mongodb_op_type_details* mongodb_info::mutable_client_ops(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.mongodb_info.client_ops)
  return client_ops_.Mutable(index);
}
::draiosproto::mongodb_op_type_details* mongodb_info::add_client_ops() {
  // @@protoc_insertion_point(field_add:draiosproto.mongodb_info.client_ops)
  return client_ops_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::mongodb_op_type_details >*
mongodb_info::mutable_client_ops() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.mongodb_info.client_ops)
  return &client_ops_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::mongodb_op_type_details >&
mongodb_info::client_ops() const {
  // @@protoc_insertion_point(field_list:draiosproto.mongodb_info.client_ops)
  return client_ops_;
}

// repeated .draiosproto.mongodb_collection_details server_collections = 3;
int mongodb_info::server_collections_size() const {
  return server_collections_.size();
}
void mongodb_info::clear_server_collections() {
  server_collections_.Clear();
}
const ::draiosproto::mongodb_collection_details& mongodb_info::server_collections(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.mongodb_info.server_collections)
  return server_collections_.Get(index);
}
::draiosproto::mongodb_collection_details* mongodb_info::mutable_server_collections(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.mongodb_info.server_collections)
  return server_collections_.Mutable(index);
}
::draiosproto::mongodb_collection_details* mongodb_info::add_server_collections() {
  // @@protoc_insertion_point(field_add:draiosproto.mongodb_info.server_collections)
  return server_collections_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::mongodb_collection_details >*
mongodb_info::mutable_server_collections() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.mongodb_info.server_collections)
  return &server_collections_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::mongodb_collection_details >&
mongodb_info::server_collections() const {
  // @@protoc_insertion_point(field_list:draiosproto.mongodb_info.server_collections)
  return server_collections_;
}

// repeated .draiosproto.mongodb_collection_details client_collections = 4;
int mongodb_info::client_collections_size() const {
  return client_collections_.size();
}
void mongodb_info::clear_client_collections() {
  client_collections_.Clear();
}
const ::draiosproto::mongodb_collection_details& mongodb_info::client_collections(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.mongodb_info.client_collections)
  return client_collections_.Get(index);
}
::draiosproto::mongodb_collection_details* mongodb_info::mutable_client_collections(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.mongodb_info.client_collections)
  return client_collections_.Mutable(index);
}
::draiosproto::mongodb_collection_details* mongodb_info::add_client_collections() {
  // @@protoc_insertion_point(field_add:draiosproto.mongodb_info.client_collections)
  return client_collections_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::mongodb_collection_details >*
mongodb_info::mutable_client_collections() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.mongodb_info.client_collections)
  return &client_collections_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::mongodb_collection_details >&
mongodb_info::client_collections() const {
  // @@protoc_insertion_point(field_list:draiosproto.mongodb_info.client_collections)
  return client_collections_;
}

inline const mongodb_info* mongodb_info::internal_default_instance() {
  return &mongodb_info_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int jmx_attribute::kNameFieldNumber;
const int jmx_attribute::kValueFieldNumber;
const int jmx_attribute::kAliasFieldNumber;
const int jmx_attribute::kTypeFieldNumber;
const int jmx_attribute::kUnitFieldNumber;
const int jmx_attribute::kScaleFieldNumber;
const int jmx_attribute::kSubattributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

jmx_attribute::jmx_attribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.jmx_attribute)
}

void jmx_attribute::InitAsDefaultInstance() {
}

jmx_attribute::jmx_attribute(const jmx_attribute& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.jmx_attribute)
}

void jmx_attribute::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&value_) + sizeof(scale_));
  type_ = 1;
}

jmx_attribute::~jmx_attribute() {
  // @@protoc_insertion_point(destructor:draiosproto.jmx_attribute)
  SharedDtor();
}

void jmx_attribute::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void jmx_attribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* jmx_attribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return jmx_attribute_descriptor_;
}

const jmx_attribute& jmx_attribute::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<jmx_attribute> jmx_attribute_default_instance_;

jmx_attribute* jmx_attribute::New(::google::protobuf::Arena* arena) const {
  jmx_attribute* n = new jmx_attribute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void jmx_attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.jmx_attribute)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(jmx_attribute, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<jmx_attribute*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(value_, scale_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_alias()) {
      alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  subattributes_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool jmx_attribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.jmx_attribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.jmx_attribute.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // optional double value = 2;
      case 2: {
        if (tag == 17) {
         parse_value:
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_subattributes;
        break;
      }

      // repeated .draiosproto.jmx_attribute subattributes = 3;
      case 3: {
        if (tag == 26) {
         parse_subattributes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_subattributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_subattributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_subattributes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_alias;
        break;
      }

      // optional string alias = 5;
      case 5: {
        if (tag == 42) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.jmx_attribute.alias");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional .draiosproto.jmx_metric_type type = 7;
      case 7: {
        if (tag == 56) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::jmx_metric_type_IsValid(value)) {
            set_type(static_cast< ::draiosproto::jmx_metric_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_unit;
        break;
      }

      // optional .draiosproto.unit unit = 8;
      case 8: {
        if (tag == 64) {
         parse_unit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::unit_IsValid(value)) {
            set_unit(static_cast< ::draiosproto::unit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_scale;
        break;
      }

      // optional .draiosproto.scale scale = 9;
      case 9: {
        if (tag == 72) {
         parse_scale:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::scale_IsValid(value)) {
            set_scale(static_cast< ::draiosproto::scale >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.jmx_attribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.jmx_attribute)
  return false;
#undef DO_
}

void jmx_attribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.jmx_attribute)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.jmx_attribute.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  // repeated .draiosproto.jmx_attribute subattributes = 3;
  for (unsigned int i = 0, n = this->subattributes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subattributes(i), output);
  }

  // optional string alias = 5;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.jmx_attribute.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->alias(), output);
  }

  // optional .draiosproto.jmx_metric_type type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // optional .draiosproto.unit unit = 8;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->unit(), output);
  }

  // optional .draiosproto.scale scale = 9;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.jmx_attribute)
}

::google::protobuf::uint8* jmx_attribute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.jmx_attribute)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.jmx_attribute.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  // repeated .draiosproto.jmx_attribute subattributes = 3;
  for (unsigned int i = 0, n = this->subattributes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->subattributes(i), false, target);
  }

  // optional string alias = 5;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.jmx_attribute.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->alias(), target);
  }

  // optional .draiosproto.jmx_metric_type type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  // optional .draiosproto.unit unit = 8;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->unit(), target);
  }

  // optional .draiosproto.scale scale = 9;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.jmx_attribute)
  return target;
}

size_t jmx_attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.jmx_attribute)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional string alias = 5;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional .draiosproto.jmx_metric_type type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .draiosproto.unit unit = 8;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
    }

    // optional .draiosproto.scale scale = 9;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scale());
    }

  }
  // repeated .draiosproto.jmx_attribute subattributes = 3;
  {
    unsigned int count = this->subattributes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subattributes(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void jmx_attribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.jmx_attribute)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const jmx_attribute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const jmx_attribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.jmx_attribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.jmx_attribute)
    UnsafeMergeFrom(*source);
  }
}

void jmx_attribute::MergeFrom(const jmx_attribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.jmx_attribute)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void jmx_attribute::UnsafeMergeFrom(const jmx_attribute& from) {
  GOOGLE_DCHECK(&from != this);
  subattributes_.MergeFrom(from.subattributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_alias()) {
      set_has_alias();
      alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void jmx_attribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.jmx_attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void jmx_attribute::CopyFrom(const jmx_attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.jmx_attribute)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool jmx_attribute::IsInitialized() const {

  return true;
}

void jmx_attribute::Swap(jmx_attribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void jmx_attribute::InternalSwap(jmx_attribute* other) {
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  alias_.Swap(&other->alias_);
  std::swap(type_, other->type_);
  std::swap(unit_, other->unit_);
  std::swap(scale_, other->scale_);
  subattributes_.UnsafeArenaSwap(&other->subattributes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata jmx_attribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = jmx_attribute_descriptor_;
  metadata.reflection = jmx_attribute_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// jmx_attribute

// optional string name = 1;
bool jmx_attribute::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void jmx_attribute::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void jmx_attribute::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void jmx_attribute::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& jmx_attribute::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.jmx_attribute.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void jmx_attribute::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.jmx_attribute.name)
}
void jmx_attribute::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.jmx_attribute.name)
}
void jmx_attribute::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.jmx_attribute.name)
}
::std::string* jmx_attribute::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.jmx_attribute.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* jmx_attribute::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.jmx_attribute.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void jmx_attribute::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.jmx_attribute.name)
}

// optional double value = 2;
bool jmx_attribute::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void jmx_attribute::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void jmx_attribute::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void jmx_attribute::clear_value() {
  value_ = 0;
  clear_has_value();
}
double jmx_attribute::value() const {
  // @@protoc_insertion_point(field_get:draiosproto.jmx_attribute.value)
  return value_;
}
void jmx_attribute::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.jmx_attribute.value)
}

// optional string alias = 5;
bool jmx_attribute::has_alias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void jmx_attribute::set_has_alias() {
  _has_bits_[0] |= 0x00000004u;
}
void jmx_attribute::clear_has_alias() {
  _has_bits_[0] &= ~0x00000004u;
}
void jmx_attribute::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
const ::std::string& jmx_attribute::alias() const {
  // @@protoc_insertion_point(field_get:draiosproto.jmx_attribute.alias)
  return alias_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void jmx_attribute::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.jmx_attribute.alias)
}
void jmx_attribute::set_alias(const char* value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.jmx_attribute.alias)
}
void jmx_attribute::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.jmx_attribute.alias)
}
::std::string* jmx_attribute::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:draiosproto.jmx_attribute.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* jmx_attribute::release_alias() {
  // @@protoc_insertion_point(field_release:draiosproto.jmx_attribute.alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void jmx_attribute::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.jmx_attribute.alias)
}

// optional .draiosproto.jmx_metric_type type = 7;
bool jmx_attribute::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void jmx_attribute::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void jmx_attribute::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void jmx_attribute::clear_type() {
  type_ = 1;
  clear_has_type();
}
::draiosproto::jmx_metric_type jmx_attribute::type() const {
  // @@protoc_insertion_point(field_get:draiosproto.jmx_attribute.type)
  return static_cast< ::draiosproto::jmx_metric_type >(type_);
}
void jmx_attribute::set_type(::draiosproto::jmx_metric_type value) {
  assert(::draiosproto::jmx_metric_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.jmx_attribute.type)
}

// optional .draiosproto.unit unit = 8;
bool jmx_attribute::has_unit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void jmx_attribute::set_has_unit() {
  _has_bits_[0] |= 0x00000010u;
}
void jmx_attribute::clear_has_unit() {
  _has_bits_[0] &= ~0x00000010u;
}
void jmx_attribute::clear_unit() {
  unit_ = 0;
  clear_has_unit();
}
::draiosproto::unit jmx_attribute::unit() const {
  // @@protoc_insertion_point(field_get:draiosproto.jmx_attribute.unit)
  return static_cast< ::draiosproto::unit >(unit_);
}
void jmx_attribute::set_unit(::draiosproto::unit value) {
  assert(::draiosproto::unit_IsValid(value));
  set_has_unit();
  unit_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.jmx_attribute.unit)
}

// optional .draiosproto.scale scale = 9;
bool jmx_attribute::has_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void jmx_attribute::set_has_scale() {
  _has_bits_[0] |= 0x00000020u;
}
void jmx_attribute::clear_has_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
void jmx_attribute::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
::draiosproto::scale jmx_attribute::scale() const {
  // @@protoc_insertion_point(field_get:draiosproto.jmx_attribute.scale)
  return static_cast< ::draiosproto::scale >(scale_);
}
void jmx_attribute::set_scale(::draiosproto::scale value) {
  assert(::draiosproto::scale_IsValid(value));
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.jmx_attribute.scale)
}

// repeated .draiosproto.jmx_attribute subattributes = 3;
int jmx_attribute::subattributes_size() const {
  return subattributes_.size();
}
void jmx_attribute::clear_subattributes() {
  subattributes_.Clear();
}
const ::draiosproto::jmx_attribute& jmx_attribute::subattributes(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.jmx_attribute.subattributes)
  return subattributes_.Get(index);
}
::draiosproto::jmx_attribute* jmx_attribute::mutable_subattributes(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.jmx_attribute.subattributes)
  return subattributes_.Mutable(index);
}
::draiosproto::jmx_attribute* jmx_attribute::add_subattributes() {
  // @@protoc_insertion_point(field_add:draiosproto.jmx_attribute.subattributes)
  return subattributes_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::jmx_attribute >*
jmx_attribute::mutable_subattributes() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.jmx_attribute.subattributes)
  return &subattributes_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::jmx_attribute >&
jmx_attribute::subattributes() const {
  // @@protoc_insertion_point(field_list:draiosproto.jmx_attribute.subattributes)
  return subattributes_;
}

inline const jmx_attribute* jmx_attribute::internal_default_instance() {
  return &jmx_attribute_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int jmx_bean::kNameFieldNumber;
const int jmx_bean::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

jmx_bean::jmx_bean()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.jmx_bean)
}

void jmx_bean::InitAsDefaultInstance() {
}

jmx_bean::jmx_bean(const jmx_bean& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.jmx_bean)
}

void jmx_bean::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

jmx_bean::~jmx_bean() {
  // @@protoc_insertion_point(destructor:draiosproto.jmx_bean)
  SharedDtor();
}

void jmx_bean::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void jmx_bean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* jmx_bean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return jmx_bean_descriptor_;
}

const jmx_bean& jmx_bean::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<jmx_bean> jmx_bean_default_instance_;

jmx_bean* jmx_bean::New(::google::protobuf::Arena* arena) const {
  jmx_bean* n = new jmx_bean;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void jmx_bean::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.jmx_bean)
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  attributes_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool jmx_bean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.jmx_bean)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.jmx_bean.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attributes;
        break;
      }

      // repeated .draiosproto.jmx_attribute attributes = 2;
      case 2: {
        if (tag == 18) {
         parse_attributes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_attributes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.jmx_bean)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.jmx_bean)
  return false;
#undef DO_
}

void jmx_bean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.jmx_bean)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.jmx_bean.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .draiosproto.jmx_attribute attributes = 2;
  for (unsigned int i = 0, n = this->attributes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attributes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.jmx_bean)
}

::google::protobuf::uint8* jmx_bean::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.jmx_bean)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.jmx_bean.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .draiosproto.jmx_attribute attributes = 2;
  for (unsigned int i = 0, n = this->attributes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->attributes(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.jmx_bean)
  return target;
}

size_t jmx_bean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.jmx_bean)
  size_t total_size = 0;

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .draiosproto.jmx_attribute attributes = 2;
  {
    unsigned int count = this->attributes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void jmx_bean::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.jmx_bean)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const jmx_bean* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const jmx_bean>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.jmx_bean)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.jmx_bean)
    UnsafeMergeFrom(*source);
  }
}

void jmx_bean::MergeFrom(const jmx_bean& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.jmx_bean)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void jmx_bean::UnsafeMergeFrom(const jmx_bean& from) {
  GOOGLE_DCHECK(&from != this);
  attributes_.MergeFrom(from.attributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void jmx_bean::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.jmx_bean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void jmx_bean::CopyFrom(const jmx_bean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.jmx_bean)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool jmx_bean::IsInitialized() const {

  return true;
}

void jmx_bean::Swap(jmx_bean* other) {
  if (other == this) return;
  InternalSwap(other);
}
void jmx_bean::InternalSwap(jmx_bean* other) {
  name_.Swap(&other->name_);
  attributes_.UnsafeArenaSwap(&other->attributes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata jmx_bean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = jmx_bean_descriptor_;
  metadata.reflection = jmx_bean_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// jmx_bean

// optional string name = 1;
bool jmx_bean::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void jmx_bean::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void jmx_bean::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void jmx_bean::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& jmx_bean::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.jmx_bean.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void jmx_bean::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.jmx_bean.name)
}
void jmx_bean::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.jmx_bean.name)
}
void jmx_bean::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.jmx_bean.name)
}
::std::string* jmx_bean::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.jmx_bean.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* jmx_bean::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.jmx_bean.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void jmx_bean::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.jmx_bean.name)
}

// repeated .draiosproto.jmx_attribute attributes = 2;
int jmx_bean::attributes_size() const {
  return attributes_.size();
}
void jmx_bean::clear_attributes() {
  attributes_.Clear();
}
const ::draiosproto::jmx_attribute& jmx_bean::attributes(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.jmx_bean.attributes)
  return attributes_.Get(index);
}
::draiosproto::jmx_attribute* jmx_bean::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.jmx_bean.attributes)
  return attributes_.Mutable(index);
}
::draiosproto::jmx_attribute* jmx_bean::add_attributes() {
  // @@protoc_insertion_point(field_add:draiosproto.jmx_bean.attributes)
  return attributes_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::jmx_attribute >*
jmx_bean::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.jmx_bean.attributes)
  return &attributes_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::jmx_attribute >&
jmx_bean::attributes() const {
  // @@protoc_insertion_point(field_list:draiosproto.jmx_bean.attributes)
  return attributes_;
}

inline const jmx_bean* jmx_bean::internal_default_instance() {
  return &jmx_bean_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int java_info::kProcessNameFieldNumber;
const int java_info::kBeansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

java_info::java_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.java_info)
}

void java_info::InitAsDefaultInstance() {
}

java_info::java_info(const java_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.java_info)
}

void java_info::SharedCtor() {
  _cached_size_ = 0;
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

java_info::~java_info() {
  // @@protoc_insertion_point(destructor:draiosproto.java_info)
  SharedDtor();
}

void java_info::SharedDtor() {
  process_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void java_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* java_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return java_info_descriptor_;
}

const java_info& java_info::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<java_info> java_info_default_instance_;

java_info* java_info::New(::google::protobuf::Arena* arena) const {
  java_info* n = new java_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void java_info::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.java_info)
  if (has_process_name()) {
    process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  beans_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool java_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.java_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string process_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.java_info.process_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_beans;
        break;
      }

      // repeated .draiosproto.jmx_bean beans = 2;
      case 2: {
        if (tag == 18) {
         parse_beans:
          DO_(input->IncrementRecursionDepth());
         parse_loop_beans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_beans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_beans;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.java_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.java_info)
  return false;
#undef DO_
}

void java_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.java_info)
  // optional string process_name = 1;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.java_info.process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->process_name(), output);
  }

  // repeated .draiosproto.jmx_bean beans = 2;
  for (unsigned int i = 0, n = this->beans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->beans(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.java_info)
}

::google::protobuf::uint8* java_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.java_info)
  // optional string process_name = 1;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.java_info.process_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->process_name(), target);
  }

  // repeated .draiosproto.jmx_bean beans = 2;
  for (unsigned int i = 0, n = this->beans_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->beans(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.java_info)
  return target;
}

size_t java_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.java_info)
  size_t total_size = 0;

  // optional string process_name = 1;
  if (has_process_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->process_name());
  }

  // repeated .draiosproto.jmx_bean beans = 2;
  {
    unsigned int count = this->beans_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beans(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void java_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.java_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const java_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const java_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.java_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.java_info)
    UnsafeMergeFrom(*source);
  }
}

void java_info::MergeFrom(const java_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.java_info)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void java_info::UnsafeMergeFrom(const java_info& from) {
  GOOGLE_DCHECK(&from != this);
  beans_.MergeFrom(from.beans_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_process_name()) {
      set_has_process_name();
      process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void java_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.java_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void java_info::CopyFrom(const java_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.java_info)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool java_info::IsInitialized() const {

  return true;
}

void java_info::Swap(java_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void java_info::InternalSwap(java_info* other) {
  process_name_.Swap(&other->process_name_);
  beans_.UnsafeArenaSwap(&other->beans_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata java_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = java_info_descriptor_;
  metadata.reflection = java_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// java_info

// optional string process_name = 1;
bool java_info::has_process_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void java_info::set_has_process_name() {
  _has_bits_[0] |= 0x00000001u;
}
void java_info::clear_has_process_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void java_info::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_process_name();
}
const ::std::string& java_info::process_name() const {
  // @@protoc_insertion_point(field_get:draiosproto.java_info.process_name)
  return process_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void java_info::set_process_name(const ::std::string& value) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.java_info.process_name)
}
void java_info::set_process_name(const char* value) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.java_info.process_name)
}
void java_info::set_process_name(const char* value, size_t size) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.java_info.process_name)
}
::std::string* java_info::mutable_process_name() {
  set_has_process_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.java_info.process_name)
  return process_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* java_info::release_process_name() {
  // @@protoc_insertion_point(field_release:draiosproto.java_info.process_name)
  clear_has_process_name();
  return process_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void java_info::set_allocated_process_name(::std::string* process_name) {
  if (process_name != NULL) {
    set_has_process_name();
  } else {
    clear_has_process_name();
  }
  process_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.java_info.process_name)
}

// repeated .draiosproto.jmx_bean beans = 2;
int java_info::beans_size() const {
  return beans_.size();
}
void java_info::clear_beans() {
  beans_.Clear();
}
const ::draiosproto::jmx_bean& java_info::beans(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.java_info.beans)
  return beans_.Get(index);
}
::draiosproto::jmx_bean* java_info::mutable_beans(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.java_info.beans)
  return beans_.Mutable(index);
}
::draiosproto::jmx_bean* java_info::add_beans() {
  // @@protoc_insertion_point(field_add:draiosproto.java_info.beans)
  return beans_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::jmx_bean >*
java_info::mutable_beans() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.java_info.beans)
  return &beans_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::jmx_bean >&
java_info::beans() const {
  // @@protoc_insertion_point(field_list:draiosproto.java_info.beans)
  return beans_;
}

inline const java_info* java_info::internal_default_instance() {
  return &java_info_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int statsd_tag::kKeyFieldNumber;
const int statsd_tag::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

statsd_tag::statsd_tag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.statsd_tag)
}

void statsd_tag::InitAsDefaultInstance() {
}

statsd_tag::statsd_tag(const statsd_tag& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.statsd_tag)
}

void statsd_tag::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

statsd_tag::~statsd_tag() {
  // @@protoc_insertion_point(destructor:draiosproto.statsd_tag)
  SharedDtor();
}

void statsd_tag::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void statsd_tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statsd_tag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statsd_tag_descriptor_;
}

const statsd_tag& statsd_tag::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<statsd_tag> statsd_tag_default_instance_;

statsd_tag* statsd_tag::New(::google::protobuf::Arena* arena) const {
  statsd_tag* n = new statsd_tag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void statsd_tag::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.statsd_tag)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool statsd_tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.statsd_tag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.statsd_tag.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.statsd_tag.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.statsd_tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.statsd_tag)
  return false;
#undef DO_
}

void statsd_tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.statsd_tag)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.statsd_tag.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.statsd_tag.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.statsd_tag)
}

::google::protobuf::uint8* statsd_tag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.statsd_tag)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.statsd_tag.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.statsd_tag.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.statsd_tag)
  return target;
}

size_t statsd_tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.statsd_tag)
  size_t total_size = 0;

  // required string key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }
  // optional string value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statsd_tag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.statsd_tag)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const statsd_tag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const statsd_tag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.statsd_tag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.statsd_tag)
    UnsafeMergeFrom(*source);
  }
}

void statsd_tag::MergeFrom(const statsd_tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.statsd_tag)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void statsd_tag::UnsafeMergeFrom(const statsd_tag& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void statsd_tag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.statsd_tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statsd_tag::CopyFrom(const statsd_tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.statsd_tag)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool statsd_tag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void statsd_tag::Swap(statsd_tag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void statsd_tag::InternalSwap(statsd_tag* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata statsd_tag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statsd_tag_descriptor_;
  metadata.reflection = statsd_tag_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// statsd_tag

// required string key = 1;
bool statsd_tag::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void statsd_tag::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void statsd_tag::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void statsd_tag::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& statsd_tag::key() const {
  // @@protoc_insertion_point(field_get:draiosproto.statsd_tag.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void statsd_tag::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.statsd_tag.key)
}
void statsd_tag::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.statsd_tag.key)
}
void statsd_tag::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.statsd_tag.key)
}
::std::string* statsd_tag::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:draiosproto.statsd_tag.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* statsd_tag::release_key() {
  // @@protoc_insertion_point(field_release:draiosproto.statsd_tag.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void statsd_tag::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.statsd_tag.key)
}

// optional string value = 2;
bool statsd_tag::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void statsd_tag::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void statsd_tag::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void statsd_tag::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& statsd_tag::value() const {
  // @@protoc_insertion_point(field_get:draiosproto.statsd_tag.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void statsd_tag::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.statsd_tag.value)
}
void statsd_tag::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.statsd_tag.value)
}
void statsd_tag::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.statsd_tag.value)
}
::std::string* statsd_tag::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:draiosproto.statsd_tag.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* statsd_tag::release_value() {
  // @@protoc_insertion_point(field_release:draiosproto.statsd_tag.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void statsd_tag::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.statsd_tag.value)
}

inline const statsd_tag* statsd_tag::internal_default_instance() {
  return &statsd_tag_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int statsd_metric::kNameFieldNumber;
const int statsd_metric::kTagsFieldNumber;
const int statsd_metric::kTypeFieldNumber;
const int statsd_metric::kValueFieldNumber;
const int statsd_metric::kSumFieldNumber;
const int statsd_metric::kMinFieldNumber;
const int statsd_metric::kMaxFieldNumber;
const int statsd_metric::kCountFieldNumber;
const int statsd_metric::kMedianFieldNumber;
const int statsd_metric::kPercentile95FieldNumber;
const int statsd_metric::kPercentile99FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

statsd_metric::statsd_metric()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.statsd_metric)
}

void statsd_metric::InitAsDefaultInstance() {
}

statsd_metric::statsd_metric(const statsd_metric& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.statsd_metric)
}

void statsd_metric::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, reinterpret_cast<char*>(&percentile_99_) -
    reinterpret_cast<char*>(&value_) + sizeof(percentile_99_));
  type_ = 1;
}

statsd_metric::~statsd_metric() {
  // @@protoc_insertion_point(destructor:draiosproto.statsd_metric)
  SharedDtor();
}

void statsd_metric::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void statsd_metric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statsd_metric::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statsd_metric_descriptor_;
}

const statsd_metric& statsd_metric::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<statsd_metric> statsd_metric_default_instance_;

statsd_metric* statsd_metric::New(::google::protobuf::Arena* arena) const {
  statsd_metric* n = new statsd_metric;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void statsd_metric::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.statsd_metric)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(statsd_metric, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<statsd_metric*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 253u) {
    ZR_(value_, count_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 1;
  }
  ZR_(median_, percentile_99_);

#undef ZR_HELPER_
#undef ZR_

  tags_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool statsd_metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.statsd_metric)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.statsd_metric.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }

      // repeated .draiosproto.statsd_tag tags = 2;
      case 2: {
        if (tag == 18) {
         parse_tags:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_tags;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .draiosproto.statsd_metric_type type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::statsd_metric_type_IsValid(value)) {
            set_type(static_cast< ::draiosproto::statsd_metric_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_value;
        break;
      }

      // optional double value = 4;
      case 4: {
        if (tag == 33) {
         parse_value:
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_sum;
        break;
      }

      // optional double sum = 5;
      case 5: {
        if (tag == 41) {
         parse_sum:
          set_has_sum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_min;
        break;
      }

      // optional double min = 6;
      case 6: {
        if (tag == 49) {
         parse_min:
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_max;
        break;
      }

      // optional double max = 7;
      case 7: {
        if (tag == 57) {
         parse_max:
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_count;
        break;
      }

      // optional double count = 8;
      case 8: {
        if (tag == 65) {
         parse_count:
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_median;
        break;
      }

      // optional double median = 9;
      case 9: {
        if (tag == 73) {
         parse_median:
          set_has_median();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &median_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_percentile_95;
        break;
      }

      // optional double percentile_95 = 10;
      case 10: {
        if (tag == 81) {
         parse_percentile_95:
          set_has_percentile_95();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percentile_95_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_percentile_99;
        break;
      }

      // optional double percentile_99 = 11;
      case 11: {
        if (tag == 89) {
         parse_percentile_99:
          set_has_percentile_99();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percentile_99_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.statsd_metric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.statsd_metric)
  return false;
#undef DO_
}

void statsd_metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.statsd_metric)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.statsd_metric.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .draiosproto.statsd_tag tags = 2;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tags(i), output);
  }

  // optional .draiosproto.statsd_metric_type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional double value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->value(), output);
  }

  // optional double sum = 5;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sum(), output);
  }

  // optional double min = 6;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->min(), output);
  }

  // optional double max = 7;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->max(), output);
  }

  // optional double count = 8;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->count(), output);
  }

  // optional double median = 9;
  if (has_median()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->median(), output);
  }

  // optional double percentile_95 = 10;
  if (has_percentile_95()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->percentile_95(), output);
  }

  // optional double percentile_99 = 11;
  if (has_percentile_99()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->percentile_99(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.statsd_metric)
}

::google::protobuf::uint8* statsd_metric::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.statsd_metric)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.statsd_metric.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .draiosproto.statsd_tag tags = 2;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tags(i), false, target);
  }

  // optional .draiosproto.statsd_metric_type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional double value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->value(), target);
  }

  // optional double sum = 5;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->sum(), target);
  }

  // optional double min = 6;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->min(), target);
  }

  // optional double max = 7;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->max(), target);
  }

  // optional double count = 8;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->count(), target);
  }

  // optional double median = 9;
  if (has_median()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->median(), target);
  }

  // optional double percentile_95 = 10;
  if (has_percentile_95()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->percentile_95(), target);
  }

  // optional double percentile_99 = 11;
  if (has_percentile_99()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->percentile_99(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.statsd_metric)
  return target;
}

size_t statsd_metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.statsd_metric)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 253u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .draiosproto.statsd_metric_type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double value = 4;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional double sum = 5;
    if (has_sum()) {
      total_size += 1 + 8;
    }

    // optional double min = 6;
    if (has_min()) {
      total_size += 1 + 8;
    }

    // optional double max = 7;
    if (has_max()) {
      total_size += 1 + 8;
    }

    // optional double count = 8;
    if (has_count()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double median = 9;
    if (has_median()) {
      total_size += 1 + 8;
    }

    // optional double percentile_95 = 10;
    if (has_percentile_95()) {
      total_size += 1 + 8;
    }

    // optional double percentile_99 = 11;
    if (has_percentile_99()) {
      total_size += 1 + 8;
    }

  }
  // repeated .draiosproto.statsd_tag tags = 2;
  {
    unsigned int count = this->tags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statsd_metric::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.statsd_metric)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const statsd_metric* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const statsd_metric>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.statsd_metric)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.statsd_metric)
    UnsafeMergeFrom(*source);
  }
}

void statsd_metric::MergeFrom(const statsd_metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.statsd_metric)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void statsd_metric::UnsafeMergeFrom(const statsd_metric& from) {
  GOOGLE_DCHECK(&from != this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_sum()) {
      set_sum(from.sum());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_median()) {
      set_median(from.median());
    }
    if (from.has_percentile_95()) {
      set_percentile_95(from.percentile_95());
    }
    if (from.has_percentile_99()) {
      set_percentile_99(from.percentile_99());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void statsd_metric::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.statsd_metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statsd_metric::CopyFrom(const statsd_metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.statsd_metric)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool statsd_metric::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->tags())) return false;
  return true;
}

void statsd_metric::Swap(statsd_metric* other) {
  if (other == this) return;
  InternalSwap(other);
}
void statsd_metric::InternalSwap(statsd_metric* other) {
  name_.Swap(&other->name_);
  tags_.UnsafeArenaSwap(&other->tags_);
  std::swap(type_, other->type_);
  std::swap(value_, other->value_);
  std::swap(sum_, other->sum_);
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(count_, other->count_);
  std::swap(median_, other->median_);
  std::swap(percentile_95_, other->percentile_95_);
  std::swap(percentile_99_, other->percentile_99_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata statsd_metric::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statsd_metric_descriptor_;
  metadata.reflection = statsd_metric_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// statsd_metric

// optional string name = 1;
bool statsd_metric::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void statsd_metric::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void statsd_metric::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void statsd_metric::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& statsd_metric::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.statsd_metric.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void statsd_metric::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.statsd_metric.name)
}
void statsd_metric::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.statsd_metric.name)
}
void statsd_metric::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.statsd_metric.name)
}
::std::string* statsd_metric::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.statsd_metric.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* statsd_metric::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.statsd_metric.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void statsd_metric::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.statsd_metric.name)
}

// repeated .draiosproto.statsd_tag tags = 2;
int statsd_metric::tags_size() const {
  return tags_.size();
}
void statsd_metric::clear_tags() {
  tags_.Clear();
}
const ::draiosproto::statsd_tag& statsd_metric::tags(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.statsd_metric.tags)
  return tags_.Get(index);
}
::draiosproto::statsd_tag* statsd_metric::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.statsd_metric.tags)
  return tags_.Mutable(index);
}
::draiosproto::statsd_tag* statsd_metric::add_tags() {
  // @@protoc_insertion_point(field_add:draiosproto.statsd_metric.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::statsd_tag >*
statsd_metric::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.statsd_metric.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::statsd_tag >&
statsd_metric::tags() const {
  // @@protoc_insertion_point(field_list:draiosproto.statsd_metric.tags)
  return tags_;
}

// optional .draiosproto.statsd_metric_type type = 3;
bool statsd_metric::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void statsd_metric::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void statsd_metric::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void statsd_metric::clear_type() {
  type_ = 1;
  clear_has_type();
}
::draiosproto::statsd_metric_type statsd_metric::type() const {
  // @@protoc_insertion_point(field_get:draiosproto.statsd_metric.type)
  return static_cast< ::draiosproto::statsd_metric_type >(type_);
}
void statsd_metric::set_type(::draiosproto::statsd_metric_type value) {
  assert(::draiosproto::statsd_metric_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.statsd_metric.type)
}

// optional double value = 4;
bool statsd_metric::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void statsd_metric::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
void statsd_metric::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void statsd_metric::clear_value() {
  value_ = 0;
  clear_has_value();
}
double statsd_metric::value() const {
  // @@protoc_insertion_point(field_get:draiosproto.statsd_metric.value)
  return value_;
}
void statsd_metric::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.statsd_metric.value)
}

// optional double sum = 5;
bool statsd_metric::has_sum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void statsd_metric::set_has_sum() {
  _has_bits_[0] |= 0x00000010u;
}
void statsd_metric::clear_has_sum() {
  _has_bits_[0] &= ~0x00000010u;
}
void statsd_metric::clear_sum() {
  sum_ = 0;
  clear_has_sum();
}
double statsd_metric::sum() const {
  // @@protoc_insertion_point(field_get:draiosproto.statsd_metric.sum)
  return sum_;
}
void statsd_metric::set_sum(double value) {
  set_has_sum();
  sum_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.statsd_metric.sum)
}

// optional double min = 6;
bool statsd_metric::has_min() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void statsd_metric::set_has_min() {
  _has_bits_[0] |= 0x00000020u;
}
void statsd_metric::clear_has_min() {
  _has_bits_[0] &= ~0x00000020u;
}
void statsd_metric::clear_min() {
  min_ = 0;
  clear_has_min();
}
double statsd_metric::min() const {
  // @@protoc_insertion_point(field_get:draiosproto.statsd_metric.min)
  return min_;
}
void statsd_metric::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.statsd_metric.min)
}

// optional double max = 7;
bool statsd_metric::has_max() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void statsd_metric::set_has_max() {
  _has_bits_[0] |= 0x00000040u;
}
void statsd_metric::clear_has_max() {
  _has_bits_[0] &= ~0x00000040u;
}
void statsd_metric::clear_max() {
  max_ = 0;
  clear_has_max();
}
double statsd_metric::max() const {
  // @@protoc_insertion_point(field_get:draiosproto.statsd_metric.max)
  return max_;
}
void statsd_metric::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.statsd_metric.max)
}

// optional double count = 8;
bool statsd_metric::has_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void statsd_metric::set_has_count() {
  _has_bits_[0] |= 0x00000080u;
}
void statsd_metric::clear_has_count() {
  _has_bits_[0] &= ~0x00000080u;
}
void statsd_metric::clear_count() {
  count_ = 0;
  clear_has_count();
}
double statsd_metric::count() const {
  // @@protoc_insertion_point(field_get:draiosproto.statsd_metric.count)
  return count_;
}
void statsd_metric::set_count(double value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.statsd_metric.count)
}

// optional double median = 9;
bool statsd_metric::has_median() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void statsd_metric::set_has_median() {
  _has_bits_[0] |= 0x00000100u;
}
void statsd_metric::clear_has_median() {
  _has_bits_[0] &= ~0x00000100u;
}
void statsd_metric::clear_median() {
  median_ = 0;
  clear_has_median();
}
double statsd_metric::median() const {
  // @@protoc_insertion_point(field_get:draiosproto.statsd_metric.median)
  return median_;
}
void statsd_metric::set_median(double value) {
  set_has_median();
  median_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.statsd_metric.median)
}

// optional double percentile_95 = 10;
bool statsd_metric::has_percentile_95() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void statsd_metric::set_has_percentile_95() {
  _has_bits_[0] |= 0x00000200u;
}
void statsd_metric::clear_has_percentile_95() {
  _has_bits_[0] &= ~0x00000200u;
}
void statsd_metric::clear_percentile_95() {
  percentile_95_ = 0;
  clear_has_percentile_95();
}
double statsd_metric::percentile_95() const {
  // @@protoc_insertion_point(field_get:draiosproto.statsd_metric.percentile_95)
  return percentile_95_;
}
void statsd_metric::set_percentile_95(double value) {
  set_has_percentile_95();
  percentile_95_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.statsd_metric.percentile_95)
}

// optional double percentile_99 = 11;
bool statsd_metric::has_percentile_99() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void statsd_metric::set_has_percentile_99() {
  _has_bits_[0] |= 0x00000400u;
}
void statsd_metric::clear_has_percentile_99() {
  _has_bits_[0] &= ~0x00000400u;
}
void statsd_metric::clear_percentile_99() {
  percentile_99_ = 0;
  clear_has_percentile_99();
}
double statsd_metric::percentile_99() const {
  // @@protoc_insertion_point(field_get:draiosproto.statsd_metric.percentile_99)
  return percentile_99_;
}
void statsd_metric::set_percentile_99(double value) {
  set_has_percentile_99();
  percentile_99_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.statsd_metric.percentile_99)
}

inline const statsd_metric* statsd_metric::internal_default_instance() {
  return &statsd_metric_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int statsd_info::kStatsdMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

statsd_info::statsd_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.statsd_info)
}

void statsd_info::InitAsDefaultInstance() {
}

statsd_info::statsd_info(const statsd_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.statsd_info)
}

void statsd_info::SharedCtor() {
  _cached_size_ = 0;
}

statsd_info::~statsd_info() {
  // @@protoc_insertion_point(destructor:draiosproto.statsd_info)
  SharedDtor();
}

void statsd_info::SharedDtor() {
}

void statsd_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statsd_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statsd_info_descriptor_;
}

const statsd_info& statsd_info::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<statsd_info> statsd_info_default_instance_;

statsd_info* statsd_info::New(::google::protobuf::Arena* arena) const {
  statsd_info* n = new statsd_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void statsd_info::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.statsd_info)
  statsd_metrics_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool statsd_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.statsd_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.statsd_metric statsd_metrics = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_statsd_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_statsd_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_statsd_metrics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.statsd_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.statsd_info)
  return false;
#undef DO_
}

void statsd_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.statsd_info)
  // repeated .draiosproto.statsd_metric statsd_metrics = 1;
  for (unsigned int i = 0, n = this->statsd_metrics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statsd_metrics(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.statsd_info)
}

::google::protobuf::uint8* statsd_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.statsd_info)
  // repeated .draiosproto.statsd_metric statsd_metrics = 1;
  for (unsigned int i = 0, n = this->statsd_metrics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->statsd_metrics(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.statsd_info)
  return target;
}

size_t statsd_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.statsd_info)
  size_t total_size = 0;

  // repeated .draiosproto.statsd_metric statsd_metrics = 1;
  {
    unsigned int count = this->statsd_metrics_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statsd_metrics(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statsd_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.statsd_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const statsd_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const statsd_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.statsd_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.statsd_info)
    UnsafeMergeFrom(*source);
  }
}

void statsd_info::MergeFrom(const statsd_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.statsd_info)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void statsd_info::UnsafeMergeFrom(const statsd_info& from) {
  GOOGLE_DCHECK(&from != this);
  statsd_metrics_.MergeFrom(from.statsd_metrics_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void statsd_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.statsd_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statsd_info::CopyFrom(const statsd_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.statsd_info)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool statsd_info::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->statsd_metrics())) return false;
  return true;
}

void statsd_info::Swap(statsd_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void statsd_info::InternalSwap(statsd_info* other) {
  statsd_metrics_.UnsafeArenaSwap(&other->statsd_metrics_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata statsd_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statsd_info_descriptor_;
  metadata.reflection = statsd_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// statsd_info

// repeated .draiosproto.statsd_metric statsd_metrics = 1;
int statsd_info::statsd_metrics_size() const {
  return statsd_metrics_.size();
}
void statsd_info::clear_statsd_metrics() {
  statsd_metrics_.Clear();
}
const ::draiosproto::statsd_metric& statsd_info::statsd_metrics(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.statsd_info.statsd_metrics)
  return statsd_metrics_.Get(index);
}
::draiosproto::statsd_metric* statsd_info::mutable_statsd_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.statsd_info.statsd_metrics)
  return statsd_metrics_.Mutable(index);
}
::draiosproto::statsd_metric* statsd_info::add_statsd_metrics() {
  // @@protoc_insertion_point(field_add:draiosproto.statsd_info.statsd_metrics)
  return statsd_metrics_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::statsd_metric >*
statsd_info::mutable_statsd_metrics() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.statsd_info.statsd_metrics)
  return &statsd_metrics_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::statsd_metric >&
statsd_info::statsd_metrics() const {
  // @@protoc_insertion_point(field_list:draiosproto.statsd_info.statsd_metrics)
  return statsd_metrics_;
}

inline const statsd_info* statsd_info::internal_default_instance() {
  return &statsd_info_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int app_tag::kKeyFieldNumber;
const int app_tag::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

app_tag::app_tag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.app_tag)
}

void app_tag::InitAsDefaultInstance() {
}

app_tag::app_tag(const app_tag& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.app_tag)
}

void app_tag::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

app_tag::~app_tag() {
  // @@protoc_insertion_point(destructor:draiosproto.app_tag)
  SharedDtor();
}

void app_tag::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void app_tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* app_tag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return app_tag_descriptor_;
}

const app_tag& app_tag::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<app_tag> app_tag_default_instance_;

app_tag* app_tag::New(::google::protobuf::Arena* arena) const {
  app_tag* n = new app_tag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void app_tag::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.app_tag)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool app_tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.app_tag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.app_tag.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.app_tag.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.app_tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.app_tag)
  return false;
#undef DO_
}

void app_tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.app_tag)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.app_tag.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.app_tag.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.app_tag)
}

::google::protobuf::uint8* app_tag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.app_tag)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.app_tag.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.app_tag.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.app_tag)
  return target;
}

size_t app_tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.app_tag)
  size_t total_size = 0;

  // required string key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }
  // optional string value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void app_tag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.app_tag)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const app_tag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const app_tag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.app_tag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.app_tag)
    UnsafeMergeFrom(*source);
  }
}

void app_tag::MergeFrom(const app_tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.app_tag)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void app_tag::UnsafeMergeFrom(const app_tag& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void app_tag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.app_tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void app_tag::CopyFrom(const app_tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.app_tag)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool app_tag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void app_tag::Swap(app_tag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void app_tag::InternalSwap(app_tag* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata app_tag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = app_tag_descriptor_;
  metadata.reflection = app_tag_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// app_tag

// required string key = 1;
bool app_tag::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void app_tag::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void app_tag::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void app_tag::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& app_tag::key() const {
  // @@protoc_insertion_point(field_get:draiosproto.app_tag.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void app_tag::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.app_tag.key)
}
void app_tag::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.app_tag.key)
}
void app_tag::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.app_tag.key)
}
::std::string* app_tag::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:draiosproto.app_tag.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* app_tag::release_key() {
  // @@protoc_insertion_point(field_release:draiosproto.app_tag.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void app_tag::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.app_tag.key)
}

// optional string value = 2;
bool app_tag::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void app_tag::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void app_tag::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void app_tag::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& app_tag::value() const {
  // @@protoc_insertion_point(field_get:draiosproto.app_tag.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void app_tag::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.app_tag.value)
}
void app_tag::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.app_tag.value)
}
void app_tag::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.app_tag.value)
}
::std::string* app_tag::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:draiosproto.app_tag.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* app_tag::release_value() {
  // @@protoc_insertion_point(field_release:draiosproto.app_tag.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void app_tag::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.app_tag.value)
}

inline const app_tag* app_tag::internal_default_instance() {
  return &app_tag_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int app_metric::kNameFieldNumber;
const int app_metric::kTypeFieldNumber;
const int app_metric::kValueFieldNumber;
const int app_metric::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

app_metric::app_metric()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.app_metric)
}

void app_metric::InitAsDefaultInstance() {
}

app_metric::app_metric(const app_metric& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.app_metric)
}

void app_metric::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  type_ = 1;
}

app_metric::~app_metric() {
  // @@protoc_insertion_point(destructor:draiosproto.app_metric)
  SharedDtor();
}

void app_metric::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void app_metric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* app_metric::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return app_metric_descriptor_;
}

const app_metric& app_metric::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<app_metric> app_metric_default_instance_;

app_metric* app_metric::New(::google::protobuf::Arena* arena) const {
  app_metric* n = new app_metric;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void app_metric::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.app_metric)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 1;
    value_ = 0;
  }
  tags_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool app_metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.app_metric)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.app_metric.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .draiosproto.app_metric_type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::app_metric_type_IsValid(value)) {
            set_type(static_cast< ::draiosproto::app_metric_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_value;
        break;
      }

      // optional double value = 3;
      case 3: {
        if (tag == 25) {
         parse_value:
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        break;
      }

      // repeated .draiosproto.app_tag tags = 4;
      case 4: {
        if (tag == 34) {
         parse_tags:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_tags;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.app_metric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.app_metric)
  return false;
#undef DO_
}

void app_metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.app_metric)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.app_metric.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .draiosproto.app_metric_type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional double value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }

  // repeated .draiosproto.app_tag tags = 4;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.app_metric)
}

::google::protobuf::uint8* app_metric::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.app_metric)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.app_metric.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .draiosproto.app_metric_type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional double value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }

  // repeated .draiosproto.app_tag tags = 4;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->tags(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.app_metric)
  return target;
}

size_t app_metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.app_metric)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .draiosproto.app_metric_type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double value = 3;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  // repeated .draiosproto.app_tag tags = 4;
  {
    unsigned int count = this->tags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void app_metric::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.app_metric)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const app_metric* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const app_metric>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.app_metric)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.app_metric)
    UnsafeMergeFrom(*source);
  }
}

void app_metric::MergeFrom(const app_metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.app_metric)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void app_metric::UnsafeMergeFrom(const app_metric& from) {
  GOOGLE_DCHECK(&from != this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void app_metric::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.app_metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void app_metric::CopyFrom(const app_metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.app_metric)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool app_metric::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->tags())) return false;
  return true;
}

void app_metric::Swap(app_metric* other) {
  if (other == this) return;
  InternalSwap(other);
}
void app_metric::InternalSwap(app_metric* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(value_, other->value_);
  tags_.UnsafeArenaSwap(&other->tags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata app_metric::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = app_metric_descriptor_;
  metadata.reflection = app_metric_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// app_metric

// optional string name = 1;
bool app_metric::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void app_metric::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void app_metric::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void app_metric::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& app_metric::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.app_metric.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void app_metric::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.app_metric.name)
}
void app_metric::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.app_metric.name)
}
void app_metric::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.app_metric.name)
}
::std::string* app_metric::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.app_metric.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* app_metric::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.app_metric.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void app_metric::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.app_metric.name)
}

// optional .draiosproto.app_metric_type type = 2;
bool app_metric::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void app_metric::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void app_metric::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void app_metric::clear_type() {
  type_ = 1;
  clear_has_type();
}
::draiosproto::app_metric_type app_metric::type() const {
  // @@protoc_insertion_point(field_get:draiosproto.app_metric.type)
  return static_cast< ::draiosproto::app_metric_type >(type_);
}
void app_metric::set_type(::draiosproto::app_metric_type value) {
  assert(::draiosproto::app_metric_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.app_metric.type)
}

// optional double value = 3;
bool app_metric::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void app_metric::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void app_metric::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void app_metric::clear_value() {
  value_ = 0;
  clear_has_value();
}
double app_metric::value() const {
  // @@protoc_insertion_point(field_get:draiosproto.app_metric.value)
  return value_;
}
void app_metric::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.app_metric.value)
}

// repeated .draiosproto.app_tag tags = 4;
int app_metric::tags_size() const {
  return tags_.size();
}
void app_metric::clear_tags() {
  tags_.Clear();
}
const ::draiosproto::app_tag& app_metric::tags(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.app_metric.tags)
  return tags_.Get(index);
}
::draiosproto::app_tag* app_metric::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.app_metric.tags)
  return tags_.Mutable(index);
}
::draiosproto::app_tag* app_metric::add_tags() {
  // @@protoc_insertion_point(field_add:draiosproto.app_metric.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::app_tag >*
app_metric::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.app_metric.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::app_tag >&
app_metric::tags() const {
  // @@protoc_insertion_point(field_list:draiosproto.app_metric.tags)
  return tags_;
}

inline const app_metric* app_metric::internal_default_instance() {
  return &app_metric_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int app_check::kNameFieldNumber;
const int app_check::kValueFieldNumber;
const int app_check::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

app_check::app_check()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.app_check)
}

void app_check::InitAsDefaultInstance() {
}

app_check::app_check(const app_check& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.app_check)
}

void app_check::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

app_check::~app_check() {
  // @@protoc_insertion_point(destructor:draiosproto.app_check)
  SharedDtor();
}

void app_check::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void app_check::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* app_check::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return app_check_descriptor_;
}

const app_check& app_check::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<app_check> app_check_default_instance_;

app_check* app_check::New(::google::protobuf::Arena* arena) const {
  app_check* n = new app_check;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void app_check::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.app_check)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    value_ = 0;
  }
  tags_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool app_check::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.app_check)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.app_check.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional .draiosproto.app_check_value value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::app_check_value_IsValid(value)) {
            set_value(static_cast< ::draiosproto::app_check_value >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tags;
        break;
      }

      // repeated .draiosproto.app_tag tags = 3;
      case 3: {
        if (tag == 26) {
         parse_tags:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_tags;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.app_check)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.app_check)
  return false;
#undef DO_
}

void app_check::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.app_check)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.app_check.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .draiosproto.app_check_value value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->value(), output);
  }

  // repeated .draiosproto.app_tag tags = 3;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.app_check)
}

::google::protobuf::uint8* app_check::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.app_check)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.app_check.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .draiosproto.app_check_value value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->value(), target);
  }

  // repeated .draiosproto.app_tag tags = 3;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->tags(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.app_check)
  return target;
}

size_t app_check::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.app_check)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .draiosproto.app_check_value value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
    }

  }
  // repeated .draiosproto.app_tag tags = 3;
  {
    unsigned int count = this->tags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void app_check::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.app_check)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const app_check* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const app_check>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.app_check)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.app_check)
    UnsafeMergeFrom(*source);
  }
}

void app_check::MergeFrom(const app_check& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.app_check)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void app_check::UnsafeMergeFrom(const app_check& from) {
  GOOGLE_DCHECK(&from != this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void app_check::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.app_check)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void app_check::CopyFrom(const app_check& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.app_check)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool app_check::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->tags())) return false;
  return true;
}

void app_check::Swap(app_check* other) {
  if (other == this) return;
  InternalSwap(other);
}
void app_check::InternalSwap(app_check* other) {
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  tags_.UnsafeArenaSwap(&other->tags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata app_check::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = app_check_descriptor_;
  metadata.reflection = app_check_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// app_check

// optional string name = 1;
bool app_check::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void app_check::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void app_check::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void app_check::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& app_check::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.app_check.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void app_check::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.app_check.name)
}
void app_check::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.app_check.name)
}
void app_check::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.app_check.name)
}
::std::string* app_check::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.app_check.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* app_check::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.app_check.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void app_check::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.app_check.name)
}

// optional .draiosproto.app_check_value value = 2;
bool app_check::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void app_check::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void app_check::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void app_check::clear_value() {
  value_ = 0;
  clear_has_value();
}
::draiosproto::app_check_value app_check::value() const {
  // @@protoc_insertion_point(field_get:draiosproto.app_check.value)
  return static_cast< ::draiosproto::app_check_value >(value_);
}
void app_check::set_value(::draiosproto::app_check_value value) {
  assert(::draiosproto::app_check_value_IsValid(value));
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.app_check.value)
}

// repeated .draiosproto.app_tag tags = 3;
int app_check::tags_size() const {
  return tags_.size();
}
void app_check::clear_tags() {
  tags_.Clear();
}
const ::draiosproto::app_tag& app_check::tags(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.app_check.tags)
  return tags_.Get(index);
}
::draiosproto::app_tag* app_check::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.app_check.tags)
  return tags_.Mutable(index);
}
::draiosproto::app_tag* app_check::add_tags() {
  // @@protoc_insertion_point(field_add:draiosproto.app_check.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::app_tag >*
app_check::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.app_check.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::app_tag >&
app_check::tags() const {
  // @@protoc_insertion_point(field_list:draiosproto.app_check.tags)
  return tags_;
}

inline const app_check* app_check::internal_default_instance() {
  return &app_check_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int app_info::kProcessNameFieldNumber;
const int app_info::kMetricsFieldNumber;
const int app_info::kChecksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

app_info::app_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.app_info)
}

void app_info::InitAsDefaultInstance() {
}

app_info::app_info(const app_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.app_info)
}

void app_info::SharedCtor() {
  _cached_size_ = 0;
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

app_info::~app_info() {
  // @@protoc_insertion_point(destructor:draiosproto.app_info)
  SharedDtor();
}

void app_info::SharedDtor() {
  process_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void app_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* app_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return app_info_descriptor_;
}

const app_info& app_info::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<app_info> app_info_default_instance_;

app_info* app_info::New(::google::protobuf::Arena* arena) const {
  app_info* n = new app_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void app_info::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.app_info)
  if (has_process_name()) {
    process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  metrics_.Clear();
  checks_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool app_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.app_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string process_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.app_info.process_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_metrics;
        break;
      }

      // repeated .draiosproto.app_metric metrics = 2;
      case 2: {
        if (tag == 18) {
         parse_metrics:
          DO_(input->IncrementRecursionDepth());
         parse_loop_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_metrics;
        if (input->ExpectTag(26)) goto parse_loop_checks;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.app_check checks = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_checks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_checks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_checks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.app_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.app_info)
  return false;
#undef DO_
}

void app_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.app_info)
  // optional string process_name = 1;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.app_info.process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->process_name(), output);
  }

  // repeated .draiosproto.app_metric metrics = 2;
  for (unsigned int i = 0, n = this->metrics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->metrics(i), output);
  }

  // repeated .draiosproto.app_check checks = 3;
  for (unsigned int i = 0, n = this->checks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->checks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.app_info)
}

::google::protobuf::uint8* app_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.app_info)
  // optional string process_name = 1;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.app_info.process_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->process_name(), target);
  }

  // repeated .draiosproto.app_metric metrics = 2;
  for (unsigned int i = 0, n = this->metrics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->metrics(i), false, target);
  }

  // repeated .draiosproto.app_check checks = 3;
  for (unsigned int i = 0, n = this->checks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->checks(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.app_info)
  return target;
}

size_t app_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.app_info)
  size_t total_size = 0;

  // optional string process_name = 1;
  if (has_process_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->process_name());
  }

  // repeated .draiosproto.app_metric metrics = 2;
  {
    unsigned int count = this->metrics_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metrics(i));
    }
  }

  // repeated .draiosproto.app_check checks = 3;
  {
    unsigned int count = this->checks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->checks(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void app_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.app_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const app_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const app_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.app_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.app_info)
    UnsafeMergeFrom(*source);
  }
}

void app_info::MergeFrom(const app_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.app_info)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void app_info::UnsafeMergeFrom(const app_info& from) {
  GOOGLE_DCHECK(&from != this);
  metrics_.MergeFrom(from.metrics_);
  checks_.MergeFrom(from.checks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_process_name()) {
      set_has_process_name();
      process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void app_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.app_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void app_info::CopyFrom(const app_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.app_info)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool app_info::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->metrics())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->checks())) return false;
  return true;
}

void app_info::Swap(app_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void app_info::InternalSwap(app_info* other) {
  process_name_.Swap(&other->process_name_);
  metrics_.UnsafeArenaSwap(&other->metrics_);
  checks_.UnsafeArenaSwap(&other->checks_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata app_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = app_info_descriptor_;
  metadata.reflection = app_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// app_info

// optional string process_name = 1;
bool app_info::has_process_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void app_info::set_has_process_name() {
  _has_bits_[0] |= 0x00000001u;
}
void app_info::clear_has_process_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void app_info::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_process_name();
}
const ::std::string& app_info::process_name() const {
  // @@protoc_insertion_point(field_get:draiosproto.app_info.process_name)
  return process_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void app_info::set_process_name(const ::std::string& value) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.app_info.process_name)
}
void app_info::set_process_name(const char* value) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.app_info.process_name)
}
void app_info::set_process_name(const char* value, size_t size) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.app_info.process_name)
}
::std::string* app_info::mutable_process_name() {
  set_has_process_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.app_info.process_name)
  return process_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* app_info::release_process_name() {
  // @@protoc_insertion_point(field_release:draiosproto.app_info.process_name)
  clear_has_process_name();
  return process_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void app_info::set_allocated_process_name(::std::string* process_name) {
  if (process_name != NULL) {
    set_has_process_name();
  } else {
    clear_has_process_name();
  }
  process_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.app_info.process_name)
}

// repeated .draiosproto.app_metric metrics = 2;
int app_info::metrics_size() const {
  return metrics_.size();
}
void app_info::clear_metrics() {
  metrics_.Clear();
}
const ::draiosproto::app_metric& app_info::metrics(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.app_info.metrics)
  return metrics_.Get(index);
}
::draiosproto::app_metric* app_info::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.app_info.metrics)
  return metrics_.Mutable(index);
}
::draiosproto::app_metric* app_info::add_metrics() {
  // @@protoc_insertion_point(field_add:draiosproto.app_info.metrics)
  return metrics_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::app_metric >*
app_info::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.app_info.metrics)
  return &metrics_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::app_metric >&
app_info::metrics() const {
  // @@protoc_insertion_point(field_list:draiosproto.app_info.metrics)
  return metrics_;
}

// repeated .draiosproto.app_check checks = 3;
int app_info::checks_size() const {
  return checks_.size();
}
void app_info::clear_checks() {
  checks_.Clear();
}
const ::draiosproto::app_check& app_info::checks(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.app_info.checks)
  return checks_.Get(index);
}
::draiosproto::app_check* app_info::mutable_checks(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.app_info.checks)
  return checks_.Mutable(index);
}
::draiosproto::app_check* app_info::add_checks() {
  // @@protoc_insertion_point(field_add:draiosproto.app_info.checks)
  return checks_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::app_check >*
app_info::mutable_checks() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.app_info.checks)
  return &checks_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::app_check >&
app_info::checks() const {
  // @@protoc_insertion_point(field_list:draiosproto.app_info.checks)
  return checks_;
}

inline const app_info* app_info::internal_default_instance() {
  return &app_info_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int proto_info::kHttpFieldNumber;
const int proto_info::kMysqlFieldNumber;
const int proto_info::kPostgresFieldNumber;
const int proto_info::kMongodbFieldNumber;
const int proto_info::kJavaFieldNumber;
const int proto_info::kStatsdFieldNumber;
const int proto_info::kAppFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

proto_info::proto_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.proto_info)
}

void proto_info::InitAsDefaultInstance() {
  http_ = const_cast< ::draiosproto::http_info*>(
      ::draiosproto::http_info::internal_default_instance());
  mysql_ = const_cast< ::draiosproto::sql_info*>(
      ::draiosproto::sql_info::internal_default_instance());
  postgres_ = const_cast< ::draiosproto::sql_info*>(
      ::draiosproto::sql_info::internal_default_instance());
  mongodb_ = const_cast< ::draiosproto::mongodb_info*>(
      ::draiosproto::mongodb_info::internal_default_instance());
  java_ = const_cast< ::draiosproto::java_info*>(
      ::draiosproto::java_info::internal_default_instance());
  statsd_ = const_cast< ::draiosproto::statsd_info*>(
      ::draiosproto::statsd_info::internal_default_instance());
  app_ = const_cast< ::draiosproto::app_info*>(
      ::draiosproto::app_info::internal_default_instance());
}

proto_info::proto_info(const proto_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.proto_info)
}

void proto_info::SharedCtor() {
  _cached_size_ = 0;
  http_ = NULL;
  mysql_ = NULL;
  postgres_ = NULL;
  mongodb_ = NULL;
  java_ = NULL;
  statsd_ = NULL;
  app_ = NULL;
}

proto_info::~proto_info() {
  // @@protoc_insertion_point(destructor:draiosproto.proto_info)
  SharedDtor();
}

void proto_info::SharedDtor() {
  if (this != &proto_info_default_instance_.get()) {
    delete http_;
    delete mysql_;
    delete postgres_;
    delete mongodb_;
    delete java_;
    delete statsd_;
    delete app_;
  }
}

void proto_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_info_descriptor_;
}

const proto_info& proto_info::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<proto_info> proto_info_default_instance_;

proto_info* proto_info::New(::google::protobuf::Arena* arena) const {
  proto_info* n = new proto_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void proto_info::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.proto_info)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_http()) {
      if (http_ != NULL) http_->::draiosproto::http_info::Clear();
    }
    if (has_mysql()) {
      if (mysql_ != NULL) mysql_->::draiosproto::sql_info::Clear();
    }
    if (has_postgres()) {
      if (postgres_ != NULL) postgres_->::draiosproto::sql_info::Clear();
    }
    if (has_mongodb()) {
      if (mongodb_ != NULL) mongodb_->::draiosproto::mongodb_info::Clear();
    }
    if (has_java()) {
      if (java_ != NULL) java_->::draiosproto::java_info::Clear();
    }
    if (has_statsd()) {
      if (statsd_ != NULL) statsd_->::draiosproto::statsd_info::Clear();
    }
    if (has_app()) {
      if (app_ != NULL) app_->::draiosproto::app_info::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool proto_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.proto_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .draiosproto.http_info http = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mysql;
        break;
      }

      // optional .draiosproto.sql_info mysql = 2;
      case 2: {
        if (tag == 18) {
         parse_mysql:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mysql()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_postgres;
        break;
      }

      // optional .draiosproto.sql_info postgres = 3;
      case 3: {
        if (tag == 26) {
         parse_postgres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_postgres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mongodb;
        break;
      }

      // optional .draiosproto.mongodb_info mongodb = 4;
      case 4: {
        if (tag == 34) {
         parse_mongodb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mongodb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_java;
        break;
      }

      // optional .draiosproto.java_info java = 5;
      case 5: {
        if (tag == 42) {
         parse_java:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_java()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_statsd;
        break;
      }

      // optional .draiosproto.statsd_info statsd = 6;
      case 6: {
        if (tag == 50) {
         parse_statsd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statsd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_app;
        break;
      }

      // optional .draiosproto.app_info app = 7;
      case 7: {
        if (tag == 58) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.proto_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.proto_info)
  return false;
#undef DO_
}

void proto_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.proto_info)
  // optional .draiosproto.http_info http = 1;
  if (has_http()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->http_, output);
  }

  // optional .draiosproto.sql_info mysql = 2;
  if (has_mysql()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mysql_, output);
  }

  // optional .draiosproto.sql_info postgres = 3;
  if (has_postgres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->postgres_, output);
  }

  // optional .draiosproto.mongodb_info mongodb = 4;
  if (has_mongodb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->mongodb_, output);
  }

  // optional .draiosproto.java_info java = 5;
  if (has_java()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->java_, output);
  }

  // optional .draiosproto.statsd_info statsd = 6;
  if (has_statsd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->statsd_, output);
  }

  // optional .draiosproto.app_info app = 7;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->app_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.proto_info)
}

::google::protobuf::uint8* proto_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.proto_info)
  // optional .draiosproto.http_info http = 1;
  if (has_http()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->http_, false, target);
  }

  // optional .draiosproto.sql_info mysql = 2;
  if (has_mysql()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->mysql_, false, target);
  }

  // optional .draiosproto.sql_info postgres = 3;
  if (has_postgres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->postgres_, false, target);
  }

  // optional .draiosproto.mongodb_info mongodb = 4;
  if (has_mongodb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->mongodb_, false, target);
  }

  // optional .draiosproto.java_info java = 5;
  if (has_java()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->java_, false, target);
  }

  // optional .draiosproto.statsd_info statsd = 6;
  if (has_statsd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->statsd_, false, target);
  }

  // optional .draiosproto.app_info app = 7;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->app_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.proto_info)
  return target;
}

size_t proto_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.proto_info)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional .draiosproto.http_info http = 1;
    if (has_http()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->http_);
    }

    // optional .draiosproto.sql_info mysql = 2;
    if (has_mysql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mysql_);
    }

    // optional .draiosproto.sql_info postgres = 3;
    if (has_postgres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->postgres_);
    }

    // optional .draiosproto.mongodb_info mongodb = 4;
    if (has_mongodb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mongodb_);
    }

    // optional .draiosproto.java_info java = 5;
    if (has_java()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->java_);
    }

    // optional .draiosproto.statsd_info statsd = 6;
    if (has_statsd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->statsd_);
    }

    // optional .draiosproto.app_info app = 7;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->app_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.proto_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const proto_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const proto_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.proto_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.proto_info)
    UnsafeMergeFrom(*source);
  }
}

void proto_info::MergeFrom(const proto_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.proto_info)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void proto_info::UnsafeMergeFrom(const proto_info& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_http()) {
      mutable_http()->::draiosproto::http_info::MergeFrom(from.http());
    }
    if (from.has_mysql()) {
      mutable_mysql()->::draiosproto::sql_info::MergeFrom(from.mysql());
    }
    if (from.has_postgres()) {
      mutable_postgres()->::draiosproto::sql_info::MergeFrom(from.postgres());
    }
    if (from.has_mongodb()) {
      mutable_mongodb()->::draiosproto::mongodb_info::MergeFrom(from.mongodb());
    }
    if (from.has_java()) {
      mutable_java()->::draiosproto::java_info::MergeFrom(from.java());
    }
    if (from.has_statsd()) {
      mutable_statsd()->::draiosproto::statsd_info::MergeFrom(from.statsd());
    }
    if (from.has_app()) {
      mutable_app()->::draiosproto::app_info::MergeFrom(from.app());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void proto_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.proto_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_info::CopyFrom(const proto_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.proto_info)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool proto_info::IsInitialized() const {

  if (has_http()) {
    if (!this->http_->IsInitialized()) return false;
  }
  if (has_mysql()) {
    if (!this->mysql_->IsInitialized()) return false;
  }
  if (has_postgres()) {
    if (!this->postgres_->IsInitialized()) return false;
  }
  if (has_mongodb()) {
    if (!this->mongodb_->IsInitialized()) return false;
  }
  if (has_statsd()) {
    if (!this->statsd_->IsInitialized()) return false;
  }
  if (has_app()) {
    if (!this->app_->IsInitialized()) return false;
  }
  return true;
}

void proto_info::Swap(proto_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void proto_info::InternalSwap(proto_info* other) {
  std::swap(http_, other->http_);
  std::swap(mysql_, other->mysql_);
  std::swap(postgres_, other->postgres_);
  std::swap(mongodb_, other->mongodb_);
  std::swap(java_, other->java_);
  std::swap(statsd_, other->statsd_);
  std::swap(app_, other->app_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata proto_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_info_descriptor_;
  metadata.reflection = proto_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// proto_info

// optional .draiosproto.http_info http = 1;
bool proto_info::has_http() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void proto_info::set_has_http() {
  _has_bits_[0] |= 0x00000001u;
}
void proto_info::clear_has_http() {
  _has_bits_[0] &= ~0x00000001u;
}
void proto_info::clear_http() {
  if (http_ != NULL) http_->::draiosproto::http_info::Clear();
  clear_has_http();
}
const ::draiosproto::http_info& proto_info::http() const {
  // @@protoc_insertion_point(field_get:draiosproto.proto_info.http)
  return http_ != NULL ? *http_
                         : *::draiosproto::http_info::internal_default_instance();
}
::draiosproto::http_info* proto_info::mutable_http() {
  set_has_http();
  if (http_ == NULL) {
    http_ = new ::draiosproto::http_info;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.proto_info.http)
  return http_;
}
::draiosproto::http_info* proto_info::release_http() {
  // @@protoc_insertion_point(field_release:draiosproto.proto_info.http)
  clear_has_http();
  ::draiosproto::http_info* temp = http_;
  http_ = NULL;
  return temp;
}
void proto_info::set_allocated_http(::draiosproto::http_info* http) {
  delete http_;
  http_ = http;
  if (http) {
    set_has_http();
  } else {
    clear_has_http();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.proto_info.http)
}

// optional .draiosproto.sql_info mysql = 2;
bool proto_info::has_mysql() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void proto_info::set_has_mysql() {
  _has_bits_[0] |= 0x00000002u;
}
void proto_info::clear_has_mysql() {
  _has_bits_[0] &= ~0x00000002u;
}
void proto_info::clear_mysql() {
  if (mysql_ != NULL) mysql_->::draiosproto::sql_info::Clear();
  clear_has_mysql();
}
const ::draiosproto::sql_info& proto_info::mysql() const {
  // @@protoc_insertion_point(field_get:draiosproto.proto_info.mysql)
  return mysql_ != NULL ? *mysql_
                         : *::draiosproto::sql_info::internal_default_instance();
}
::draiosproto::sql_info* proto_info::mutable_mysql() {
  set_has_mysql();
  if (mysql_ == NULL) {
    mysql_ = new ::draiosproto::sql_info;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.proto_info.mysql)
  return mysql_;
}
::draiosproto::sql_info* proto_info::release_mysql() {
  // @@protoc_insertion_point(field_release:draiosproto.proto_info.mysql)
  clear_has_mysql();
  ::draiosproto::sql_info* temp = mysql_;
  mysql_ = NULL;
  return temp;
}
void proto_info::set_allocated_mysql(::draiosproto::sql_info* mysql) {
  delete mysql_;
  mysql_ = mysql;
  if (mysql) {
    set_has_mysql();
  } else {
    clear_has_mysql();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.proto_info.mysql)
}

// optional .draiosproto.sql_info postgres = 3;
bool proto_info::has_postgres() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void proto_info::set_has_postgres() {
  _has_bits_[0] |= 0x00000004u;
}
void proto_info::clear_has_postgres() {
  _has_bits_[0] &= ~0x00000004u;
}
void proto_info::clear_postgres() {
  if (postgres_ != NULL) postgres_->::draiosproto::sql_info::Clear();
  clear_has_postgres();
}
const ::draiosproto::sql_info& proto_info::postgres() const {
  // @@protoc_insertion_point(field_get:draiosproto.proto_info.postgres)
  return postgres_ != NULL ? *postgres_
                         : *::draiosproto::sql_info::internal_default_instance();
}
::draiosproto::sql_info* proto_info::mutable_postgres() {
  set_has_postgres();
  if (postgres_ == NULL) {
    postgres_ = new ::draiosproto::sql_info;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.proto_info.postgres)
  return postgres_;
}
::draiosproto::sql_info* proto_info::release_postgres() {
  // @@protoc_insertion_point(field_release:draiosproto.proto_info.postgres)
  clear_has_postgres();
  ::draiosproto::sql_info* temp = postgres_;
  postgres_ = NULL;
  return temp;
}
void proto_info::set_allocated_postgres(::draiosproto::sql_info* postgres) {
  delete postgres_;
  postgres_ = postgres;
  if (postgres) {
    set_has_postgres();
  } else {
    clear_has_postgres();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.proto_info.postgres)
}

// optional .draiosproto.mongodb_info mongodb = 4;
bool proto_info::has_mongodb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void proto_info::set_has_mongodb() {
  _has_bits_[0] |= 0x00000008u;
}
void proto_info::clear_has_mongodb() {
  _has_bits_[0] &= ~0x00000008u;
}
void proto_info::clear_mongodb() {
  if (mongodb_ != NULL) mongodb_->::draiosproto::mongodb_info::Clear();
  clear_has_mongodb();
}
const ::draiosproto::mongodb_info& proto_info::mongodb() const {
  // @@protoc_insertion_point(field_get:draiosproto.proto_info.mongodb)
  return mongodb_ != NULL ? *mongodb_
                         : *::draiosproto::mongodb_info::internal_default_instance();
}
::draiosproto::mongodb_info* proto_info::mutable_mongodb() {
  set_has_mongodb();
  if (mongodb_ == NULL) {
    mongodb_ = new ::draiosproto::mongodb_info;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.proto_info.mongodb)
  return mongodb_;
}
::draiosproto::mongodb_info* proto_info::release_mongodb() {
  // @@protoc_insertion_point(field_release:draiosproto.proto_info.mongodb)
  clear_has_mongodb();
  ::draiosproto::mongodb_info* temp = mongodb_;
  mongodb_ = NULL;
  return temp;
}
void proto_info::set_allocated_mongodb(::draiosproto::mongodb_info* mongodb) {
  delete mongodb_;
  mongodb_ = mongodb;
  if (mongodb) {
    set_has_mongodb();
  } else {
    clear_has_mongodb();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.proto_info.mongodb)
}

// optional .draiosproto.java_info java = 5;
bool proto_info::has_java() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void proto_info::set_has_java() {
  _has_bits_[0] |= 0x00000010u;
}
void proto_info::clear_has_java() {
  _has_bits_[0] &= ~0x00000010u;
}
void proto_info::clear_java() {
  if (java_ != NULL) java_->::draiosproto::java_info::Clear();
  clear_has_java();
}
const ::draiosproto::java_info& proto_info::java() const {
  // @@protoc_insertion_point(field_get:draiosproto.proto_info.java)
  return java_ != NULL ? *java_
                         : *::draiosproto::java_info::internal_default_instance();
}
::draiosproto::java_info* proto_info::mutable_java() {
  set_has_java();
  if (java_ == NULL) {
    java_ = new ::draiosproto::java_info;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.proto_info.java)
  return java_;
}
::draiosproto::java_info* proto_info::release_java() {
  // @@protoc_insertion_point(field_release:draiosproto.proto_info.java)
  clear_has_java();
  ::draiosproto::java_info* temp = java_;
  java_ = NULL;
  return temp;
}
void proto_info::set_allocated_java(::draiosproto::java_info* java) {
  delete java_;
  java_ = java;
  if (java) {
    set_has_java();
  } else {
    clear_has_java();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.proto_info.java)
}

// optional .draiosproto.statsd_info statsd = 6;
bool proto_info::has_statsd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void proto_info::set_has_statsd() {
  _has_bits_[0] |= 0x00000020u;
}
void proto_info::clear_has_statsd() {
  _has_bits_[0] &= ~0x00000020u;
}
void proto_info::clear_statsd() {
  if (statsd_ != NULL) statsd_->::draiosproto::statsd_info::Clear();
  clear_has_statsd();
}
const ::draiosproto::statsd_info& proto_info::statsd() const {
  // @@protoc_insertion_point(field_get:draiosproto.proto_info.statsd)
  return statsd_ != NULL ? *statsd_
                         : *::draiosproto::statsd_info::internal_default_instance();
}
::draiosproto::statsd_info* proto_info::mutable_statsd() {
  set_has_statsd();
  if (statsd_ == NULL) {
    statsd_ = new ::draiosproto::statsd_info;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.proto_info.statsd)
  return statsd_;
}
::draiosproto::statsd_info* proto_info::release_statsd() {
  // @@protoc_insertion_point(field_release:draiosproto.proto_info.statsd)
  clear_has_statsd();
  ::draiosproto::statsd_info* temp = statsd_;
  statsd_ = NULL;
  return temp;
}
void proto_info::set_allocated_statsd(::draiosproto::statsd_info* statsd) {
  delete statsd_;
  statsd_ = statsd;
  if (statsd) {
    set_has_statsd();
  } else {
    clear_has_statsd();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.proto_info.statsd)
}

// optional .draiosproto.app_info app = 7;
bool proto_info::has_app() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void proto_info::set_has_app() {
  _has_bits_[0] |= 0x00000040u;
}
void proto_info::clear_has_app() {
  _has_bits_[0] &= ~0x00000040u;
}
void proto_info::clear_app() {
  if (app_ != NULL) app_->::draiosproto::app_info::Clear();
  clear_has_app();
}
const ::draiosproto::app_info& proto_info::app() const {
  // @@protoc_insertion_point(field_get:draiosproto.proto_info.app)
  return app_ != NULL ? *app_
                         : *::draiosproto::app_info::internal_default_instance();
}
::draiosproto::app_info* proto_info::mutable_app() {
  set_has_app();
  if (app_ == NULL) {
    app_ = new ::draiosproto::app_info;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.proto_info.app)
  return app_;
}
::draiosproto::app_info* proto_info::release_app() {
  // @@protoc_insertion_point(field_release:draiosproto.proto_info.app)
  clear_has_app();
  ::draiosproto::app_info* temp = app_;
  app_ = NULL;
  return temp;
}
void proto_info::set_allocated_app(::draiosproto::app_info* app) {
  delete app_;
  app_ = app;
  if (app) {
    set_has_app();
  } else {
    clear_has_app();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.proto_info.app)
}

inline const proto_info* proto_info::internal_default_instance() {
  return &proto_info_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int network_by_port::kPortFieldNumber;
const int network_by_port::kCountersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

network_by_port::network_by_port()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.network_by_port)
}

void network_by_port::InitAsDefaultInstance() {
  counters_ = const_cast< ::draiosproto::connection_categories*>(
      ::draiosproto::connection_categories::internal_default_instance());
}

network_by_port::network_by_port(const network_by_port& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.network_by_port)
}

void network_by_port::SharedCtor() {
  _cached_size_ = 0;
  counters_ = NULL;
  port_ = 0u;
}

network_by_port::~network_by_port() {
  // @@protoc_insertion_point(destructor:draiosproto.network_by_port)
  SharedDtor();
}

void network_by_port::SharedDtor() {
  if (this != &network_by_port_default_instance_.get()) {
    delete counters_;
  }
}

void network_by_port::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* network_by_port::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return network_by_port_descriptor_;
}

const network_by_port& network_by_port::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<network_by_port> network_by_port_default_instance_;

network_by_port* network_by_port::New(::google::protobuf::Arena* arena) const {
  network_by_port* n = new network_by_port;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void network_by_port::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.network_by_port)
  if (_has_bits_[0 / 32] & 3u) {
    port_ = 0u;
    if (has_counters()) {
      if (counters_ != NULL) counters_->::draiosproto::connection_categories::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool network_by_port::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.network_by_port)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 port = 1;
      case 1: {
        if (tag == 8) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_counters;
        break;
      }

      // required .draiosproto.connection_categories counters = 2;
      case 2: {
        if (tag == 18) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.network_by_port)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.network_by_port)
  return false;
#undef DO_
}

void network_by_port::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.network_by_port)
  // required uint32 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // required .draiosproto.connection_categories counters = 2;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->counters_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.network_by_port)
}

::google::protobuf::uint8* network_by_port::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.network_by_port)
  // required uint32 port = 1;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  // required .draiosproto.connection_categories counters = 2;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->counters_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.network_by_port)
  return target;
}

size_t network_by_port::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.network_by_port)
  size_t total_size = 0;

  if (has_port()) {
    // required uint32 port = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  if (has_counters()) {
    // required .draiosproto.connection_categories counters = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counters_);
  }

  return total_size;
}
size_t network_by_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.network_by_port)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 port = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

    // required .draiosproto.connection_categories counters = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counters_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void network_by_port::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.network_by_port)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const network_by_port* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const network_by_port>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.network_by_port)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.network_by_port)
    UnsafeMergeFrom(*source);
  }
}

void network_by_port::MergeFrom(const network_by_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.network_by_port)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void network_by_port::UnsafeMergeFrom(const network_by_port& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_counters()) {
      mutable_counters()->::draiosproto::connection_categories::MergeFrom(from.counters());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void network_by_port::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.network_by_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void network_by_port::CopyFrom(const network_by_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.network_by_port)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool network_by_port::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_counters()) {
    if (!this->counters_->IsInitialized()) return false;
  }
  return true;
}

void network_by_port::Swap(network_by_port* other) {
  if (other == this) return;
  InternalSwap(other);
}
void network_by_port::InternalSwap(network_by_port* other) {
  std::swap(port_, other->port_);
  std::swap(counters_, other->counters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata network_by_port::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = network_by_port_descriptor_;
  metadata.reflection = network_by_port_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// network_by_port

// required uint32 port = 1;
bool network_by_port::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void network_by_port::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
void network_by_port::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
void network_by_port::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 network_by_port::port() const {
  // @@protoc_insertion_point(field_get:draiosproto.network_by_port.port)
  return port_;
}
void network_by_port::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.network_by_port.port)
}

// required .draiosproto.connection_categories counters = 2;
bool network_by_port::has_counters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void network_by_port::set_has_counters() {
  _has_bits_[0] |= 0x00000002u;
}
void network_by_port::clear_has_counters() {
  _has_bits_[0] &= ~0x00000002u;
}
void network_by_port::clear_counters() {
  if (counters_ != NULL) counters_->::draiosproto::connection_categories::Clear();
  clear_has_counters();
}
const ::draiosproto::connection_categories& network_by_port::counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.network_by_port.counters)
  return counters_ != NULL ? *counters_
                         : *::draiosproto::connection_categories::internal_default_instance();
}
::draiosproto::connection_categories* network_by_port::mutable_counters() {
  set_has_counters();
  if (counters_ == NULL) {
    counters_ = new ::draiosproto::connection_categories;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.network_by_port.counters)
  return counters_;
}
::draiosproto::connection_categories* network_by_port::release_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.network_by_port.counters)
  clear_has_counters();
  ::draiosproto::connection_categories* temp = counters_;
  counters_ = NULL;
  return temp;
}
void network_by_port::set_allocated_counters(::draiosproto::connection_categories* counters) {
  delete counters_;
  counters_ = counters;
  if (counters) {
    set_has_counters();
  } else {
    clear_has_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.network_by_port.counters)
}

inline const network_by_port* network_by_port::internal_default_instance() {
  return &network_by_port_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int host::kHostnameFieldNumber;
const int host::kNumCpusFieldNumber;
const int host::kCpuLoadsFieldNumber;
const int host::kCpuStealFieldNumber;
const int host::kPhysicalMemorySizeBytesFieldNumber;
const int host::kTcountersFieldNumber;
const int host::kReqcountersFieldNumber;
const int host::kTransactionCountersFieldNumber;
const int host::kMinTransactionCountersFieldNumber;
const int host::kMaxTransactionCountersFieldNumber;
const int host::kTransactionProcessingDelayFieldNumber;
const int host::kNextTiersDelayFieldNumber;
const int host::kResourceCountersFieldNumber;
const int host::kSyscallErrorsFieldNumber;
const int host::kExternalIoNetFieldNumber;
const int host::kNetworkByServerportsFieldNumber;
const int host::kCpuIdleFieldNumber;
const int host::kUptimeFieldNumber;
const int host::kSystemCpuFieldNumber;
const int host::kUserCpuFieldNumber;
const int host::kMemoryBytesAvailableKbFieldNumber;
const int host::kIowaitCpuFieldNumber;
const int host::kNiceCpuFieldNumber;
const int host::kSystemLoad1FieldNumber;
const int host::kSystemLoad5FieldNumber;
const int host::kSystemLoad15FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

host::host()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.host)
}

void host::InitAsDefaultInstance() {
  tcounters_ = const_cast< ::draiosproto::time_categories*>(
      ::draiosproto::time_categories::internal_default_instance());
  reqcounters_ = const_cast< ::draiosproto::transaction_breakdown_categories*>(
      ::draiosproto::transaction_breakdown_categories::internal_default_instance());
  transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(
      ::draiosproto::counter_time_bidirectional::internal_default_instance());
  min_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(
      ::draiosproto::counter_time_bidirectional::internal_default_instance());
  max_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(
      ::draiosproto::counter_time_bidirectional::internal_default_instance());
  resource_counters_ = const_cast< ::draiosproto::resource_categories*>(
      ::draiosproto::resource_categories::internal_default_instance());
  syscall_errors_ = const_cast< ::draiosproto::counter_syscall_errors*>(
      ::draiosproto::counter_syscall_errors::internal_default_instance());
  external_io_net_ = const_cast< ::draiosproto::counter_time_bytes*>(
      ::draiosproto::counter_time_bytes::internal_default_instance());
}

host::host(const host& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.host)
}

void host::SharedCtor() {
  _cached_size_ = 0;
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcounters_ = NULL;
  reqcounters_ = NULL;
  transaction_counters_ = NULL;
  min_transaction_counters_ = NULL;
  max_transaction_counters_ = NULL;
  resource_counters_ = NULL;
  syscall_errors_ = NULL;
  external_io_net_ = NULL;
  ::memset(&physical_memory_size_bytes_, 0, reinterpret_cast<char*>(&system_load_15_) -
    reinterpret_cast<char*>(&physical_memory_size_bytes_) + sizeof(system_load_15_));
}

host::~host() {
  // @@protoc_insertion_point(destructor:draiosproto.host)
  SharedDtor();
}

void host::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &host_default_instance_.get()) {
    delete tcounters_;
    delete reqcounters_;
    delete transaction_counters_;
    delete min_transaction_counters_;
    delete max_transaction_counters_;
    delete resource_counters_;
    delete syscall_errors_;
    delete external_io_net_;
  }
}

void host::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* host::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return host_descriptor_;
}

const host& host::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<host> host_default_instance_;

host* host::New(::google::protobuf::Arena* arena) const {
  host* n = new host;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void host::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.host)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(host, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<host*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 243u) {
    if (has_hostname()) {
      hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    num_cpus_ = 0u;
    physical_memory_size_bytes_ = GOOGLE_ULONGLONG(0);
    if (has_tcounters()) {
      if (tcounters_ != NULL) tcounters_->::draiosproto::time_categories::Clear();
    }
    if (has_reqcounters()) {
      if (reqcounters_ != NULL) reqcounters_->::draiosproto::transaction_breakdown_categories::Clear();
    }
    if (has_transaction_counters()) {
      if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ZR_(transaction_processing_delay_, next_tiers_delay_);
    if (has_min_transaction_counters()) {
      if (min_transaction_counters_ != NULL) min_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    if (has_max_transaction_counters()) {
      if (max_transaction_counters_ != NULL) max_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    if (has_resource_counters()) {
      if (resource_counters_ != NULL) resource_counters_->::draiosproto::resource_categories::Clear();
    }
    if (has_syscall_errors()) {
      if (syscall_errors_ != NULL) syscall_errors_->::draiosproto::counter_syscall_errors::Clear();
    }
    if (has_external_io_net()) {
      if (external_io_net_ != NULL) external_io_net_->::draiosproto::counter_time_bytes::Clear();
    }
  }
  ZR_(system_load_1_, memory_bytes_available_kb_);
  ZR_(system_load_5_, system_load_15_);

#undef ZR_HELPER_
#undef ZR_

  cpu_loads_.Clear();
  cpu_steal_.Clear();
  network_by_serverports_.Clear();
  cpu_idle_.Clear();
  system_cpu_.Clear();
  user_cpu_.Clear();
  iowait_cpu_.Clear();
  nice_cpu_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool host::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.host)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.host.hostname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_cpus;
        break;
      }

      // optional uint32 num_cpus = 2;
      case 2: {
        if (tag == 16) {
         parse_num_cpus:
          set_has_num_cpus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_cpus_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cpu_loads;
        break;
      }

      // repeated uint32 cpu_loads = 3;
      case 3: {
        if (tag == 24) {
         parse_cpu_loads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_cpu_loads())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cpu_loads())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cpu_loads;
        if (input->ExpectTag(32)) goto parse_physical_memory_size_bytes;
        break;
      }

      // required uint64 physical_memory_size_bytes = 4;
      case 4: {
        if (tag == 32) {
         parse_physical_memory_size_bytes:
          set_has_physical_memory_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &physical_memory_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tcounters;
        break;
      }

      // optional .draiosproto.time_categories tcounters = 5;
      case 5: {
        if (tag == 42) {
         parse_tcounters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcounters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
      case 6: {
        if (tag == 50) {
         parse_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_transaction_processing_delay;
        break;
      }

      // optional uint64 transaction_processing_delay = 7;
      case 7: {
        if (tag == 56) {
         parse_transaction_processing_delay:
          set_has_transaction_processing_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_processing_delay_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_resource_counters;
        break;
      }

      // optional .draiosproto.resource_categories resource_counters = 8;
      case 8: {
        if (tag == 66) {
         parse_resource_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_syscall_errors;
        break;
      }

      // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
      case 9: {
        if (tag == 74) {
         parse_syscall_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscall_errors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_external_io_net;
        break;
      }

      // optional .draiosproto.counter_time_bytes external_io_net = 10;
      case 10: {
        if (tag == 82) {
         parse_external_io_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_external_io_net()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cpu_steal;
        break;
      }

      // repeated uint32 cpu_steal = 11;
      case 11: {
        if (tag == 88) {
         parse_cpu_steal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_cpu_steal())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cpu_steal())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cpu_steal;
        if (input->ExpectTag(98)) goto parse_reqcounters;
        break;
      }

      // optional .draiosproto.transaction_breakdown_categories reqcounters = 12;
      case 12: {
        if (tag == 98) {
         parse_reqcounters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqcounters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_next_tiers_delay;
        break;
      }

      // optional uint64 next_tiers_delay = 13;
      case 13: {
        if (tag == 104) {
         parse_next_tiers_delay:
          set_has_next_tiers_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_tiers_delay_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_min_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 22;
      case 22: {
        if (tag == 178) {
         parse_min_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_transaction_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_max_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 23;
      case 23: {
        if (tag == 186) {
         parse_max_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_transaction_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_network_by_serverports;
        break;
      }

      // repeated .draiosproto.network_by_port network_by_serverports = 24;
      case 24: {
        if (tag == 194) {
         parse_network_by_serverports:
          DO_(input->IncrementRecursionDepth());
         parse_loop_network_by_serverports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_network_by_serverports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_loop_network_by_serverports;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(200)) goto parse_cpu_idle;
        break;
      }

      // repeated uint32 cpu_idle = 25;
      case 25: {
        if (tag == 200) {
         parse_cpu_idle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 200, input, this->mutable_cpu_idle())));
        } else if (tag == 202) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cpu_idle())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_cpu_idle;
        if (input->ExpectTag(264)) goto parse_uptime;
        break;
      }

      // optional uint64 uptime = 33;
      case 33: {
        if (tag == 264) {
         parse_uptime:
          set_has_uptime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_system_cpu;
        break;
      }

      // repeated uint32 system_cpu = 34;
      case 34: {
        if (tag == 272) {
         parse_system_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 272, input, this->mutable_system_cpu())));
        } else if (tag == 274) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_system_cpu())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_system_cpu;
        if (input->ExpectTag(280)) goto parse_user_cpu;
        break;
      }

      // repeated uint32 user_cpu = 35;
      case 35: {
        if (tag == 280) {
         parse_user_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 280, input, this->mutable_user_cpu())));
        } else if (tag == 282) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_cpu())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_user_cpu;
        if (input->ExpectTag(288)) goto parse_memory_bytes_available_kb;
        break;
      }

      // optional uint64 memory_bytes_available_kb = 36;
      case 36: {
        if (tag == 288) {
         parse_memory_bytes_available_kb:
          set_has_memory_bytes_available_kb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_bytes_available_kb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_iowait_cpu;
        break;
      }

      // repeated uint32 iowait_cpu = 37;
      case 37: {
        if (tag == 296) {
         parse_iowait_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 296, input, this->mutable_iowait_cpu())));
        } else if (tag == 298) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_iowait_cpu())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_iowait_cpu;
        if (input->ExpectTag(304)) goto parse_nice_cpu;
        break;
      }

      // repeated uint32 nice_cpu = 38;
      case 38: {
        if (tag == 304) {
         parse_nice_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 304, input, this->mutable_nice_cpu())));
        } else if (tag == 306) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_nice_cpu())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_nice_cpu;
        if (input->ExpectTag(328)) goto parse_system_load_1;
        break;
      }

      // optional uint32 system_load_1 = 41;
      case 41: {
        if (tag == 328) {
         parse_system_load_1:
          set_has_system_load_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_load_1_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_system_load_5;
        break;
      }

      // optional uint32 system_load_5 = 42;
      case 42: {
        if (tag == 336) {
         parse_system_load_5:
          set_has_system_load_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_load_5_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_system_load_15;
        break;
      }

      // optional uint32 system_load_15 = 43;
      case 43: {
        if (tag == 344) {
         parse_system_load_15:
          set_has_system_load_15();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_load_15_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.host)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.host)
  return false;
#undef DO_
}

void host::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.host)
  // optional string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.host.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // optional uint32 num_cpus = 2;
  if (has_num_cpus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_cpus(), output);
  }

  // repeated uint32 cpu_loads = 3;
  for (int i = 0; i < this->cpu_loads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->cpu_loads(i), output);
  }

  // required uint64 physical_memory_size_bytes = 4;
  if (has_physical_memory_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->physical_memory_size_bytes(), output);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->tcounters_, output);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
  if (has_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->transaction_counters_, output);
  }

  // optional uint64 transaction_processing_delay = 7;
  if (has_transaction_processing_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->transaction_processing_delay(), output);
  }

  // optional .draiosproto.resource_categories resource_counters = 8;
  if (has_resource_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->resource_counters_, output);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
  if (has_syscall_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->syscall_errors_, output);
  }

  // optional .draiosproto.counter_time_bytes external_io_net = 10;
  if (has_external_io_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->external_io_net_, output);
  }

  // repeated uint32 cpu_steal = 11;
  for (int i = 0; i < this->cpu_steal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->cpu_steal(i), output);
  }

  // optional .draiosproto.transaction_breakdown_categories reqcounters = 12;
  if (has_reqcounters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->reqcounters_, output);
  }

  // optional uint64 next_tiers_delay = 13;
  if (has_next_tiers_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->next_tiers_delay(), output);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 22;
  if (has_min_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->min_transaction_counters_, output);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 23;
  if (has_max_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->max_transaction_counters_, output);
  }

  // repeated .draiosproto.network_by_port network_by_serverports = 24;
  for (unsigned int i = 0, n = this->network_by_serverports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->network_by_serverports(i), output);
  }

  // repeated uint32 cpu_idle = 25;
  for (int i = 0; i < this->cpu_idle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      25, this->cpu_idle(i), output);
  }

  // optional uint64 uptime = 33;
  if (has_uptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->uptime(), output);
  }

  // repeated uint32 system_cpu = 34;
  for (int i = 0; i < this->system_cpu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      34, this->system_cpu(i), output);
  }

  // repeated uint32 user_cpu = 35;
  for (int i = 0; i < this->user_cpu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      35, this->user_cpu(i), output);
  }

  // optional uint64 memory_bytes_available_kb = 36;
  if (has_memory_bytes_available_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(36, this->memory_bytes_available_kb(), output);
  }

  // repeated uint32 iowait_cpu = 37;
  for (int i = 0; i < this->iowait_cpu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      37, this->iowait_cpu(i), output);
  }

  // repeated uint32 nice_cpu = 38;
  for (int i = 0; i < this->nice_cpu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      38, this->nice_cpu(i), output);
  }

  // optional uint32 system_load_1 = 41;
  if (has_system_load_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->system_load_1(), output);
  }

  // optional uint32 system_load_5 = 42;
  if (has_system_load_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->system_load_5(), output);
  }

  // optional uint32 system_load_15 = 43;
  if (has_system_load_15()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->system_load_15(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.host)
}

::google::protobuf::uint8* host::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.host)
  // optional string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.host.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // optional uint32 num_cpus = 2;
  if (has_num_cpus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_cpus(), target);
  }

  // repeated uint32 cpu_loads = 3;
  for (int i = 0; i < this->cpu_loads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->cpu_loads(i), target);
  }

  // required uint64 physical_memory_size_bytes = 4;
  if (has_physical_memory_size_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->physical_memory_size_bytes(), target);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->tcounters_, false, target);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
  if (has_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->transaction_counters_, false, target);
  }

  // optional uint64 transaction_processing_delay = 7;
  if (has_transaction_processing_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->transaction_processing_delay(), target);
  }

  // optional .draiosproto.resource_categories resource_counters = 8;
  if (has_resource_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->resource_counters_, false, target);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
  if (has_syscall_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->syscall_errors_, false, target);
  }

  // optional .draiosproto.counter_time_bytes external_io_net = 10;
  if (has_external_io_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->external_io_net_, false, target);
  }

  // repeated uint32 cpu_steal = 11;
  for (int i = 0; i < this->cpu_steal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->cpu_steal(i), target);
  }

  // optional .draiosproto.transaction_breakdown_categories reqcounters = 12;
  if (has_reqcounters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->reqcounters_, false, target);
  }

  // optional uint64 next_tiers_delay = 13;
  if (has_next_tiers_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->next_tiers_delay(), target);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 22;
  if (has_min_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->min_transaction_counters_, false, target);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 23;
  if (has_max_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->max_transaction_counters_, false, target);
  }

  // repeated .draiosproto.network_by_port network_by_serverports = 24;
  for (unsigned int i = 0, n = this->network_by_serverports_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, this->network_by_serverports(i), false, target);
  }

  // repeated uint32 cpu_idle = 25;
  for (int i = 0; i < this->cpu_idle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(25, this->cpu_idle(i), target);
  }

  // optional uint64 uptime = 33;
  if (has_uptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->uptime(), target);
  }

  // repeated uint32 system_cpu = 34;
  for (int i = 0; i < this->system_cpu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(34, this->system_cpu(i), target);
  }

  // repeated uint32 user_cpu = 35;
  for (int i = 0; i < this->user_cpu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(35, this->user_cpu(i), target);
  }

  // optional uint64 memory_bytes_available_kb = 36;
  if (has_memory_bytes_available_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(36, this->memory_bytes_available_kb(), target);
  }

  // repeated uint32 iowait_cpu = 37;
  for (int i = 0; i < this->iowait_cpu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(37, this->iowait_cpu(i), target);
  }

  // repeated uint32 nice_cpu = 38;
  for (int i = 0; i < this->nice_cpu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(38, this->nice_cpu(i), target);
  }

  // optional uint32 system_load_1 = 41;
  if (has_system_load_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->system_load_1(), target);
  }

  // optional uint32 system_load_5 = 42;
  if (has_system_load_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->system_load_5(), target);
  }

  // optional uint32 system_load_15 = 43;
  if (has_system_load_15()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->system_load_15(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.host)
  return target;
}

size_t host::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.host)
  size_t total_size = 0;

  // required uint64 physical_memory_size_bytes = 4;
  if (has_physical_memory_size_bytes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->physical_memory_size_bytes());
  }
  if (_has_bits_[0 / 32] & 227u) {
    // optional string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional uint32 num_cpus = 2;
    if (has_num_cpus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_cpus());
    }

    // optional .draiosproto.time_categories tcounters = 5;
    if (has_tcounters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tcounters_);
    }

    // optional .draiosproto.transaction_breakdown_categories reqcounters = 12;
    if (has_reqcounters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reqcounters_);
    }

    // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
    if (has_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_counters_);
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 22;
    if (has_min_transaction_counters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->min_transaction_counters_);
    }

    // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 23;
    if (has_max_transaction_counters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->max_transaction_counters_);
    }

    // optional uint64 transaction_processing_delay = 7;
    if (has_transaction_processing_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_processing_delay());
    }

    // optional uint64 next_tiers_delay = 13;
    if (has_next_tiers_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_tiers_delay());
    }

    // optional .draiosproto.resource_categories resource_counters = 8;
    if (has_resource_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resource_counters_);
    }

    // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
    if (has_syscall_errors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->syscall_errors_);
    }

    // optional .draiosproto.counter_time_bytes external_io_net = 10;
    if (has_external_io_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->external_io_net_);
    }

  }
  if (_has_bits_[17 / 32] & 9568256u) {
    // optional uint64 uptime = 33;
    if (has_uptime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uptime());
    }

    // optional uint64 memory_bytes_available_kb = 36;
    if (has_memory_bytes_available_kb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memory_bytes_available_kb());
    }

    // optional uint32 system_load_1 = 41;
    if (has_system_load_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->system_load_1());
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional uint32 system_load_5 = 42;
    if (has_system_load_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->system_load_5());
    }

    // optional uint32 system_load_15 = 43;
    if (has_system_load_15()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->system_load_15());
    }

  }
  // repeated uint32 cpu_loads = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->cpu_loads_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cpu_loads(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cpu_loads_size());
    total_size += data_size;
  }

  // repeated uint32 cpu_steal = 11;
  {
    size_t data_size = 0;
    unsigned int count = this->cpu_steal_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cpu_steal(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cpu_steal_size());
    total_size += data_size;
  }

  // repeated .draiosproto.network_by_port network_by_serverports = 24;
  {
    unsigned int count = this->network_by_serverports_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network_by_serverports(i));
    }
  }

  // repeated uint32 cpu_idle = 25;
  {
    size_t data_size = 0;
    unsigned int count = this->cpu_idle_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cpu_idle(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->cpu_idle_size());
    total_size += data_size;
  }

  // repeated uint32 system_cpu = 34;
  {
    size_t data_size = 0;
    unsigned int count = this->system_cpu_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->system_cpu(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->system_cpu_size());
    total_size += data_size;
  }

  // repeated uint32 user_cpu = 35;
  {
    size_t data_size = 0;
    unsigned int count = this->user_cpu_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_cpu(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->user_cpu_size());
    total_size += data_size;
  }

  // repeated uint32 iowait_cpu = 37;
  {
    size_t data_size = 0;
    unsigned int count = this->iowait_cpu_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->iowait_cpu(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->iowait_cpu_size());
    total_size += data_size;
  }

  // repeated uint32 nice_cpu = 38;
  {
    size_t data_size = 0;
    unsigned int count = this->nice_cpu_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->nice_cpu(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->nice_cpu_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void host::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.host)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const host* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const host>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.host)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.host)
    UnsafeMergeFrom(*source);
  }
}

void host::MergeFrom(const host& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.host)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void host::UnsafeMergeFrom(const host& from) {
  GOOGLE_DCHECK(&from != this);
  cpu_loads_.UnsafeMergeFrom(from.cpu_loads_);
  cpu_steal_.UnsafeMergeFrom(from.cpu_steal_);
  network_by_serverports_.MergeFrom(from.network_by_serverports_);
  cpu_idle_.UnsafeMergeFrom(from.cpu_idle_);
  system_cpu_.UnsafeMergeFrom(from.system_cpu_);
  user_cpu_.UnsafeMergeFrom(from.user_cpu_);
  iowait_cpu_.UnsafeMergeFrom(from.iowait_cpu_);
  nice_cpu_.UnsafeMergeFrom(from.nice_cpu_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_has_hostname();
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (from.has_num_cpus()) {
      set_num_cpus(from.num_cpus());
    }
    if (from.has_physical_memory_size_bytes()) {
      set_physical_memory_size_bytes(from.physical_memory_size_bytes());
    }
    if (from.has_tcounters()) {
      mutable_tcounters()->::draiosproto::time_categories::MergeFrom(from.tcounters());
    }
    if (from.has_reqcounters()) {
      mutable_reqcounters()->::draiosproto::transaction_breakdown_categories::MergeFrom(from.reqcounters());
    }
    if (from.has_transaction_counters()) {
      mutable_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.transaction_counters());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_min_transaction_counters()) {
      mutable_min_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.min_transaction_counters());
    }
    if (from.has_max_transaction_counters()) {
      mutable_max_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.max_transaction_counters());
    }
    if (from.has_transaction_processing_delay()) {
      set_transaction_processing_delay(from.transaction_processing_delay());
    }
    if (from.has_next_tiers_delay()) {
      set_next_tiers_delay(from.next_tiers_delay());
    }
    if (from.has_resource_counters()) {
      mutable_resource_counters()->::draiosproto::resource_categories::MergeFrom(from.resource_counters());
    }
    if (from.has_syscall_errors()) {
      mutable_syscall_errors()->::draiosproto::counter_syscall_errors::MergeFrom(from.syscall_errors());
    }
    if (from.has_external_io_net()) {
      mutable_external_io_net()->::draiosproto::counter_time_bytes::MergeFrom(from.external_io_net());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_uptime()) {
      set_uptime(from.uptime());
    }
    if (from.has_memory_bytes_available_kb()) {
      set_memory_bytes_available_kb(from.memory_bytes_available_kb());
    }
    if (from.has_system_load_1()) {
      set_system_load_1(from.system_load_1());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_system_load_5()) {
      set_system_load_5(from.system_load_5());
    }
    if (from.has_system_load_15()) {
      set_system_load_15(from.system_load_15());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void host::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.host)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void host::CopyFrom(const host& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.host)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool host::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  if (has_tcounters()) {
    if (!this->tcounters_->IsInitialized()) return false;
  }
  if (has_reqcounters()) {
    if (!this->reqcounters_->IsInitialized()) return false;
  }
  if (has_transaction_counters()) {
    if (!this->transaction_counters_->IsInitialized()) return false;
  }
  if (has_min_transaction_counters()) {
    if (!this->min_transaction_counters_->IsInitialized()) return false;
  }
  if (has_max_transaction_counters()) {
    if (!this->max_transaction_counters_->IsInitialized()) return false;
  }
  if (has_syscall_errors()) {
    if (!this->syscall_errors_->IsInitialized()) return false;
  }
  if (has_external_io_net()) {
    if (!this->external_io_net_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->network_by_serverports())) return false;
  return true;
}

void host::Swap(host* other) {
  if (other == this) return;
  InternalSwap(other);
}
void host::InternalSwap(host* other) {
  hostname_.Swap(&other->hostname_);
  std::swap(num_cpus_, other->num_cpus_);
  cpu_loads_.UnsafeArenaSwap(&other->cpu_loads_);
  cpu_steal_.UnsafeArenaSwap(&other->cpu_steal_);
  std::swap(physical_memory_size_bytes_, other->physical_memory_size_bytes_);
  std::swap(tcounters_, other->tcounters_);
  std::swap(reqcounters_, other->reqcounters_);
  std::swap(transaction_counters_, other->transaction_counters_);
  std::swap(min_transaction_counters_, other->min_transaction_counters_);
  std::swap(max_transaction_counters_, other->max_transaction_counters_);
  std::swap(transaction_processing_delay_, other->transaction_processing_delay_);
  std::swap(next_tiers_delay_, other->next_tiers_delay_);
  std::swap(resource_counters_, other->resource_counters_);
  std::swap(syscall_errors_, other->syscall_errors_);
  std::swap(external_io_net_, other->external_io_net_);
  network_by_serverports_.UnsafeArenaSwap(&other->network_by_serverports_);
  cpu_idle_.UnsafeArenaSwap(&other->cpu_idle_);
  std::swap(uptime_, other->uptime_);
  system_cpu_.UnsafeArenaSwap(&other->system_cpu_);
  user_cpu_.UnsafeArenaSwap(&other->user_cpu_);
  std::swap(memory_bytes_available_kb_, other->memory_bytes_available_kb_);
  iowait_cpu_.UnsafeArenaSwap(&other->iowait_cpu_);
  nice_cpu_.UnsafeArenaSwap(&other->nice_cpu_);
  std::swap(system_load_1_, other->system_load_1_);
  std::swap(system_load_5_, other->system_load_5_);
  std::swap(system_load_15_, other->system_load_15_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata host::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = host_descriptor_;
  metadata.reflection = host_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// host

// optional string hostname = 1;
bool host::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void host::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
void host::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
void host::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
const ::std::string& host::hostname() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void host::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.host.hostname)
}
void host::set_hostname(const char* value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.host.hostname)
}
void host::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.host.hostname)
}
::std::string* host::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:draiosproto.host.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* host::release_hostname() {
  // @@protoc_insertion_point(field_release:draiosproto.host.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void host::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.host.hostname)
}

// optional uint32 num_cpus = 2;
bool host::has_num_cpus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void host::set_has_num_cpus() {
  _has_bits_[0] |= 0x00000002u;
}
void host::clear_has_num_cpus() {
  _has_bits_[0] &= ~0x00000002u;
}
void host::clear_num_cpus() {
  num_cpus_ = 0u;
  clear_has_num_cpus();
}
::google::protobuf::uint32 host::num_cpus() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.num_cpus)
  return num_cpus_;
}
void host::set_num_cpus(::google::protobuf::uint32 value) {
  set_has_num_cpus();
  num_cpus_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.host.num_cpus)
}

// repeated uint32 cpu_loads = 3;
int host::cpu_loads_size() const {
  return cpu_loads_.size();
}
void host::clear_cpu_loads() {
  cpu_loads_.Clear();
}
::google::protobuf::uint32 host::cpu_loads(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.host.cpu_loads)
  return cpu_loads_.Get(index);
}
void host::set_cpu_loads(int index, ::google::protobuf::uint32 value) {
  cpu_loads_.Set(index, value);
  // @@protoc_insertion_point(field_set:draiosproto.host.cpu_loads)
}
void host::add_cpu_loads(::google::protobuf::uint32 value) {
  cpu_loads_.Add(value);
  // @@protoc_insertion_point(field_add:draiosproto.host.cpu_loads)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
host::cpu_loads() const {
  // @@protoc_insertion_point(field_list:draiosproto.host.cpu_loads)
  return cpu_loads_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
host::mutable_cpu_loads() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.host.cpu_loads)
  return &cpu_loads_;
}

// repeated uint32 cpu_steal = 11;
int host::cpu_steal_size() const {
  return cpu_steal_.size();
}
void host::clear_cpu_steal() {
  cpu_steal_.Clear();
}
::google::protobuf::uint32 host::cpu_steal(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.host.cpu_steal)
  return cpu_steal_.Get(index);
}
void host::set_cpu_steal(int index, ::google::protobuf::uint32 value) {
  cpu_steal_.Set(index, value);
  // @@protoc_insertion_point(field_set:draiosproto.host.cpu_steal)
}
void host::add_cpu_steal(::google::protobuf::uint32 value) {
  cpu_steal_.Add(value);
  // @@protoc_insertion_point(field_add:draiosproto.host.cpu_steal)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
host::cpu_steal() const {
  // @@protoc_insertion_point(field_list:draiosproto.host.cpu_steal)
  return cpu_steal_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
host::mutable_cpu_steal() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.host.cpu_steal)
  return &cpu_steal_;
}

// required uint64 physical_memory_size_bytes = 4;
bool host::has_physical_memory_size_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void host::set_has_physical_memory_size_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
void host::clear_has_physical_memory_size_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
void host::clear_physical_memory_size_bytes() {
  physical_memory_size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_physical_memory_size_bytes();
}
::google::protobuf::uint64 host::physical_memory_size_bytes() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.physical_memory_size_bytes)
  return physical_memory_size_bytes_;
}
void host::set_physical_memory_size_bytes(::google::protobuf::uint64 value) {
  set_has_physical_memory_size_bytes();
  physical_memory_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.host.physical_memory_size_bytes)
}

// optional .draiosproto.time_categories tcounters = 5;
bool host::has_tcounters() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void host::set_has_tcounters() {
  _has_bits_[0] |= 0x00000020u;
}
void host::clear_has_tcounters() {
  _has_bits_[0] &= ~0x00000020u;
}
void host::clear_tcounters() {
  if (tcounters_ != NULL) tcounters_->::draiosproto::time_categories::Clear();
  clear_has_tcounters();
}
const ::draiosproto::time_categories& host::tcounters() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.tcounters)
  return tcounters_ != NULL ? *tcounters_
                         : *::draiosproto::time_categories::internal_default_instance();
}
::draiosproto::time_categories* host::mutable_tcounters() {
  set_has_tcounters();
  if (tcounters_ == NULL) {
    tcounters_ = new ::draiosproto::time_categories;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.host.tcounters)
  return tcounters_;
}
::draiosproto::time_categories* host::release_tcounters() {
  // @@protoc_insertion_point(field_release:draiosproto.host.tcounters)
  clear_has_tcounters();
  ::draiosproto::time_categories* temp = tcounters_;
  tcounters_ = NULL;
  return temp;
}
void host::set_allocated_tcounters(::draiosproto::time_categories* tcounters) {
  delete tcounters_;
  tcounters_ = tcounters;
  if (tcounters) {
    set_has_tcounters();
  } else {
    clear_has_tcounters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.host.tcounters)
}

// optional .draiosproto.transaction_breakdown_categories reqcounters = 12;
bool host::has_reqcounters() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void host::set_has_reqcounters() {
  _has_bits_[0] |= 0x00000040u;
}
void host::clear_has_reqcounters() {
  _has_bits_[0] &= ~0x00000040u;
}
void host::clear_reqcounters() {
  if (reqcounters_ != NULL) reqcounters_->::draiosproto::transaction_breakdown_categories::Clear();
  clear_has_reqcounters();
}
const ::draiosproto::transaction_breakdown_categories& host::reqcounters() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.reqcounters)
  return reqcounters_ != NULL ? *reqcounters_
                         : *::draiosproto::transaction_breakdown_categories::internal_default_instance();
}
::draiosproto::transaction_breakdown_categories* host::mutable_reqcounters() {
  set_has_reqcounters();
  if (reqcounters_ == NULL) {
    reqcounters_ = new ::draiosproto::transaction_breakdown_categories;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.host.reqcounters)
  return reqcounters_;
}
::draiosproto::transaction_breakdown_categories* host::release_reqcounters() {
  // @@protoc_insertion_point(field_release:draiosproto.host.reqcounters)
  clear_has_reqcounters();
  ::draiosproto::transaction_breakdown_categories* temp = reqcounters_;
  reqcounters_ = NULL;
  return temp;
}
void host::set_allocated_reqcounters(::draiosproto::transaction_breakdown_categories* reqcounters) {
  delete reqcounters_;
  reqcounters_ = reqcounters;
  if (reqcounters) {
    set_has_reqcounters();
  } else {
    clear_has_reqcounters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.host.reqcounters)
}

// optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
bool host::has_transaction_counters() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void host::set_has_transaction_counters() {
  _has_bits_[0] |= 0x00000080u;
}
void host::clear_has_transaction_counters() {
  _has_bits_[0] &= ~0x00000080u;
}
void host::clear_transaction_counters() {
  if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
  clear_has_transaction_counters();
}
const ::draiosproto::counter_time_bidirectional& host::transaction_counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.transaction_counters)
  return transaction_counters_ != NULL ? *transaction_counters_
                         : *::draiosproto::counter_time_bidirectional::internal_default_instance();
}
::draiosproto::counter_time_bidirectional* host::mutable_transaction_counters() {
  set_has_transaction_counters();
  if (transaction_counters_ == NULL) {
    transaction_counters_ = new ::draiosproto::counter_time_bidirectional;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.host.transaction_counters)
  return transaction_counters_;
}
::draiosproto::counter_time_bidirectional* host::release_transaction_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.host.transaction_counters)
  clear_has_transaction_counters();
  ::draiosproto::counter_time_bidirectional* temp = transaction_counters_;
  transaction_counters_ = NULL;
  return temp;
}
void host::set_allocated_transaction_counters(::draiosproto::counter_time_bidirectional* transaction_counters) {
  delete transaction_counters_;
  transaction_counters_ = transaction_counters;
  if (transaction_counters) {
    set_has_transaction_counters();
  } else {
    clear_has_transaction_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.host.transaction_counters)
}

// optional .draiosproto.counter_time_bidirectional min_transaction_counters = 22;
bool host::has_min_transaction_counters() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void host::set_has_min_transaction_counters() {
  _has_bits_[0] |= 0x00000100u;
}
void host::clear_has_min_transaction_counters() {
  _has_bits_[0] &= ~0x00000100u;
}
void host::clear_min_transaction_counters() {
  if (min_transaction_counters_ != NULL) min_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
  clear_has_min_transaction_counters();
}
const ::draiosproto::counter_time_bidirectional& host::min_transaction_counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.min_transaction_counters)
  return min_transaction_counters_ != NULL ? *min_transaction_counters_
                         : *::draiosproto::counter_time_bidirectional::internal_default_instance();
}
::draiosproto::counter_time_bidirectional* host::mutable_min_transaction_counters() {
  set_has_min_transaction_counters();
  if (min_transaction_counters_ == NULL) {
    min_transaction_counters_ = new ::draiosproto::counter_time_bidirectional;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.host.min_transaction_counters)
  return min_transaction_counters_;
}
::draiosproto::counter_time_bidirectional* host::release_min_transaction_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.host.min_transaction_counters)
  clear_has_min_transaction_counters();
  ::draiosproto::counter_time_bidirectional* temp = min_transaction_counters_;
  min_transaction_counters_ = NULL;
  return temp;
}
void host::set_allocated_min_transaction_counters(::draiosproto::counter_time_bidirectional* min_transaction_counters) {
  delete min_transaction_counters_;
  min_transaction_counters_ = min_transaction_counters;
  if (min_transaction_counters) {
    set_has_min_transaction_counters();
  } else {
    clear_has_min_transaction_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.host.min_transaction_counters)
}

// optional .draiosproto.counter_time_bidirectional max_transaction_counters = 23;
bool host::has_max_transaction_counters() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void host::set_has_max_transaction_counters() {
  _has_bits_[0] |= 0x00000200u;
}
void host::clear_has_max_transaction_counters() {
  _has_bits_[0] &= ~0x00000200u;
}
void host::clear_max_transaction_counters() {
  if (max_transaction_counters_ != NULL) max_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
  clear_has_max_transaction_counters();
}
const ::draiosproto::counter_time_bidirectional& host::max_transaction_counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.max_transaction_counters)
  return max_transaction_counters_ != NULL ? *max_transaction_counters_
                         : *::draiosproto::counter_time_bidirectional::internal_default_instance();
}
::draiosproto::counter_time_bidirectional* host::mutable_max_transaction_counters() {
  set_has_max_transaction_counters();
  if (max_transaction_counters_ == NULL) {
    max_transaction_counters_ = new ::draiosproto::counter_time_bidirectional;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.host.max_transaction_counters)
  return max_transaction_counters_;
}
::draiosproto::counter_time_bidirectional* host::release_max_transaction_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.host.max_transaction_counters)
  clear_has_max_transaction_counters();
  ::draiosproto::counter_time_bidirectional* temp = max_transaction_counters_;
  max_transaction_counters_ = NULL;
  return temp;
}
void host::set_allocated_max_transaction_counters(::draiosproto::counter_time_bidirectional* max_transaction_counters) {
  delete max_transaction_counters_;
  max_transaction_counters_ = max_transaction_counters;
  if (max_transaction_counters) {
    set_has_max_transaction_counters();
  } else {
    clear_has_max_transaction_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.host.max_transaction_counters)
}

// optional uint64 transaction_processing_delay = 7;
bool host::has_transaction_processing_delay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void host::set_has_transaction_processing_delay() {
  _has_bits_[0] |= 0x00000400u;
}
void host::clear_has_transaction_processing_delay() {
  _has_bits_[0] &= ~0x00000400u;
}
void host::clear_transaction_processing_delay() {
  transaction_processing_delay_ = GOOGLE_ULONGLONG(0);
  clear_has_transaction_processing_delay();
}
::google::protobuf::uint64 host::transaction_processing_delay() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.transaction_processing_delay)
  return transaction_processing_delay_;
}
void host::set_transaction_processing_delay(::google::protobuf::uint64 value) {
  set_has_transaction_processing_delay();
  transaction_processing_delay_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.host.transaction_processing_delay)
}

// optional uint64 next_tiers_delay = 13;
bool host::has_next_tiers_delay() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void host::set_has_next_tiers_delay() {
  _has_bits_[0] |= 0x00000800u;
}
void host::clear_has_next_tiers_delay() {
  _has_bits_[0] &= ~0x00000800u;
}
void host::clear_next_tiers_delay() {
  next_tiers_delay_ = GOOGLE_ULONGLONG(0);
  clear_has_next_tiers_delay();
}
::google::protobuf::uint64 host::next_tiers_delay() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.next_tiers_delay)
  return next_tiers_delay_;
}
void host::set_next_tiers_delay(::google::protobuf::uint64 value) {
  set_has_next_tiers_delay();
  next_tiers_delay_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.host.next_tiers_delay)
}

// optional .draiosproto.resource_categories resource_counters = 8;
bool host::has_resource_counters() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void host::set_has_resource_counters() {
  _has_bits_[0] |= 0x00001000u;
}
void host::clear_has_resource_counters() {
  _has_bits_[0] &= ~0x00001000u;
}
void host::clear_resource_counters() {
  if (resource_counters_ != NULL) resource_counters_->::draiosproto::resource_categories::Clear();
  clear_has_resource_counters();
}
const ::draiosproto::resource_categories& host::resource_counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.resource_counters)
  return resource_counters_ != NULL ? *resource_counters_
                         : *::draiosproto::resource_categories::internal_default_instance();
}
::draiosproto::resource_categories* host::mutable_resource_counters() {
  set_has_resource_counters();
  if (resource_counters_ == NULL) {
    resource_counters_ = new ::draiosproto::resource_categories;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.host.resource_counters)
  return resource_counters_;
}
::draiosproto::resource_categories* host::release_resource_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.host.resource_counters)
  clear_has_resource_counters();
  ::draiosproto::resource_categories* temp = resource_counters_;
  resource_counters_ = NULL;
  return temp;
}
void host::set_allocated_resource_counters(::draiosproto::resource_categories* resource_counters) {
  delete resource_counters_;
  resource_counters_ = resource_counters;
  if (resource_counters) {
    set_has_resource_counters();
  } else {
    clear_has_resource_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.host.resource_counters)
}

// optional .draiosproto.counter_syscall_errors syscall_errors = 9;
bool host::has_syscall_errors() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void host::set_has_syscall_errors() {
  _has_bits_[0] |= 0x00002000u;
}
void host::clear_has_syscall_errors() {
  _has_bits_[0] &= ~0x00002000u;
}
void host::clear_syscall_errors() {
  if (syscall_errors_ != NULL) syscall_errors_->::draiosproto::counter_syscall_errors::Clear();
  clear_has_syscall_errors();
}
const ::draiosproto::counter_syscall_errors& host::syscall_errors() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.syscall_errors)
  return syscall_errors_ != NULL ? *syscall_errors_
                         : *::draiosproto::counter_syscall_errors::internal_default_instance();
}
::draiosproto::counter_syscall_errors* host::mutable_syscall_errors() {
  set_has_syscall_errors();
  if (syscall_errors_ == NULL) {
    syscall_errors_ = new ::draiosproto::counter_syscall_errors;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.host.syscall_errors)
  return syscall_errors_;
}
::draiosproto::counter_syscall_errors* host::release_syscall_errors() {
  // @@protoc_insertion_point(field_release:draiosproto.host.syscall_errors)
  clear_has_syscall_errors();
  ::draiosproto::counter_syscall_errors* temp = syscall_errors_;
  syscall_errors_ = NULL;
  return temp;
}
void host::set_allocated_syscall_errors(::draiosproto::counter_syscall_errors* syscall_errors) {
  delete syscall_errors_;
  syscall_errors_ = syscall_errors;
  if (syscall_errors) {
    set_has_syscall_errors();
  } else {
    clear_has_syscall_errors();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.host.syscall_errors)
}

// optional .draiosproto.counter_time_bytes external_io_net = 10;
bool host::has_external_io_net() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void host::set_has_external_io_net() {
  _has_bits_[0] |= 0x00004000u;
}
void host::clear_has_external_io_net() {
  _has_bits_[0] &= ~0x00004000u;
}
void host::clear_external_io_net() {
  if (external_io_net_ != NULL) external_io_net_->::draiosproto::counter_time_bytes::Clear();
  clear_has_external_io_net();
}
const ::draiosproto::counter_time_bytes& host::external_io_net() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.external_io_net)
  return external_io_net_ != NULL ? *external_io_net_
                         : *::draiosproto::counter_time_bytes::internal_default_instance();
}
::draiosproto::counter_time_bytes* host::mutable_external_io_net() {
  set_has_external_io_net();
  if (external_io_net_ == NULL) {
    external_io_net_ = new ::draiosproto::counter_time_bytes;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.host.external_io_net)
  return external_io_net_;
}
::draiosproto::counter_time_bytes* host::release_external_io_net() {
  // @@protoc_insertion_point(field_release:draiosproto.host.external_io_net)
  clear_has_external_io_net();
  ::draiosproto::counter_time_bytes* temp = external_io_net_;
  external_io_net_ = NULL;
  return temp;
}
void host::set_allocated_external_io_net(::draiosproto::counter_time_bytes* external_io_net) {
  delete external_io_net_;
  external_io_net_ = external_io_net;
  if (external_io_net) {
    set_has_external_io_net();
  } else {
    clear_has_external_io_net();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.host.external_io_net)
}

// repeated .draiosproto.network_by_port network_by_serverports = 24;
int host::network_by_serverports_size() const {
  return network_by_serverports_.size();
}
void host::clear_network_by_serverports() {
  network_by_serverports_.Clear();
}
const ::draiosproto::network_by_port& host::network_by_serverports(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.host.network_by_serverports)
  return network_by_serverports_.Get(index);
}
::draiosproto::network_by_port* host::mutable_network_by_serverports(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.host.network_by_serverports)
  return network_by_serverports_.Mutable(index);
}
::draiosproto::network_by_port* host::add_network_by_serverports() {
  // @@protoc_insertion_point(field_add:draiosproto.host.network_by_serverports)
  return network_by_serverports_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::network_by_port >*
host::mutable_network_by_serverports() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.host.network_by_serverports)
  return &network_by_serverports_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::network_by_port >&
host::network_by_serverports() const {
  // @@protoc_insertion_point(field_list:draiosproto.host.network_by_serverports)
  return network_by_serverports_;
}

// repeated uint32 cpu_idle = 25;
int host::cpu_idle_size() const {
  return cpu_idle_.size();
}
void host::clear_cpu_idle() {
  cpu_idle_.Clear();
}
::google::protobuf::uint32 host::cpu_idle(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.host.cpu_idle)
  return cpu_idle_.Get(index);
}
void host::set_cpu_idle(int index, ::google::protobuf::uint32 value) {
  cpu_idle_.Set(index, value);
  // @@protoc_insertion_point(field_set:draiosproto.host.cpu_idle)
}
void host::add_cpu_idle(::google::protobuf::uint32 value) {
  cpu_idle_.Add(value);
  // @@protoc_insertion_point(field_add:draiosproto.host.cpu_idle)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
host::cpu_idle() const {
  // @@protoc_insertion_point(field_list:draiosproto.host.cpu_idle)
  return cpu_idle_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
host::mutable_cpu_idle() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.host.cpu_idle)
  return &cpu_idle_;
}

// optional uint64 uptime = 33;
bool host::has_uptime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void host::set_has_uptime() {
  _has_bits_[0] |= 0x00020000u;
}
void host::clear_has_uptime() {
  _has_bits_[0] &= ~0x00020000u;
}
void host::clear_uptime() {
  uptime_ = GOOGLE_ULONGLONG(0);
  clear_has_uptime();
}
::google::protobuf::uint64 host::uptime() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.uptime)
  return uptime_;
}
void host::set_uptime(::google::protobuf::uint64 value) {
  set_has_uptime();
  uptime_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.host.uptime)
}

// repeated uint32 system_cpu = 34;
int host::system_cpu_size() const {
  return system_cpu_.size();
}
void host::clear_system_cpu() {
  system_cpu_.Clear();
}
::google::protobuf::uint32 host::system_cpu(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.host.system_cpu)
  return system_cpu_.Get(index);
}
void host::set_system_cpu(int index, ::google::protobuf::uint32 value) {
  system_cpu_.Set(index, value);
  // @@protoc_insertion_point(field_set:draiosproto.host.system_cpu)
}
void host::add_system_cpu(::google::protobuf::uint32 value) {
  system_cpu_.Add(value);
  // @@protoc_insertion_point(field_add:draiosproto.host.system_cpu)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
host::system_cpu() const {
  // @@protoc_insertion_point(field_list:draiosproto.host.system_cpu)
  return system_cpu_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
host::mutable_system_cpu() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.host.system_cpu)
  return &system_cpu_;
}

// repeated uint32 user_cpu = 35;
int host::user_cpu_size() const {
  return user_cpu_.size();
}
void host::clear_user_cpu() {
  user_cpu_.Clear();
}
::google::protobuf::uint32 host::user_cpu(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.host.user_cpu)
  return user_cpu_.Get(index);
}
void host::set_user_cpu(int index, ::google::protobuf::uint32 value) {
  user_cpu_.Set(index, value);
  // @@protoc_insertion_point(field_set:draiosproto.host.user_cpu)
}
void host::add_user_cpu(::google::protobuf::uint32 value) {
  user_cpu_.Add(value);
  // @@protoc_insertion_point(field_add:draiosproto.host.user_cpu)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
host::user_cpu() const {
  // @@protoc_insertion_point(field_list:draiosproto.host.user_cpu)
  return user_cpu_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
host::mutable_user_cpu() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.host.user_cpu)
  return &user_cpu_;
}

// optional uint64 memory_bytes_available_kb = 36;
bool host::has_memory_bytes_available_kb() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void host::set_has_memory_bytes_available_kb() {
  _has_bits_[0] |= 0x00100000u;
}
void host::clear_has_memory_bytes_available_kb() {
  _has_bits_[0] &= ~0x00100000u;
}
void host::clear_memory_bytes_available_kb() {
  memory_bytes_available_kb_ = GOOGLE_ULONGLONG(0);
  clear_has_memory_bytes_available_kb();
}
::google::protobuf::uint64 host::memory_bytes_available_kb() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.memory_bytes_available_kb)
  return memory_bytes_available_kb_;
}
void host::set_memory_bytes_available_kb(::google::protobuf::uint64 value) {
  set_has_memory_bytes_available_kb();
  memory_bytes_available_kb_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.host.memory_bytes_available_kb)
}

// repeated uint32 iowait_cpu = 37;
int host::iowait_cpu_size() const {
  return iowait_cpu_.size();
}
void host::clear_iowait_cpu() {
  iowait_cpu_.Clear();
}
::google::protobuf::uint32 host::iowait_cpu(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.host.iowait_cpu)
  return iowait_cpu_.Get(index);
}
void host::set_iowait_cpu(int index, ::google::protobuf::uint32 value) {
  iowait_cpu_.Set(index, value);
  // @@protoc_insertion_point(field_set:draiosproto.host.iowait_cpu)
}
void host::add_iowait_cpu(::google::protobuf::uint32 value) {
  iowait_cpu_.Add(value);
  // @@protoc_insertion_point(field_add:draiosproto.host.iowait_cpu)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
host::iowait_cpu() const {
  // @@protoc_insertion_point(field_list:draiosproto.host.iowait_cpu)
  return iowait_cpu_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
host::mutable_iowait_cpu() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.host.iowait_cpu)
  return &iowait_cpu_;
}

// repeated uint32 nice_cpu = 38;
int host::nice_cpu_size() const {
  return nice_cpu_.size();
}
void host::clear_nice_cpu() {
  nice_cpu_.Clear();
}
::google::protobuf::uint32 host::nice_cpu(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.host.nice_cpu)
  return nice_cpu_.Get(index);
}
void host::set_nice_cpu(int index, ::google::protobuf::uint32 value) {
  nice_cpu_.Set(index, value);
  // @@protoc_insertion_point(field_set:draiosproto.host.nice_cpu)
}
void host::add_nice_cpu(::google::protobuf::uint32 value) {
  nice_cpu_.Add(value);
  // @@protoc_insertion_point(field_add:draiosproto.host.nice_cpu)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
host::nice_cpu() const {
  // @@protoc_insertion_point(field_list:draiosproto.host.nice_cpu)
  return nice_cpu_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
host::mutable_nice_cpu() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.host.nice_cpu)
  return &nice_cpu_;
}

// optional uint32 system_load_1 = 41;
bool host::has_system_load_1() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void host::set_has_system_load_1() {
  _has_bits_[0] |= 0x00800000u;
}
void host::clear_has_system_load_1() {
  _has_bits_[0] &= ~0x00800000u;
}
void host::clear_system_load_1() {
  system_load_1_ = 0u;
  clear_has_system_load_1();
}
::google::protobuf::uint32 host::system_load_1() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.system_load_1)
  return system_load_1_;
}
void host::set_system_load_1(::google::protobuf::uint32 value) {
  set_has_system_load_1();
  system_load_1_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.host.system_load_1)
}

// optional uint32 system_load_5 = 42;
bool host::has_system_load_5() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void host::set_has_system_load_5() {
  _has_bits_[0] |= 0x01000000u;
}
void host::clear_has_system_load_5() {
  _has_bits_[0] &= ~0x01000000u;
}
void host::clear_system_load_5() {
  system_load_5_ = 0u;
  clear_has_system_load_5();
}
::google::protobuf::uint32 host::system_load_5() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.system_load_5)
  return system_load_5_;
}
void host::set_system_load_5(::google::protobuf::uint32 value) {
  set_has_system_load_5();
  system_load_5_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.host.system_load_5)
}

// optional uint32 system_load_15 = 43;
bool host::has_system_load_15() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void host::set_has_system_load_15() {
  _has_bits_[0] |= 0x02000000u;
}
void host::clear_has_system_load_15() {
  _has_bits_[0] &= ~0x02000000u;
}
void host::clear_system_load_15() {
  system_load_15_ = 0u;
  clear_has_system_load_15();
}
::google::protobuf::uint32 host::system_load_15() const {
  // @@protoc_insertion_point(field_get:draiosproto.host.system_load_15)
  return system_load_15_;
}
void host::set_system_load_15(::google::protobuf::uint32 value) {
  set_has_system_load_15();
  system_load_15_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.host.system_load_15)
}

inline const host* host::internal_default_instance() {
  return &host_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int process::kDetailsFieldNumber;
const int process::kIsIpv4TransactionServerFieldNumber;
const int process::kIsUnixTransactionServerFieldNumber;
const int process::kIsIpv4TransactionClientFieldNumber;
const int process::kIsUnixTransactionClientFieldNumber;
const int process::kNetroleFieldNumber;
const int process::kTcountersFieldNumber;
const int process::kTransactionCountersFieldNumber;
const int process::kMinTransactionCountersFieldNumber;
const int process::kMaxTransactionCountersFieldNumber;
const int process::kTransactionProcessingDelayFieldNumber;
const int process::kNextTiersDelayFieldNumber;
const int process::kResourceCountersFieldNumber;
const int process::kSyscallErrorsFieldNumber;
const int process::kProtosFieldNumber;
const int process::kStartCountFieldNumber;
const int process::kCountProcessesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

process::process()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.process)
}

void process::InitAsDefaultInstance() {
  details_ = const_cast< ::draiosproto::process_details*>(
      ::draiosproto::process_details::internal_default_instance());
  tcounters_ = const_cast< ::draiosproto::time_categories*>(
      ::draiosproto::time_categories::internal_default_instance());
  transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(
      ::draiosproto::counter_time_bidirectional::internal_default_instance());
  min_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(
      ::draiosproto::counter_time_bidirectional::internal_default_instance());
  max_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(
      ::draiosproto::counter_time_bidirectional::internal_default_instance());
  resource_counters_ = const_cast< ::draiosproto::resource_categories*>(
      ::draiosproto::resource_categories::internal_default_instance());
  syscall_errors_ = const_cast< ::draiosproto::counter_syscall_errors*>(
      ::draiosproto::counter_syscall_errors::internal_default_instance());
  protos_ = const_cast< ::draiosproto::proto_info*>(
      ::draiosproto::proto_info::internal_default_instance());
}

process::process(const process& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.process)
}

void process::SharedCtor() {
  _cached_size_ = 0;
  details_ = NULL;
  tcounters_ = NULL;
  transaction_counters_ = NULL;
  min_transaction_counters_ = NULL;
  max_transaction_counters_ = NULL;
  resource_counters_ = NULL;
  syscall_errors_ = NULL;
  protos_ = NULL;
  ::memset(&is_ipv4_transaction_server_, 0, reinterpret_cast<char*>(&count_processes_) -
    reinterpret_cast<char*>(&is_ipv4_transaction_server_) + sizeof(count_processes_));
}

process::~process() {
  // @@protoc_insertion_point(destructor:draiosproto.process)
  SharedDtor();
}

void process::SharedDtor() {
  if (this != &process_default_instance_.get()) {
    delete details_;
    delete tcounters_;
    delete transaction_counters_;
    delete min_transaction_counters_;
    delete max_transaction_counters_;
    delete resource_counters_;
    delete syscall_errors_;
    delete protos_;
  }
}

void process::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* process::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return process_descriptor_;
}

const process& process::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<process> process_default_instance_;

process* process::New(::google::protobuf::Arena* arena) const {
  process* n = new process;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void process::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.process)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(process, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<process*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(is_ipv4_transaction_server_, netrole_);
    if (has_details()) {
      if (details_ != NULL) details_->::draiosproto::process_details::Clear();
    }
    if (has_tcounters()) {
      if (tcounters_ != NULL) tcounters_->::draiosproto::time_categories::Clear();
    }
    if (has_transaction_counters()) {
      if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(transaction_processing_delay_, start_count_);
    if (has_min_transaction_counters()) {
      if (min_transaction_counters_ != NULL) min_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    if (has_max_transaction_counters()) {
      if (max_transaction_counters_ != NULL) max_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    if (has_resource_counters()) {
      if (resource_counters_ != NULL) resource_counters_->::draiosproto::resource_categories::Clear();
    }
    if (has_syscall_errors()) {
      if (syscall_errors_ != NULL) syscall_errors_->::draiosproto::counter_syscall_errors::Clear();
    }
    if (has_protos()) {
      if (protos_ != NULL) protos_->::draiosproto::proto_info::Clear();
    }
  }
  count_processes_ = GOOGLE_ULONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool process::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.process)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .draiosproto.process_details details = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_ipv4_transaction_server;
        break;
      }

      // optional bool is_ipv4_transaction_server = 3;
      case 3: {
        if (tag == 24) {
         parse_is_ipv4_transaction_server:
          set_has_is_ipv4_transaction_server();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ipv4_transaction_server_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_unix_transaction_server;
        break;
      }

      // optional bool is_unix_transaction_server = 4;
      case 4: {
        if (tag == 32) {
         parse_is_unix_transaction_server:
          set_has_is_unix_transaction_server();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unix_transaction_server_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tcounters;
        break;
      }

      // optional .draiosproto.time_categories tcounters = 5;
      case 5: {
        if (tag == 42) {
         parse_tcounters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcounters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
      case 6: {
        if (tag == 50) {
         parse_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_transaction_processing_delay;
        break;
      }

      // optional uint64 transaction_processing_delay = 7;
      case 7: {
        if (tag == 56) {
         parse_transaction_processing_delay:
          set_has_transaction_processing_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_processing_delay_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_resource_counters;
        break;
      }

      // optional .draiosproto.resource_categories resource_counters = 8;
      case 8: {
        if (tag == 66) {
         parse_resource_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_syscall_errors;
        break;
      }

      // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
      case 9: {
        if (tag == 74) {
         parse_syscall_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscall_errors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_is_ipv4_transaction_client;
        break;
      }

      // optional bool is_ipv4_transaction_client = 10;
      case 10: {
        if (tag == 80) {
         parse_is_ipv4_transaction_client:
          set_has_is_ipv4_transaction_client();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ipv4_transaction_client_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_unix_transaction_client;
        break;
      }

      // optional bool is_unix_transaction_client = 11;
      case 11: {
        if (tag == 88) {
         parse_is_unix_transaction_client:
          set_has_is_unix_transaction_client();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unix_transaction_client_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_next_tiers_delay;
        break;
      }

      // optional uint64 next_tiers_delay = 12;
      case 12: {
        if (tag == 96) {
         parse_next_tiers_delay:
          set_has_next_tiers_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_tiers_delay_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_netrole;
        break;
      }

      // optional uint32 netrole = 13;
      case 13: {
        if (tag == 104) {
         parse_netrole:
          set_has_netrole();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netrole_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_min_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
      case 18: {
        if (tag == 146) {
         parse_min_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_transaction_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_max_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
      case 19: {
        if (tag == 154) {
         parse_max_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_transaction_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_protos;
        break;
      }

      // optional .draiosproto.proto_info protos = 20;
      case 20: {
        if (tag == 162) {
         parse_protos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_protos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_start_count;
        break;
      }

      // optional uint64 start_count = 21;
      case 21: {
        if (tag == 168) {
         parse_start_count:
          set_has_start_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_count_processes;
        break;
      }

      // optional uint64 count_processes = 23;
      case 23: {
        if (tag == 184) {
         parse_count_processes:
          set_has_count_processes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_processes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.process)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.process)
  return false;
#undef DO_
}

void process::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.process)
  // optional .draiosproto.process_details details = 2;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->details_, output);
  }

  // optional bool is_ipv4_transaction_server = 3;
  if (has_is_ipv4_transaction_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_ipv4_transaction_server(), output);
  }

  // optional bool is_unix_transaction_server = 4;
  if (has_is_unix_transaction_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_unix_transaction_server(), output);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->tcounters_, output);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
  if (has_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->transaction_counters_, output);
  }

  // optional uint64 transaction_processing_delay = 7;
  if (has_transaction_processing_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->transaction_processing_delay(), output);
  }

  // optional .draiosproto.resource_categories resource_counters = 8;
  if (has_resource_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->resource_counters_, output);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
  if (has_syscall_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->syscall_errors_, output);
  }

  // optional bool is_ipv4_transaction_client = 10;
  if (has_is_ipv4_transaction_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_ipv4_transaction_client(), output);
  }

  // optional bool is_unix_transaction_client = 11;
  if (has_is_unix_transaction_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_unix_transaction_client(), output);
  }

  // optional uint64 next_tiers_delay = 12;
  if (has_next_tiers_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->next_tiers_delay(), output);
  }

  // optional uint32 netrole = 13;
  if (has_netrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->netrole(), output);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
  if (has_min_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->min_transaction_counters_, output);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
  if (has_max_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->max_transaction_counters_, output);
  }

  // optional .draiosproto.proto_info protos = 20;
  if (has_protos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->protos_, output);
  }

  // optional uint64 start_count = 21;
  if (has_start_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->start_count(), output);
  }

  // optional uint64 count_processes = 23;
  if (has_count_processes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->count_processes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.process)
}

::google::protobuf::uint8* process::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.process)
  // optional .draiosproto.process_details details = 2;
  if (has_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->details_, false, target);
  }

  // optional bool is_ipv4_transaction_server = 3;
  if (has_is_ipv4_transaction_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_ipv4_transaction_server(), target);
  }

  // optional bool is_unix_transaction_server = 4;
  if (has_is_unix_transaction_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_unix_transaction_server(), target);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->tcounters_, false, target);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
  if (has_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->transaction_counters_, false, target);
  }

  // optional uint64 transaction_processing_delay = 7;
  if (has_transaction_processing_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->transaction_processing_delay(), target);
  }

  // optional .draiosproto.resource_categories resource_counters = 8;
  if (has_resource_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->resource_counters_, false, target);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
  if (has_syscall_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->syscall_errors_, false, target);
  }

  // optional bool is_ipv4_transaction_client = 10;
  if (has_is_ipv4_transaction_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_ipv4_transaction_client(), target);
  }

  // optional bool is_unix_transaction_client = 11;
  if (has_is_unix_transaction_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_unix_transaction_client(), target);
  }

  // optional uint64 next_tiers_delay = 12;
  if (has_next_tiers_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->next_tiers_delay(), target);
  }

  // optional uint32 netrole = 13;
  if (has_netrole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->netrole(), target);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
  if (has_min_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->min_transaction_counters_, false, target);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
  if (has_max_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->max_transaction_counters_, false, target);
  }

  // optional .draiosproto.proto_info protos = 20;
  if (has_protos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->protos_, false, target);
  }

  // optional uint64 start_count = 21;
  if (has_start_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->start_count(), target);
  }

  // optional uint64 count_processes = 23;
  if (has_count_processes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->count_processes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.process)
  return target;
}

size_t process::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.process)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .draiosproto.process_details details = 2;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->details_);
    }

    // optional bool is_ipv4_transaction_server = 3;
    if (has_is_ipv4_transaction_server()) {
      total_size += 1 + 1;
    }

    // optional bool is_unix_transaction_server = 4;
    if (has_is_unix_transaction_server()) {
      total_size += 1 + 1;
    }

    // optional bool is_ipv4_transaction_client = 10;
    if (has_is_ipv4_transaction_client()) {
      total_size += 1 + 1;
    }

    // optional bool is_unix_transaction_client = 11;
    if (has_is_unix_transaction_client()) {
      total_size += 1 + 1;
    }

    // optional uint32 netrole = 13;
    if (has_netrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netrole());
    }

    // optional .draiosproto.time_categories tcounters = 5;
    if (has_tcounters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tcounters_);
    }

    // optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
    if (has_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_counters_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
    if (has_min_transaction_counters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->min_transaction_counters_);
    }

    // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
    if (has_max_transaction_counters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->max_transaction_counters_);
    }

    // optional uint64 transaction_processing_delay = 7;
    if (has_transaction_processing_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_processing_delay());
    }

    // optional uint64 next_tiers_delay = 12;
    if (has_next_tiers_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_tiers_delay());
    }

    // optional .draiosproto.resource_categories resource_counters = 8;
    if (has_resource_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resource_counters_);
    }

    // optional .draiosproto.counter_syscall_errors syscall_errors = 9;
    if (has_syscall_errors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->syscall_errors_);
    }

    // optional .draiosproto.proto_info protos = 20;
    if (has_protos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->protos_);
    }

    // optional uint64 start_count = 21;
    if (has_start_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_count());
    }

  }
  // optional uint64 count_processes = 23;
  if (has_count_processes()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count_processes());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void process::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.process)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const process* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const process>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.process)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.process)
    UnsafeMergeFrom(*source);
  }
}

void process::MergeFrom(const process& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.process)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void process::UnsafeMergeFrom(const process& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_details()) {
      mutable_details()->::draiosproto::process_details::MergeFrom(from.details());
    }
    if (from.has_is_ipv4_transaction_server()) {
      set_is_ipv4_transaction_server(from.is_ipv4_transaction_server());
    }
    if (from.has_is_unix_transaction_server()) {
      set_is_unix_transaction_server(from.is_unix_transaction_server());
    }
    if (from.has_is_ipv4_transaction_client()) {
      set_is_ipv4_transaction_client(from.is_ipv4_transaction_client());
    }
    if (from.has_is_unix_transaction_client()) {
      set_is_unix_transaction_client(from.is_unix_transaction_client());
    }
    if (from.has_netrole()) {
      set_netrole(from.netrole());
    }
    if (from.has_tcounters()) {
      mutable_tcounters()->::draiosproto::time_categories::MergeFrom(from.tcounters());
    }
    if (from.has_transaction_counters()) {
      mutable_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.transaction_counters());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_min_transaction_counters()) {
      mutable_min_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.min_transaction_counters());
    }
    if (from.has_max_transaction_counters()) {
      mutable_max_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.max_transaction_counters());
    }
    if (from.has_transaction_processing_delay()) {
      set_transaction_processing_delay(from.transaction_processing_delay());
    }
    if (from.has_next_tiers_delay()) {
      set_next_tiers_delay(from.next_tiers_delay());
    }
    if (from.has_resource_counters()) {
      mutable_resource_counters()->::draiosproto::resource_categories::MergeFrom(from.resource_counters());
    }
    if (from.has_syscall_errors()) {
      mutable_syscall_errors()->::draiosproto::counter_syscall_errors::MergeFrom(from.syscall_errors());
    }
    if (from.has_protos()) {
      mutable_protos()->::draiosproto::proto_info::MergeFrom(from.protos());
    }
    if (from.has_start_count()) {
      set_start_count(from.start_count());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_count_processes()) {
      set_count_processes(from.count_processes());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void process::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void process::CopyFrom(const process& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.process)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool process::IsInitialized() const {

  if (has_details()) {
    if (!this->details_->IsInitialized()) return false;
  }
  if (has_tcounters()) {
    if (!this->tcounters_->IsInitialized()) return false;
  }
  if (has_transaction_counters()) {
    if (!this->transaction_counters_->IsInitialized()) return false;
  }
  if (has_min_transaction_counters()) {
    if (!this->min_transaction_counters_->IsInitialized()) return false;
  }
  if (has_max_transaction_counters()) {
    if (!this->max_transaction_counters_->IsInitialized()) return false;
  }
  if (has_syscall_errors()) {
    if (!this->syscall_errors_->IsInitialized()) return false;
  }
  if (has_protos()) {
    if (!this->protos_->IsInitialized()) return false;
  }
  return true;
}

void process::Swap(process* other) {
  if (other == this) return;
  InternalSwap(other);
}
void process::InternalSwap(process* other) {
  std::swap(details_, other->details_);
  std::swap(is_ipv4_transaction_server_, other->is_ipv4_transaction_server_);
  std::swap(is_unix_transaction_server_, other->is_unix_transaction_server_);
  std::swap(is_ipv4_transaction_client_, other->is_ipv4_transaction_client_);
  std::swap(is_unix_transaction_client_, other->is_unix_transaction_client_);
  std::swap(netrole_, other->netrole_);
  std::swap(tcounters_, other->tcounters_);
  std::swap(transaction_counters_, other->transaction_counters_);
  std::swap(min_transaction_counters_, other->min_transaction_counters_);
  std::swap(max_transaction_counters_, other->max_transaction_counters_);
  std::swap(transaction_processing_delay_, other->transaction_processing_delay_);
  std::swap(next_tiers_delay_, other->next_tiers_delay_);
  std::swap(resource_counters_, other->resource_counters_);
  std::swap(syscall_errors_, other->syscall_errors_);
  std::swap(protos_, other->protos_);
  std::swap(start_count_, other->start_count_);
  std::swap(count_processes_, other->count_processes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata process::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = process_descriptor_;
  metadata.reflection = process_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// process

// optional .draiosproto.process_details details = 2;
bool process::has_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void process::set_has_details() {
  _has_bits_[0] |= 0x00000001u;
}
void process::clear_has_details() {
  _has_bits_[0] &= ~0x00000001u;
}
void process::clear_details() {
  if (details_ != NULL) details_->::draiosproto::process_details::Clear();
  clear_has_details();
}
const ::draiosproto::process_details& process::details() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.details)
  return details_ != NULL ? *details_
                         : *::draiosproto::process_details::internal_default_instance();
}
::draiosproto::process_details* process::mutable_details() {
  set_has_details();
  if (details_ == NULL) {
    details_ = new ::draiosproto::process_details;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.process.details)
  return details_;
}
::draiosproto::process_details* process::release_details() {
  // @@protoc_insertion_point(field_release:draiosproto.process.details)
  clear_has_details();
  ::draiosproto::process_details* temp = details_;
  details_ = NULL;
  return temp;
}
void process::set_allocated_details(::draiosproto::process_details* details) {
  delete details_;
  details_ = details;
  if (details) {
    set_has_details();
  } else {
    clear_has_details();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.process.details)
}

// optional bool is_ipv4_transaction_server = 3;
bool process::has_is_ipv4_transaction_server() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void process::set_has_is_ipv4_transaction_server() {
  _has_bits_[0] |= 0x00000002u;
}
void process::clear_has_is_ipv4_transaction_server() {
  _has_bits_[0] &= ~0x00000002u;
}
void process::clear_is_ipv4_transaction_server() {
  is_ipv4_transaction_server_ = false;
  clear_has_is_ipv4_transaction_server();
}
bool process::is_ipv4_transaction_server() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.is_ipv4_transaction_server)
  return is_ipv4_transaction_server_;
}
void process::set_is_ipv4_transaction_server(bool value) {
  set_has_is_ipv4_transaction_server();
  is_ipv4_transaction_server_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.process.is_ipv4_transaction_server)
}

// optional bool is_unix_transaction_server = 4;
bool process::has_is_unix_transaction_server() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void process::set_has_is_unix_transaction_server() {
  _has_bits_[0] |= 0x00000004u;
}
void process::clear_has_is_unix_transaction_server() {
  _has_bits_[0] &= ~0x00000004u;
}
void process::clear_is_unix_transaction_server() {
  is_unix_transaction_server_ = false;
  clear_has_is_unix_transaction_server();
}
bool process::is_unix_transaction_server() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.is_unix_transaction_server)
  return is_unix_transaction_server_;
}
void process::set_is_unix_transaction_server(bool value) {
  set_has_is_unix_transaction_server();
  is_unix_transaction_server_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.process.is_unix_transaction_server)
}

// optional bool is_ipv4_transaction_client = 10;
bool process::has_is_ipv4_transaction_client() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void process::set_has_is_ipv4_transaction_client() {
  _has_bits_[0] |= 0x00000008u;
}
void process::clear_has_is_ipv4_transaction_client() {
  _has_bits_[0] &= ~0x00000008u;
}
void process::clear_is_ipv4_transaction_client() {
  is_ipv4_transaction_client_ = false;
  clear_has_is_ipv4_transaction_client();
}
bool process::is_ipv4_transaction_client() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.is_ipv4_transaction_client)
  return is_ipv4_transaction_client_;
}
void process::set_is_ipv4_transaction_client(bool value) {
  set_has_is_ipv4_transaction_client();
  is_ipv4_transaction_client_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.process.is_ipv4_transaction_client)
}

// optional bool is_unix_transaction_client = 11;
bool process::has_is_unix_transaction_client() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void process::set_has_is_unix_transaction_client() {
  _has_bits_[0] |= 0x00000010u;
}
void process::clear_has_is_unix_transaction_client() {
  _has_bits_[0] &= ~0x00000010u;
}
void process::clear_is_unix_transaction_client() {
  is_unix_transaction_client_ = false;
  clear_has_is_unix_transaction_client();
}
bool process::is_unix_transaction_client() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.is_unix_transaction_client)
  return is_unix_transaction_client_;
}
void process::set_is_unix_transaction_client(bool value) {
  set_has_is_unix_transaction_client();
  is_unix_transaction_client_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.process.is_unix_transaction_client)
}

// optional uint32 netrole = 13;
bool process::has_netrole() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void process::set_has_netrole() {
  _has_bits_[0] |= 0x00000020u;
}
void process::clear_has_netrole() {
  _has_bits_[0] &= ~0x00000020u;
}
void process::clear_netrole() {
  netrole_ = 0u;
  clear_has_netrole();
}
::google::protobuf::uint32 process::netrole() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.netrole)
  return netrole_;
}
void process::set_netrole(::google::protobuf::uint32 value) {
  set_has_netrole();
  netrole_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.process.netrole)
}

// optional .draiosproto.time_categories tcounters = 5;
bool process::has_tcounters() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void process::set_has_tcounters() {
  _has_bits_[0] |= 0x00000040u;
}
void process::clear_has_tcounters() {
  _has_bits_[0] &= ~0x00000040u;
}
void process::clear_tcounters() {
  if (tcounters_ != NULL) tcounters_->::draiosproto::time_categories::Clear();
  clear_has_tcounters();
}
const ::draiosproto::time_categories& process::tcounters() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.tcounters)
  return tcounters_ != NULL ? *tcounters_
                         : *::draiosproto::time_categories::internal_default_instance();
}
::draiosproto::time_categories* process::mutable_tcounters() {
  set_has_tcounters();
  if (tcounters_ == NULL) {
    tcounters_ = new ::draiosproto::time_categories;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.process.tcounters)
  return tcounters_;
}
::draiosproto::time_categories* process::release_tcounters() {
  // @@protoc_insertion_point(field_release:draiosproto.process.tcounters)
  clear_has_tcounters();
  ::draiosproto::time_categories* temp = tcounters_;
  tcounters_ = NULL;
  return temp;
}
void process::set_allocated_tcounters(::draiosproto::time_categories* tcounters) {
  delete tcounters_;
  tcounters_ = tcounters;
  if (tcounters) {
    set_has_tcounters();
  } else {
    clear_has_tcounters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.process.tcounters)
}

// optional .draiosproto.counter_time_bidirectional transaction_counters = 6;
bool process::has_transaction_counters() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void process::set_has_transaction_counters() {
  _has_bits_[0] |= 0x00000080u;
}
void process::clear_has_transaction_counters() {
  _has_bits_[0] &= ~0x00000080u;
}
void process::clear_transaction_counters() {
  if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
  clear_has_transaction_counters();
}
const ::draiosproto::counter_time_bidirectional& process::transaction_counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.transaction_counters)
  return transaction_counters_ != NULL ? *transaction_counters_
                         : *::draiosproto::counter_time_bidirectional::internal_default_instance();
}
::draiosproto::counter_time_bidirectional* process::mutable_transaction_counters() {
  set_has_transaction_counters();
  if (transaction_counters_ == NULL) {
    transaction_counters_ = new ::draiosproto::counter_time_bidirectional;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.process.transaction_counters)
  return transaction_counters_;
}
::draiosproto::counter_time_bidirectional* process::release_transaction_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.process.transaction_counters)
  clear_has_transaction_counters();
  ::draiosproto::counter_time_bidirectional* temp = transaction_counters_;
  transaction_counters_ = NULL;
  return temp;
}
void process::set_allocated_transaction_counters(::draiosproto::counter_time_bidirectional* transaction_counters) {
  delete transaction_counters_;
  transaction_counters_ = transaction_counters;
  if (transaction_counters) {
    set_has_transaction_counters();
  } else {
    clear_has_transaction_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.process.transaction_counters)
}

// optional .draiosproto.counter_time_bidirectional min_transaction_counters = 18;
bool process::has_min_transaction_counters() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void process::set_has_min_transaction_counters() {
  _has_bits_[0] |= 0x00000100u;
}
void process::clear_has_min_transaction_counters() {
  _has_bits_[0] &= ~0x00000100u;
}
void process::clear_min_transaction_counters() {
  if (min_transaction_counters_ != NULL) min_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
  clear_has_min_transaction_counters();
}
const ::draiosproto::counter_time_bidirectional& process::min_transaction_counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.min_transaction_counters)
  return min_transaction_counters_ != NULL ? *min_transaction_counters_
                         : *::draiosproto::counter_time_bidirectional::internal_default_instance();
}
::draiosproto::counter_time_bidirectional* process::mutable_min_transaction_counters() {
  set_has_min_transaction_counters();
  if (min_transaction_counters_ == NULL) {
    min_transaction_counters_ = new ::draiosproto::counter_time_bidirectional;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.process.min_transaction_counters)
  return min_transaction_counters_;
}
::draiosproto::counter_time_bidirectional* process::release_min_transaction_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.process.min_transaction_counters)
  clear_has_min_transaction_counters();
  ::draiosproto::counter_time_bidirectional* temp = min_transaction_counters_;
  min_transaction_counters_ = NULL;
  return temp;
}
void process::set_allocated_min_transaction_counters(::draiosproto::counter_time_bidirectional* min_transaction_counters) {
  delete min_transaction_counters_;
  min_transaction_counters_ = min_transaction_counters;
  if (min_transaction_counters) {
    set_has_min_transaction_counters();
  } else {
    clear_has_min_transaction_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.process.min_transaction_counters)
}

// optional .draiosproto.counter_time_bidirectional max_transaction_counters = 19;
bool process::has_max_transaction_counters() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void process::set_has_max_transaction_counters() {
  _has_bits_[0] |= 0x00000200u;
}
void process::clear_has_max_transaction_counters() {
  _has_bits_[0] &= ~0x00000200u;
}
void process::clear_max_transaction_counters() {
  if (max_transaction_counters_ != NULL) max_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
  clear_has_max_transaction_counters();
}
const ::draiosproto::counter_time_bidirectional& process::max_transaction_counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.max_transaction_counters)
  return max_transaction_counters_ != NULL ? *max_transaction_counters_
                         : *::draiosproto::counter_time_bidirectional::internal_default_instance();
}
::draiosproto::counter_time_bidirectional* process::mutable_max_transaction_counters() {
  set_has_max_transaction_counters();
  if (max_transaction_counters_ == NULL) {
    max_transaction_counters_ = new ::draiosproto::counter_time_bidirectional;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.process.max_transaction_counters)
  return max_transaction_counters_;
}
::draiosproto::counter_time_bidirectional* process::release_max_transaction_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.process.max_transaction_counters)
  clear_has_max_transaction_counters();
  ::draiosproto::counter_time_bidirectional* temp = max_transaction_counters_;
  max_transaction_counters_ = NULL;
  return temp;
}
void process::set_allocated_max_transaction_counters(::draiosproto::counter_time_bidirectional* max_transaction_counters) {
  delete max_transaction_counters_;
  max_transaction_counters_ = max_transaction_counters;
  if (max_transaction_counters) {
    set_has_max_transaction_counters();
  } else {
    clear_has_max_transaction_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.process.max_transaction_counters)
}

// optional uint64 transaction_processing_delay = 7;
bool process::has_transaction_processing_delay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void process::set_has_transaction_processing_delay() {
  _has_bits_[0] |= 0x00000400u;
}
void process::clear_has_transaction_processing_delay() {
  _has_bits_[0] &= ~0x00000400u;
}
void process::clear_transaction_processing_delay() {
  transaction_processing_delay_ = GOOGLE_ULONGLONG(0);
  clear_has_transaction_processing_delay();
}
::google::protobuf::uint64 process::transaction_processing_delay() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.transaction_processing_delay)
  return transaction_processing_delay_;
}
void process::set_transaction_processing_delay(::google::protobuf::uint64 value) {
  set_has_transaction_processing_delay();
  transaction_processing_delay_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.process.transaction_processing_delay)
}

// optional uint64 next_tiers_delay = 12;
bool process::has_next_tiers_delay() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void process::set_has_next_tiers_delay() {
  _has_bits_[0] |= 0x00000800u;
}
void process::clear_has_next_tiers_delay() {
  _has_bits_[0] &= ~0x00000800u;
}
void process::clear_next_tiers_delay() {
  next_tiers_delay_ = GOOGLE_ULONGLONG(0);
  clear_has_next_tiers_delay();
}
::google::protobuf::uint64 process::next_tiers_delay() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.next_tiers_delay)
  return next_tiers_delay_;
}
void process::set_next_tiers_delay(::google::protobuf::uint64 value) {
  set_has_next_tiers_delay();
  next_tiers_delay_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.process.next_tiers_delay)
}

// optional .draiosproto.resource_categories resource_counters = 8;
bool process::has_resource_counters() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void process::set_has_resource_counters() {
  _has_bits_[0] |= 0x00001000u;
}
void process::clear_has_resource_counters() {
  _has_bits_[0] &= ~0x00001000u;
}
void process::clear_resource_counters() {
  if (resource_counters_ != NULL) resource_counters_->::draiosproto::resource_categories::Clear();
  clear_has_resource_counters();
}
const ::draiosproto::resource_categories& process::resource_counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.resource_counters)
  return resource_counters_ != NULL ? *resource_counters_
                         : *::draiosproto::resource_categories::internal_default_instance();
}
::draiosproto::resource_categories* process::mutable_resource_counters() {
  set_has_resource_counters();
  if (resource_counters_ == NULL) {
    resource_counters_ = new ::draiosproto::resource_categories;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.process.resource_counters)
  return resource_counters_;
}
::draiosproto::resource_categories* process::release_resource_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.process.resource_counters)
  clear_has_resource_counters();
  ::draiosproto::resource_categories* temp = resource_counters_;
  resource_counters_ = NULL;
  return temp;
}
void process::set_allocated_resource_counters(::draiosproto::resource_categories* resource_counters) {
  delete resource_counters_;
  resource_counters_ = resource_counters;
  if (resource_counters) {
    set_has_resource_counters();
  } else {
    clear_has_resource_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.process.resource_counters)
}

// optional .draiosproto.counter_syscall_errors syscall_errors = 9;
bool process::has_syscall_errors() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void process::set_has_syscall_errors() {
  _has_bits_[0] |= 0x00002000u;
}
void process::clear_has_syscall_errors() {
  _has_bits_[0] &= ~0x00002000u;
}
void process::clear_syscall_errors() {
  if (syscall_errors_ != NULL) syscall_errors_->::draiosproto::counter_syscall_errors::Clear();
  clear_has_syscall_errors();
}
const ::draiosproto::counter_syscall_errors& process::syscall_errors() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.syscall_errors)
  return syscall_errors_ != NULL ? *syscall_errors_
                         : *::draiosproto::counter_syscall_errors::internal_default_instance();
}
::draiosproto::counter_syscall_errors* process::mutable_syscall_errors() {
  set_has_syscall_errors();
  if (syscall_errors_ == NULL) {
    syscall_errors_ = new ::draiosproto::counter_syscall_errors;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.process.syscall_errors)
  return syscall_errors_;
}
::draiosproto::counter_syscall_errors* process::release_syscall_errors() {
  // @@protoc_insertion_point(field_release:draiosproto.process.syscall_errors)
  clear_has_syscall_errors();
  ::draiosproto::counter_syscall_errors* temp = syscall_errors_;
  syscall_errors_ = NULL;
  return temp;
}
void process::set_allocated_syscall_errors(::draiosproto::counter_syscall_errors* syscall_errors) {
  delete syscall_errors_;
  syscall_errors_ = syscall_errors;
  if (syscall_errors) {
    set_has_syscall_errors();
  } else {
    clear_has_syscall_errors();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.process.syscall_errors)
}

// optional .draiosproto.proto_info protos = 20;
bool process::has_protos() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void process::set_has_protos() {
  _has_bits_[0] |= 0x00004000u;
}
void process::clear_has_protos() {
  _has_bits_[0] &= ~0x00004000u;
}
void process::clear_protos() {
  if (protos_ != NULL) protos_->::draiosproto::proto_info::Clear();
  clear_has_protos();
}
const ::draiosproto::proto_info& process::protos() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.protos)
  return protos_ != NULL ? *protos_
                         : *::draiosproto::proto_info::internal_default_instance();
}
::draiosproto::proto_info* process::mutable_protos() {
  set_has_protos();
  if (protos_ == NULL) {
    protos_ = new ::draiosproto::proto_info;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.process.protos)
  return protos_;
}
::draiosproto::proto_info* process::release_protos() {
  // @@protoc_insertion_point(field_release:draiosproto.process.protos)
  clear_has_protos();
  ::draiosproto::proto_info* temp = protos_;
  protos_ = NULL;
  return temp;
}
void process::set_allocated_protos(::draiosproto::proto_info* protos) {
  delete protos_;
  protos_ = protos;
  if (protos) {
    set_has_protos();
  } else {
    clear_has_protos();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.process.protos)
}

// optional uint64 start_count = 21;
bool process::has_start_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void process::set_has_start_count() {
  _has_bits_[0] |= 0x00008000u;
}
void process::clear_has_start_count() {
  _has_bits_[0] &= ~0x00008000u;
}
void process::clear_start_count() {
  start_count_ = GOOGLE_ULONGLONG(0);
  clear_has_start_count();
}
::google::protobuf::uint64 process::start_count() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.start_count)
  return start_count_;
}
void process::set_start_count(::google::protobuf::uint64 value) {
  set_has_start_count();
  start_count_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.process.start_count)
}

// optional uint64 count_processes = 23;
bool process::has_count_processes() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void process::set_has_count_processes() {
  _has_bits_[0] |= 0x00010000u;
}
void process::clear_has_count_processes() {
  _has_bits_[0] &= ~0x00010000u;
}
void process::clear_count_processes() {
  count_processes_ = GOOGLE_ULONGLONG(0);
  clear_has_count_processes();
}
::google::protobuf::uint64 process::count_processes() const {
  // @@protoc_insertion_point(field_get:draiosproto.process.count_processes)
  return count_processes_;
}
void process::set_count_processes(::google::protobuf::uint64 value) {
  set_has_count_processes();
  count_processes_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.process.count_processes)
}

inline const process* process::internal_default_instance() {
  return &process_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int program::kProcinfoFieldNumber;
const int program::kPidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

program::program()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.program)
}

void program::InitAsDefaultInstance() {
  procinfo_ = const_cast< ::draiosproto::process*>(
      ::draiosproto::process::internal_default_instance());
}

program::program(const program& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.program)
}

void program::SharedCtor() {
  _cached_size_ = 0;
  procinfo_ = NULL;
}

program::~program() {
  // @@protoc_insertion_point(destructor:draiosproto.program)
  SharedDtor();
}

void program::SharedDtor() {
  if (this != &program_default_instance_.get()) {
    delete procinfo_;
  }
}

void program::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* program::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return program_descriptor_;
}

const program& program::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<program> program_default_instance_;

program* program::New(::google::protobuf::Arena* arena) const {
  program* n = new program;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void program::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.program)
  if (has_procinfo()) {
    if (procinfo_ != NULL) procinfo_->::draiosproto::process::Clear();
  }
  pids_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool program::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.program)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.process procinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_procinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pids;
        break;
      }

      // repeated uint64 pids = 2;
      case 2: {
        if (tag == 16) {
         parse_pids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_pids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.program)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.program)
  return false;
#undef DO_
}

void program::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.program)
  // required .draiosproto.process procinfo = 1;
  if (has_procinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->procinfo_, output);
  }

  // repeated uint64 pids = 2;
  for (int i = 0; i < this->pids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->pids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.program)
}

::google::protobuf::uint8* program::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.program)
  // required .draiosproto.process procinfo = 1;
  if (has_procinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->procinfo_, false, target);
  }

  // repeated uint64 pids = 2;
  for (int i = 0; i < this->pids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->pids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.program)
  return target;
}

size_t program::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.program)
  size_t total_size = 0;

  // required .draiosproto.process procinfo = 1;
  if (has_procinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->procinfo_);
  }
  // repeated uint64 pids = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->pids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->pids(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pids_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void program::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.program)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const program* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const program>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.program)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.program)
    UnsafeMergeFrom(*source);
  }
}

void program::MergeFrom(const program& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.program)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void program::UnsafeMergeFrom(const program& from) {
  GOOGLE_DCHECK(&from != this);
  pids_.UnsafeMergeFrom(from.pids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_procinfo()) {
      mutable_procinfo()->::draiosproto::process::MergeFrom(from.procinfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void program::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.program)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void program::CopyFrom(const program& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.program)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool program::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_procinfo()) {
    if (!this->procinfo_->IsInitialized()) return false;
  }
  return true;
}

void program::Swap(program* other) {
  if (other == this) return;
  InternalSwap(other);
}
void program::InternalSwap(program* other) {
  std::swap(procinfo_, other->procinfo_);
  pids_.UnsafeArenaSwap(&other->pids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata program::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = program_descriptor_;
  metadata.reflection = program_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// program

// required .draiosproto.process procinfo = 1;
bool program::has_procinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void program::set_has_procinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void program::clear_has_procinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void program::clear_procinfo() {
  if (procinfo_ != NULL) procinfo_->::draiosproto::process::Clear();
  clear_has_procinfo();
}
const ::draiosproto::process& program::procinfo() const {
  // @@protoc_insertion_point(field_get:draiosproto.program.procinfo)
  return procinfo_ != NULL ? *procinfo_
                         : *::draiosproto::process::internal_default_instance();
}
::draiosproto::process* program::mutable_procinfo() {
  set_has_procinfo();
  if (procinfo_ == NULL) {
    procinfo_ = new ::draiosproto::process;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.program.procinfo)
  return procinfo_;
}
::draiosproto::process* program::release_procinfo() {
  // @@protoc_insertion_point(field_release:draiosproto.program.procinfo)
  clear_has_procinfo();
  ::draiosproto::process* temp = procinfo_;
  procinfo_ = NULL;
  return temp;
}
void program::set_allocated_procinfo(::draiosproto::process* procinfo) {
  delete procinfo_;
  procinfo_ = procinfo;
  if (procinfo) {
    set_has_procinfo();
  } else {
    clear_has_procinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.program.procinfo)
}

// repeated uint64 pids = 2;
int program::pids_size() const {
  return pids_.size();
}
void program::clear_pids() {
  pids_.Clear();
}
::google::protobuf::uint64 program::pids(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.program.pids)
  return pids_.Get(index);
}
void program::set_pids(int index, ::google::protobuf::uint64 value) {
  pids_.Set(index, value);
  // @@protoc_insertion_point(field_set:draiosproto.program.pids)
}
void program::add_pids(::google::protobuf::uint64 value) {
  pids_.Add(value);
  // @@protoc_insertion_point(field_add:draiosproto.program.pids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
program::pids() const {
  // @@protoc_insertion_point(field_list:draiosproto.program.pids)
  return pids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
program::mutable_pids() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.program.pids)
  return &pids_;
}

inline const program* program::internal_default_instance() {
  return &program_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv4tuple::kSipFieldNumber;
const int ipv4tuple::kDipFieldNumber;
const int ipv4tuple::kSportFieldNumber;
const int ipv4tuple::kDportFieldNumber;
const int ipv4tuple::kL4ProtoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv4tuple::ipv4tuple()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.ipv4tuple)
}

void ipv4tuple::InitAsDefaultInstance() {
}

ipv4tuple::ipv4tuple(const ipv4tuple& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.ipv4tuple)
}

void ipv4tuple::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sip_, 0, reinterpret_cast<char*>(&l4proto_) -
    reinterpret_cast<char*>(&sip_) + sizeof(l4proto_));
}

ipv4tuple::~ipv4tuple() {
  // @@protoc_insertion_point(destructor:draiosproto.ipv4tuple)
  SharedDtor();
}

void ipv4tuple::SharedDtor() {
}

void ipv4tuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv4tuple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ipv4tuple_descriptor_;
}

const ipv4tuple& ipv4tuple::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ipv4tuple> ipv4tuple_default_instance_;

ipv4tuple* ipv4tuple::New(::google::protobuf::Arena* arena) const {
  ipv4tuple* n = new ipv4tuple;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv4tuple::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.ipv4tuple)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ipv4tuple, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ipv4tuple*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sip_, l4proto_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ipv4tuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.ipv4tuple)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sip = 1;
      case 1: {
        if (tag == 8) {
          set_has_sip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sip_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dip;
        break;
      }

      // required uint32 dip = 2;
      case 2: {
        if (tag == 16) {
         parse_dip:
          set_has_dip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dip_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sport;
        break;
      }

      // required uint32 sport = 3;
      case 3: {
        if (tag == 24) {
         parse_sport:
          set_has_sport();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sport_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dport;
        break;
      }

      // required uint32 dport = 4;
      case 4: {
        if (tag == 32) {
         parse_dport:
          set_has_dport();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dport_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_l4proto;
        break;
      }

      // required uint32 l4proto = 5;
      case 5: {
        if (tag == 40) {
         parse_l4proto:
          set_has_l4proto();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &l4proto_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.ipv4tuple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.ipv4tuple)
  return false;
#undef DO_
}

void ipv4tuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.ipv4tuple)
  // required uint32 sip = 1;
  if (has_sip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sip(), output);
  }

  // required uint32 dip = 2;
  if (has_dip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dip(), output);
  }

  // required uint32 sport = 3;
  if (has_sport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sport(), output);
  }

  // required uint32 dport = 4;
  if (has_dport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dport(), output);
  }

  // required uint32 l4proto = 5;
  if (has_l4proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->l4proto(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.ipv4tuple)
}

::google::protobuf::uint8* ipv4tuple::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.ipv4tuple)
  // required uint32 sip = 1;
  if (has_sip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sip(), target);
  }

  // required uint32 dip = 2;
  if (has_dip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dip(), target);
  }

  // required uint32 sport = 3;
  if (has_sport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sport(), target);
  }

  // required uint32 dport = 4;
  if (has_dport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dport(), target);
  }

  // required uint32 l4proto = 5;
  if (has_l4proto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->l4proto(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.ipv4tuple)
  return target;
}

size_t ipv4tuple::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.ipv4tuple)
  size_t total_size = 0;

  if (has_sip()) {
    // required uint32 sip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sip());
  }

  if (has_dip()) {
    // required uint32 dip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dip());
  }

  if (has_sport()) {
    // required uint32 sport = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sport());
  }

  if (has_dport()) {
    // required uint32 dport = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dport());
  }

  if (has_l4proto()) {
    // required uint32 l4proto = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->l4proto());
  }

  return total_size;
}
size_t ipv4tuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.ipv4tuple)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 sip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sip());

    // required uint32 dip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dip());

    // required uint32 sport = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sport());

    // required uint32 dport = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dport());

    // required uint32 l4proto = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->l4proto());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv4tuple::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.ipv4tuple)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ipv4tuple* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv4tuple>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.ipv4tuple)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.ipv4tuple)
    UnsafeMergeFrom(*source);
  }
}

void ipv4tuple::MergeFrom(const ipv4tuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.ipv4tuple)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ipv4tuple::UnsafeMergeFrom(const ipv4tuple& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sip()) {
      set_sip(from.sip());
    }
    if (from.has_dip()) {
      set_dip(from.dip());
    }
    if (from.has_sport()) {
      set_sport(from.sport());
    }
    if (from.has_dport()) {
      set_dport(from.dport());
    }
    if (from.has_l4proto()) {
      set_l4proto(from.l4proto());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ipv4tuple::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.ipv4tuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv4tuple::CopyFrom(const ipv4tuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.ipv4tuple)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ipv4tuple::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ipv4tuple::Swap(ipv4tuple* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv4tuple::InternalSwap(ipv4tuple* other) {
  std::swap(sip_, other->sip_);
  std::swap(dip_, other->dip_);
  std::swap(sport_, other->sport_);
  std::swap(dport_, other->dport_);
  std::swap(l4proto_, other->l4proto_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv4tuple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ipv4tuple_descriptor_;
  metadata.reflection = ipv4tuple_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ipv4tuple

// required uint32 sip = 1;
bool ipv4tuple::has_sip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ipv4tuple::set_has_sip() {
  _has_bits_[0] |= 0x00000001u;
}
void ipv4tuple::clear_has_sip() {
  _has_bits_[0] &= ~0x00000001u;
}
void ipv4tuple::clear_sip() {
  sip_ = 0u;
  clear_has_sip();
}
::google::protobuf::uint32 ipv4tuple::sip() const {
  // @@protoc_insertion_point(field_get:draiosproto.ipv4tuple.sip)
  return sip_;
}
void ipv4tuple::set_sip(::google::protobuf::uint32 value) {
  set_has_sip();
  sip_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.ipv4tuple.sip)
}

// required uint32 dip = 2;
bool ipv4tuple::has_dip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ipv4tuple::set_has_dip() {
  _has_bits_[0] |= 0x00000002u;
}
void ipv4tuple::clear_has_dip() {
  _has_bits_[0] &= ~0x00000002u;
}
void ipv4tuple::clear_dip() {
  dip_ = 0u;
  clear_has_dip();
}
::google::protobuf::uint32 ipv4tuple::dip() const {
  // @@protoc_insertion_point(field_get:draiosproto.ipv4tuple.dip)
  return dip_;
}
void ipv4tuple::set_dip(::google::protobuf::uint32 value) {
  set_has_dip();
  dip_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.ipv4tuple.dip)
}

// required uint32 sport = 3;
bool ipv4tuple::has_sport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ipv4tuple::set_has_sport() {
  _has_bits_[0] |= 0x00000004u;
}
void ipv4tuple::clear_has_sport() {
  _has_bits_[0] &= ~0x00000004u;
}
void ipv4tuple::clear_sport() {
  sport_ = 0u;
  clear_has_sport();
}
::google::protobuf::uint32 ipv4tuple::sport() const {
  // @@protoc_insertion_point(field_get:draiosproto.ipv4tuple.sport)
  return sport_;
}
void ipv4tuple::set_sport(::google::protobuf::uint32 value) {
  set_has_sport();
  sport_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.ipv4tuple.sport)
}

// required uint32 dport = 4;
bool ipv4tuple::has_dport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ipv4tuple::set_has_dport() {
  _has_bits_[0] |= 0x00000008u;
}
void ipv4tuple::clear_has_dport() {
  _has_bits_[0] &= ~0x00000008u;
}
void ipv4tuple::clear_dport() {
  dport_ = 0u;
  clear_has_dport();
}
::google::protobuf::uint32 ipv4tuple::dport() const {
  // @@protoc_insertion_point(field_get:draiosproto.ipv4tuple.dport)
  return dport_;
}
void ipv4tuple::set_dport(::google::protobuf::uint32 value) {
  set_has_dport();
  dport_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.ipv4tuple.dport)
}

// required uint32 l4proto = 5;
bool ipv4tuple::has_l4proto() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ipv4tuple::set_has_l4proto() {
  _has_bits_[0] |= 0x00000010u;
}
void ipv4tuple::clear_has_l4proto() {
  _has_bits_[0] &= ~0x00000010u;
}
void ipv4tuple::clear_l4proto() {
  l4proto_ = 0u;
  clear_has_l4proto();
}
::google::protobuf::uint32 ipv4tuple::l4proto() const {
  // @@protoc_insertion_point(field_get:draiosproto.ipv4tuple.l4proto)
  return l4proto_;
}
void ipv4tuple::set_l4proto(::google::protobuf::uint32 value) {
  set_has_l4proto();
  l4proto_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.ipv4tuple.l4proto)
}

inline const ipv4tuple* ipv4tuple::internal_default_instance() {
  return &ipv4tuple_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv4_connection::kTupleFieldNumber;
const int ipv4_connection::kSpidFieldNumber;
const int ipv4_connection::kDpidFieldNumber;
const int ipv4_connection::kCountersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv4_connection::ipv4_connection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.ipv4_connection)
}

void ipv4_connection::InitAsDefaultInstance() {
  tuple_ = const_cast< ::draiosproto::ipv4tuple*>(
      ::draiosproto::ipv4tuple::internal_default_instance());
  counters_ = const_cast< ::draiosproto::connection_categories*>(
      ::draiosproto::connection_categories::internal_default_instance());
}

ipv4_connection::ipv4_connection(const ipv4_connection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.ipv4_connection)
}

void ipv4_connection::SharedCtor() {
  _cached_size_ = 0;
  tuple_ = NULL;
  counters_ = NULL;
  ::memset(&spid_, 0, reinterpret_cast<char*>(&dpid_) -
    reinterpret_cast<char*>(&spid_) + sizeof(dpid_));
}

ipv4_connection::~ipv4_connection() {
  // @@protoc_insertion_point(destructor:draiosproto.ipv4_connection)
  SharedDtor();
}

void ipv4_connection::SharedDtor() {
  if (this != &ipv4_connection_default_instance_.get()) {
    delete tuple_;
    delete counters_;
  }
}

void ipv4_connection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv4_connection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ipv4_connection_descriptor_;
}

const ipv4_connection& ipv4_connection::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ipv4_connection> ipv4_connection_default_instance_;

ipv4_connection* ipv4_connection::New(::google::protobuf::Arena* arena) const {
  ipv4_connection* n = new ipv4_connection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv4_connection::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.ipv4_connection)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ipv4_connection, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ipv4_connection*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(spid_, dpid_);
    if (has_tuple()) {
      if (tuple_ != NULL) tuple_->::draiosproto::ipv4tuple::Clear();
    }
    if (has_counters()) {
      if (counters_ != NULL) counters_->::draiosproto::connection_categories::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ipv4_connection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.ipv4_connection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.ipv4tuple tuple = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuple()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_spid;
        break;
      }

      // optional uint64 spid = 2;
      case 2: {
        if (tag == 16) {
         parse_spid:
          set_has_spid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &spid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dpid;
        break;
      }

      // optional uint64 dpid = 5;
      case 5: {
        if (tag == 40) {
         parse_dpid:
          set_has_dpid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dpid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_counters;
        break;
      }

      // required .draiosproto.connection_categories counters = 8;
      case 8: {
        if (tag == 66) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.ipv4_connection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.ipv4_connection)
  return false;
#undef DO_
}

void ipv4_connection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.ipv4_connection)
  // required .draiosproto.ipv4tuple tuple = 1;
  if (has_tuple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tuple_, output);
  }

  // optional uint64 spid = 2;
  if (has_spid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->spid(), output);
  }

  // optional uint64 dpid = 5;
  if (has_dpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dpid(), output);
  }

  // required .draiosproto.connection_categories counters = 8;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->counters_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.ipv4_connection)
}

::google::protobuf::uint8* ipv4_connection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.ipv4_connection)
  // required .draiosproto.ipv4tuple tuple = 1;
  if (has_tuple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tuple_, false, target);
  }

  // optional uint64 spid = 2;
  if (has_spid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->spid(), target);
  }

  // optional uint64 dpid = 5;
  if (has_dpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->dpid(), target);
  }

  // required .draiosproto.connection_categories counters = 8;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->counters_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.ipv4_connection)
  return target;
}

size_t ipv4_connection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.ipv4_connection)
  size_t total_size = 0;

  if (has_tuple()) {
    // required .draiosproto.ipv4tuple tuple = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tuple_);
  }

  if (has_counters()) {
    // required .draiosproto.connection_categories counters = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counters_);
  }

  return total_size;
}
size_t ipv4_connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.ipv4_connection)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .draiosproto.ipv4tuple tuple = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tuple_);

    // required .draiosproto.connection_categories counters = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counters_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional uint64 spid = 2;
    if (has_spid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->spid());
    }

    // optional uint64 dpid = 5;
    if (has_dpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dpid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv4_connection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.ipv4_connection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ipv4_connection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv4_connection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.ipv4_connection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.ipv4_connection)
    UnsafeMergeFrom(*source);
  }
}

void ipv4_connection::MergeFrom(const ipv4_connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.ipv4_connection)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ipv4_connection::UnsafeMergeFrom(const ipv4_connection& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tuple()) {
      mutable_tuple()->::draiosproto::ipv4tuple::MergeFrom(from.tuple());
    }
    if (from.has_spid()) {
      set_spid(from.spid());
    }
    if (from.has_dpid()) {
      set_dpid(from.dpid());
    }
    if (from.has_counters()) {
      mutable_counters()->::draiosproto::connection_categories::MergeFrom(from.counters());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ipv4_connection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.ipv4_connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv4_connection::CopyFrom(const ipv4_connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.ipv4_connection)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ipv4_connection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_tuple()) {
    if (!this->tuple_->IsInitialized()) return false;
  }
  if (has_counters()) {
    if (!this->counters_->IsInitialized()) return false;
  }
  return true;
}

void ipv4_connection::Swap(ipv4_connection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv4_connection::InternalSwap(ipv4_connection* other) {
  std::swap(tuple_, other->tuple_);
  std::swap(spid_, other->spid_);
  std::swap(dpid_, other->dpid_);
  std::swap(counters_, other->counters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv4_connection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ipv4_connection_descriptor_;
  metadata.reflection = ipv4_connection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ipv4_connection

// required .draiosproto.ipv4tuple tuple = 1;
bool ipv4_connection::has_tuple() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ipv4_connection::set_has_tuple() {
  _has_bits_[0] |= 0x00000001u;
}
void ipv4_connection::clear_has_tuple() {
  _has_bits_[0] &= ~0x00000001u;
}
void ipv4_connection::clear_tuple() {
  if (tuple_ != NULL) tuple_->::draiosproto::ipv4tuple::Clear();
  clear_has_tuple();
}
const ::draiosproto::ipv4tuple& ipv4_connection::tuple() const {
  // @@protoc_insertion_point(field_get:draiosproto.ipv4_connection.tuple)
  return tuple_ != NULL ? *tuple_
                         : *::draiosproto::ipv4tuple::internal_default_instance();
}
::draiosproto::ipv4tuple* ipv4_connection::mutable_tuple() {
  set_has_tuple();
  if (tuple_ == NULL) {
    tuple_ = new ::draiosproto::ipv4tuple;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.ipv4_connection.tuple)
  return tuple_;
}
::draiosproto::ipv4tuple* ipv4_connection::release_tuple() {
  // @@protoc_insertion_point(field_release:draiosproto.ipv4_connection.tuple)
  clear_has_tuple();
  ::draiosproto::ipv4tuple* temp = tuple_;
  tuple_ = NULL;
  return temp;
}
void ipv4_connection::set_allocated_tuple(::draiosproto::ipv4tuple* tuple) {
  delete tuple_;
  tuple_ = tuple;
  if (tuple) {
    set_has_tuple();
  } else {
    clear_has_tuple();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ipv4_connection.tuple)
}

// optional uint64 spid = 2;
bool ipv4_connection::has_spid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ipv4_connection::set_has_spid() {
  _has_bits_[0] |= 0x00000002u;
}
void ipv4_connection::clear_has_spid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ipv4_connection::clear_spid() {
  spid_ = GOOGLE_ULONGLONG(0);
  clear_has_spid();
}
::google::protobuf::uint64 ipv4_connection::spid() const {
  // @@protoc_insertion_point(field_get:draiosproto.ipv4_connection.spid)
  return spid_;
}
void ipv4_connection::set_spid(::google::protobuf::uint64 value) {
  set_has_spid();
  spid_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.ipv4_connection.spid)
}

// optional uint64 dpid = 5;
bool ipv4_connection::has_dpid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ipv4_connection::set_has_dpid() {
  _has_bits_[0] |= 0x00000004u;
}
void ipv4_connection::clear_has_dpid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ipv4_connection::clear_dpid() {
  dpid_ = GOOGLE_ULONGLONG(0);
  clear_has_dpid();
}
::google::protobuf::uint64 ipv4_connection::dpid() const {
  // @@protoc_insertion_point(field_get:draiosproto.ipv4_connection.dpid)
  return dpid_;
}
void ipv4_connection::set_dpid(::google::protobuf::uint64 value) {
  set_has_dpid();
  dpid_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.ipv4_connection.dpid)
}

// required .draiosproto.connection_categories counters = 8;
bool ipv4_connection::has_counters() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ipv4_connection::set_has_counters() {
  _has_bits_[0] |= 0x00000008u;
}
void ipv4_connection::clear_has_counters() {
  _has_bits_[0] &= ~0x00000008u;
}
void ipv4_connection::clear_counters() {
  if (counters_ != NULL) counters_->::draiosproto::connection_categories::Clear();
  clear_has_counters();
}
const ::draiosproto::connection_categories& ipv4_connection::counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.ipv4_connection.counters)
  return counters_ != NULL ? *counters_
                         : *::draiosproto::connection_categories::internal_default_instance();
}
::draiosproto::connection_categories* ipv4_connection::mutable_counters() {
  set_has_counters();
  if (counters_ == NULL) {
    counters_ = new ::draiosproto::connection_categories;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.ipv4_connection.counters)
  return counters_;
}
::draiosproto::connection_categories* ipv4_connection::release_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.ipv4_connection.counters)
  clear_has_counters();
  ::draiosproto::connection_categories* temp = counters_;
  counters_ = NULL;
  return temp;
}
void ipv4_connection::set_allocated_counters(::draiosproto::connection_categories* counters) {
  delete counters_;
  counters_ = counters;
  if (counters) {
    set_has_counters();
  } else {
    clear_has_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ipv4_connection.counters)
}

inline const ipv4_connection* ipv4_connection::internal_default_instance() {
  return &ipv4_connection_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv4_network_interface::kNameFieldNumber;
const int ipv4_network_interface::kAddrFieldNumber;
const int ipv4_network_interface::kNetmaskFieldNumber;
const int ipv4_network_interface::kBcastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv4_network_interface::ipv4_network_interface()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.ipv4_network_interface)
}

void ipv4_network_interface::InitAsDefaultInstance() {
}

ipv4_network_interface::ipv4_network_interface(const ipv4_network_interface& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.ipv4_network_interface)
}

void ipv4_network_interface::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&addr_, 0, reinterpret_cast<char*>(&bcast_) -
    reinterpret_cast<char*>(&addr_) + sizeof(bcast_));
}

ipv4_network_interface::~ipv4_network_interface() {
  // @@protoc_insertion_point(destructor:draiosproto.ipv4_network_interface)
  SharedDtor();
}

void ipv4_network_interface::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ipv4_network_interface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv4_network_interface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ipv4_network_interface_descriptor_;
}

const ipv4_network_interface& ipv4_network_interface::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ipv4_network_interface> ipv4_network_interface_default_instance_;

ipv4_network_interface* ipv4_network_interface::New(::google::protobuf::Arena* arena) const {
  ipv4_network_interface* n = new ipv4_network_interface;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv4_network_interface::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.ipv4_network_interface)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ipv4_network_interface, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ipv4_network_interface*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(addr_, bcast_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ipv4_network_interface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.ipv4_network_interface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.ipv4_network_interface.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_addr;
        break;
      }

      // required uint32 addr = 2;
      case 2: {
        if (tag == 16) {
         parse_addr:
          set_has_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmask;
        break;
      }

      // required uint32 netmask = 3;
      case 3: {
        if (tag == 24) {
         parse_netmask:
          set_has_netmask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmask_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bcast;
        break;
      }

      // optional uint32 bcast = 4;
      case 4: {
        if (tag == 32) {
         parse_bcast:
          set_has_bcast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bcast_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.ipv4_network_interface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.ipv4_network_interface)
  return false;
#undef DO_
}

void ipv4_network_interface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.ipv4_network_interface)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ipv4_network_interface.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 addr = 2;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->addr(), output);
  }

  // required uint32 netmask = 3;
  if (has_netmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmask(), output);
  }

  // optional uint32 bcast = 4;
  if (has_bcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bcast(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.ipv4_network_interface)
}

::google::protobuf::uint8* ipv4_network_interface::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.ipv4_network_interface)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ipv4_network_interface.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 addr = 2;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->addr(), target);
  }

  // required uint32 netmask = 3;
  if (has_netmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmask(), target);
  }

  // optional uint32 bcast = 4;
  if (has_bcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bcast(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.ipv4_network_interface)
  return target;
}

size_t ipv4_network_interface::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.ipv4_network_interface)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_addr()) {
    // required uint32 addr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->addr());
  }

  if (has_netmask()) {
    // required uint32 netmask = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->netmask());
  }

  return total_size;
}
size_t ipv4_network_interface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.ipv4_network_interface)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 addr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->addr());

    // required uint32 netmask = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->netmask());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 bcast = 4;
  if (has_bcast()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bcast());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv4_network_interface::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.ipv4_network_interface)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ipv4_network_interface* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv4_network_interface>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.ipv4_network_interface)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.ipv4_network_interface)
    UnsafeMergeFrom(*source);
  }
}

void ipv4_network_interface::MergeFrom(const ipv4_network_interface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.ipv4_network_interface)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ipv4_network_interface::UnsafeMergeFrom(const ipv4_network_interface& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_netmask()) {
      set_netmask(from.netmask());
    }
    if (from.has_bcast()) {
      set_bcast(from.bcast());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ipv4_network_interface::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.ipv4_network_interface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv4_network_interface::CopyFrom(const ipv4_network_interface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.ipv4_network_interface)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ipv4_network_interface::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ipv4_network_interface::Swap(ipv4_network_interface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv4_network_interface::InternalSwap(ipv4_network_interface* other) {
  name_.Swap(&other->name_);
  std::swap(addr_, other->addr_);
  std::swap(netmask_, other->netmask_);
  std::swap(bcast_, other->bcast_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv4_network_interface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ipv4_network_interface_descriptor_;
  metadata.reflection = ipv4_network_interface_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ipv4_network_interface

// required string name = 1;
bool ipv4_network_interface::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ipv4_network_interface::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ipv4_network_interface::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ipv4_network_interface::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ipv4_network_interface::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.ipv4_network_interface.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ipv4_network_interface::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ipv4_network_interface.name)
}
void ipv4_network_interface::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ipv4_network_interface.name)
}
void ipv4_network_interface::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ipv4_network_interface.name)
}
::std::string* ipv4_network_interface::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.ipv4_network_interface.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ipv4_network_interface::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.ipv4_network_interface.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ipv4_network_interface::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ipv4_network_interface.name)
}

// required uint32 addr = 2;
bool ipv4_network_interface::has_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ipv4_network_interface::set_has_addr() {
  _has_bits_[0] |= 0x00000002u;
}
void ipv4_network_interface::clear_has_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
void ipv4_network_interface::clear_addr() {
  addr_ = 0u;
  clear_has_addr();
}
::google::protobuf::uint32 ipv4_network_interface::addr() const {
  // @@protoc_insertion_point(field_get:draiosproto.ipv4_network_interface.addr)
  return addr_;
}
void ipv4_network_interface::set_addr(::google::protobuf::uint32 value) {
  set_has_addr();
  addr_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.ipv4_network_interface.addr)
}

// required uint32 netmask = 3;
bool ipv4_network_interface::has_netmask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ipv4_network_interface::set_has_netmask() {
  _has_bits_[0] |= 0x00000004u;
}
void ipv4_network_interface::clear_has_netmask() {
  _has_bits_[0] &= ~0x00000004u;
}
void ipv4_network_interface::clear_netmask() {
  netmask_ = 0u;
  clear_has_netmask();
}
::google::protobuf::uint32 ipv4_network_interface::netmask() const {
  // @@protoc_insertion_point(field_get:draiosproto.ipv4_network_interface.netmask)
  return netmask_;
}
void ipv4_network_interface::set_netmask(::google::protobuf::uint32 value) {
  set_has_netmask();
  netmask_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.ipv4_network_interface.netmask)
}

// optional uint32 bcast = 4;
bool ipv4_network_interface::has_bcast() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ipv4_network_interface::set_has_bcast() {
  _has_bits_[0] |= 0x00000008u;
}
void ipv4_network_interface::clear_has_bcast() {
  _has_bits_[0] &= ~0x00000008u;
}
void ipv4_network_interface::clear_bcast() {
  bcast_ = 0u;
  clear_has_bcast();
}
::google::protobuf::uint32 ipv4_network_interface::bcast() const {
  // @@protoc_insertion_point(field_get:draiosproto.ipv4_network_interface.bcast)
  return bcast_;
}
void ipv4_network_interface::set_bcast(::google::protobuf::uint32 value) {
  set_has_bcast();
  bcast_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.ipv4_network_interface.bcast)
}

inline const ipv4_network_interface* ipv4_network_interface::internal_default_instance() {
  return &ipv4_network_interface_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mounted_fs::kDeviceFieldNumber;
const int mounted_fs::kMountDirFieldNumber;
const int mounted_fs::kTypeFieldNumber;
const int mounted_fs::kSizeBytesFieldNumber;
const int mounted_fs::kUsedBytesFieldNumber;
const int mounted_fs::kAvailableBytesFieldNumber;
const int mounted_fs::kTotalInodesFieldNumber;
const int mounted_fs::kUsedInodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mounted_fs::mounted_fs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.mounted_fs)
}

void mounted_fs::InitAsDefaultInstance() {
}

mounted_fs::mounted_fs(const mounted_fs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.mounted_fs)
}

void mounted_fs::SharedCtor() {
  _cached_size_ = 0;
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mount_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_bytes_, 0, reinterpret_cast<char*>(&used_inodes_) -
    reinterpret_cast<char*>(&size_bytes_) + sizeof(used_inodes_));
}

mounted_fs::~mounted_fs() {
  // @@protoc_insertion_point(destructor:draiosproto.mounted_fs)
  SharedDtor();
}

void mounted_fs::SharedDtor() {
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mount_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mounted_fs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mounted_fs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mounted_fs_descriptor_;
}

const mounted_fs& mounted_fs::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<mounted_fs> mounted_fs_default_instance_;

mounted_fs* mounted_fs::New(::google::protobuf::Arena* arena) const {
  mounted_fs* n = new mounted_fs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mounted_fs::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.mounted_fs)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(mounted_fs, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<mounted_fs*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(size_bytes_, used_inodes_);
    if (has_device()) {
      device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mount_dir()) {
      mount_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool mounted_fs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.mounted_fs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string device = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.mounted_fs.device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mount_dir;
        break;
      }

      // required string mount_dir = 2;
      case 2: {
        if (tag == 18) {
         parse_mount_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mount_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mount_dir().data(), this->mount_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.mounted_fs.mount_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required string type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.mounted_fs.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_size_bytes;
        break;
      }

      // required uint64 size_bytes = 4;
      case 4: {
        if (tag == 32) {
         parse_size_bytes:
          set_has_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_used_bytes;
        break;
      }

      // required uint64 used_bytes = 5;
      case 5: {
        if (tag == 40) {
         parse_used_bytes:
          set_has_used_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_available_bytes;
        break;
      }

      // required uint64 available_bytes = 6;
      case 6: {
        if (tag == 48) {
         parse_available_bytes:
          set_has_available_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &available_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_total_inodes;
        break;
      }

      // optional uint64 total_inodes = 10;
      case 10: {
        if (tag == 80) {
         parse_total_inodes:
          set_has_total_inodes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_inodes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_used_inodes;
        break;
      }

      // optional uint64 used_inodes = 11;
      case 11: {
        if (tag == 88) {
         parse_used_inodes:
          set_has_used_inodes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_inodes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.mounted_fs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.mounted_fs)
  return false;
#undef DO_
}

void mounted_fs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.mounted_fs)
  // required string device = 1;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mounted_fs.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device(), output);
  }

  // required string mount_dir = 2;
  if (has_mount_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mount_dir().data(), this->mount_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mounted_fs.mount_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mount_dir(), output);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mounted_fs.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // required uint64 size_bytes = 4;
  if (has_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->size_bytes(), output);
  }

  // required uint64 used_bytes = 5;
  if (has_used_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->used_bytes(), output);
  }

  // required uint64 available_bytes = 6;
  if (has_available_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->available_bytes(), output);
  }

  // optional uint64 total_inodes = 10;
  if (has_total_inodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->total_inodes(), output);
  }

  // optional uint64 used_inodes = 11;
  if (has_used_inodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->used_inodes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.mounted_fs)
}

::google::protobuf::uint8* mounted_fs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.mounted_fs)
  // required string device = 1;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mounted_fs.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device(), target);
  }

  // required string mount_dir = 2;
  if (has_mount_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mount_dir().data(), this->mount_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mounted_fs.mount_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mount_dir(), target);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mounted_fs.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // required uint64 size_bytes = 4;
  if (has_size_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->size_bytes(), target);
  }

  // required uint64 used_bytes = 5;
  if (has_used_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->used_bytes(), target);
  }

  // required uint64 available_bytes = 6;
  if (has_available_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->available_bytes(), target);
  }

  // optional uint64 total_inodes = 10;
  if (has_total_inodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->total_inodes(), target);
  }

  // optional uint64 used_inodes = 11;
  if (has_used_inodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->used_inodes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.mounted_fs)
  return target;
}

size_t mounted_fs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.mounted_fs)
  size_t total_size = 0;

  if (has_device()) {
    // required string device = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  if (has_mount_dir()) {
    // required string mount_dir = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mount_dir());
  }

  if (has_type()) {
    // required string type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_size_bytes()) {
    // required uint64 size_bytes = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size_bytes());
  }

  if (has_used_bytes()) {
    // required uint64 used_bytes = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->used_bytes());
  }

  if (has_available_bytes()) {
    // required uint64 available_bytes = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->available_bytes());
  }

  return total_size;
}
size_t mounted_fs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.mounted_fs)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string device = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());

    // required string mount_dir = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mount_dir());

    // required string type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required uint64 size_bytes = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size_bytes());

    // required uint64 used_bytes = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->used_bytes());

    // required uint64 available_bytes = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->available_bytes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[6 / 32] & 192u) {
    // optional uint64 total_inodes = 10;
    if (has_total_inodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_inodes());
    }

    // optional uint64 used_inodes = 11;
    if (has_used_inodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->used_inodes());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mounted_fs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.mounted_fs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const mounted_fs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mounted_fs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.mounted_fs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.mounted_fs)
    UnsafeMergeFrom(*source);
  }
}

void mounted_fs::MergeFrom(const mounted_fs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.mounted_fs)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void mounted_fs::UnsafeMergeFrom(const mounted_fs& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device()) {
      set_has_device();
      device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
    }
    if (from.has_mount_dir()) {
      set_has_mount_dir();
      mount_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mount_dir_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_size_bytes()) {
      set_size_bytes(from.size_bytes());
    }
    if (from.has_used_bytes()) {
      set_used_bytes(from.used_bytes());
    }
    if (from.has_available_bytes()) {
      set_available_bytes(from.available_bytes());
    }
    if (from.has_total_inodes()) {
      set_total_inodes(from.total_inodes());
    }
    if (from.has_used_inodes()) {
      set_used_inodes(from.used_inodes());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void mounted_fs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.mounted_fs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mounted_fs::CopyFrom(const mounted_fs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.mounted_fs)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool mounted_fs::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void mounted_fs::Swap(mounted_fs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mounted_fs::InternalSwap(mounted_fs* other) {
  device_.Swap(&other->device_);
  mount_dir_.Swap(&other->mount_dir_);
  type_.Swap(&other->type_);
  std::swap(size_bytes_, other->size_bytes_);
  std::swap(used_bytes_, other->used_bytes_);
  std::swap(available_bytes_, other->available_bytes_);
  std::swap(total_inodes_, other->total_inodes_);
  std::swap(used_inodes_, other->used_inodes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mounted_fs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mounted_fs_descriptor_;
  metadata.reflection = mounted_fs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mounted_fs

// required string device = 1;
bool mounted_fs::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mounted_fs::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
void mounted_fs::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
void mounted_fs::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device();
}
const ::std::string& mounted_fs::device() const {
  // @@protoc_insertion_point(field_get:draiosproto.mounted_fs.device)
  return device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mounted_fs::set_device(const ::std::string& value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.mounted_fs.device)
}
void mounted_fs::set_device(const char* value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.mounted_fs.device)
}
void mounted_fs::set_device(const char* value, size_t size) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.mounted_fs.device)
}
::std::string* mounted_fs::mutable_device() {
  set_has_device();
  // @@protoc_insertion_point(field_mutable:draiosproto.mounted_fs.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mounted_fs::release_device() {
  // @@protoc_insertion_point(field_release:draiosproto.mounted_fs.device)
  clear_has_device();
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mounted_fs::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    set_has_device();
  } else {
    clear_has_device();
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.mounted_fs.device)
}

// required string mount_dir = 2;
bool mounted_fs::has_mount_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void mounted_fs::set_has_mount_dir() {
  _has_bits_[0] |= 0x00000002u;
}
void mounted_fs::clear_has_mount_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
void mounted_fs::clear_mount_dir() {
  mount_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mount_dir();
}
const ::std::string& mounted_fs::mount_dir() const {
  // @@protoc_insertion_point(field_get:draiosproto.mounted_fs.mount_dir)
  return mount_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mounted_fs::set_mount_dir(const ::std::string& value) {
  set_has_mount_dir();
  mount_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.mounted_fs.mount_dir)
}
void mounted_fs::set_mount_dir(const char* value) {
  set_has_mount_dir();
  mount_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.mounted_fs.mount_dir)
}
void mounted_fs::set_mount_dir(const char* value, size_t size) {
  set_has_mount_dir();
  mount_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.mounted_fs.mount_dir)
}
::std::string* mounted_fs::mutable_mount_dir() {
  set_has_mount_dir();
  // @@protoc_insertion_point(field_mutable:draiosproto.mounted_fs.mount_dir)
  return mount_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mounted_fs::release_mount_dir() {
  // @@protoc_insertion_point(field_release:draiosproto.mounted_fs.mount_dir)
  clear_has_mount_dir();
  return mount_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mounted_fs::set_allocated_mount_dir(::std::string* mount_dir) {
  if (mount_dir != NULL) {
    set_has_mount_dir();
  } else {
    clear_has_mount_dir();
  }
  mount_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mount_dir);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.mounted_fs.mount_dir)
}

// required string type = 3;
bool mounted_fs::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void mounted_fs::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void mounted_fs::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void mounted_fs::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& mounted_fs::type() const {
  // @@protoc_insertion_point(field_get:draiosproto.mounted_fs.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mounted_fs::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.mounted_fs.type)
}
void mounted_fs::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.mounted_fs.type)
}
void mounted_fs::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.mounted_fs.type)
}
::std::string* mounted_fs::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:draiosproto.mounted_fs.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mounted_fs::release_type() {
  // @@protoc_insertion_point(field_release:draiosproto.mounted_fs.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mounted_fs::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.mounted_fs.type)
}

// required uint64 size_bytes = 4;
bool mounted_fs::has_size_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void mounted_fs::set_has_size_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
void mounted_fs::clear_has_size_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
void mounted_fs::clear_size_bytes() {
  size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_size_bytes();
}
::google::protobuf::uint64 mounted_fs::size_bytes() const {
  // @@protoc_insertion_point(field_get:draiosproto.mounted_fs.size_bytes)
  return size_bytes_;
}
void mounted_fs::set_size_bytes(::google::protobuf::uint64 value) {
  set_has_size_bytes();
  size_bytes_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.mounted_fs.size_bytes)
}

// required uint64 used_bytes = 5;
bool mounted_fs::has_used_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void mounted_fs::set_has_used_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
void mounted_fs::clear_has_used_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
void mounted_fs::clear_used_bytes() {
  used_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_used_bytes();
}
::google::protobuf::uint64 mounted_fs::used_bytes() const {
  // @@protoc_insertion_point(field_get:draiosproto.mounted_fs.used_bytes)
  return used_bytes_;
}
void mounted_fs::set_used_bytes(::google::protobuf::uint64 value) {
  set_has_used_bytes();
  used_bytes_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.mounted_fs.used_bytes)
}

// required uint64 available_bytes = 6;
bool mounted_fs::has_available_bytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void mounted_fs::set_has_available_bytes() {
  _has_bits_[0] |= 0x00000020u;
}
void mounted_fs::clear_has_available_bytes() {
  _has_bits_[0] &= ~0x00000020u;
}
void mounted_fs::clear_available_bytes() {
  available_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_available_bytes();
}
::google::protobuf::uint64 mounted_fs::available_bytes() const {
  // @@protoc_insertion_point(field_get:draiosproto.mounted_fs.available_bytes)
  return available_bytes_;
}
void mounted_fs::set_available_bytes(::google::protobuf::uint64 value) {
  set_has_available_bytes();
  available_bytes_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.mounted_fs.available_bytes)
}

// optional uint64 total_inodes = 10;
bool mounted_fs::has_total_inodes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void mounted_fs::set_has_total_inodes() {
  _has_bits_[0] |= 0x00000040u;
}
void mounted_fs::clear_has_total_inodes() {
  _has_bits_[0] &= ~0x00000040u;
}
void mounted_fs::clear_total_inodes() {
  total_inodes_ = GOOGLE_ULONGLONG(0);
  clear_has_total_inodes();
}
::google::protobuf::uint64 mounted_fs::total_inodes() const {
  // @@protoc_insertion_point(field_get:draiosproto.mounted_fs.total_inodes)
  return total_inodes_;
}
void mounted_fs::set_total_inodes(::google::protobuf::uint64 value) {
  set_has_total_inodes();
  total_inodes_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.mounted_fs.total_inodes)
}

// optional uint64 used_inodes = 11;
bool mounted_fs::has_used_inodes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void mounted_fs::set_has_used_inodes() {
  _has_bits_[0] |= 0x00000080u;
}
void mounted_fs::clear_has_used_inodes() {
  _has_bits_[0] &= ~0x00000080u;
}
void mounted_fs::clear_used_inodes() {
  used_inodes_ = GOOGLE_ULONGLONG(0);
  clear_has_used_inodes();
}
::google::protobuf::uint64 mounted_fs::used_inodes() const {
  // @@protoc_insertion_point(field_get:draiosproto.mounted_fs.used_inodes)
  return used_inodes_;
}
void mounted_fs::set_used_inodes(::google::protobuf::uint64 value) {
  set_has_used_inodes();
  used_inodes_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.mounted_fs.used_inodes)
}

inline const mounted_fs* mounted_fs::internal_default_instance() {
  return &mounted_fs_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int file_stat::kNameFieldNumber;
const int file_stat::kBytesFieldNumber;
const int file_stat::kTimeNsFieldNumber;
const int file_stat::kOpenCountFieldNumber;
const int file_stat::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

file_stat::file_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.file_stat)
}

void file_stat::InitAsDefaultInstance() {
}

file_stat::file_stat(const file_stat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.file_stat)
}

void file_stat::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_ns_, 0, reinterpret_cast<char*>(&errors_) -
    reinterpret_cast<char*>(&time_ns_) + sizeof(errors_));
}

file_stat::~file_stat() {
  // @@protoc_insertion_point(destructor:draiosproto.file_stat)
  SharedDtor();
}

void file_stat::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void file_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* file_stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_stat_descriptor_;
}

const file_stat& file_stat::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<file_stat> file_stat_default_instance_;

file_stat* file_stat::New(::google::protobuf::Arena* arena) const {
  file_stat* n = new file_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void file_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.file_stat)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(file_stat, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<file_stat*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(time_ns_, errors_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool file_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.file_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.file_stat.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bytes;
        break;
      }

      // required uint32 bytes = 2;
      case 2: {
        if (tag == 16) {
         parse_bytes:
          set_has_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_ns;
        break;
      }

      // required uint64 time_ns = 3;
      case 3: {
        if (tag == 24) {
         parse_time_ns:
          set_has_time_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ns_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_open_count;
        break;
      }

      // required uint32 open_count = 4;
      case 4: {
        if (tag == 32) {
         parse_open_count:
          set_has_open_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_errors;
        break;
      }

      // required uint32 errors = 5;
      case 5: {
        if (tag == 40) {
         parse_errors:
          set_has_errors();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errors_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.file_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.file_stat)
  return false;
#undef DO_
}

void file_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.file_stat)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.file_stat.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 bytes = 2;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bytes(), output);
  }

  // required uint64 time_ns = 3;
  if (has_time_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_ns(), output);
  }

  // required uint32 open_count = 4;
  if (has_open_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->open_count(), output);
  }

  // required uint32 errors = 5;
  if (has_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->errors(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.file_stat)
}

::google::protobuf::uint8* file_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.file_stat)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.file_stat.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 bytes = 2;
  if (has_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bytes(), target);
  }

  // required uint64 time_ns = 3;
  if (has_time_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time_ns(), target);
  }

  // required uint32 open_count = 4;
  if (has_open_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->open_count(), target);
  }

  // required uint32 errors = 5;
  if (has_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->errors(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.file_stat)
  return target;
}

size_t file_stat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.file_stat)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_bytes()) {
    // required uint32 bytes = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytes());
  }

  if (has_time_ns()) {
    // required uint64 time_ns = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_ns());
  }

  if (has_open_count()) {
    // required uint32 open_count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->open_count());
  }

  if (has_errors()) {
    // required uint32 errors = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errors());
  }

  return total_size;
}
size_t file_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.file_stat)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 bytes = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytes());

    // required uint64 time_ns = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_ns());

    // required uint32 open_count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->open_count());

    // required uint32 errors = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errors());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void file_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.file_stat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const file_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const file_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.file_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.file_stat)
    UnsafeMergeFrom(*source);
  }
}

void file_stat::MergeFrom(const file_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.file_stat)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void file_stat::UnsafeMergeFrom(const file_stat& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
    if (from.has_time_ns()) {
      set_time_ns(from.time_ns());
    }
    if (from.has_open_count()) {
      set_open_count(from.open_count());
    }
    if (from.has_errors()) {
      set_errors(from.errors());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void file_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.file_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void file_stat::CopyFrom(const file_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.file_stat)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool file_stat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void file_stat::Swap(file_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void file_stat::InternalSwap(file_stat* other) {
  name_.Swap(&other->name_);
  std::swap(bytes_, other->bytes_);
  std::swap(time_ns_, other->time_ns_);
  std::swap(open_count_, other->open_count_);
  std::swap(errors_, other->errors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata file_stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = file_stat_descriptor_;
  metadata.reflection = file_stat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// file_stat

// required string name = 1;
bool file_stat::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void file_stat::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void file_stat::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void file_stat::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& file_stat::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.file_stat.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void file_stat::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.file_stat.name)
}
void file_stat::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.file_stat.name)
}
void file_stat::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.file_stat.name)
}
::std::string* file_stat::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.file_stat.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* file_stat::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.file_stat.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void file_stat::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.file_stat.name)
}

// required uint32 bytes = 2;
bool file_stat::has_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void file_stat::set_has_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
void file_stat::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
void file_stat::clear_bytes() {
  bytes_ = 0u;
  clear_has_bytes();
}
::google::protobuf::uint32 file_stat::bytes() const {
  // @@protoc_insertion_point(field_get:draiosproto.file_stat.bytes)
  return bytes_;
}
void file_stat::set_bytes(::google::protobuf::uint32 value) {
  set_has_bytes();
  bytes_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.file_stat.bytes)
}

// required uint64 time_ns = 3;
bool file_stat::has_time_ns() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void file_stat::set_has_time_ns() {
  _has_bits_[0] |= 0x00000004u;
}
void file_stat::clear_has_time_ns() {
  _has_bits_[0] &= ~0x00000004u;
}
void file_stat::clear_time_ns() {
  time_ns_ = GOOGLE_ULONGLONG(0);
  clear_has_time_ns();
}
::google::protobuf::uint64 file_stat::time_ns() const {
  // @@protoc_insertion_point(field_get:draiosproto.file_stat.time_ns)
  return time_ns_;
}
void file_stat::set_time_ns(::google::protobuf::uint64 value) {
  set_has_time_ns();
  time_ns_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.file_stat.time_ns)
}

// required uint32 open_count = 4;
bool file_stat::has_open_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void file_stat::set_has_open_count() {
  _has_bits_[0] |= 0x00000008u;
}
void file_stat::clear_has_open_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void file_stat::clear_open_count() {
  open_count_ = 0u;
  clear_has_open_count();
}
::google::protobuf::uint32 file_stat::open_count() const {
  // @@protoc_insertion_point(field_get:draiosproto.file_stat.open_count)
  return open_count_;
}
void file_stat::set_open_count(::google::protobuf::uint32 value) {
  set_has_open_count();
  open_count_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.file_stat.open_count)
}

// required uint32 errors = 5;
bool file_stat::has_errors() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void file_stat::set_has_errors() {
  _has_bits_[0] |= 0x00000010u;
}
void file_stat::clear_has_errors() {
  _has_bits_[0] &= ~0x00000010u;
}
void file_stat::clear_errors() {
  errors_ = 0u;
  clear_has_errors();
}
::google::protobuf::uint32 file_stat::errors() const {
  // @@protoc_insertion_point(field_get:draiosproto.file_stat.errors)
  return errors_;
}
void file_stat::set_errors(::google::protobuf::uint32 value) {
  set_has_errors();
  errors_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.file_stat.errors)
}

inline const file_stat* file_stat::internal_default_instance() {
  return &file_stat_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int container_port_mapping::kHostIpFieldNumber;
const int container_port_mapping::kHostPortFieldNumber;
const int container_port_mapping::kContainerIpFieldNumber;
const int container_port_mapping::kContainerPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

container_port_mapping::container_port_mapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.container_port_mapping)
}

void container_port_mapping::InitAsDefaultInstance() {
}

container_port_mapping::container_port_mapping(const container_port_mapping& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.container_port_mapping)
}

void container_port_mapping::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&host_ip_, 0, reinterpret_cast<char*>(&container_port_) -
    reinterpret_cast<char*>(&host_ip_) + sizeof(container_port_));
}

container_port_mapping::~container_port_mapping() {
  // @@protoc_insertion_point(destructor:draiosproto.container_port_mapping)
  SharedDtor();
}

void container_port_mapping::SharedDtor() {
}

void container_port_mapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* container_port_mapping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return container_port_mapping_descriptor_;
}

const container_port_mapping& container_port_mapping::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<container_port_mapping> container_port_mapping_default_instance_;

container_port_mapping* container_port_mapping::New(::google::protobuf::Arena* arena) const {
  container_port_mapping* n = new container_port_mapping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void container_port_mapping::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.container_port_mapping)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(container_port_mapping, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<container_port_mapping*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(host_ip_, container_port_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool container_port_mapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.container_port_mapping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 host_ip = 1;
      case 1: {
        if (tag == 8) {
          set_has_host_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_ip_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_host_port;
        break;
      }

      // optional uint32 host_port = 2;
      case 2: {
        if (tag == 16) {
         parse_host_port:
          set_has_host_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_container_ip;
        break;
      }

      // optional uint32 container_ip = 3;
      case 3: {
        if (tag == 24) {
         parse_container_ip:
          set_has_container_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &container_ip_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_container_port;
        break;
      }

      // optional uint32 container_port = 4;
      case 4: {
        if (tag == 32) {
         parse_container_port:
          set_has_container_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &container_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.container_port_mapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.container_port_mapping)
  return false;
#undef DO_
}

void container_port_mapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.container_port_mapping)
  // optional uint32 host_ip = 1;
  if (has_host_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->host_ip(), output);
  }

  // optional uint32 host_port = 2;
  if (has_host_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->host_port(), output);
  }

  // optional uint32 container_ip = 3;
  if (has_container_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->container_ip(), output);
  }

  // optional uint32 container_port = 4;
  if (has_container_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->container_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.container_port_mapping)
}

::google::protobuf::uint8* container_port_mapping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.container_port_mapping)
  // optional uint32 host_ip = 1;
  if (has_host_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->host_ip(), target);
  }

  // optional uint32 host_port = 2;
  if (has_host_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->host_port(), target);
  }

  // optional uint32 container_ip = 3;
  if (has_container_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->container_ip(), target);
  }

  // optional uint32 container_port = 4;
  if (has_container_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->container_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.container_port_mapping)
  return target;
}

size_t container_port_mapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.container_port_mapping)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 host_ip = 1;
    if (has_host_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_ip());
    }

    // optional uint32 host_port = 2;
    if (has_host_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_port());
    }

    // optional uint32 container_ip = 3;
    if (has_container_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->container_ip());
    }

    // optional uint32 container_port = 4;
    if (has_container_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->container_port());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void container_port_mapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.container_port_mapping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const container_port_mapping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const container_port_mapping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.container_port_mapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.container_port_mapping)
    UnsafeMergeFrom(*source);
  }
}

void container_port_mapping::MergeFrom(const container_port_mapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.container_port_mapping)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void container_port_mapping::UnsafeMergeFrom(const container_port_mapping& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host_ip()) {
      set_host_ip(from.host_ip());
    }
    if (from.has_host_port()) {
      set_host_port(from.host_port());
    }
    if (from.has_container_ip()) {
      set_container_ip(from.container_ip());
    }
    if (from.has_container_port()) {
      set_container_port(from.container_port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void container_port_mapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.container_port_mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void container_port_mapping::CopyFrom(const container_port_mapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.container_port_mapping)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool container_port_mapping::IsInitialized() const {

  return true;
}

void container_port_mapping::Swap(container_port_mapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void container_port_mapping::InternalSwap(container_port_mapping* other) {
  std::swap(host_ip_, other->host_ip_);
  std::swap(host_port_, other->host_port_);
  std::swap(container_ip_, other->container_ip_);
  std::swap(container_port_, other->container_port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata container_port_mapping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = container_port_mapping_descriptor_;
  metadata.reflection = container_port_mapping_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// container_port_mapping

// optional uint32 host_ip = 1;
bool container_port_mapping::has_host_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void container_port_mapping::set_has_host_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void container_port_mapping::clear_has_host_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void container_port_mapping::clear_host_ip() {
  host_ip_ = 0u;
  clear_has_host_ip();
}
::google::protobuf::uint32 container_port_mapping::host_ip() const {
  // @@protoc_insertion_point(field_get:draiosproto.container_port_mapping.host_ip)
  return host_ip_;
}
void container_port_mapping::set_host_ip(::google::protobuf::uint32 value) {
  set_has_host_ip();
  host_ip_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.container_port_mapping.host_ip)
}

// optional uint32 host_port = 2;
bool container_port_mapping::has_host_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void container_port_mapping::set_has_host_port() {
  _has_bits_[0] |= 0x00000002u;
}
void container_port_mapping::clear_has_host_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void container_port_mapping::clear_host_port() {
  host_port_ = 0u;
  clear_has_host_port();
}
::google::protobuf::uint32 container_port_mapping::host_port() const {
  // @@protoc_insertion_point(field_get:draiosproto.container_port_mapping.host_port)
  return host_port_;
}
void container_port_mapping::set_host_port(::google::protobuf::uint32 value) {
  set_has_host_port();
  host_port_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.container_port_mapping.host_port)
}

// optional uint32 container_ip = 3;
bool container_port_mapping::has_container_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void container_port_mapping::set_has_container_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void container_port_mapping::clear_has_container_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void container_port_mapping::clear_container_ip() {
  container_ip_ = 0u;
  clear_has_container_ip();
}
::google::protobuf::uint32 container_port_mapping::container_ip() const {
  // @@protoc_insertion_point(field_get:draiosproto.container_port_mapping.container_ip)
  return container_ip_;
}
void container_port_mapping::set_container_ip(::google::protobuf::uint32 value) {
  set_has_container_ip();
  container_ip_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.container_port_mapping.container_ip)
}

// optional uint32 container_port = 4;
bool container_port_mapping::has_container_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void container_port_mapping::set_has_container_port() {
  _has_bits_[0] |= 0x00000008u;
}
void container_port_mapping::clear_has_container_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void container_port_mapping::clear_container_port() {
  container_port_ = 0u;
  clear_has_container_port();
}
::google::protobuf::uint32 container_port_mapping::container_port() const {
  // @@protoc_insertion_point(field_get:draiosproto.container_port_mapping.container_port)
  return container_port_;
}
void container_port_mapping::set_container_port(::google::protobuf::uint32 value) {
  set_has_container_port();
  container_port_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.container_port_mapping.container_port)
}

inline const container_port_mapping* container_port_mapping::internal_default_instance() {
  return &container_port_mapping_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int container_label::kKeyFieldNumber;
const int container_label::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

container_label::container_label()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.container_label)
}

void container_label::InitAsDefaultInstance() {
}

container_label::container_label(const container_label& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.container_label)
}

void container_label::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

container_label::~container_label() {
  // @@protoc_insertion_point(destructor:draiosproto.container_label)
  SharedDtor();
}

void container_label::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void container_label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* container_label::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return container_label_descriptor_;
}

const container_label& container_label::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<container_label> container_label_default_instance_;

container_label* container_label::New(::google::protobuf::Arena* arena) const {
  container_label* n = new container_label;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void container_label::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.container_label)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool container_label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.container_label)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.container_label.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.container_label.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.container_label)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.container_label)
  return false;
#undef DO_
}

void container_label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.container_label)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.container_label.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.container_label.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.container_label)
}

::google::protobuf::uint8* container_label::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.container_label)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.container_label.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.container_label.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.container_label)
  return target;
}

size_t container_label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.container_label)
  size_t total_size = 0;

  // required string key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }
  // optional string value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void container_label::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.container_label)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const container_label* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const container_label>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.container_label)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.container_label)
    UnsafeMergeFrom(*source);
  }
}

void container_label::MergeFrom(const container_label& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.container_label)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void container_label::UnsafeMergeFrom(const container_label& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void container_label::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.container_label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void container_label::CopyFrom(const container_label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.container_label)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool container_label::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void container_label::Swap(container_label* other) {
  if (other == this) return;
  InternalSwap(other);
}
void container_label::InternalSwap(container_label* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata container_label::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = container_label_descriptor_;
  metadata.reflection = container_label_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// container_label

// required string key = 1;
bool container_label::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void container_label::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void container_label::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void container_label::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& container_label::key() const {
  // @@protoc_insertion_point(field_get:draiosproto.container_label.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void container_label::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.container_label.key)
}
void container_label::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.container_label.key)
}
void container_label::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.container_label.key)
}
::std::string* container_label::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:draiosproto.container_label.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* container_label::release_key() {
  // @@protoc_insertion_point(field_release:draiosproto.container_label.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void container_label::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.container_label.key)
}

// optional string value = 2;
bool container_label::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void container_label::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void container_label::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void container_label::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& container_label::value() const {
  // @@protoc_insertion_point(field_get:draiosproto.container_label.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void container_label::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.container_label.value)
}
void container_label::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.container_label.value)
}
void container_label::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.container_label.value)
}
::std::string* container_label::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:draiosproto.container_label.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* container_label::release_value() {
  // @@protoc_insertion_point(field_release:draiosproto.container_label.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void container_label::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.container_label.value)
}

inline const container_label* container_label::internal_default_instance() {
  return &container_label_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int container::kIdFieldNumber;
const int container::kTypeFieldNumber;
const int container::kNameFieldNumber;
const int container::kImageFieldNumber;
const int container::kTcountersFieldNumber;
const int container::kReqcountersFieldNumber;
const int container::kTransactionCountersFieldNumber;
const int container::kMinTransactionCountersFieldNumber;
const int container::kMaxTransactionCountersFieldNumber;
const int container::kTransactionProcessingDelayFieldNumber;
const int container::kNextTiersDelayFieldNumber;
const int container::kResourceCountersFieldNumber;
const int container::kSyscallErrorsFieldNumber;
const int container::kPortMappingsFieldNumber;
const int container::kProtosFieldNumber;
const int container::kLabelsFieldNumber;
const int container::kMountsFieldNumber;
const int container::kNetworkByServerportsFieldNumber;
const int container::kMesosTaskIdFieldNumber;
const int container::kImageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

container::container()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.container)
}

void container::InitAsDefaultInstance() {
  tcounters_ = const_cast< ::draiosproto::time_categories*>(
      ::draiosproto::time_categories::internal_default_instance());
  reqcounters_ = const_cast< ::draiosproto::transaction_breakdown_categories*>(
      ::draiosproto::transaction_breakdown_categories::internal_default_instance());
  transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(
      ::draiosproto::counter_time_bidirectional::internal_default_instance());
  min_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(
      ::draiosproto::counter_time_bidirectional::internal_default_instance());
  max_transaction_counters_ = const_cast< ::draiosproto::counter_time_bidirectional*>(
      ::draiosproto::counter_time_bidirectional::internal_default_instance());
  resource_counters_ = const_cast< ::draiosproto::resource_categories*>(
      ::draiosproto::resource_categories::internal_default_instance());
  syscall_errors_ = const_cast< ::draiosproto::counter_syscall_errors*>(
      ::draiosproto::counter_syscall_errors::internal_default_instance());
  protos_ = const_cast< ::draiosproto::proto_info*>(
      ::draiosproto::proto_info::internal_default_instance());
}

container::container(const container& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.container)
}

void container::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mesos_task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcounters_ = NULL;
  reqcounters_ = NULL;
  transaction_counters_ = NULL;
  min_transaction_counters_ = NULL;
  max_transaction_counters_ = NULL;
  resource_counters_ = NULL;
  syscall_errors_ = NULL;
  protos_ = NULL;
  ::memset(&transaction_processing_delay_, 0, reinterpret_cast<char*>(&next_tiers_delay_) -
    reinterpret_cast<char*>(&transaction_processing_delay_) + sizeof(next_tiers_delay_));
  type_ = 1;
}

container::~container() {
  // @@protoc_insertion_point(destructor:draiosproto.container)
  SharedDtor();
}

void container::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mesos_task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &container_default_instance_.get()) {
    delete tcounters_;
    delete reqcounters_;
    delete transaction_counters_;
    delete min_transaction_counters_;
    delete max_transaction_counters_;
    delete resource_counters_;
    delete syscall_errors_;
    delete protos_;
  }
}

void container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* container::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return container_descriptor_;
}

const container& container::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<container> container_default_instance_;

container* container::New(::google::protobuf::Arena* arena) const {
  container* n = new container;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void container::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.container)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(container, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<container*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 1;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_image()) {
      image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tcounters()) {
      if (tcounters_ != NULL) tcounters_->::draiosproto::time_categories::Clear();
    }
    if (has_reqcounters()) {
      if (reqcounters_ != NULL) reqcounters_->::draiosproto::transaction_breakdown_categories::Clear();
    }
    if (has_transaction_counters()) {
      if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    if (has_min_transaction_counters()) {
      if (min_transaction_counters_ != NULL) min_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 24320u) {
    ZR_(transaction_processing_delay_, next_tiers_delay_);
    if (has_max_transaction_counters()) {
      if (max_transaction_counters_ != NULL) max_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
    }
    if (has_resource_counters()) {
      if (resource_counters_ != NULL) resource_counters_->::draiosproto::resource_categories::Clear();
    }
    if (has_syscall_errors()) {
      if (syscall_errors_ != NULL) syscall_errors_->::draiosproto::counter_syscall_errors::Clear();
    }
    if (has_protos()) {
      if (protos_ != NULL) protos_->::draiosproto::proto_info::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 786432u) {
    if (has_mesos_task_id()) {
      mesos_task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_image_id()) {
      image_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  port_mappings_.Clear();
  labels_.Clear();
  mounts_.Clear();
  network_by_serverports_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.container)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.container.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .draiosproto.container_type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::container_type_IsValid(value)) {
            set_type(static_cast< ::draiosproto::container_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.container.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_image;
        break;
      }

      // optional string image = 4;
      case 4: {
        if (tag == 34) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.container.image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tcounters;
        break;
      }

      // optional .draiosproto.time_categories tcounters = 5;
      case 5: {
        if (tag == 42) {
         parse_tcounters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcounters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_reqcounters;
        break;
      }

      // optional .draiosproto.transaction_breakdown_categories reqcounters = 6;
      case 6: {
        if (tag == 50) {
         parse_reqcounters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqcounters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional transaction_counters = 7;
      case 7: {
        if (tag == 58) {
         parse_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_min_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 8;
      case 8: {
        if (tag == 66) {
         parse_min_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_transaction_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_max_transaction_counters;
        break;
      }

      // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 9;
      case 9: {
        if (tag == 74) {
         parse_max_transaction_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_transaction_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_transaction_processing_delay;
        break;
      }

      // optional uint64 transaction_processing_delay = 10;
      case 10: {
        if (tag == 80) {
         parse_transaction_processing_delay:
          set_has_transaction_processing_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_processing_delay_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_next_tiers_delay;
        break;
      }

      // optional uint64 next_tiers_delay = 12;
      case 12: {
        if (tag == 96) {
         parse_next_tiers_delay:
          set_has_next_tiers_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_tiers_delay_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_resource_counters;
        break;
      }

      // optional .draiosproto.resource_categories resource_counters = 13;
      case 13: {
        if (tag == 106) {
         parse_resource_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_syscall_errors;
        break;
      }

      // optional .draiosproto.counter_syscall_errors syscall_errors = 14;
      case 14: {
        if (tag == 114) {
         parse_syscall_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscall_errors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_port_mappings;
        break;
      }

      // repeated .draiosproto.container_port_mapping port_mappings = 18;
      case 18: {
        if (tag == 146) {
         parse_port_mappings:
          DO_(input->IncrementRecursionDepth());
         parse_loop_port_mappings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_port_mappings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_loop_port_mappings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(154)) goto parse_protos;
        break;
      }

      // optional .draiosproto.proto_info protos = 19;
      case 19: {
        if (tag == 154) {
         parse_protos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_protos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_labels;
        break;
      }

      // repeated .draiosproto.container_label labels = 20;
      case 20: {
        if (tag == 162) {
         parse_labels:
          DO_(input->IncrementRecursionDepth());
         parse_loop_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_labels;
        if (input->ExpectTag(170)) goto parse_loop_mounts;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.mounted_fs mounts = 21;
      case 21: {
        if (tag == 170) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_loop_mounts;
        if (input->ExpectTag(178)) goto parse_loop_network_by_serverports;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.network_by_port network_by_serverports = 22;
      case 22: {
        if (tag == 178) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_network_by_serverports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_network_by_serverports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_loop_network_by_serverports;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(186)) goto parse_mesos_task_id;
        break;
      }

      // optional string mesos_task_id = 23;
      case 23: {
        if (tag == 186) {
         parse_mesos_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mesos_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mesos_task_id().data(), this->mesos_task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.container.mesos_task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_image_id;
        break;
      }

      // optional string image_id = 24;
      case 24: {
        if (tag == 194) {
         parse_image_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_id().data(), this->image_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.container.image_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.container)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.container)
  return false;
#undef DO_
}

void container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.container)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.container.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .draiosproto.container_type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.container.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string image = 4;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.container.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->image(), output);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->tcounters_, output);
  }

  // optional .draiosproto.transaction_breakdown_categories reqcounters = 6;
  if (has_reqcounters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->reqcounters_, output);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 7;
  if (has_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->transaction_counters_, output);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 8;
  if (has_min_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->min_transaction_counters_, output);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 9;
  if (has_max_transaction_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->max_transaction_counters_, output);
  }

  // optional uint64 transaction_processing_delay = 10;
  if (has_transaction_processing_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->transaction_processing_delay(), output);
  }

  // optional uint64 next_tiers_delay = 12;
  if (has_next_tiers_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->next_tiers_delay(), output);
  }

  // optional .draiosproto.resource_categories resource_counters = 13;
  if (has_resource_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->resource_counters_, output);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 14;
  if (has_syscall_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->syscall_errors_, output);
  }

  // repeated .draiosproto.container_port_mapping port_mappings = 18;
  for (unsigned int i = 0, n = this->port_mappings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->port_mappings(i), output);
  }

  // optional .draiosproto.proto_info protos = 19;
  if (has_protos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->protos_, output);
  }

  // repeated .draiosproto.container_label labels = 20;
  for (unsigned int i = 0, n = this->labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->labels(i), output);
  }

  // repeated .draiosproto.mounted_fs mounts = 21;
  for (unsigned int i = 0, n = this->mounts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->mounts(i), output);
  }

  // repeated .draiosproto.network_by_port network_by_serverports = 22;
  for (unsigned int i = 0, n = this->network_by_serverports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->network_by_serverports(i), output);
  }

  // optional string mesos_task_id = 23;
  if (has_mesos_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mesos_task_id().data(), this->mesos_task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.container.mesos_task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->mesos_task_id(), output);
  }

  // optional string image_id = 24;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.container.image_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->image_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.container)
}

::google::protobuf::uint8* container::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.container)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.container.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .draiosproto.container_type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.container.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string image = 4;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.container.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->image(), target);
  }

  // optional .draiosproto.time_categories tcounters = 5;
  if (has_tcounters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->tcounters_, false, target);
  }

  // optional .draiosproto.transaction_breakdown_categories reqcounters = 6;
  if (has_reqcounters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->reqcounters_, false, target);
  }

  // optional .draiosproto.counter_time_bidirectional transaction_counters = 7;
  if (has_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->transaction_counters_, false, target);
  }

  // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 8;
  if (has_min_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->min_transaction_counters_, false, target);
  }

  // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 9;
  if (has_max_transaction_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->max_transaction_counters_, false, target);
  }

  // optional uint64 transaction_processing_delay = 10;
  if (has_transaction_processing_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->transaction_processing_delay(), target);
  }

  // optional uint64 next_tiers_delay = 12;
  if (has_next_tiers_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->next_tiers_delay(), target);
  }

  // optional .draiosproto.resource_categories resource_counters = 13;
  if (has_resource_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->resource_counters_, false, target);
  }

  // optional .draiosproto.counter_syscall_errors syscall_errors = 14;
  if (has_syscall_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->syscall_errors_, false, target);
  }

  // repeated .draiosproto.container_port_mapping port_mappings = 18;
  for (unsigned int i = 0, n = this->port_mappings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->port_mappings(i), false, target);
  }

  // optional .draiosproto.proto_info protos = 19;
  if (has_protos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->protos_, false, target);
  }

  // repeated .draiosproto.container_label labels = 20;
  for (unsigned int i = 0, n = this->labels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->labels(i), false, target);
  }

  // repeated .draiosproto.mounted_fs mounts = 21;
  for (unsigned int i = 0, n = this->mounts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->mounts(i), false, target);
  }

  // repeated .draiosproto.network_by_port network_by_serverports = 22;
  for (unsigned int i = 0, n = this->network_by_serverports_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->network_by_serverports(i), false, target);
  }

  // optional string mesos_task_id = 23;
  if (has_mesos_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mesos_task_id().data(), this->mesos_task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.container.mesos_task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->mesos_task_id(), target);
  }

  // optional string image_id = 24;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.container.image_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->image_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.container)
  return target;
}

size_t container::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.container)
  size_t total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional .draiosproto.container_type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string image = 4;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional .draiosproto.time_categories tcounters = 5;
    if (has_tcounters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tcounters_);
    }

    // optional .draiosproto.transaction_breakdown_categories reqcounters = 6;
    if (has_reqcounters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reqcounters_);
    }

    // optional .draiosproto.counter_time_bidirectional transaction_counters = 7;
    if (has_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_counters_);
    }

    // optional .draiosproto.counter_time_bidirectional min_transaction_counters = 8;
    if (has_min_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->min_transaction_counters_);
    }

  }
  if (_has_bits_[8 / 32] & 24320u) {
    // optional .draiosproto.counter_time_bidirectional max_transaction_counters = 9;
    if (has_max_transaction_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->max_transaction_counters_);
    }

    // optional uint64 transaction_processing_delay = 10;
    if (has_transaction_processing_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_processing_delay());
    }

    // optional uint64 next_tiers_delay = 12;
    if (has_next_tiers_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_tiers_delay());
    }

    // optional .draiosproto.resource_categories resource_counters = 13;
    if (has_resource_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resource_counters_);
    }

    // optional .draiosproto.counter_syscall_errors syscall_errors = 14;
    if (has_syscall_errors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->syscall_errors_);
    }

    // optional .draiosproto.proto_info protos = 19;
    if (has_protos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->protos_);
    }

  }
  if (_has_bits_[18 / 32] & 786432u) {
    // optional string mesos_task_id = 23;
    if (has_mesos_task_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mesos_task_id());
    }

    // optional string image_id = 24;
    if (has_image_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_id());
    }

  }
  // repeated .draiosproto.container_port_mapping port_mappings = 18;
  {
    unsigned int count = this->port_mappings_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->port_mappings(i));
    }
  }

  // repeated .draiosproto.container_label labels = 20;
  {
    unsigned int count = this->labels_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labels(i));
    }
  }

  // repeated .draiosproto.mounted_fs mounts = 21;
  {
    unsigned int count = this->mounts_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mounts(i));
    }
  }

  // repeated .draiosproto.network_by_port network_by_serverports = 22;
  {
    unsigned int count = this->network_by_serverports_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network_by_serverports(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void container::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.container)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const container* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const container>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.container)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.container)
    UnsafeMergeFrom(*source);
  }
}

void container::MergeFrom(const container& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.container)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void container::UnsafeMergeFrom(const container& from) {
  GOOGLE_DCHECK(&from != this);
  port_mappings_.MergeFrom(from.port_mappings_);
  labels_.MergeFrom(from.labels_);
  mounts_.MergeFrom(from.mounts_);
  network_by_serverports_.MergeFrom(from.network_by_serverports_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_image()) {
      set_has_image();
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (from.has_tcounters()) {
      mutable_tcounters()->::draiosproto::time_categories::MergeFrom(from.tcounters());
    }
    if (from.has_reqcounters()) {
      mutable_reqcounters()->::draiosproto::transaction_breakdown_categories::MergeFrom(from.reqcounters());
    }
    if (from.has_transaction_counters()) {
      mutable_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.transaction_counters());
    }
    if (from.has_min_transaction_counters()) {
      mutable_min_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.min_transaction_counters());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_transaction_counters()) {
      mutable_max_transaction_counters()->::draiosproto::counter_time_bidirectional::MergeFrom(from.max_transaction_counters());
    }
    if (from.has_transaction_processing_delay()) {
      set_transaction_processing_delay(from.transaction_processing_delay());
    }
    if (from.has_next_tiers_delay()) {
      set_next_tiers_delay(from.next_tiers_delay());
    }
    if (from.has_resource_counters()) {
      mutable_resource_counters()->::draiosproto::resource_categories::MergeFrom(from.resource_counters());
    }
    if (from.has_syscall_errors()) {
      mutable_syscall_errors()->::draiosproto::counter_syscall_errors::MergeFrom(from.syscall_errors());
    }
    if (from.has_protos()) {
      mutable_protos()->::draiosproto::proto_info::MergeFrom(from.protos());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_mesos_task_id()) {
      set_has_mesos_task_id();
      mesos_task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mesos_task_id_);
    }
    if (from.has_image_id()) {
      set_has_image_id();
      image_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void container::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void container::CopyFrom(const container& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.container)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool container::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_tcounters()) {
    if (!this->tcounters_->IsInitialized()) return false;
  }
  if (has_reqcounters()) {
    if (!this->reqcounters_->IsInitialized()) return false;
  }
  if (has_transaction_counters()) {
    if (!this->transaction_counters_->IsInitialized()) return false;
  }
  if (has_min_transaction_counters()) {
    if (!this->min_transaction_counters_->IsInitialized()) return false;
  }
  if (has_max_transaction_counters()) {
    if (!this->max_transaction_counters_->IsInitialized()) return false;
  }
  if (has_syscall_errors()) {
    if (!this->syscall_errors_->IsInitialized()) return false;
  }
  if (has_protos()) {
    if (!this->protos_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->labels())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->mounts())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->network_by_serverports())) return false;
  return true;
}

void container::Swap(container* other) {
  if (other == this) return;
  InternalSwap(other);
}
void container::InternalSwap(container* other) {
  id_.Swap(&other->id_);
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  image_.Swap(&other->image_);
  std::swap(tcounters_, other->tcounters_);
  std::swap(reqcounters_, other->reqcounters_);
  std::swap(transaction_counters_, other->transaction_counters_);
  std::swap(min_transaction_counters_, other->min_transaction_counters_);
  std::swap(max_transaction_counters_, other->max_transaction_counters_);
  std::swap(transaction_processing_delay_, other->transaction_processing_delay_);
  std::swap(next_tiers_delay_, other->next_tiers_delay_);
  std::swap(resource_counters_, other->resource_counters_);
  std::swap(syscall_errors_, other->syscall_errors_);
  port_mappings_.UnsafeArenaSwap(&other->port_mappings_);
  std::swap(protos_, other->protos_);
  labels_.UnsafeArenaSwap(&other->labels_);
  mounts_.UnsafeArenaSwap(&other->mounts_);
  network_by_serverports_.UnsafeArenaSwap(&other->network_by_serverports_);
  mesos_task_id_.Swap(&other->mesos_task_id_);
  image_id_.Swap(&other->image_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata container::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = container_descriptor_;
  metadata.reflection = container_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// container

// required string id = 1;
bool container::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void container::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void container::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void container::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& container::id() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void container::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.container.id)
}
void container::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.container.id)
}
void container::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.container.id)
}
::std::string* container::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.container.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* container::release_id() {
  // @@protoc_insertion_point(field_release:draiosproto.container.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void container::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.container.id)
}

// optional .draiosproto.container_type type = 2;
bool container::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void container::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void container::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void container::clear_type() {
  type_ = 1;
  clear_has_type();
}
::draiosproto::container_type container::type() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.type)
  return static_cast< ::draiosproto::container_type >(type_);
}
void container::set_type(::draiosproto::container_type value) {
  assert(::draiosproto::container_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.container.type)
}

// optional string name = 3;
bool container::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void container::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void container::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void container::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& container::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void container::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.container.name)
}
void container::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.container.name)
}
void container::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.container.name)
}
::std::string* container::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.container.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* container::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.container.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void container::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.container.name)
}

// optional string image = 4;
bool container::has_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void container::set_has_image() {
  _has_bits_[0] |= 0x00000008u;
}
void container::clear_has_image() {
  _has_bits_[0] &= ~0x00000008u;
}
void container::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image();
}
const ::std::string& container::image() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.image)
  return image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void container::set_image(const ::std::string& value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.container.image)
}
void container::set_image(const char* value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.container.image)
}
void container::set_image(const char* value, size_t size) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.container.image)
}
::std::string* container::mutable_image() {
  set_has_image();
  // @@protoc_insertion_point(field_mutable:draiosproto.container.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* container::release_image() {
  // @@protoc_insertion_point(field_release:draiosproto.container.image)
  clear_has_image();
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void container::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    set_has_image();
  } else {
    clear_has_image();
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.container.image)
}

// optional .draiosproto.time_categories tcounters = 5;
bool container::has_tcounters() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void container::set_has_tcounters() {
  _has_bits_[0] |= 0x00000010u;
}
void container::clear_has_tcounters() {
  _has_bits_[0] &= ~0x00000010u;
}
void container::clear_tcounters() {
  if (tcounters_ != NULL) tcounters_->::draiosproto::time_categories::Clear();
  clear_has_tcounters();
}
const ::draiosproto::time_categories& container::tcounters() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.tcounters)
  return tcounters_ != NULL ? *tcounters_
                         : *::draiosproto::time_categories::internal_default_instance();
}
::draiosproto::time_categories* container::mutable_tcounters() {
  set_has_tcounters();
  if (tcounters_ == NULL) {
    tcounters_ = new ::draiosproto::time_categories;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.container.tcounters)
  return tcounters_;
}
::draiosproto::time_categories* container::release_tcounters() {
  // @@protoc_insertion_point(field_release:draiosproto.container.tcounters)
  clear_has_tcounters();
  ::draiosproto::time_categories* temp = tcounters_;
  tcounters_ = NULL;
  return temp;
}
void container::set_allocated_tcounters(::draiosproto::time_categories* tcounters) {
  delete tcounters_;
  tcounters_ = tcounters;
  if (tcounters) {
    set_has_tcounters();
  } else {
    clear_has_tcounters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.container.tcounters)
}

// optional .draiosproto.transaction_breakdown_categories reqcounters = 6;
bool container::has_reqcounters() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void container::set_has_reqcounters() {
  _has_bits_[0] |= 0x00000020u;
}
void container::clear_has_reqcounters() {
  _has_bits_[0] &= ~0x00000020u;
}
void container::clear_reqcounters() {
  if (reqcounters_ != NULL) reqcounters_->::draiosproto::transaction_breakdown_categories::Clear();
  clear_has_reqcounters();
}
const ::draiosproto::transaction_breakdown_categories& container::reqcounters() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.reqcounters)
  return reqcounters_ != NULL ? *reqcounters_
                         : *::draiosproto::transaction_breakdown_categories::internal_default_instance();
}
::draiosproto::transaction_breakdown_categories* container::mutable_reqcounters() {
  set_has_reqcounters();
  if (reqcounters_ == NULL) {
    reqcounters_ = new ::draiosproto::transaction_breakdown_categories;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.container.reqcounters)
  return reqcounters_;
}
::draiosproto::transaction_breakdown_categories* container::release_reqcounters() {
  // @@protoc_insertion_point(field_release:draiosproto.container.reqcounters)
  clear_has_reqcounters();
  ::draiosproto::transaction_breakdown_categories* temp = reqcounters_;
  reqcounters_ = NULL;
  return temp;
}
void container::set_allocated_reqcounters(::draiosproto::transaction_breakdown_categories* reqcounters) {
  delete reqcounters_;
  reqcounters_ = reqcounters;
  if (reqcounters) {
    set_has_reqcounters();
  } else {
    clear_has_reqcounters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.container.reqcounters)
}

// optional .draiosproto.counter_time_bidirectional transaction_counters = 7;
bool container::has_transaction_counters() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void container::set_has_transaction_counters() {
  _has_bits_[0] |= 0x00000040u;
}
void container::clear_has_transaction_counters() {
  _has_bits_[0] &= ~0x00000040u;
}
void container::clear_transaction_counters() {
  if (transaction_counters_ != NULL) transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
  clear_has_transaction_counters();
}
const ::draiosproto::counter_time_bidirectional& container::transaction_counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.transaction_counters)
  return transaction_counters_ != NULL ? *transaction_counters_
                         : *::draiosproto::counter_time_bidirectional::internal_default_instance();
}
::draiosproto::counter_time_bidirectional* container::mutable_transaction_counters() {
  set_has_transaction_counters();
  if (transaction_counters_ == NULL) {
    transaction_counters_ = new ::draiosproto::counter_time_bidirectional;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.container.transaction_counters)
  return transaction_counters_;
}
::draiosproto::counter_time_bidirectional* container::release_transaction_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.container.transaction_counters)
  clear_has_transaction_counters();
  ::draiosproto::counter_time_bidirectional* temp = transaction_counters_;
  transaction_counters_ = NULL;
  return temp;
}
void container::set_allocated_transaction_counters(::draiosproto::counter_time_bidirectional* transaction_counters) {
  delete transaction_counters_;
  transaction_counters_ = transaction_counters;
  if (transaction_counters) {
    set_has_transaction_counters();
  } else {
    clear_has_transaction_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.container.transaction_counters)
}

// optional .draiosproto.counter_time_bidirectional min_transaction_counters = 8;
bool container::has_min_transaction_counters() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void container::set_has_min_transaction_counters() {
  _has_bits_[0] |= 0x00000080u;
}
void container::clear_has_min_transaction_counters() {
  _has_bits_[0] &= ~0x00000080u;
}
void container::clear_min_transaction_counters() {
  if (min_transaction_counters_ != NULL) min_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
  clear_has_min_transaction_counters();
}
const ::draiosproto::counter_time_bidirectional& container::min_transaction_counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.min_transaction_counters)
  return min_transaction_counters_ != NULL ? *min_transaction_counters_
                         : *::draiosproto::counter_time_bidirectional::internal_default_instance();
}
::draiosproto::counter_time_bidirectional* container::mutable_min_transaction_counters() {
  set_has_min_transaction_counters();
  if (min_transaction_counters_ == NULL) {
    min_transaction_counters_ = new ::draiosproto::counter_time_bidirectional;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.container.min_transaction_counters)
  return min_transaction_counters_;
}
::draiosproto::counter_time_bidirectional* container::release_min_transaction_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.container.min_transaction_counters)
  clear_has_min_transaction_counters();
  ::draiosproto::counter_time_bidirectional* temp = min_transaction_counters_;
  min_transaction_counters_ = NULL;
  return temp;
}
void container::set_allocated_min_transaction_counters(::draiosproto::counter_time_bidirectional* min_transaction_counters) {
  delete min_transaction_counters_;
  min_transaction_counters_ = min_transaction_counters;
  if (min_transaction_counters) {
    set_has_min_transaction_counters();
  } else {
    clear_has_min_transaction_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.container.min_transaction_counters)
}

// optional .draiosproto.counter_time_bidirectional max_transaction_counters = 9;
bool container::has_max_transaction_counters() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void container::set_has_max_transaction_counters() {
  _has_bits_[0] |= 0x00000100u;
}
void container::clear_has_max_transaction_counters() {
  _has_bits_[0] &= ~0x00000100u;
}
void container::clear_max_transaction_counters() {
  if (max_transaction_counters_ != NULL) max_transaction_counters_->::draiosproto::counter_time_bidirectional::Clear();
  clear_has_max_transaction_counters();
}
const ::draiosproto::counter_time_bidirectional& container::max_transaction_counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.max_transaction_counters)
  return max_transaction_counters_ != NULL ? *max_transaction_counters_
                         : *::draiosproto::counter_time_bidirectional::internal_default_instance();
}
::draiosproto::counter_time_bidirectional* container::mutable_max_transaction_counters() {
  set_has_max_transaction_counters();
  if (max_transaction_counters_ == NULL) {
    max_transaction_counters_ = new ::draiosproto::counter_time_bidirectional;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.container.max_transaction_counters)
  return max_transaction_counters_;
}
::draiosproto::counter_time_bidirectional* container::release_max_transaction_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.container.max_transaction_counters)
  clear_has_max_transaction_counters();
  ::draiosproto::counter_time_bidirectional* temp = max_transaction_counters_;
  max_transaction_counters_ = NULL;
  return temp;
}
void container::set_allocated_max_transaction_counters(::draiosproto::counter_time_bidirectional* max_transaction_counters) {
  delete max_transaction_counters_;
  max_transaction_counters_ = max_transaction_counters;
  if (max_transaction_counters) {
    set_has_max_transaction_counters();
  } else {
    clear_has_max_transaction_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.container.max_transaction_counters)
}

// optional uint64 transaction_processing_delay = 10;
bool container::has_transaction_processing_delay() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void container::set_has_transaction_processing_delay() {
  _has_bits_[0] |= 0x00000200u;
}
void container::clear_has_transaction_processing_delay() {
  _has_bits_[0] &= ~0x00000200u;
}
void container::clear_transaction_processing_delay() {
  transaction_processing_delay_ = GOOGLE_ULONGLONG(0);
  clear_has_transaction_processing_delay();
}
::google::protobuf::uint64 container::transaction_processing_delay() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.transaction_processing_delay)
  return transaction_processing_delay_;
}
void container::set_transaction_processing_delay(::google::protobuf::uint64 value) {
  set_has_transaction_processing_delay();
  transaction_processing_delay_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.container.transaction_processing_delay)
}

// optional uint64 next_tiers_delay = 12;
bool container::has_next_tiers_delay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void container::set_has_next_tiers_delay() {
  _has_bits_[0] |= 0x00000400u;
}
void container::clear_has_next_tiers_delay() {
  _has_bits_[0] &= ~0x00000400u;
}
void container::clear_next_tiers_delay() {
  next_tiers_delay_ = GOOGLE_ULONGLONG(0);
  clear_has_next_tiers_delay();
}
::google::protobuf::uint64 container::next_tiers_delay() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.next_tiers_delay)
  return next_tiers_delay_;
}
void container::set_next_tiers_delay(::google::protobuf::uint64 value) {
  set_has_next_tiers_delay();
  next_tiers_delay_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.container.next_tiers_delay)
}

// optional .draiosproto.resource_categories resource_counters = 13;
bool container::has_resource_counters() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void container::set_has_resource_counters() {
  _has_bits_[0] |= 0x00000800u;
}
void container::clear_has_resource_counters() {
  _has_bits_[0] &= ~0x00000800u;
}
void container::clear_resource_counters() {
  if (resource_counters_ != NULL) resource_counters_->::draiosproto::resource_categories::Clear();
  clear_has_resource_counters();
}
const ::draiosproto::resource_categories& container::resource_counters() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.resource_counters)
  return resource_counters_ != NULL ? *resource_counters_
                         : *::draiosproto::resource_categories::internal_default_instance();
}
::draiosproto::resource_categories* container::mutable_resource_counters() {
  set_has_resource_counters();
  if (resource_counters_ == NULL) {
    resource_counters_ = new ::draiosproto::resource_categories;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.container.resource_counters)
  return resource_counters_;
}
::draiosproto::resource_categories* container::release_resource_counters() {
  // @@protoc_insertion_point(field_release:draiosproto.container.resource_counters)
  clear_has_resource_counters();
  ::draiosproto::resource_categories* temp = resource_counters_;
  resource_counters_ = NULL;
  return temp;
}
void container::set_allocated_resource_counters(::draiosproto::resource_categories* resource_counters) {
  delete resource_counters_;
  resource_counters_ = resource_counters;
  if (resource_counters) {
    set_has_resource_counters();
  } else {
    clear_has_resource_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.container.resource_counters)
}

// optional .draiosproto.counter_syscall_errors syscall_errors = 14;
bool container::has_syscall_errors() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void container::set_has_syscall_errors() {
  _has_bits_[0] |= 0x00001000u;
}
void container::clear_has_syscall_errors() {
  _has_bits_[0] &= ~0x00001000u;
}
void container::clear_syscall_errors() {
  if (syscall_errors_ != NULL) syscall_errors_->::draiosproto::counter_syscall_errors::Clear();
  clear_has_syscall_errors();
}
const ::draiosproto::counter_syscall_errors& container::syscall_errors() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.syscall_errors)
  return syscall_errors_ != NULL ? *syscall_errors_
                         : *::draiosproto::counter_syscall_errors::internal_default_instance();
}
::draiosproto::counter_syscall_errors* container::mutable_syscall_errors() {
  set_has_syscall_errors();
  if (syscall_errors_ == NULL) {
    syscall_errors_ = new ::draiosproto::counter_syscall_errors;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.container.syscall_errors)
  return syscall_errors_;
}
::draiosproto::counter_syscall_errors* container::release_syscall_errors() {
  // @@protoc_insertion_point(field_release:draiosproto.container.syscall_errors)
  clear_has_syscall_errors();
  ::draiosproto::counter_syscall_errors* temp = syscall_errors_;
  syscall_errors_ = NULL;
  return temp;
}
void container::set_allocated_syscall_errors(::draiosproto::counter_syscall_errors* syscall_errors) {
  delete syscall_errors_;
  syscall_errors_ = syscall_errors;
  if (syscall_errors) {
    set_has_syscall_errors();
  } else {
    clear_has_syscall_errors();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.container.syscall_errors)
}

// repeated .draiosproto.container_port_mapping port_mappings = 18;
int container::port_mappings_size() const {
  return port_mappings_.size();
}
void container::clear_port_mappings() {
  port_mappings_.Clear();
}
const ::draiosproto::container_port_mapping& container::port_mappings(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.container.port_mappings)
  return port_mappings_.Get(index);
}
::draiosproto::container_port_mapping* container::mutable_port_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.container.port_mappings)
  return port_mappings_.Mutable(index);
}
::draiosproto::container_port_mapping* container::add_port_mappings() {
  // @@protoc_insertion_point(field_add:draiosproto.container.port_mappings)
  return port_mappings_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::container_port_mapping >*
container::mutable_port_mappings() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.container.port_mappings)
  return &port_mappings_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::container_port_mapping >&
container::port_mappings() const {
  // @@protoc_insertion_point(field_list:draiosproto.container.port_mappings)
  return port_mappings_;
}

// optional .draiosproto.proto_info protos = 19;
bool container::has_protos() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void container::set_has_protos() {
  _has_bits_[0] |= 0x00004000u;
}
void container::clear_has_protos() {
  _has_bits_[0] &= ~0x00004000u;
}
void container::clear_protos() {
  if (protos_ != NULL) protos_->::draiosproto::proto_info::Clear();
  clear_has_protos();
}
const ::draiosproto::proto_info& container::protos() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.protos)
  return protos_ != NULL ? *protos_
                         : *::draiosproto::proto_info::internal_default_instance();
}
::draiosproto::proto_info* container::mutable_protos() {
  set_has_protos();
  if (protos_ == NULL) {
    protos_ = new ::draiosproto::proto_info;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.container.protos)
  return protos_;
}
::draiosproto::proto_info* container::release_protos() {
  // @@protoc_insertion_point(field_release:draiosproto.container.protos)
  clear_has_protos();
  ::draiosproto::proto_info* temp = protos_;
  protos_ = NULL;
  return temp;
}
void container::set_allocated_protos(::draiosproto::proto_info* protos) {
  delete protos_;
  protos_ = protos;
  if (protos) {
    set_has_protos();
  } else {
    clear_has_protos();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.container.protos)
}

// repeated .draiosproto.container_label labels = 20;
int container::labels_size() const {
  return labels_.size();
}
void container::clear_labels() {
  labels_.Clear();
}
const ::draiosproto::container_label& container::labels(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.container.labels)
  return labels_.Get(index);
}
::draiosproto::container_label* container::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.container.labels)
  return labels_.Mutable(index);
}
::draiosproto::container_label* container::add_labels() {
  // @@protoc_insertion_point(field_add:draiosproto.container.labels)
  return labels_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::container_label >*
container::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.container.labels)
  return &labels_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::container_label >&
container::labels() const {
  // @@protoc_insertion_point(field_list:draiosproto.container.labels)
  return labels_;
}

// repeated .draiosproto.mounted_fs mounts = 21;
int container::mounts_size() const {
  return mounts_.size();
}
void container::clear_mounts() {
  mounts_.Clear();
}
const ::draiosproto::mounted_fs& container::mounts(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.container.mounts)
  return mounts_.Get(index);
}
::draiosproto::mounted_fs* container::mutable_mounts(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.container.mounts)
  return mounts_.Mutable(index);
}
::draiosproto::mounted_fs* container::add_mounts() {
  // @@protoc_insertion_point(field_add:draiosproto.container.mounts)
  return mounts_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::mounted_fs >*
container::mutable_mounts() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.container.mounts)
  return &mounts_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::mounted_fs >&
container::mounts() const {
  // @@protoc_insertion_point(field_list:draiosproto.container.mounts)
  return mounts_;
}

// repeated .draiosproto.network_by_port network_by_serverports = 22;
int container::network_by_serverports_size() const {
  return network_by_serverports_.size();
}
void container::clear_network_by_serverports() {
  network_by_serverports_.Clear();
}
const ::draiosproto::network_by_port& container::network_by_serverports(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.container.network_by_serverports)
  return network_by_serverports_.Get(index);
}
::draiosproto::network_by_port* container::mutable_network_by_serverports(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.container.network_by_serverports)
  return network_by_serverports_.Mutable(index);
}
::draiosproto::network_by_port* container::add_network_by_serverports() {
  // @@protoc_insertion_point(field_add:draiosproto.container.network_by_serverports)
  return network_by_serverports_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::network_by_port >*
container::mutable_network_by_serverports() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.container.network_by_serverports)
  return &network_by_serverports_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::network_by_port >&
container::network_by_serverports() const {
  // @@protoc_insertion_point(field_list:draiosproto.container.network_by_serverports)
  return network_by_serverports_;
}

// optional string mesos_task_id = 23;
bool container::has_mesos_task_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void container::set_has_mesos_task_id() {
  _has_bits_[0] |= 0x00040000u;
}
void container::clear_has_mesos_task_id() {
  _has_bits_[0] &= ~0x00040000u;
}
void container::clear_mesos_task_id() {
  mesos_task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mesos_task_id();
}
const ::std::string& container::mesos_task_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.mesos_task_id)
  return mesos_task_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void container::set_mesos_task_id(const ::std::string& value) {
  set_has_mesos_task_id();
  mesos_task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.container.mesos_task_id)
}
void container::set_mesos_task_id(const char* value) {
  set_has_mesos_task_id();
  mesos_task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.container.mesos_task_id)
}
void container::set_mesos_task_id(const char* value, size_t size) {
  set_has_mesos_task_id();
  mesos_task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.container.mesos_task_id)
}
::std::string* container::mutable_mesos_task_id() {
  set_has_mesos_task_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.container.mesos_task_id)
  return mesos_task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* container::release_mesos_task_id() {
  // @@protoc_insertion_point(field_release:draiosproto.container.mesos_task_id)
  clear_has_mesos_task_id();
  return mesos_task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void container::set_allocated_mesos_task_id(::std::string* mesos_task_id) {
  if (mesos_task_id != NULL) {
    set_has_mesos_task_id();
  } else {
    clear_has_mesos_task_id();
  }
  mesos_task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mesos_task_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.container.mesos_task_id)
}

// optional string image_id = 24;
bool container::has_image_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void container::set_has_image_id() {
  _has_bits_[0] |= 0x00080000u;
}
void container::clear_has_image_id() {
  _has_bits_[0] &= ~0x00080000u;
}
void container::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_id();
}
const ::std::string& container::image_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.container.image_id)
  return image_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void container::set_image_id(const ::std::string& value) {
  set_has_image_id();
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.container.image_id)
}
void container::set_image_id(const char* value) {
  set_has_image_id();
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.container.image_id)
}
void container::set_image_id(const char* value, size_t size) {
  set_has_image_id();
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.container.image_id)
}
::std::string* container::mutable_image_id() {
  set_has_image_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.container.image_id)
  return image_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* container::release_image_id() {
  // @@protoc_insertion_point(field_release:draiosproto.container.image_id)
  clear_has_image_id();
  return image_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void container::set_allocated_image_id(::std::string* image_id) {
  if (image_id != NULL) {
    set_has_image_id();
  } else {
    clear_has_image_id();
  }
  image_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.container.image_id)
}

inline const container* container::internal_default_instance() {
  return &container_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int k8s_pair::kKeyFieldNumber;
const int k8s_pair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

k8s_pair::k8s_pair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.k8s_pair)
}

void k8s_pair::InitAsDefaultInstance() {
}

k8s_pair::k8s_pair(const k8s_pair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.k8s_pair)
}

void k8s_pair::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

k8s_pair::~k8s_pair() {
  // @@protoc_insertion_point(destructor:draiosproto.k8s_pair)
  SharedDtor();
}

void k8s_pair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void k8s_pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_pair_descriptor_;
}

const k8s_pair& k8s_pair::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<k8s_pair> k8s_pair_default_instance_;

k8s_pair* k8s_pair::New(::google::protobuf::Arena* arena) const {
  k8s_pair* n = new k8s_pair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void k8s_pair::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.k8s_pair)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool k8s_pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.k8s_pair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.k8s_pair.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.k8s_pair.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.k8s_pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.k8s_pair)
  return false;
#undef DO_
}

void k8s_pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.k8s_pair)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_pair.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_pair.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.k8s_pair)
}

::google::protobuf::uint8* k8s_pair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.k8s_pair)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_pair.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_pair.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.k8s_pair)
  return target;
}

size_t k8s_pair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.k8s_pair)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t k8s_pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.k8s_pair)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_pair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.k8s_pair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const k8s_pair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const k8s_pair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.k8s_pair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.k8s_pair)
    UnsafeMergeFrom(*source);
  }
}

void k8s_pair::MergeFrom(const k8s_pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.k8s_pair)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void k8s_pair::UnsafeMergeFrom(const k8s_pair& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void k8s_pair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.k8s_pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_pair::CopyFrom(const k8s_pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.k8s_pair)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool k8s_pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void k8s_pair::Swap(k8s_pair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void k8s_pair::InternalSwap(k8s_pair* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata k8s_pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_pair_descriptor_;
  metadata.reflection = k8s_pair_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// k8s_pair

// required string key = 1;
bool k8s_pair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void k8s_pair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void k8s_pair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void k8s_pair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& k8s_pair::key() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_pair.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_pair::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.k8s_pair.key)
}
void k8s_pair::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.k8s_pair.key)
}
void k8s_pair::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.k8s_pair.key)
}
::std::string* k8s_pair::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_pair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* k8s_pair::release_key() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_pair.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_pair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_pair.key)
}

// required string value = 2;
bool k8s_pair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void k8s_pair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void k8s_pair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void k8s_pair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& k8s_pair::value() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_pair.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_pair::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.k8s_pair.value)
}
void k8s_pair::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.k8s_pair.value)
}
void k8s_pair::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.k8s_pair.value)
}
::std::string* k8s_pair::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_pair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* k8s_pair::release_value() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_pair.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_pair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_pair.value)
}

inline const k8s_pair* k8s_pair::internal_default_instance() {
  return &k8s_pair_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int k8s_common::kNameFieldNumber;
const int k8s_common::kUidFieldNumber;
const int k8s_common::kNamespaceFieldNumber;
const int k8s_common::kLabelsFieldNumber;
const int k8s_common::kSelectorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

k8s_common::k8s_common()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.k8s_common)
}

void k8s_common::InitAsDefaultInstance() {
}

k8s_common::k8s_common(const k8s_common& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.k8s_common)
}

void k8s_common::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

k8s_common::~k8s_common() {
  // @@protoc_insertion_point(destructor:draiosproto.k8s_common)
  SharedDtor();
}

void k8s_common::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void k8s_common::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_common::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_common_descriptor_;
}

const k8s_common& k8s_common::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<k8s_common> k8s_common_default_instance_;

k8s_common* k8s_common::New(::google::protobuf::Arena* arena) const {
  k8s_common* n = new k8s_common;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void k8s_common::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.k8s_common)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uid()) {
      uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_namespace_()) {
      namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  labels_.Clear();
  selectors_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool k8s_common::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.k8s_common)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.k8s_common.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required string uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.k8s_common.uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_namespace;
        break;
      }

      // optional string namespace = 3;
      case 3: {
        if (tag == 26) {
         parse_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->namespace_().data(), this->namespace_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.k8s_common.namespace");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_labels;
        break;
      }

      // repeated .draiosproto.k8s_pair labels = 4;
      case 4: {
        if (tag == 34) {
         parse_labels:
          DO_(input->IncrementRecursionDepth());
         parse_loop_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_labels;
        if (input->ExpectTag(42)) goto parse_loop_selectors;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.k8s_pair selectors = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_selectors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_selectors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_selectors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.k8s_common)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.k8s_common)
  return false;
#undef DO_
}

void k8s_common::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.k8s_common)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_common.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_common.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // optional string namespace = 3;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_common.namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->namespace_(), output);
  }

  // repeated .draiosproto.k8s_pair labels = 4;
  for (unsigned int i = 0, n = this->labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->labels(i), output);
  }

  // repeated .draiosproto.k8s_pair selectors = 5;
  for (unsigned int i = 0, n = this->selectors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->selectors(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.k8s_common)
}

::google::protobuf::uint8* k8s_common::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.k8s_common)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_common.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_common.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  // optional string namespace = 3;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_common.namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->namespace_(), target);
  }

  // repeated .draiosproto.k8s_pair labels = 4;
  for (unsigned int i = 0, n = this->labels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->labels(i), false, target);
  }

  // repeated .draiosproto.k8s_pair selectors = 5;
  for (unsigned int i = 0, n = this->selectors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->selectors(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.k8s_common)
  return target;
}

size_t k8s_common::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.k8s_common)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_uid()) {
    // required string uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  return total_size;
}
size_t k8s_common::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.k8s_common)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string namespace = 3;
  if (has_namespace_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  // repeated .draiosproto.k8s_pair labels = 4;
  {
    unsigned int count = this->labels_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labels(i));
    }
  }

  // repeated .draiosproto.k8s_pair selectors = 5;
  {
    unsigned int count = this->selectors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selectors(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_common::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.k8s_common)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const k8s_common* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const k8s_common>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.k8s_common)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.k8s_common)
    UnsafeMergeFrom(*source);
  }
}

void k8s_common::MergeFrom(const k8s_common& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.k8s_common)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void k8s_common::UnsafeMergeFrom(const k8s_common& from) {
  GOOGLE_DCHECK(&from != this);
  labels_.MergeFrom(from.labels_);
  selectors_.MergeFrom(from.selectors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_uid()) {
      set_has_uid();
      uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
    }
    if (from.has_namespace_()) {
      set_has_namespace_();
      namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void k8s_common::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.k8s_common)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_common::CopyFrom(const k8s_common& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.k8s_common)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool k8s_common::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->labels())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->selectors())) return false;
  return true;
}

void k8s_common::Swap(k8s_common* other) {
  if (other == this) return;
  InternalSwap(other);
}
void k8s_common::InternalSwap(k8s_common* other) {
  name_.Swap(&other->name_);
  uid_.Swap(&other->uid_);
  namespace__.Swap(&other->namespace__);
  labels_.UnsafeArenaSwap(&other->labels_);
  selectors_.UnsafeArenaSwap(&other->selectors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata k8s_common::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_common_descriptor_;
  metadata.reflection = k8s_common_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// k8s_common

// required string name = 1;
bool k8s_common::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void k8s_common::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void k8s_common::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void k8s_common::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& k8s_common::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_common.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_common::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.k8s_common.name)
}
void k8s_common::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.k8s_common.name)
}
void k8s_common::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.k8s_common.name)
}
::std::string* k8s_common::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_common.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* k8s_common::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_common.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_common::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_common.name)
}

// required string uid = 2;
bool k8s_common::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void k8s_common::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
void k8s_common::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
void k8s_common::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
const ::std::string& k8s_common::uid() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_common.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_common::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.k8s_common.uid)
}
void k8s_common::set_uid(const char* value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.k8s_common.uid)
}
void k8s_common::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.k8s_common.uid)
}
::std::string* k8s_common::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_common.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* k8s_common::release_uid() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_common.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_common::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_common.uid)
}

// optional string namespace = 3;
bool k8s_common::has_namespace_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void k8s_common::set_has_namespace_() {
  _has_bits_[0] |= 0x00000004u;
}
void k8s_common::clear_has_namespace_() {
  _has_bits_[0] &= ~0x00000004u;
}
void k8s_common::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_namespace_();
}
const ::std::string& k8s_common::namespace_() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_common.namespace)
  return namespace__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_common::set_namespace_(const ::std::string& value) {
  set_has_namespace_();
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.k8s_common.namespace)
}
void k8s_common::set_namespace_(const char* value) {
  set_has_namespace_();
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.k8s_common.namespace)
}
void k8s_common::set_namespace_(const char* value, size_t size) {
  set_has_namespace_();
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.k8s_common.namespace)
}
::std::string* k8s_common::mutable_namespace_() {
  set_has_namespace_();
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_common.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* k8s_common::release_namespace_() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_common.namespace)
  clear_has_namespace_();
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_common::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    set_has_namespace_();
  } else {
    clear_has_namespace_();
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_common.namespace)
}

// repeated .draiosproto.k8s_pair labels = 4;
int k8s_common::labels_size() const {
  return labels_.size();
}
void k8s_common::clear_labels() {
  labels_.Clear();
}
const ::draiosproto::k8s_pair& k8s_common::labels(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_common.labels)
  return labels_.Get(index);
}
::draiosproto::k8s_pair* k8s_common::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_common.labels)
  return labels_.Mutable(index);
}
::draiosproto::k8s_pair* k8s_common::add_labels() {
  // @@protoc_insertion_point(field_add:draiosproto.k8s_common.labels)
  return labels_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_pair >*
k8s_common::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.k8s_common.labels)
  return &labels_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_pair >&
k8s_common::labels() const {
  // @@protoc_insertion_point(field_list:draiosproto.k8s_common.labels)
  return labels_;
}

// repeated .draiosproto.k8s_pair selectors = 5;
int k8s_common::selectors_size() const {
  return selectors_.size();
}
void k8s_common::clear_selectors() {
  selectors_.Clear();
}
const ::draiosproto::k8s_pair& k8s_common::selectors(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_common.selectors)
  return selectors_.Get(index);
}
::draiosproto::k8s_pair* k8s_common::mutable_selectors(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_common.selectors)
  return selectors_.Mutable(index);
}
::draiosproto::k8s_pair* k8s_common::add_selectors() {
  // @@protoc_insertion_point(field_add:draiosproto.k8s_common.selectors)
  return selectors_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_pair >*
k8s_common::mutable_selectors() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.k8s_common.selectors)
  return &selectors_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_pair >&
k8s_common::selectors() const {
  // @@protoc_insertion_point(field_list:draiosproto.k8s_common.selectors)
  return selectors_;
}

inline const k8s_common* k8s_common::internal_default_instance() {
  return &k8s_common_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int k8s_namespace::kCommonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

k8s_namespace::k8s_namespace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.k8s_namespace)
}

void k8s_namespace::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(
      ::draiosproto::k8s_common::internal_default_instance());
}

k8s_namespace::k8s_namespace(const k8s_namespace& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.k8s_namespace)
}

void k8s_namespace::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
}

k8s_namespace::~k8s_namespace() {
  // @@protoc_insertion_point(destructor:draiosproto.k8s_namespace)
  SharedDtor();
}

void k8s_namespace::SharedDtor() {
  if (this != &k8s_namespace_default_instance_.get()) {
    delete common_;
  }
}

void k8s_namespace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_namespace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_namespace_descriptor_;
}

const k8s_namespace& k8s_namespace::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<k8s_namespace> k8s_namespace_default_instance_;

k8s_namespace* k8s_namespace::New(::google::protobuf::Arena* arena) const {
  k8s_namespace* n = new k8s_namespace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void k8s_namespace::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.k8s_namespace)
  if (has_common()) {
    if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool k8s_namespace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.k8s_namespace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.k8s_namespace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.k8s_namespace)
  return false;
#undef DO_
}

void k8s_namespace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.k8s_namespace)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.k8s_namespace)
}

::google::protobuf::uint8* k8s_namespace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.k8s_namespace)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.k8s_namespace)
  return target;
}

size_t k8s_namespace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.k8s_namespace)
  size_t total_size = 0;

  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_namespace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.k8s_namespace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const k8s_namespace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const k8s_namespace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.k8s_namespace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.k8s_namespace)
    UnsafeMergeFrom(*source);
  }
}

void k8s_namespace::MergeFrom(const k8s_namespace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.k8s_namespace)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void k8s_namespace::UnsafeMergeFrom(const k8s_namespace& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void k8s_namespace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.k8s_namespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_namespace::CopyFrom(const k8s_namespace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.k8s_namespace)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool k8s_namespace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common_->IsInitialized()) return false;
  }
  return true;
}

void k8s_namespace::Swap(k8s_namespace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void k8s_namespace::InternalSwap(k8s_namespace* other) {
  std::swap(common_, other->common_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata k8s_namespace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_namespace_descriptor_;
  metadata.reflection = k8s_namespace_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// k8s_namespace

// required .draiosproto.k8s_common common = 1;
bool k8s_namespace::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void k8s_namespace::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
void k8s_namespace::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
void k8s_namespace::clear_common() {
  if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
  clear_has_common();
}
const ::draiosproto::k8s_common& k8s_namespace::common() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_namespace.common)
  return common_ != NULL ? *common_
                         : *::draiosproto::k8s_common::internal_default_instance();
}
::draiosproto::k8s_common* k8s_namespace::mutable_common() {
  set_has_common();
  if (common_ == NULL) {
    common_ = new ::draiosproto::k8s_common;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_namespace.common)
  return common_;
}
::draiosproto::k8s_common* k8s_namespace::release_common() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_namespace.common)
  clear_has_common();
  ::draiosproto::k8s_common* temp = common_;
  common_ = NULL;
  return temp;
}
void k8s_namespace::set_allocated_common(::draiosproto::k8s_common* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_namespace.common)
}

inline const k8s_namespace* k8s_namespace::internal_default_instance() {
  return &k8s_namespace_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int k8s_node::kCommonFieldNumber;
const int k8s_node::kHostIpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

k8s_node::k8s_node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.k8s_node)
}

void k8s_node::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(
      ::draiosproto::k8s_common::internal_default_instance());
}

k8s_node::k8s_node(const k8s_node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.k8s_node)
}

void k8s_node::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
}

k8s_node::~k8s_node() {
  // @@protoc_insertion_point(destructor:draiosproto.k8s_node)
  SharedDtor();
}

void k8s_node::SharedDtor() {
  if (this != &k8s_node_default_instance_.get()) {
    delete common_;
  }
}

void k8s_node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_node_descriptor_;
}

const k8s_node& k8s_node::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<k8s_node> k8s_node_default_instance_;

k8s_node* k8s_node::New(::google::protobuf::Arena* arena) const {
  k8s_node* n = new k8s_node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void k8s_node::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.k8s_node)
  if (has_common()) {
    if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
  }
  host_ips_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool k8s_node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.k8s_node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_host_ips;
        break;
      }

      // repeated string host_ips = 2;
      case 2: {
        if (tag == 18) {
         parse_host_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_host_ips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host_ips(this->host_ips_size() - 1).data(),
            this->host_ips(this->host_ips_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.k8s_node.host_ips");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_host_ips;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.k8s_node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.k8s_node)
  return false;
#undef DO_
}

void k8s_node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.k8s_node)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_, output);
  }

  // repeated string host_ips = 2;
  for (int i = 0; i < this->host_ips_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_ips(i).data(), this->host_ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_node.host_ips");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host_ips(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.k8s_node)
}

::google::protobuf::uint8* k8s_node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.k8s_node)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_, false, target);
  }

  // repeated string host_ips = 2;
  for (int i = 0; i < this->host_ips_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_ips(i).data(), this->host_ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_node.host_ips");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->host_ips(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.k8s_node)
  return target;
}

size_t k8s_node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.k8s_node)
  size_t total_size = 0;

  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);
  }
  // repeated string host_ips = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->host_ips_size());
  for (int i = 0; i < this->host_ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->host_ips(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.k8s_node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const k8s_node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const k8s_node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.k8s_node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.k8s_node)
    UnsafeMergeFrom(*source);
  }
}

void k8s_node::MergeFrom(const k8s_node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.k8s_node)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void k8s_node::UnsafeMergeFrom(const k8s_node& from) {
  GOOGLE_DCHECK(&from != this);
  host_ips_.UnsafeMergeFrom(from.host_ips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void k8s_node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.k8s_node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_node::CopyFrom(const k8s_node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.k8s_node)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool k8s_node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common_->IsInitialized()) return false;
  }
  return true;
}

void k8s_node::Swap(k8s_node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void k8s_node::InternalSwap(k8s_node* other) {
  std::swap(common_, other->common_);
  host_ips_.UnsafeArenaSwap(&other->host_ips_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata k8s_node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_node_descriptor_;
  metadata.reflection = k8s_node_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// k8s_node

// required .draiosproto.k8s_common common = 1;
bool k8s_node::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void k8s_node::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
void k8s_node::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
void k8s_node::clear_common() {
  if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
  clear_has_common();
}
const ::draiosproto::k8s_common& k8s_node::common() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_node.common)
  return common_ != NULL ? *common_
                         : *::draiosproto::k8s_common::internal_default_instance();
}
::draiosproto::k8s_common* k8s_node::mutable_common() {
  set_has_common();
  if (common_ == NULL) {
    common_ = new ::draiosproto::k8s_common;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_node.common)
  return common_;
}
::draiosproto::k8s_common* k8s_node::release_common() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_node.common)
  clear_has_common();
  ::draiosproto::k8s_common* temp = common_;
  common_ = NULL;
  return temp;
}
void k8s_node::set_allocated_common(::draiosproto::k8s_common* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_node.common)
}

// repeated string host_ips = 2;
int k8s_node::host_ips_size() const {
  return host_ips_.size();
}
void k8s_node::clear_host_ips() {
  host_ips_.Clear();
}
const ::std::string& k8s_node::host_ips(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_node.host_ips)
  return host_ips_.Get(index);
}
::std::string* k8s_node::mutable_host_ips(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_node.host_ips)
  return host_ips_.Mutable(index);
}
void k8s_node::set_host_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:draiosproto.k8s_node.host_ips)
  host_ips_.Mutable(index)->assign(value);
}
void k8s_node::set_host_ips(int index, const char* value) {
  host_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:draiosproto.k8s_node.host_ips)
}
void k8s_node::set_host_ips(int index, const char* value, size_t size) {
  host_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:draiosproto.k8s_node.host_ips)
}
::std::string* k8s_node::add_host_ips() {
  // @@protoc_insertion_point(field_add_mutable:draiosproto.k8s_node.host_ips)
  return host_ips_.Add();
}
void k8s_node::add_host_ips(const ::std::string& value) {
  host_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:draiosproto.k8s_node.host_ips)
}
void k8s_node::add_host_ips(const char* value) {
  host_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:draiosproto.k8s_node.host_ips)
}
void k8s_node::add_host_ips(const char* value, size_t size) {
  host_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:draiosproto.k8s_node.host_ips)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
k8s_node::host_ips() const {
  // @@protoc_insertion_point(field_list:draiosproto.k8s_node.host_ips)
  return host_ips_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
k8s_node::mutable_host_ips() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.k8s_node.host_ips)
  return &host_ips_;
}

inline const k8s_node* k8s_node::internal_default_instance() {
  return &k8s_node_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int k8s_pod::kCommonFieldNumber;
const int k8s_pod::kContainerIdsFieldNumber;
const int k8s_pod::kNodeNameFieldNumber;
const int k8s_pod::kHostIpFieldNumber;
const int k8s_pod::kInternalIpFieldNumber;
const int k8s_pod::kRestartCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

k8s_pod::k8s_pod()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.k8s_pod)
}

void k8s_pod::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(
      ::draiosproto::k8s_common::internal_default_instance());
}

k8s_pod::k8s_pod(const k8s_pod& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.k8s_pod)
}

void k8s_pod::SharedCtor() {
  _cached_size_ = 0;
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  common_ = NULL;
  restart_count_ = 0u;
}

k8s_pod::~k8s_pod() {
  // @@protoc_insertion_point(destructor:draiosproto.k8s_pod)
  SharedDtor();
}

void k8s_pod::SharedDtor() {
  node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &k8s_pod_default_instance_.get()) {
    delete common_;
  }
}

void k8s_pod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_pod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_pod_descriptor_;
}

const k8s_pod& k8s_pod::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<k8s_pod> k8s_pod_default_instance_;

k8s_pod* k8s_pod::New(::google::protobuf::Arena* arena) const {
  k8s_pod* n = new k8s_pod;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void k8s_pod::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.k8s_pod)
  if (_has_bits_[0 / 32] & 61u) {
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
    }
    if (has_node_name()) {
      node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_host_ip()) {
      host_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_internal_ip()) {
      internal_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    restart_count_ = 0u;
  }
  container_ids_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool k8s_pod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.k8s_pod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_container_ids;
        break;
      }

      // repeated string container_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_container_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_container_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->container_ids(this->container_ids_size() - 1).data(),
            this->container_ids(this->container_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.k8s_pod.container_ids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_container_ids;
        if (input->ExpectTag(26)) goto parse_node_name;
        break;
      }

      // optional string node_name = 3;
      case 3: {
        if (tag == 26) {
         parse_node_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_name().data(), this->node_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.k8s_pod.node_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_host_ip;
        break;
      }

      // optional string host_ip = 4;
      case 4: {
        if (tag == 34) {
         parse_host_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host_ip().data(), this->host_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.k8s_pod.host_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_internal_ip;
        break;
      }

      // optional string internal_ip = 5;
      case 5: {
        if (tag == 42) {
         parse_internal_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->internal_ip().data(), this->internal_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.k8s_pod.internal_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_restart_count;
        break;
      }

      // optional uint32 restart_count = 6;
      case 6: {
        if (tag == 48) {
         parse_restart_count:
          set_has_restart_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restart_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.k8s_pod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.k8s_pod)
  return false;
#undef DO_
}

void k8s_pod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.k8s_pod)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_, output);
  }

  // repeated string container_ids = 2;
  for (int i = 0; i < this->container_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->container_ids(i).data(), this->container_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_pod.container_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->container_ids(i), output);
  }

  // optional string node_name = 3;
  if (has_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_pod.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->node_name(), output);
  }

  // optional string host_ip = 4;
  if (has_host_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_ip().data(), this->host_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_pod.host_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->host_ip(), output);
  }

  // optional string internal_ip = 5;
  if (has_internal_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->internal_ip().data(), this->internal_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_pod.internal_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->internal_ip(), output);
  }

  // optional uint32 restart_count = 6;
  if (has_restart_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->restart_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.k8s_pod)
}

::google::protobuf::uint8* k8s_pod::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.k8s_pod)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_, false, target);
  }

  // repeated string container_ids = 2;
  for (int i = 0; i < this->container_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->container_ids(i).data(), this->container_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_pod.container_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->container_ids(i), target);
  }

  // optional string node_name = 3;
  if (has_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_pod.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node_name(), target);
  }

  // optional string host_ip = 4;
  if (has_host_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_ip().data(), this->host_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_pod.host_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->host_ip(), target);
  }

  // optional string internal_ip = 5;
  if (has_internal_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->internal_ip().data(), this->internal_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_pod.internal_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->internal_ip(), target);
  }

  // optional uint32 restart_count = 6;
  if (has_restart_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->restart_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.k8s_pod)
  return target;
}

size_t k8s_pod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.k8s_pod)
  size_t total_size = 0;

  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);
  }
  if (_has_bits_[2 / 32] & 60u) {
    // optional string node_name = 3;
    if (has_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_name());
    }

    // optional string host_ip = 4;
    if (has_host_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_ip());
    }

    // optional string internal_ip = 5;
    if (has_internal_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->internal_ip());
    }

    // optional uint32 restart_count = 6;
    if (has_restart_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restart_count());
    }

  }
  // repeated string container_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->container_ids_size());
  for (int i = 0; i < this->container_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->container_ids(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_pod::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.k8s_pod)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const k8s_pod* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const k8s_pod>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.k8s_pod)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.k8s_pod)
    UnsafeMergeFrom(*source);
  }
}

void k8s_pod::MergeFrom(const k8s_pod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.k8s_pod)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void k8s_pod::UnsafeMergeFrom(const k8s_pod& from) {
  GOOGLE_DCHECK(&from != this);
  container_ids_.UnsafeMergeFrom(from.container_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
    if (from.has_node_name()) {
      set_has_node_name();
      node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
    }
    if (from.has_host_ip()) {
      set_has_host_ip();
      host_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_ip_);
    }
    if (from.has_internal_ip()) {
      set_has_internal_ip();
      internal_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_ip_);
    }
    if (from.has_restart_count()) {
      set_restart_count(from.restart_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void k8s_pod::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.k8s_pod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_pod::CopyFrom(const k8s_pod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.k8s_pod)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool k8s_pod::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common_->IsInitialized()) return false;
  }
  return true;
}

void k8s_pod::Swap(k8s_pod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void k8s_pod::InternalSwap(k8s_pod* other) {
  std::swap(common_, other->common_);
  container_ids_.UnsafeArenaSwap(&other->container_ids_);
  node_name_.Swap(&other->node_name_);
  host_ip_.Swap(&other->host_ip_);
  internal_ip_.Swap(&other->internal_ip_);
  std::swap(restart_count_, other->restart_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata k8s_pod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_pod_descriptor_;
  metadata.reflection = k8s_pod_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// k8s_pod

// required .draiosproto.k8s_common common = 1;
bool k8s_pod::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void k8s_pod::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
void k8s_pod::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
void k8s_pod::clear_common() {
  if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
  clear_has_common();
}
const ::draiosproto::k8s_common& k8s_pod::common() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_pod.common)
  return common_ != NULL ? *common_
                         : *::draiosproto::k8s_common::internal_default_instance();
}
::draiosproto::k8s_common* k8s_pod::mutable_common() {
  set_has_common();
  if (common_ == NULL) {
    common_ = new ::draiosproto::k8s_common;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_pod.common)
  return common_;
}
::draiosproto::k8s_common* k8s_pod::release_common() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_pod.common)
  clear_has_common();
  ::draiosproto::k8s_common* temp = common_;
  common_ = NULL;
  return temp;
}
void k8s_pod::set_allocated_common(::draiosproto::k8s_common* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_pod.common)
}

// repeated string container_ids = 2;
int k8s_pod::container_ids_size() const {
  return container_ids_.size();
}
void k8s_pod::clear_container_ids() {
  container_ids_.Clear();
}
const ::std::string& k8s_pod::container_ids(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_pod.container_ids)
  return container_ids_.Get(index);
}
::std::string* k8s_pod::mutable_container_ids(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_pod.container_ids)
  return container_ids_.Mutable(index);
}
void k8s_pod::set_container_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:draiosproto.k8s_pod.container_ids)
  container_ids_.Mutable(index)->assign(value);
}
void k8s_pod::set_container_ids(int index, const char* value) {
  container_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:draiosproto.k8s_pod.container_ids)
}
void k8s_pod::set_container_ids(int index, const char* value, size_t size) {
  container_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:draiosproto.k8s_pod.container_ids)
}
::std::string* k8s_pod::add_container_ids() {
  // @@protoc_insertion_point(field_add_mutable:draiosproto.k8s_pod.container_ids)
  return container_ids_.Add();
}
void k8s_pod::add_container_ids(const ::std::string& value) {
  container_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:draiosproto.k8s_pod.container_ids)
}
void k8s_pod::add_container_ids(const char* value) {
  container_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:draiosproto.k8s_pod.container_ids)
}
void k8s_pod::add_container_ids(const char* value, size_t size) {
  container_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:draiosproto.k8s_pod.container_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
k8s_pod::container_ids() const {
  // @@protoc_insertion_point(field_list:draiosproto.k8s_pod.container_ids)
  return container_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
k8s_pod::mutable_container_ids() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.k8s_pod.container_ids)
  return &container_ids_;
}

// optional string node_name = 3;
bool k8s_pod::has_node_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void k8s_pod::set_has_node_name() {
  _has_bits_[0] |= 0x00000004u;
}
void k8s_pod::clear_has_node_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void k8s_pod::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_node_name();
}
const ::std::string& k8s_pod::node_name() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_pod.node_name)
  return node_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_pod::set_node_name(const ::std::string& value) {
  set_has_node_name();
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.k8s_pod.node_name)
}
void k8s_pod::set_node_name(const char* value) {
  set_has_node_name();
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.k8s_pod.node_name)
}
void k8s_pod::set_node_name(const char* value, size_t size) {
  set_has_node_name();
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.k8s_pod.node_name)
}
::std::string* k8s_pod::mutable_node_name() {
  set_has_node_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_pod.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* k8s_pod::release_node_name() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_pod.node_name)
  clear_has_node_name();
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_pod::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    set_has_node_name();
  } else {
    clear_has_node_name();
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_pod.node_name)
}

// optional string host_ip = 4;
bool k8s_pod::has_host_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void k8s_pod::set_has_host_ip() {
  _has_bits_[0] |= 0x00000008u;
}
void k8s_pod::clear_has_host_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
void k8s_pod::clear_host_ip() {
  host_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host_ip();
}
const ::std::string& k8s_pod::host_ip() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_pod.host_ip)
  return host_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_pod::set_host_ip(const ::std::string& value) {
  set_has_host_ip();
  host_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.k8s_pod.host_ip)
}
void k8s_pod::set_host_ip(const char* value) {
  set_has_host_ip();
  host_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.k8s_pod.host_ip)
}
void k8s_pod::set_host_ip(const char* value, size_t size) {
  set_has_host_ip();
  host_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.k8s_pod.host_ip)
}
::std::string* k8s_pod::mutable_host_ip() {
  set_has_host_ip();
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_pod.host_ip)
  return host_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* k8s_pod::release_host_ip() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_pod.host_ip)
  clear_has_host_ip();
  return host_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_pod::set_allocated_host_ip(::std::string* host_ip) {
  if (host_ip != NULL) {
    set_has_host_ip();
  } else {
    clear_has_host_ip();
  }
  host_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_ip);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_pod.host_ip)
}

// optional string internal_ip = 5;
bool k8s_pod::has_internal_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void k8s_pod::set_has_internal_ip() {
  _has_bits_[0] |= 0x00000010u;
}
void k8s_pod::clear_has_internal_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
void k8s_pod::clear_internal_ip() {
  internal_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_internal_ip();
}
const ::std::string& k8s_pod::internal_ip() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_pod.internal_ip)
  return internal_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_pod::set_internal_ip(const ::std::string& value) {
  set_has_internal_ip();
  internal_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.k8s_pod.internal_ip)
}
void k8s_pod::set_internal_ip(const char* value) {
  set_has_internal_ip();
  internal_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.k8s_pod.internal_ip)
}
void k8s_pod::set_internal_ip(const char* value, size_t size) {
  set_has_internal_ip();
  internal_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.k8s_pod.internal_ip)
}
::std::string* k8s_pod::mutable_internal_ip() {
  set_has_internal_ip();
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_pod.internal_ip)
  return internal_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* k8s_pod::release_internal_ip() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_pod.internal_ip)
  clear_has_internal_ip();
  return internal_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_pod::set_allocated_internal_ip(::std::string* internal_ip) {
  if (internal_ip != NULL) {
    set_has_internal_ip();
  } else {
    clear_has_internal_ip();
  }
  internal_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internal_ip);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_pod.internal_ip)
}

// optional uint32 restart_count = 6;
bool k8s_pod::has_restart_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void k8s_pod::set_has_restart_count() {
  _has_bits_[0] |= 0x00000020u;
}
void k8s_pod::clear_has_restart_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void k8s_pod::clear_restart_count() {
  restart_count_ = 0u;
  clear_has_restart_count();
}
::google::protobuf::uint32 k8s_pod::restart_count() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_pod.restart_count)
  return restart_count_;
}
void k8s_pod::set_restart_count(::google::protobuf::uint32 value) {
  set_has_restart_count();
  restart_count_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.k8s_pod.restart_count)
}

inline const k8s_pod* k8s_pod::internal_default_instance() {
  return &k8s_pod_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int k8s_replication_controller::kCommonFieldNumber;
const int k8s_replication_controller::kReplicasDesiredFieldNumber;
const int k8s_replication_controller::kReplicasRunningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

k8s_replication_controller::k8s_replication_controller()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.k8s_replication_controller)
}

void k8s_replication_controller::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(
      ::draiosproto::k8s_common::internal_default_instance());
}

k8s_replication_controller::k8s_replication_controller(const k8s_replication_controller& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.k8s_replication_controller)
}

void k8s_replication_controller::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(&replicas_desired_, 0, reinterpret_cast<char*>(&replicas_running_) -
    reinterpret_cast<char*>(&replicas_desired_) + sizeof(replicas_running_));
}

k8s_replication_controller::~k8s_replication_controller() {
  // @@protoc_insertion_point(destructor:draiosproto.k8s_replication_controller)
  SharedDtor();
}

void k8s_replication_controller::SharedDtor() {
  if (this != &k8s_replication_controller_default_instance_.get()) {
    delete common_;
  }
}

void k8s_replication_controller::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_replication_controller::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_replication_controller_descriptor_;
}

const k8s_replication_controller& k8s_replication_controller::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<k8s_replication_controller> k8s_replication_controller_default_instance_;

k8s_replication_controller* k8s_replication_controller::New(::google::protobuf::Arena* arena) const {
  k8s_replication_controller* n = new k8s_replication_controller;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void k8s_replication_controller::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.k8s_replication_controller)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(k8s_replication_controller, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<k8s_replication_controller*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(replicas_desired_, replicas_running_);
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool k8s_replication_controller::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.k8s_replication_controller)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_replicas_desired;
        break;
      }

      // optional uint32 replicas_desired = 2;
      case 2: {
        if (tag == 16) {
         parse_replicas_desired:
          set_has_replicas_desired();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replicas_desired_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_replicas_running;
        break;
      }

      // optional uint32 replicas_running = 3;
      case 3: {
        if (tag == 24) {
         parse_replicas_running:
          set_has_replicas_running();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replicas_running_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.k8s_replication_controller)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.k8s_replication_controller)
  return false;
#undef DO_
}

void k8s_replication_controller::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.k8s_replication_controller)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_, output);
  }

  // optional uint32 replicas_desired = 2;
  if (has_replicas_desired()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->replicas_desired(), output);
  }

  // optional uint32 replicas_running = 3;
  if (has_replicas_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->replicas_running(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.k8s_replication_controller)
}

::google::protobuf::uint8* k8s_replication_controller::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.k8s_replication_controller)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_, false, target);
  }

  // optional uint32 replicas_desired = 2;
  if (has_replicas_desired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->replicas_desired(), target);
  }

  // optional uint32 replicas_running = 3;
  if (has_replicas_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->replicas_running(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.k8s_replication_controller)
  return target;
}

size_t k8s_replication_controller::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.k8s_replication_controller)
  size_t total_size = 0;

  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional uint32 replicas_desired = 2;
    if (has_replicas_desired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replicas_desired());
    }

    // optional uint32 replicas_running = 3;
    if (has_replicas_running()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replicas_running());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_replication_controller::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.k8s_replication_controller)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const k8s_replication_controller* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const k8s_replication_controller>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.k8s_replication_controller)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.k8s_replication_controller)
    UnsafeMergeFrom(*source);
  }
}

void k8s_replication_controller::MergeFrom(const k8s_replication_controller& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.k8s_replication_controller)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void k8s_replication_controller::UnsafeMergeFrom(const k8s_replication_controller& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
    if (from.has_replicas_desired()) {
      set_replicas_desired(from.replicas_desired());
    }
    if (from.has_replicas_running()) {
      set_replicas_running(from.replicas_running());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void k8s_replication_controller::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.k8s_replication_controller)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_replication_controller::CopyFrom(const k8s_replication_controller& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.k8s_replication_controller)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool k8s_replication_controller::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common_->IsInitialized()) return false;
  }
  return true;
}

void k8s_replication_controller::Swap(k8s_replication_controller* other) {
  if (other == this) return;
  InternalSwap(other);
}
void k8s_replication_controller::InternalSwap(k8s_replication_controller* other) {
  std::swap(common_, other->common_);
  std::swap(replicas_desired_, other->replicas_desired_);
  std::swap(replicas_running_, other->replicas_running_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata k8s_replication_controller::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_replication_controller_descriptor_;
  metadata.reflection = k8s_replication_controller_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// k8s_replication_controller

// required .draiosproto.k8s_common common = 1;
bool k8s_replication_controller::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void k8s_replication_controller::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
void k8s_replication_controller::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
void k8s_replication_controller::clear_common() {
  if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
  clear_has_common();
}
const ::draiosproto::k8s_common& k8s_replication_controller::common() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_replication_controller.common)
  return common_ != NULL ? *common_
                         : *::draiosproto::k8s_common::internal_default_instance();
}
::draiosproto::k8s_common* k8s_replication_controller::mutable_common() {
  set_has_common();
  if (common_ == NULL) {
    common_ = new ::draiosproto::k8s_common;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_replication_controller.common)
  return common_;
}
::draiosproto::k8s_common* k8s_replication_controller::release_common() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_replication_controller.common)
  clear_has_common();
  ::draiosproto::k8s_common* temp = common_;
  common_ = NULL;
  return temp;
}
void k8s_replication_controller::set_allocated_common(::draiosproto::k8s_common* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_replication_controller.common)
}

// optional uint32 replicas_desired = 2;
bool k8s_replication_controller::has_replicas_desired() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void k8s_replication_controller::set_has_replicas_desired() {
  _has_bits_[0] |= 0x00000002u;
}
void k8s_replication_controller::clear_has_replicas_desired() {
  _has_bits_[0] &= ~0x00000002u;
}
void k8s_replication_controller::clear_replicas_desired() {
  replicas_desired_ = 0u;
  clear_has_replicas_desired();
}
::google::protobuf::uint32 k8s_replication_controller::replicas_desired() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_replication_controller.replicas_desired)
  return replicas_desired_;
}
void k8s_replication_controller::set_replicas_desired(::google::protobuf::uint32 value) {
  set_has_replicas_desired();
  replicas_desired_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.k8s_replication_controller.replicas_desired)
}

// optional uint32 replicas_running = 3;
bool k8s_replication_controller::has_replicas_running() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void k8s_replication_controller::set_has_replicas_running() {
  _has_bits_[0] |= 0x00000004u;
}
void k8s_replication_controller::clear_has_replicas_running() {
  _has_bits_[0] &= ~0x00000004u;
}
void k8s_replication_controller::clear_replicas_running() {
  replicas_running_ = 0u;
  clear_has_replicas_running();
}
::google::protobuf::uint32 k8s_replication_controller::replicas_running() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_replication_controller.replicas_running)
  return replicas_running_;
}
void k8s_replication_controller::set_replicas_running(::google::protobuf::uint32 value) {
  set_has_replicas_running();
  replicas_running_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.k8s_replication_controller.replicas_running)
}

inline const k8s_replication_controller* k8s_replication_controller::internal_default_instance() {
  return &k8s_replication_controller_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int k8s_replica_set::kCommonFieldNumber;
const int k8s_replica_set::kReplicasDesiredFieldNumber;
const int k8s_replica_set::kReplicasRunningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

k8s_replica_set::k8s_replica_set()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.k8s_replica_set)
}

void k8s_replica_set::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(
      ::draiosproto::k8s_common::internal_default_instance());
}

k8s_replica_set::k8s_replica_set(const k8s_replica_set& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.k8s_replica_set)
}

void k8s_replica_set::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(&replicas_desired_, 0, reinterpret_cast<char*>(&replicas_running_) -
    reinterpret_cast<char*>(&replicas_desired_) + sizeof(replicas_running_));
}

k8s_replica_set::~k8s_replica_set() {
  // @@protoc_insertion_point(destructor:draiosproto.k8s_replica_set)
  SharedDtor();
}

void k8s_replica_set::SharedDtor() {
  if (this != &k8s_replica_set_default_instance_.get()) {
    delete common_;
  }
}

void k8s_replica_set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_replica_set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_replica_set_descriptor_;
}

const k8s_replica_set& k8s_replica_set::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<k8s_replica_set> k8s_replica_set_default_instance_;

k8s_replica_set* k8s_replica_set::New(::google::protobuf::Arena* arena) const {
  k8s_replica_set* n = new k8s_replica_set;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void k8s_replica_set::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.k8s_replica_set)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(k8s_replica_set, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<k8s_replica_set*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(replicas_desired_, replicas_running_);
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool k8s_replica_set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.k8s_replica_set)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_replicas_desired;
        break;
      }

      // optional uint32 replicas_desired = 2;
      case 2: {
        if (tag == 16) {
         parse_replicas_desired:
          set_has_replicas_desired();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replicas_desired_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_replicas_running;
        break;
      }

      // optional uint32 replicas_running = 3;
      case 3: {
        if (tag == 24) {
         parse_replicas_running:
          set_has_replicas_running();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replicas_running_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.k8s_replica_set)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.k8s_replica_set)
  return false;
#undef DO_
}

void k8s_replica_set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.k8s_replica_set)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_, output);
  }

  // optional uint32 replicas_desired = 2;
  if (has_replicas_desired()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->replicas_desired(), output);
  }

  // optional uint32 replicas_running = 3;
  if (has_replicas_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->replicas_running(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.k8s_replica_set)
}

::google::protobuf::uint8* k8s_replica_set::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.k8s_replica_set)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_, false, target);
  }

  // optional uint32 replicas_desired = 2;
  if (has_replicas_desired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->replicas_desired(), target);
  }

  // optional uint32 replicas_running = 3;
  if (has_replicas_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->replicas_running(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.k8s_replica_set)
  return target;
}

size_t k8s_replica_set::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.k8s_replica_set)
  size_t total_size = 0;

  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional uint32 replicas_desired = 2;
    if (has_replicas_desired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replicas_desired());
    }

    // optional uint32 replicas_running = 3;
    if (has_replicas_running()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replicas_running());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_replica_set::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.k8s_replica_set)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const k8s_replica_set* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const k8s_replica_set>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.k8s_replica_set)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.k8s_replica_set)
    UnsafeMergeFrom(*source);
  }
}

void k8s_replica_set::MergeFrom(const k8s_replica_set& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.k8s_replica_set)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void k8s_replica_set::UnsafeMergeFrom(const k8s_replica_set& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
    if (from.has_replicas_desired()) {
      set_replicas_desired(from.replicas_desired());
    }
    if (from.has_replicas_running()) {
      set_replicas_running(from.replicas_running());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void k8s_replica_set::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.k8s_replica_set)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_replica_set::CopyFrom(const k8s_replica_set& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.k8s_replica_set)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool k8s_replica_set::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common_->IsInitialized()) return false;
  }
  return true;
}

void k8s_replica_set::Swap(k8s_replica_set* other) {
  if (other == this) return;
  InternalSwap(other);
}
void k8s_replica_set::InternalSwap(k8s_replica_set* other) {
  std::swap(common_, other->common_);
  std::swap(replicas_desired_, other->replicas_desired_);
  std::swap(replicas_running_, other->replicas_running_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata k8s_replica_set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_replica_set_descriptor_;
  metadata.reflection = k8s_replica_set_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// k8s_replica_set

// required .draiosproto.k8s_common common = 1;
bool k8s_replica_set::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void k8s_replica_set::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
void k8s_replica_set::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
void k8s_replica_set::clear_common() {
  if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
  clear_has_common();
}
const ::draiosproto::k8s_common& k8s_replica_set::common() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_replica_set.common)
  return common_ != NULL ? *common_
                         : *::draiosproto::k8s_common::internal_default_instance();
}
::draiosproto::k8s_common* k8s_replica_set::mutable_common() {
  set_has_common();
  if (common_ == NULL) {
    common_ = new ::draiosproto::k8s_common;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_replica_set.common)
  return common_;
}
::draiosproto::k8s_common* k8s_replica_set::release_common() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_replica_set.common)
  clear_has_common();
  ::draiosproto::k8s_common* temp = common_;
  common_ = NULL;
  return temp;
}
void k8s_replica_set::set_allocated_common(::draiosproto::k8s_common* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_replica_set.common)
}

// optional uint32 replicas_desired = 2;
bool k8s_replica_set::has_replicas_desired() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void k8s_replica_set::set_has_replicas_desired() {
  _has_bits_[0] |= 0x00000002u;
}
void k8s_replica_set::clear_has_replicas_desired() {
  _has_bits_[0] &= ~0x00000002u;
}
void k8s_replica_set::clear_replicas_desired() {
  replicas_desired_ = 0u;
  clear_has_replicas_desired();
}
::google::protobuf::uint32 k8s_replica_set::replicas_desired() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_replica_set.replicas_desired)
  return replicas_desired_;
}
void k8s_replica_set::set_replicas_desired(::google::protobuf::uint32 value) {
  set_has_replicas_desired();
  replicas_desired_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.k8s_replica_set.replicas_desired)
}

// optional uint32 replicas_running = 3;
bool k8s_replica_set::has_replicas_running() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void k8s_replica_set::set_has_replicas_running() {
  _has_bits_[0] |= 0x00000004u;
}
void k8s_replica_set::clear_has_replicas_running() {
  _has_bits_[0] &= ~0x00000004u;
}
void k8s_replica_set::clear_replicas_running() {
  replicas_running_ = 0u;
  clear_has_replicas_running();
}
::google::protobuf::uint32 k8s_replica_set::replicas_running() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_replica_set.replicas_running)
  return replicas_running_;
}
void k8s_replica_set::set_replicas_running(::google::protobuf::uint32 value) {
  set_has_replicas_running();
  replicas_running_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.k8s_replica_set.replicas_running)
}

inline const k8s_replica_set* k8s_replica_set::internal_default_instance() {
  return &k8s_replica_set_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int k8s_service_net_port::kPortFieldNumber;
const int k8s_service_net_port::kTargetPortFieldNumber;
const int k8s_service_net_port::kProtocolFieldNumber;
const int k8s_service_net_port::kNodePortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

k8s_service_net_port::k8s_service_net_port()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.k8s_service.net_port)
}

void k8s_service_net_port::InitAsDefaultInstance() {
}

k8s_service_net_port::k8s_service_net_port(const k8s_service_net_port& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.k8s_service.net_port)
}

void k8s_service_net_port::SharedCtor() {
  _cached_size_ = 0;
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, reinterpret_cast<char*>(&node_port_) -
    reinterpret_cast<char*>(&port_) + sizeof(node_port_));
}

k8s_service_net_port::~k8s_service_net_port() {
  // @@protoc_insertion_point(destructor:draiosproto.k8s_service.net_port)
  SharedDtor();
}

void k8s_service_net_port::SharedDtor() {
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void k8s_service_net_port::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_service_net_port::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_service_net_port_descriptor_;
}

const k8s_service_net_port& k8s_service_net_port::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<k8s_service_net_port> k8s_service_net_port_default_instance_;

k8s_service_net_port* k8s_service_net_port::New(::google::protobuf::Arena* arena) const {
  k8s_service_net_port* n = new k8s_service_net_port;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void k8s_service_net_port::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.k8s_service.net_port)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(k8s_service_net_port, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<k8s_service_net_port*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(port_, node_port_);
    if (has_protocol()) {
      protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool k8s_service_net_port::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.k8s_service.net_port)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 port = 1;
      case 1: {
        if (tag == 8) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_port;
        break;
      }

      // required uint32 target_port = 2;
      case 2: {
        if (tag == 16) {
         parse_target_port:
          set_has_target_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_protocol;
        break;
      }

      // optional string protocol = 3;
      case 3: {
        if (tag == 26) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.k8s_service.net_port.protocol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_node_port;
        break;
      }

      // optional uint32 node_port = 4;
      case 4: {
        if (tag == 32) {
         parse_node_port:
          set_has_node_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.k8s_service.net_port)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.k8s_service.net_port)
  return false;
#undef DO_
}

void k8s_service_net_port::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.k8s_service.net_port)
  // required uint32 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // required uint32 target_port = 2;
  if (has_target_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_port(), output);
  }

  // optional string protocol = 3;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_service.net_port.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->protocol(), output);
  }

  // optional uint32 node_port = 4;
  if (has_node_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->node_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.k8s_service.net_port)
}

::google::protobuf::uint8* k8s_service_net_port::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.k8s_service.net_port)
  // required uint32 port = 1;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  // required uint32 target_port = 2;
  if (has_target_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_port(), target);
  }

  // optional string protocol = 3;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_service.net_port.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->protocol(), target);
  }

  // optional uint32 node_port = 4;
  if (has_node_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->node_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.k8s_service.net_port)
  return target;
}

size_t k8s_service_net_port::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.k8s_service.net_port)
  size_t total_size = 0;

  if (has_port()) {
    // required uint32 port = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  if (has_target_port()) {
    // required uint32 target_port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_port());
  }

  return total_size;
}
size_t k8s_service_net_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.k8s_service.net_port)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 port = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

    // required uint32 target_port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional string protocol = 3;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }

    // optional uint32 node_port = 4;
    if (has_node_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_port());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_service_net_port::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.k8s_service.net_port)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const k8s_service_net_port* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const k8s_service_net_port>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.k8s_service.net_port)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.k8s_service.net_port)
    UnsafeMergeFrom(*source);
  }
}

void k8s_service_net_port::MergeFrom(const k8s_service_net_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.k8s_service.net_port)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void k8s_service_net_port::UnsafeMergeFrom(const k8s_service_net_port& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_target_port()) {
      set_target_port(from.target_port());
    }
    if (from.has_protocol()) {
      set_has_protocol();
      protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
    }
    if (from.has_node_port()) {
      set_node_port(from.node_port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void k8s_service_net_port::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.k8s_service.net_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_service_net_port::CopyFrom(const k8s_service_net_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.k8s_service.net_port)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool k8s_service_net_port::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void k8s_service_net_port::Swap(k8s_service_net_port* other) {
  if (other == this) return;
  InternalSwap(other);
}
void k8s_service_net_port::InternalSwap(k8s_service_net_port* other) {
  std::swap(port_, other->port_);
  std::swap(target_port_, other->target_port_);
  protocol_.Swap(&other->protocol_);
  std::swap(node_port_, other->node_port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata k8s_service_net_port::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_service_net_port_descriptor_;
  metadata.reflection = k8s_service_net_port_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int k8s_service::kCommonFieldNumber;
const int k8s_service::kClusterIpFieldNumber;
const int k8s_service::kPortsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

k8s_service::k8s_service()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.k8s_service)
}

void k8s_service::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(
      ::draiosproto::k8s_common::internal_default_instance());
}

k8s_service::k8s_service(const k8s_service& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.k8s_service)
}

void k8s_service::SharedCtor() {
  _cached_size_ = 0;
  cluster_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  common_ = NULL;
}

k8s_service::~k8s_service() {
  // @@protoc_insertion_point(destructor:draiosproto.k8s_service)
  SharedDtor();
}

void k8s_service::SharedDtor() {
  cluster_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &k8s_service_default_instance_.get()) {
    delete common_;
  }
}

void k8s_service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_service::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_service_descriptor_;
}

const k8s_service& k8s_service::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<k8s_service> k8s_service_default_instance_;

k8s_service* k8s_service::New(::google::protobuf::Arena* arena) const {
  k8s_service* n = new k8s_service;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void k8s_service::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.k8s_service)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
    }
    if (has_cluster_ip()) {
      cluster_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ports_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool k8s_service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.k8s_service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cluster_ip;
        break;
      }

      // optional string cluster_ip = 2;
      case 2: {
        if (tag == 18) {
         parse_cluster_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_ip().data(), this->cluster_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.k8s_service.cluster_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ports;
        break;
      }

      // repeated .draiosproto.k8s_service.net_port ports = 3;
      case 3: {
        if (tag == 26) {
         parse_ports:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_ports;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.k8s_service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.k8s_service)
  return false;
#undef DO_
}

void k8s_service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.k8s_service)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_, output);
  }

  // optional string cluster_ip = 2;
  if (has_cluster_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_ip().data(), this->cluster_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_service.cluster_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_ip(), output);
  }

  // repeated .draiosproto.k8s_service.net_port ports = 3;
  for (unsigned int i = 0, n = this->ports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ports(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.k8s_service)
}

::google::protobuf::uint8* k8s_service::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.k8s_service)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_, false, target);
  }

  // optional string cluster_ip = 2;
  if (has_cluster_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_ip().data(), this->cluster_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.k8s_service.cluster_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_ip(), target);
  }

  // repeated .draiosproto.k8s_service.net_port ports = 3;
  for (unsigned int i = 0, n = this->ports_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->ports(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.k8s_service)
  return target;
}

size_t k8s_service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.k8s_service)
  size_t total_size = 0;

  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);
  }
  // optional string cluster_ip = 2;
  if (has_cluster_ip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_ip());
  }

  // repeated .draiosproto.k8s_service.net_port ports = 3;
  {
    unsigned int count = this->ports_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ports(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_service::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.k8s_service)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const k8s_service* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const k8s_service>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.k8s_service)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.k8s_service)
    UnsafeMergeFrom(*source);
  }
}

void k8s_service::MergeFrom(const k8s_service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.k8s_service)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void k8s_service::UnsafeMergeFrom(const k8s_service& from) {
  GOOGLE_DCHECK(&from != this);
  ports_.MergeFrom(from.ports_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
    if (from.has_cluster_ip()) {
      set_has_cluster_ip();
      cluster_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_ip_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void k8s_service::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.k8s_service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_service::CopyFrom(const k8s_service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.k8s_service)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool k8s_service::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->ports())) return false;
  return true;
}

void k8s_service::Swap(k8s_service* other) {
  if (other == this) return;
  InternalSwap(other);
}
void k8s_service::InternalSwap(k8s_service* other) {
  std::swap(common_, other->common_);
  cluster_ip_.Swap(&other->cluster_ip_);
  ports_.UnsafeArenaSwap(&other->ports_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata k8s_service::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_service_descriptor_;
  metadata.reflection = k8s_service_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// k8s_service_net_port

// required uint32 port = 1;
bool k8s_service_net_port::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void k8s_service_net_port::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
void k8s_service_net_port::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
void k8s_service_net_port::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 k8s_service_net_port::port() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_service.net_port.port)
  return port_;
}
void k8s_service_net_port::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.k8s_service.net_port.port)
}

// required uint32 target_port = 2;
bool k8s_service_net_port::has_target_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void k8s_service_net_port::set_has_target_port() {
  _has_bits_[0] |= 0x00000002u;
}
void k8s_service_net_port::clear_has_target_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void k8s_service_net_port::clear_target_port() {
  target_port_ = 0u;
  clear_has_target_port();
}
::google::protobuf::uint32 k8s_service_net_port::target_port() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_service.net_port.target_port)
  return target_port_;
}
void k8s_service_net_port::set_target_port(::google::protobuf::uint32 value) {
  set_has_target_port();
  target_port_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.k8s_service.net_port.target_port)
}

// optional string protocol = 3;
bool k8s_service_net_port::has_protocol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void k8s_service_net_port::set_has_protocol() {
  _has_bits_[0] |= 0x00000004u;
}
void k8s_service_net_port::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000004u;
}
void k8s_service_net_port::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protocol();
}
const ::std::string& k8s_service_net_port::protocol() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_service.net_port.protocol)
  return protocol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_service_net_port::set_protocol(const ::std::string& value) {
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.k8s_service.net_port.protocol)
}
void k8s_service_net_port::set_protocol(const char* value) {
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.k8s_service.net_port.protocol)
}
void k8s_service_net_port::set_protocol(const char* value, size_t size) {
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.k8s_service.net_port.protocol)
}
::std::string* k8s_service_net_port::mutable_protocol() {
  set_has_protocol();
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_service.net_port.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* k8s_service_net_port::release_protocol() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_service.net_port.protocol)
  clear_has_protocol();
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_service_net_port::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    set_has_protocol();
  } else {
    clear_has_protocol();
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_service.net_port.protocol)
}

// optional uint32 node_port = 4;
bool k8s_service_net_port::has_node_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void k8s_service_net_port::set_has_node_port() {
  _has_bits_[0] |= 0x00000008u;
}
void k8s_service_net_port::clear_has_node_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void k8s_service_net_port::clear_node_port() {
  node_port_ = 0u;
  clear_has_node_port();
}
::google::protobuf::uint32 k8s_service_net_port::node_port() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_service.net_port.node_port)
  return node_port_;
}
void k8s_service_net_port::set_node_port(::google::protobuf::uint32 value) {
  set_has_node_port();
  node_port_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.k8s_service.net_port.node_port)
}

inline const k8s_service_net_port* k8s_service_net_port::internal_default_instance() {
  return &k8s_service_net_port_default_instance_.get();
}
// -------------------------------------------------------------------

// k8s_service

// required .draiosproto.k8s_common common = 1;
bool k8s_service::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void k8s_service::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
void k8s_service::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
void k8s_service::clear_common() {
  if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
  clear_has_common();
}
const ::draiosproto::k8s_common& k8s_service::common() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_service.common)
  return common_ != NULL ? *common_
                         : *::draiosproto::k8s_common::internal_default_instance();
}
::draiosproto::k8s_common* k8s_service::mutable_common() {
  set_has_common();
  if (common_ == NULL) {
    common_ = new ::draiosproto::k8s_common;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_service.common)
  return common_;
}
::draiosproto::k8s_common* k8s_service::release_common() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_service.common)
  clear_has_common();
  ::draiosproto::k8s_common* temp = common_;
  common_ = NULL;
  return temp;
}
void k8s_service::set_allocated_common(::draiosproto::k8s_common* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_service.common)
}

// optional string cluster_ip = 2;
bool k8s_service::has_cluster_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void k8s_service::set_has_cluster_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void k8s_service::clear_has_cluster_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void k8s_service::clear_cluster_ip() {
  cluster_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cluster_ip();
}
const ::std::string& k8s_service::cluster_ip() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_service.cluster_ip)
  return cluster_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_service::set_cluster_ip(const ::std::string& value) {
  set_has_cluster_ip();
  cluster_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.k8s_service.cluster_ip)
}
void k8s_service::set_cluster_ip(const char* value) {
  set_has_cluster_ip();
  cluster_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.k8s_service.cluster_ip)
}
void k8s_service::set_cluster_ip(const char* value, size_t size) {
  set_has_cluster_ip();
  cluster_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.k8s_service.cluster_ip)
}
::std::string* k8s_service::mutable_cluster_ip() {
  set_has_cluster_ip();
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_service.cluster_ip)
  return cluster_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* k8s_service::release_cluster_ip() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_service.cluster_ip)
  clear_has_cluster_ip();
  return cluster_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void k8s_service::set_allocated_cluster_ip(::std::string* cluster_ip) {
  if (cluster_ip != NULL) {
    set_has_cluster_ip();
  } else {
    clear_has_cluster_ip();
  }
  cluster_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_ip);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_service.cluster_ip)
}

// repeated .draiosproto.k8s_service.net_port ports = 3;
int k8s_service::ports_size() const {
  return ports_.size();
}
void k8s_service::clear_ports() {
  ports_.Clear();
}
const ::draiosproto::k8s_service_net_port& k8s_service::ports(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_service.ports)
  return ports_.Get(index);
}
::draiosproto::k8s_service_net_port* k8s_service::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_service.ports)
  return ports_.Mutable(index);
}
::draiosproto::k8s_service_net_port* k8s_service::add_ports() {
  // @@protoc_insertion_point(field_add:draiosproto.k8s_service.ports)
  return ports_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_service_net_port >*
k8s_service::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.k8s_service.ports)
  return &ports_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_service_net_port >&
k8s_service::ports() const {
  // @@protoc_insertion_point(field_list:draiosproto.k8s_service.ports)
  return ports_;
}

inline const k8s_service* k8s_service::internal_default_instance() {
  return &k8s_service_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int k8s_deployment::kCommonFieldNumber;
const int k8s_deployment::kReplicasDesiredFieldNumber;
const int k8s_deployment::kReplicasRunningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

k8s_deployment::k8s_deployment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.k8s_deployment)
}

void k8s_deployment::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(
      ::draiosproto::k8s_common::internal_default_instance());
}

k8s_deployment::k8s_deployment(const k8s_deployment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.k8s_deployment)
}

void k8s_deployment::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(&replicas_desired_, 0, reinterpret_cast<char*>(&replicas_running_) -
    reinterpret_cast<char*>(&replicas_desired_) + sizeof(replicas_running_));
}

k8s_deployment::~k8s_deployment() {
  // @@protoc_insertion_point(destructor:draiosproto.k8s_deployment)
  SharedDtor();
}

void k8s_deployment::SharedDtor() {
  if (this != &k8s_deployment_default_instance_.get()) {
    delete common_;
  }
}

void k8s_deployment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_deployment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_deployment_descriptor_;
}

const k8s_deployment& k8s_deployment::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<k8s_deployment> k8s_deployment_default_instance_;

k8s_deployment* k8s_deployment::New(::google::protobuf::Arena* arena) const {
  k8s_deployment* n = new k8s_deployment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void k8s_deployment::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.k8s_deployment)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(k8s_deployment, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<k8s_deployment*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(replicas_desired_, replicas_running_);
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool k8s_deployment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.k8s_deployment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_replicas_desired;
        break;
      }

      // optional uint32 replicas_desired = 2;
      case 2: {
        if (tag == 16) {
         parse_replicas_desired:
          set_has_replicas_desired();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replicas_desired_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_replicas_running;
        break;
      }

      // optional uint32 replicas_running = 3;
      case 3: {
        if (tag == 24) {
         parse_replicas_running:
          set_has_replicas_running();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replicas_running_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.k8s_deployment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.k8s_deployment)
  return false;
#undef DO_
}

void k8s_deployment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.k8s_deployment)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_, output);
  }

  // optional uint32 replicas_desired = 2;
  if (has_replicas_desired()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->replicas_desired(), output);
  }

  // optional uint32 replicas_running = 3;
  if (has_replicas_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->replicas_running(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.k8s_deployment)
}

::google::protobuf::uint8* k8s_deployment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.k8s_deployment)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_, false, target);
  }

  // optional uint32 replicas_desired = 2;
  if (has_replicas_desired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->replicas_desired(), target);
  }

  // optional uint32 replicas_running = 3;
  if (has_replicas_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->replicas_running(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.k8s_deployment)
  return target;
}

size_t k8s_deployment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.k8s_deployment)
  size_t total_size = 0;

  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional uint32 replicas_desired = 2;
    if (has_replicas_desired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replicas_desired());
    }

    // optional uint32 replicas_running = 3;
    if (has_replicas_running()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replicas_running());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_deployment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.k8s_deployment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const k8s_deployment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const k8s_deployment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.k8s_deployment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.k8s_deployment)
    UnsafeMergeFrom(*source);
  }
}

void k8s_deployment::MergeFrom(const k8s_deployment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.k8s_deployment)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void k8s_deployment::UnsafeMergeFrom(const k8s_deployment& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
    if (from.has_replicas_desired()) {
      set_replicas_desired(from.replicas_desired());
    }
    if (from.has_replicas_running()) {
      set_replicas_running(from.replicas_running());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void k8s_deployment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.k8s_deployment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_deployment::CopyFrom(const k8s_deployment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.k8s_deployment)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool k8s_deployment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common_->IsInitialized()) return false;
  }
  return true;
}

void k8s_deployment::Swap(k8s_deployment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void k8s_deployment::InternalSwap(k8s_deployment* other) {
  std::swap(common_, other->common_);
  std::swap(replicas_desired_, other->replicas_desired_);
  std::swap(replicas_running_, other->replicas_running_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata k8s_deployment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_deployment_descriptor_;
  metadata.reflection = k8s_deployment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// k8s_deployment

// required .draiosproto.k8s_common common = 1;
bool k8s_deployment::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void k8s_deployment::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
void k8s_deployment::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
void k8s_deployment::clear_common() {
  if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
  clear_has_common();
}
const ::draiosproto::k8s_common& k8s_deployment::common() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_deployment.common)
  return common_ != NULL ? *common_
                         : *::draiosproto::k8s_common::internal_default_instance();
}
::draiosproto::k8s_common* k8s_deployment::mutable_common() {
  set_has_common();
  if (common_ == NULL) {
    common_ = new ::draiosproto::k8s_common;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_deployment.common)
  return common_;
}
::draiosproto::k8s_common* k8s_deployment::release_common() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_deployment.common)
  clear_has_common();
  ::draiosproto::k8s_common* temp = common_;
  common_ = NULL;
  return temp;
}
void k8s_deployment::set_allocated_common(::draiosproto::k8s_common* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_deployment.common)
}

// optional uint32 replicas_desired = 2;
bool k8s_deployment::has_replicas_desired() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void k8s_deployment::set_has_replicas_desired() {
  _has_bits_[0] |= 0x00000002u;
}
void k8s_deployment::clear_has_replicas_desired() {
  _has_bits_[0] &= ~0x00000002u;
}
void k8s_deployment::clear_replicas_desired() {
  replicas_desired_ = 0u;
  clear_has_replicas_desired();
}
::google::protobuf::uint32 k8s_deployment::replicas_desired() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_deployment.replicas_desired)
  return replicas_desired_;
}
void k8s_deployment::set_replicas_desired(::google::protobuf::uint32 value) {
  set_has_replicas_desired();
  replicas_desired_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.k8s_deployment.replicas_desired)
}

// optional uint32 replicas_running = 3;
bool k8s_deployment::has_replicas_running() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void k8s_deployment::set_has_replicas_running() {
  _has_bits_[0] |= 0x00000004u;
}
void k8s_deployment::clear_has_replicas_running() {
  _has_bits_[0] &= ~0x00000004u;
}
void k8s_deployment::clear_replicas_running() {
  replicas_running_ = 0u;
  clear_has_replicas_running();
}
::google::protobuf::uint32 k8s_deployment::replicas_running() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_deployment.replicas_running)
  return replicas_running_;
}
void k8s_deployment::set_replicas_running(::google::protobuf::uint32 value) {
  set_has_replicas_running();
  replicas_running_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.k8s_deployment.replicas_running)
}

inline const k8s_deployment* k8s_deployment::internal_default_instance() {
  return &k8s_deployment_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int k8s_daemonset::kCommonFieldNumber;
const int k8s_daemonset::kCurrentScheduledFieldNumber;
const int k8s_daemonset::kDesiredScheduledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

k8s_daemonset::k8s_daemonset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.k8s_daemonset)
}

void k8s_daemonset::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::k8s_common*>(
      ::draiosproto::k8s_common::internal_default_instance());
}

k8s_daemonset::k8s_daemonset(const k8s_daemonset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.k8s_daemonset)
}

void k8s_daemonset::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(&current_scheduled_, 0, reinterpret_cast<char*>(&desired_scheduled_) -
    reinterpret_cast<char*>(&current_scheduled_) + sizeof(desired_scheduled_));
}

k8s_daemonset::~k8s_daemonset() {
  // @@protoc_insertion_point(destructor:draiosproto.k8s_daemonset)
  SharedDtor();
}

void k8s_daemonset::SharedDtor() {
  if (this != &k8s_daemonset_default_instance_.get()) {
    delete common_;
  }
}

void k8s_daemonset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_daemonset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_daemonset_descriptor_;
}

const k8s_daemonset& k8s_daemonset::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<k8s_daemonset> k8s_daemonset_default_instance_;

k8s_daemonset* k8s_daemonset::New(::google::protobuf::Arena* arena) const {
  k8s_daemonset* n = new k8s_daemonset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void k8s_daemonset::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.k8s_daemonset)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(k8s_daemonset, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<k8s_daemonset*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(current_scheduled_, desired_scheduled_);
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool k8s_daemonset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.k8s_daemonset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.k8s_common common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_current_scheduled;
        break;
      }

      // optional uint32 current_scheduled = 2;
      case 2: {
        if (tag == 16) {
         parse_current_scheduled:
          set_has_current_scheduled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_scheduled_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_desired_scheduled;
        break;
      }

      // optional uint32 desired_scheduled = 3;
      case 3: {
        if (tag == 24) {
         parse_desired_scheduled:
          set_has_desired_scheduled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desired_scheduled_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.k8s_daemonset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.k8s_daemonset)
  return false;
#undef DO_
}

void k8s_daemonset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.k8s_daemonset)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_, output);
  }

  // optional uint32 current_scheduled = 2;
  if (has_current_scheduled()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->current_scheduled(), output);
  }

  // optional uint32 desired_scheduled = 3;
  if (has_desired_scheduled()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->desired_scheduled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.k8s_daemonset)
}

::google::protobuf::uint8* k8s_daemonset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.k8s_daemonset)
  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_, false, target);
  }

  // optional uint32 current_scheduled = 2;
  if (has_current_scheduled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->current_scheduled(), target);
  }

  // optional uint32 desired_scheduled = 3;
  if (has_desired_scheduled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->desired_scheduled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.k8s_daemonset)
  return target;
}

size_t k8s_daemonset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.k8s_daemonset)
  size_t total_size = 0;

  // required .draiosproto.k8s_common common = 1;
  if (has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional uint32 current_scheduled = 2;
    if (has_current_scheduled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_scheduled());
    }

    // optional uint32 desired_scheduled = 3;
    if (has_desired_scheduled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desired_scheduled());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_daemonset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.k8s_daemonset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const k8s_daemonset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const k8s_daemonset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.k8s_daemonset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.k8s_daemonset)
    UnsafeMergeFrom(*source);
  }
}

void k8s_daemonset::MergeFrom(const k8s_daemonset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.k8s_daemonset)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void k8s_daemonset::UnsafeMergeFrom(const k8s_daemonset& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::k8s_common::MergeFrom(from.common());
    }
    if (from.has_current_scheduled()) {
      set_current_scheduled(from.current_scheduled());
    }
    if (from.has_desired_scheduled()) {
      set_desired_scheduled(from.desired_scheduled());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void k8s_daemonset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.k8s_daemonset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_daemonset::CopyFrom(const k8s_daemonset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.k8s_daemonset)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool k8s_daemonset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common_->IsInitialized()) return false;
  }
  return true;
}

void k8s_daemonset::Swap(k8s_daemonset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void k8s_daemonset::InternalSwap(k8s_daemonset* other) {
  std::swap(common_, other->common_);
  std::swap(current_scheduled_, other->current_scheduled_);
  std::swap(desired_scheduled_, other->desired_scheduled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata k8s_daemonset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_daemonset_descriptor_;
  metadata.reflection = k8s_daemonset_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// k8s_daemonset

// required .draiosproto.k8s_common common = 1;
bool k8s_daemonset::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void k8s_daemonset::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
void k8s_daemonset::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
void k8s_daemonset::clear_common() {
  if (common_ != NULL) common_->::draiosproto::k8s_common::Clear();
  clear_has_common();
}
const ::draiosproto::k8s_common& k8s_daemonset::common() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_daemonset.common)
  return common_ != NULL ? *common_
                         : *::draiosproto::k8s_common::internal_default_instance();
}
::draiosproto::k8s_common* k8s_daemonset::mutable_common() {
  set_has_common();
  if (common_ == NULL) {
    common_ = new ::draiosproto::k8s_common;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_daemonset.common)
  return common_;
}
::draiosproto::k8s_common* k8s_daemonset::release_common() {
  // @@protoc_insertion_point(field_release:draiosproto.k8s_daemonset.common)
  clear_has_common();
  ::draiosproto::k8s_common* temp = common_;
  common_ = NULL;
  return temp;
}
void k8s_daemonset::set_allocated_common(::draiosproto::k8s_common* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.k8s_daemonset.common)
}

// optional uint32 current_scheduled = 2;
bool k8s_daemonset::has_current_scheduled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void k8s_daemonset::set_has_current_scheduled() {
  _has_bits_[0] |= 0x00000002u;
}
void k8s_daemonset::clear_has_current_scheduled() {
  _has_bits_[0] &= ~0x00000002u;
}
void k8s_daemonset::clear_current_scheduled() {
  current_scheduled_ = 0u;
  clear_has_current_scheduled();
}
::google::protobuf::uint32 k8s_daemonset::current_scheduled() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_daemonset.current_scheduled)
  return current_scheduled_;
}
void k8s_daemonset::set_current_scheduled(::google::protobuf::uint32 value) {
  set_has_current_scheduled();
  current_scheduled_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.k8s_daemonset.current_scheduled)
}

// optional uint32 desired_scheduled = 3;
bool k8s_daemonset::has_desired_scheduled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void k8s_daemonset::set_has_desired_scheduled() {
  _has_bits_[0] |= 0x00000004u;
}
void k8s_daemonset::clear_has_desired_scheduled() {
  _has_bits_[0] &= ~0x00000004u;
}
void k8s_daemonset::clear_desired_scheduled() {
  desired_scheduled_ = 0u;
  clear_has_desired_scheduled();
}
::google::protobuf::uint32 k8s_daemonset::desired_scheduled() const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_daemonset.desired_scheduled)
  return desired_scheduled_;
}
void k8s_daemonset::set_desired_scheduled(::google::protobuf::uint32 value) {
  set_has_desired_scheduled();
  desired_scheduled_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.k8s_daemonset.desired_scheduled)
}

inline const k8s_daemonset* k8s_daemonset::internal_default_instance() {
  return &k8s_daemonset_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int k8s_state::kNamespacesFieldNumber;
const int k8s_state::kNodesFieldNumber;
const int k8s_state::kPodsFieldNumber;
const int k8s_state::kControllersFieldNumber;
const int k8s_state::kServicesFieldNumber;
const int k8s_state::kReplicaSetsFieldNumber;
const int k8s_state::kDeploymentsFieldNumber;
const int k8s_state::kDaemonsetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

k8s_state::k8s_state()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.k8s_state)
}

void k8s_state::InitAsDefaultInstance() {
}

k8s_state::k8s_state(const k8s_state& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.k8s_state)
}

void k8s_state::SharedCtor() {
  _cached_size_ = 0;
}

k8s_state::~k8s_state() {
  // @@protoc_insertion_point(destructor:draiosproto.k8s_state)
  SharedDtor();
}

void k8s_state::SharedDtor() {
}

void k8s_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* k8s_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return k8s_state_descriptor_;
}

const k8s_state& k8s_state::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<k8s_state> k8s_state_default_instance_;

k8s_state* k8s_state::New(::google::protobuf::Arena* arena) const {
  k8s_state* n = new k8s_state;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void k8s_state::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.k8s_state)
  namespaces_.Clear();
  nodes_.Clear();
  pods_.Clear();
  controllers_.Clear();
  services_.Clear();
  replica_sets_.Clear();
  deployments_.Clear();
  daemonsets_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool k8s_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.k8s_state)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.k8s_namespace namespaces = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_namespaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_namespaces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_namespaces;
        if (input->ExpectTag(18)) goto parse_loop_nodes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.k8s_node nodes = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_nodes;
        if (input->ExpectTag(26)) goto parse_loop_pods;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.k8s_pod pods = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_pods;
        if (input->ExpectTag(34)) goto parse_loop_controllers;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.k8s_replication_controller controllers = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_controllers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_controllers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_controllers;
        if (input->ExpectTag(42)) goto parse_loop_services;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.k8s_service services = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_services:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_services;
        if (input->ExpectTag(50)) goto parse_loop_replica_sets;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.k8s_replica_set replica_sets = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_replica_sets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_replica_sets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_replica_sets;
        if (input->ExpectTag(58)) goto parse_loop_deployments;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.k8s_deployment deployments = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_deployments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_deployments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_deployments;
        if (input->ExpectTag(66)) goto parse_loop_daemonsets;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.k8s_daemonset daemonsets = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_daemonsets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_daemonsets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_daemonsets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.k8s_state)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.k8s_state)
  return false;
#undef DO_
}

void k8s_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.k8s_state)
  // repeated .draiosproto.k8s_namespace namespaces = 1;
  for (unsigned int i = 0, n = this->namespaces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->namespaces(i), output);
  }

  // repeated .draiosproto.k8s_node nodes = 2;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodes(i), output);
  }

  // repeated .draiosproto.k8s_pod pods = 3;
  for (unsigned int i = 0, n = this->pods_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pods(i), output);
  }

  // repeated .draiosproto.k8s_replication_controller controllers = 4;
  for (unsigned int i = 0, n = this->controllers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->controllers(i), output);
  }

  // repeated .draiosproto.k8s_service services = 5;
  for (unsigned int i = 0, n = this->services_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->services(i), output);
  }

  // repeated .draiosproto.k8s_replica_set replica_sets = 6;
  for (unsigned int i = 0, n = this->replica_sets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->replica_sets(i), output);
  }

  // repeated .draiosproto.k8s_deployment deployments = 7;
  for (unsigned int i = 0, n = this->deployments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->deployments(i), output);
  }

  // repeated .draiosproto.k8s_daemonset daemonsets = 8;
  for (unsigned int i = 0, n = this->daemonsets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->daemonsets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.k8s_state)
}

::google::protobuf::uint8* k8s_state::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.k8s_state)
  // repeated .draiosproto.k8s_namespace namespaces = 1;
  for (unsigned int i = 0, n = this->namespaces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->namespaces(i), false, target);
  }

  // repeated .draiosproto.k8s_node nodes = 2;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->nodes(i), false, target);
  }

  // repeated .draiosproto.k8s_pod pods = 3;
  for (unsigned int i = 0, n = this->pods_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->pods(i), false, target);
  }

  // repeated .draiosproto.k8s_replication_controller controllers = 4;
  for (unsigned int i = 0, n = this->controllers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->controllers(i), false, target);
  }

  // repeated .draiosproto.k8s_service services = 5;
  for (unsigned int i = 0, n = this->services_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->services(i), false, target);
  }

  // repeated .draiosproto.k8s_replica_set replica_sets = 6;
  for (unsigned int i = 0, n = this->replica_sets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->replica_sets(i), false, target);
  }

  // repeated .draiosproto.k8s_deployment deployments = 7;
  for (unsigned int i = 0, n = this->deployments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->deployments(i), false, target);
  }

  // repeated .draiosproto.k8s_daemonset daemonsets = 8;
  for (unsigned int i = 0, n = this->daemonsets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->daemonsets(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.k8s_state)
  return target;
}

size_t k8s_state::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.k8s_state)
  size_t total_size = 0;

  // repeated .draiosproto.k8s_namespace namespaces = 1;
  {
    unsigned int count = this->namespaces_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->namespaces(i));
    }
  }

  // repeated .draiosproto.k8s_node nodes = 2;
  {
    unsigned int count = this->nodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodes(i));
    }
  }

  // repeated .draiosproto.k8s_pod pods = 3;
  {
    unsigned int count = this->pods_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pods(i));
    }
  }

  // repeated .draiosproto.k8s_replication_controller controllers = 4;
  {
    unsigned int count = this->controllers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->controllers(i));
    }
  }

  // repeated .draiosproto.k8s_service services = 5;
  {
    unsigned int count = this->services_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->services(i));
    }
  }

  // repeated .draiosproto.k8s_replica_set replica_sets = 6;
  {
    unsigned int count = this->replica_sets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replica_sets(i));
    }
  }

  // repeated .draiosproto.k8s_deployment deployments = 7;
  {
    unsigned int count = this->deployments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deployments(i));
    }
  }

  // repeated .draiosproto.k8s_daemonset daemonsets = 8;
  {
    unsigned int count = this->daemonsets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daemonsets(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void k8s_state::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.k8s_state)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const k8s_state* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const k8s_state>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.k8s_state)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.k8s_state)
    UnsafeMergeFrom(*source);
  }
}

void k8s_state::MergeFrom(const k8s_state& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.k8s_state)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void k8s_state::UnsafeMergeFrom(const k8s_state& from) {
  GOOGLE_DCHECK(&from != this);
  namespaces_.MergeFrom(from.namespaces_);
  nodes_.MergeFrom(from.nodes_);
  pods_.MergeFrom(from.pods_);
  controllers_.MergeFrom(from.controllers_);
  services_.MergeFrom(from.services_);
  replica_sets_.MergeFrom(from.replica_sets_);
  deployments_.MergeFrom(from.deployments_);
  daemonsets_.MergeFrom(from.daemonsets_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void k8s_state::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.k8s_state)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void k8s_state::CopyFrom(const k8s_state& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.k8s_state)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool k8s_state::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->namespaces())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->nodes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pods())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->controllers())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->services())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->replica_sets())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->deployments())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->daemonsets())) return false;
  return true;
}

void k8s_state::Swap(k8s_state* other) {
  if (other == this) return;
  InternalSwap(other);
}
void k8s_state::InternalSwap(k8s_state* other) {
  namespaces_.UnsafeArenaSwap(&other->namespaces_);
  nodes_.UnsafeArenaSwap(&other->nodes_);
  pods_.UnsafeArenaSwap(&other->pods_);
  controllers_.UnsafeArenaSwap(&other->controllers_);
  services_.UnsafeArenaSwap(&other->services_);
  replica_sets_.UnsafeArenaSwap(&other->replica_sets_);
  deployments_.UnsafeArenaSwap(&other->deployments_);
  daemonsets_.UnsafeArenaSwap(&other->daemonsets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata k8s_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = k8s_state_descriptor_;
  metadata.reflection = k8s_state_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// k8s_state

// repeated .draiosproto.k8s_namespace namespaces = 1;
int k8s_state::namespaces_size() const {
  return namespaces_.size();
}
void k8s_state::clear_namespaces() {
  namespaces_.Clear();
}
const ::draiosproto::k8s_namespace& k8s_state::namespaces(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_state.namespaces)
  return namespaces_.Get(index);
}
::draiosproto::k8s_namespace* k8s_state::mutable_namespaces(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_state.namespaces)
  return namespaces_.Mutable(index);
}
::draiosproto::k8s_namespace* k8s_state::add_namespaces() {
  // @@protoc_insertion_point(field_add:draiosproto.k8s_state.namespaces)
  return namespaces_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_namespace >*
k8s_state::mutable_namespaces() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.k8s_state.namespaces)
  return &namespaces_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_namespace >&
k8s_state::namespaces() const {
  // @@protoc_insertion_point(field_list:draiosproto.k8s_state.namespaces)
  return namespaces_;
}

// repeated .draiosproto.k8s_node nodes = 2;
int k8s_state::nodes_size() const {
  return nodes_.size();
}
void k8s_state::clear_nodes() {
  nodes_.Clear();
}
const ::draiosproto::k8s_node& k8s_state::nodes(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_state.nodes)
  return nodes_.Get(index);
}
::draiosproto::k8s_node* k8s_state::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_state.nodes)
  return nodes_.Mutable(index);
}
::draiosproto::k8s_node* k8s_state::add_nodes() {
  // @@protoc_insertion_point(field_add:draiosproto.k8s_state.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_node >*
k8s_state::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.k8s_state.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_node >&
k8s_state::nodes() const {
  // @@protoc_insertion_point(field_list:draiosproto.k8s_state.nodes)
  return nodes_;
}

// repeated .draiosproto.k8s_pod pods = 3;
int k8s_state::pods_size() const {
  return pods_.size();
}
void k8s_state::clear_pods() {
  pods_.Clear();
}
const ::draiosproto::k8s_pod& k8s_state::pods(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_state.pods)
  return pods_.Get(index);
}
::draiosproto::k8s_pod* k8s_state::mutable_pods(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_state.pods)
  return pods_.Mutable(index);
}
::draiosproto::k8s_pod* k8s_state::add_pods() {
  // @@protoc_insertion_point(field_add:draiosproto.k8s_state.pods)
  return pods_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_pod >*
k8s_state::mutable_pods() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.k8s_state.pods)
  return &pods_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_pod >&
k8s_state::pods() const {
  // @@protoc_insertion_point(field_list:draiosproto.k8s_state.pods)
  return pods_;
}

// repeated .draiosproto.k8s_replication_controller controllers = 4;
int k8s_state::controllers_size() const {
  return controllers_.size();
}
void k8s_state::clear_controllers() {
  controllers_.Clear();
}
const ::draiosproto::k8s_replication_controller& k8s_state::controllers(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_state.controllers)
  return controllers_.Get(index);
}
::draiosproto::k8s_replication_controller* k8s_state::mutable_controllers(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_state.controllers)
  return controllers_.Mutable(index);
}
::draiosproto::k8s_replication_controller* k8s_state::add_controllers() {
  // @@protoc_insertion_point(field_add:draiosproto.k8s_state.controllers)
  return controllers_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_replication_controller >*
k8s_state::mutable_controllers() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.k8s_state.controllers)
  return &controllers_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_replication_controller >&
k8s_state::controllers() const {
  // @@protoc_insertion_point(field_list:draiosproto.k8s_state.controllers)
  return controllers_;
}

// repeated .draiosproto.k8s_service services = 5;
int k8s_state::services_size() const {
  return services_.size();
}
void k8s_state::clear_services() {
  services_.Clear();
}
const ::draiosproto::k8s_service& k8s_state::services(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_state.services)
  return services_.Get(index);
}
::draiosproto::k8s_service* k8s_state::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_state.services)
  return services_.Mutable(index);
}
::draiosproto::k8s_service* k8s_state::add_services() {
  // @@protoc_insertion_point(field_add:draiosproto.k8s_state.services)
  return services_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_service >*
k8s_state::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.k8s_state.services)
  return &services_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_service >&
k8s_state::services() const {
  // @@protoc_insertion_point(field_list:draiosproto.k8s_state.services)
  return services_;
}

// repeated .draiosproto.k8s_replica_set replica_sets = 6;
int k8s_state::replica_sets_size() const {
  return replica_sets_.size();
}
void k8s_state::clear_replica_sets() {
  replica_sets_.Clear();
}
const ::draiosproto::k8s_replica_set& k8s_state::replica_sets(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_state.replica_sets)
  return replica_sets_.Get(index);
}
::draiosproto::k8s_replica_set* k8s_state::mutable_replica_sets(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_state.replica_sets)
  return replica_sets_.Mutable(index);
}
::draiosproto::k8s_replica_set* k8s_state::add_replica_sets() {
  // @@protoc_insertion_point(field_add:draiosproto.k8s_state.replica_sets)
  return replica_sets_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_replica_set >*
k8s_state::mutable_replica_sets() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.k8s_state.replica_sets)
  return &replica_sets_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_replica_set >&
k8s_state::replica_sets() const {
  // @@protoc_insertion_point(field_list:draiosproto.k8s_state.replica_sets)
  return replica_sets_;
}

// repeated .draiosproto.k8s_deployment deployments = 7;
int k8s_state::deployments_size() const {
  return deployments_.size();
}
void k8s_state::clear_deployments() {
  deployments_.Clear();
}
const ::draiosproto::k8s_deployment& k8s_state::deployments(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_state.deployments)
  return deployments_.Get(index);
}
::draiosproto::k8s_deployment* k8s_state::mutable_deployments(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_state.deployments)
  return deployments_.Mutable(index);
}
::draiosproto::k8s_deployment* k8s_state::add_deployments() {
  // @@protoc_insertion_point(field_add:draiosproto.k8s_state.deployments)
  return deployments_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_deployment >*
k8s_state::mutable_deployments() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.k8s_state.deployments)
  return &deployments_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_deployment >&
k8s_state::deployments() const {
  // @@protoc_insertion_point(field_list:draiosproto.k8s_state.deployments)
  return deployments_;
}

// repeated .draiosproto.k8s_daemonset daemonsets = 8;
int k8s_state::daemonsets_size() const {
  return daemonsets_.size();
}
void k8s_state::clear_daemonsets() {
  daemonsets_.Clear();
}
const ::draiosproto::k8s_daemonset& k8s_state::daemonsets(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.k8s_state.daemonsets)
  return daemonsets_.Get(index);
}
::draiosproto::k8s_daemonset* k8s_state::mutable_daemonsets(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.k8s_state.daemonsets)
  return daemonsets_.Mutable(index);
}
::draiosproto::k8s_daemonset* k8s_state::add_daemonsets() {
  // @@protoc_insertion_point(field_add:draiosproto.k8s_state.daemonsets)
  return daemonsets_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_daemonset >*
k8s_state::mutable_daemonsets() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.k8s_state.daemonsets)
  return &daemonsets_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::k8s_daemonset >&
k8s_state::daemonsets() const {
  // @@protoc_insertion_point(field_list:draiosproto.k8s_state.daemonsets)
  return daemonsets_;
}

inline const k8s_state* k8s_state::internal_default_instance() {
  return &k8s_state_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mesos_pair::kKeyFieldNumber;
const int mesos_pair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mesos_pair::mesos_pair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.mesos_pair)
}

void mesos_pair::InitAsDefaultInstance() {
}

mesos_pair::mesos_pair(const mesos_pair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.mesos_pair)
}

void mesos_pair::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mesos_pair::~mesos_pair() {
  // @@protoc_insertion_point(destructor:draiosproto.mesos_pair)
  SharedDtor();
}

void mesos_pair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mesos_pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mesos_pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mesos_pair_descriptor_;
}

const mesos_pair& mesos_pair::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<mesos_pair> mesos_pair_default_instance_;

mesos_pair* mesos_pair::New(::google::protobuf::Arena* arena) const {
  mesos_pair* n = new mesos_pair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mesos_pair::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.mesos_pair)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool mesos_pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.mesos_pair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.mesos_pair.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.mesos_pair.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.mesos_pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.mesos_pair)
  return false;
#undef DO_
}

void mesos_pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.mesos_pair)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mesos_pair.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mesos_pair.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.mesos_pair)
}

::google::protobuf::uint8* mesos_pair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.mesos_pair)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mesos_pair.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mesos_pair.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.mesos_pair)
  return target;
}

size_t mesos_pair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.mesos_pair)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t mesos_pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.mesos_pair)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mesos_pair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.mesos_pair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const mesos_pair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mesos_pair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.mesos_pair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.mesos_pair)
    UnsafeMergeFrom(*source);
  }
}

void mesos_pair::MergeFrom(const mesos_pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.mesos_pair)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void mesos_pair::UnsafeMergeFrom(const mesos_pair& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void mesos_pair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.mesos_pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mesos_pair::CopyFrom(const mesos_pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.mesos_pair)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool mesos_pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mesos_pair::Swap(mesos_pair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mesos_pair::InternalSwap(mesos_pair* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mesos_pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mesos_pair_descriptor_;
  metadata.reflection = mesos_pair_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mesos_pair

// required string key = 1;
bool mesos_pair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mesos_pair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void mesos_pair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void mesos_pair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& mesos_pair::key() const {
  // @@protoc_insertion_point(field_get:draiosproto.mesos_pair.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mesos_pair::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.mesos_pair.key)
}
void mesos_pair::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.mesos_pair.key)
}
void mesos_pair::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.mesos_pair.key)
}
::std::string* mesos_pair::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:draiosproto.mesos_pair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mesos_pair::release_key() {
  // @@protoc_insertion_point(field_release:draiosproto.mesos_pair.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mesos_pair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.mesos_pair.key)
}

// required string value = 2;
bool mesos_pair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void mesos_pair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void mesos_pair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void mesos_pair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& mesos_pair::value() const {
  // @@protoc_insertion_point(field_get:draiosproto.mesos_pair.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mesos_pair::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.mesos_pair.value)
}
void mesos_pair::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.mesos_pair.value)
}
void mesos_pair::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.mesos_pair.value)
}
::std::string* mesos_pair::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:draiosproto.mesos_pair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mesos_pair::release_value() {
  // @@protoc_insertion_point(field_release:draiosproto.mesos_pair.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mesos_pair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.mesos_pair.value)
}

inline const mesos_pair* mesos_pair::internal_default_instance() {
  return &mesos_pair_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mesos_common::kUidFieldNumber;
const int mesos_common::kNameFieldNumber;
const int mesos_common::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mesos_common::mesos_common()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.mesos_common)
}

void mesos_common::InitAsDefaultInstance() {
}

mesos_common::mesos_common(const mesos_common& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.mesos_common)
}

void mesos_common::SharedCtor() {
  _cached_size_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mesos_common::~mesos_common() {
  // @@protoc_insertion_point(destructor:draiosproto.mesos_common)
  SharedDtor();
}

void mesos_common::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mesos_common::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mesos_common::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mesos_common_descriptor_;
}

const mesos_common& mesos_common::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<mesos_common> mesos_common_default_instance_;

mesos_common* mesos_common::New(::google::protobuf::Arena* arena) const {
  mesos_common* n = new mesos_common;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mesos_common::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.mesos_common)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_uid()) {
      uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  labels_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool mesos_common::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.mesos_common)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.mesos_common.uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.mesos_common.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_labels;
        break;
      }

      // repeated .draiosproto.mesos_pair labels = 3;
      case 3: {
        if (tag == 26) {
         parse_labels:
          DO_(input->IncrementRecursionDepth());
         parse_loop_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_labels;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.mesos_common)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.mesos_common)
  return false;
#undef DO_
}

void mesos_common::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.mesos_common)
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mesos_common.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mesos_common.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .draiosproto.mesos_pair labels = 3;
  for (unsigned int i = 0, n = this->labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->labels(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.mesos_common)
}

::google::protobuf::uint8* mesos_common::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.mesos_common)
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mesos_common.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mesos_common.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .draiosproto.mesos_pair labels = 3;
  for (unsigned int i = 0, n = this->labels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->labels(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.mesos_common)
  return target;
}

size_t mesos_common::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.mesos_common)
  size_t total_size = 0;

  // required string uid = 1;
  if (has_uid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }
  // optional string name = 2;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .draiosproto.mesos_pair labels = 3;
  {
    unsigned int count = this->labels_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labels(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mesos_common::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.mesos_common)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const mesos_common* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mesos_common>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.mesos_common)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.mesos_common)
    UnsafeMergeFrom(*source);
  }
}

void mesos_common::MergeFrom(const mesos_common& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.mesos_common)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void mesos_common::UnsafeMergeFrom(const mesos_common& from) {
  GOOGLE_DCHECK(&from != this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_has_uid();
      uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void mesos_common::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.mesos_common)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mesos_common::CopyFrom(const mesos_common& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.mesos_common)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool mesos_common::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->labels())) return false;
  return true;
}

void mesos_common::Swap(mesos_common* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mesos_common::InternalSwap(mesos_common* other) {
  uid_.Swap(&other->uid_);
  name_.Swap(&other->name_);
  labels_.UnsafeArenaSwap(&other->labels_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mesos_common::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mesos_common_descriptor_;
  metadata.reflection = mesos_common_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mesos_common

// required string uid = 1;
bool mesos_common::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mesos_common::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void mesos_common::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void mesos_common::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
const ::std::string& mesos_common::uid() const {
  // @@protoc_insertion_point(field_get:draiosproto.mesos_common.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mesos_common::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.mesos_common.uid)
}
void mesos_common::set_uid(const char* value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.mesos_common.uid)
}
void mesos_common::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.mesos_common.uid)
}
::std::string* mesos_common::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:draiosproto.mesos_common.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mesos_common::release_uid() {
  // @@protoc_insertion_point(field_release:draiosproto.mesos_common.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mesos_common::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.mesos_common.uid)
}

// optional string name = 2;
bool mesos_common::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void mesos_common::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void mesos_common::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void mesos_common::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& mesos_common::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.mesos_common.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mesos_common::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.mesos_common.name)
}
void mesos_common::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.mesos_common.name)
}
void mesos_common::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.mesos_common.name)
}
::std::string* mesos_common::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.mesos_common.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mesos_common::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.mesos_common.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mesos_common::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.mesos_common.name)
}

// repeated .draiosproto.mesos_pair labels = 3;
int mesos_common::labels_size() const {
  return labels_.size();
}
void mesos_common::clear_labels() {
  labels_.Clear();
}
const ::draiosproto::mesos_pair& mesos_common::labels(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.mesos_common.labels)
  return labels_.Get(index);
}
::draiosproto::mesos_pair* mesos_common::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.mesos_common.labels)
  return labels_.Mutable(index);
}
::draiosproto::mesos_pair* mesos_common::add_labels() {
  // @@protoc_insertion_point(field_add:draiosproto.mesos_common.labels)
  return labels_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::mesos_pair >*
mesos_common::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.mesos_common.labels)
  return &labels_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::mesos_pair >&
mesos_common::labels() const {
  // @@protoc_insertion_point(field_list:draiosproto.mesos_common.labels)
  return labels_;
}

inline const mesos_common* mesos_common::internal_default_instance() {
  return &mesos_common_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mesos_task::kCommonFieldNumber;
const int mesos_task::kSlaveIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mesos_task::mesos_task()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.mesos_task)
}

void mesos_task::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::mesos_common*>(
      ::draiosproto::mesos_common::internal_default_instance());
}

mesos_task::mesos_task(const mesos_task& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.mesos_task)
}

void mesos_task::SharedCtor() {
  _cached_size_ = 0;
  slave_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  common_ = NULL;
}

mesos_task::~mesos_task() {
  // @@protoc_insertion_point(destructor:draiosproto.mesos_task)
  SharedDtor();
}

void mesos_task::SharedDtor() {
  slave_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &mesos_task_default_instance_.get()) {
    delete common_;
  }
}

void mesos_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mesos_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mesos_task_descriptor_;
}

const mesos_task& mesos_task::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<mesos_task> mesos_task_default_instance_;

mesos_task* mesos_task::New(::google::protobuf::Arena* arena) const {
  mesos_task* n = new mesos_task;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mesos_task::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.mesos_task)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_common()) {
      if (common_ != NULL) common_->::draiosproto::mesos_common::Clear();
    }
    if (has_slave_id()) {
      slave_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool mesos_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.mesos_task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.mesos_common common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_slave_id;
        break;
      }

      // required string slave_id = 2;
      case 2: {
        if (tag == 18) {
         parse_slave_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slave_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slave_id().data(), this->slave_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.mesos_task.slave_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.mesos_task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.mesos_task)
  return false;
#undef DO_
}

void mesos_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.mesos_task)
  // required .draiosproto.mesos_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_, output);
  }

  // required string slave_id = 2;
  if (has_slave_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_id().data(), this->slave_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mesos_task.slave_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->slave_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.mesos_task)
}

::google::protobuf::uint8* mesos_task::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.mesos_task)
  // required .draiosproto.mesos_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_, false, target);
  }

  // required string slave_id = 2;
  if (has_slave_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_id().data(), this->slave_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.mesos_task.slave_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->slave_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.mesos_task)
  return target;
}

size_t mesos_task::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.mesos_task)
  size_t total_size = 0;

  if (has_common()) {
    // required .draiosproto.mesos_common common = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);
  }

  if (has_slave_id()) {
    // required string slave_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->slave_id());
  }

  return total_size;
}
size_t mesos_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.mesos_task)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .draiosproto.mesos_common common = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);

    // required string slave_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->slave_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mesos_task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.mesos_task)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const mesos_task* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mesos_task>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.mesos_task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.mesos_task)
    UnsafeMergeFrom(*source);
  }
}

void mesos_task::MergeFrom(const mesos_task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.mesos_task)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void mesos_task::UnsafeMergeFrom(const mesos_task& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::mesos_common::MergeFrom(from.common());
    }
    if (from.has_slave_id()) {
      set_has_slave_id();
      slave_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slave_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void mesos_task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.mesos_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mesos_task::CopyFrom(const mesos_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.mesos_task)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool mesos_task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_common()) {
    if (!this->common_->IsInitialized()) return false;
  }
  return true;
}

void mesos_task::Swap(mesos_task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mesos_task::InternalSwap(mesos_task* other) {
  std::swap(common_, other->common_);
  slave_id_.Swap(&other->slave_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mesos_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mesos_task_descriptor_;
  metadata.reflection = mesos_task_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mesos_task

// required .draiosproto.mesos_common common = 1;
bool mesos_task::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mesos_task::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
void mesos_task::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
void mesos_task::clear_common() {
  if (common_ != NULL) common_->::draiosproto::mesos_common::Clear();
  clear_has_common();
}
const ::draiosproto::mesos_common& mesos_task::common() const {
  // @@protoc_insertion_point(field_get:draiosproto.mesos_task.common)
  return common_ != NULL ? *common_
                         : *::draiosproto::mesos_common::internal_default_instance();
}
::draiosproto::mesos_common* mesos_task::mutable_common() {
  set_has_common();
  if (common_ == NULL) {
    common_ = new ::draiosproto::mesos_common;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.mesos_task.common)
  return common_;
}
::draiosproto::mesos_common* mesos_task::release_common() {
  // @@protoc_insertion_point(field_release:draiosproto.mesos_task.common)
  clear_has_common();
  ::draiosproto::mesos_common* temp = common_;
  common_ = NULL;
  return temp;
}
void mesos_task::set_allocated_common(::draiosproto::mesos_common* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.mesos_task.common)
}

// required string slave_id = 2;
bool mesos_task::has_slave_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void mesos_task::set_has_slave_id() {
  _has_bits_[0] |= 0x00000002u;
}
void mesos_task::clear_has_slave_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void mesos_task::clear_slave_id() {
  slave_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_slave_id();
}
const ::std::string& mesos_task::slave_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.mesos_task.slave_id)
  return slave_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mesos_task::set_slave_id(const ::std::string& value) {
  set_has_slave_id();
  slave_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.mesos_task.slave_id)
}
void mesos_task::set_slave_id(const char* value) {
  set_has_slave_id();
  slave_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.mesos_task.slave_id)
}
void mesos_task::set_slave_id(const char* value, size_t size) {
  set_has_slave_id();
  slave_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.mesos_task.slave_id)
}
::std::string* mesos_task::mutable_slave_id() {
  set_has_slave_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.mesos_task.slave_id)
  return slave_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mesos_task::release_slave_id() {
  // @@protoc_insertion_point(field_release:draiosproto.mesos_task.slave_id)
  clear_has_slave_id();
  return slave_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mesos_task::set_allocated_slave_id(::std::string* slave_id) {
  if (slave_id != NULL) {
    set_has_slave_id();
  } else {
    clear_has_slave_id();
  }
  slave_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slave_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.mesos_task.slave_id)
}

inline const mesos_task* mesos_task::internal_default_instance() {
  return &mesos_task_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int marathon_app::kIdFieldNumber;
const int marathon_app::kTaskIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

marathon_app::marathon_app()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.marathon_app)
}

void marathon_app::InitAsDefaultInstance() {
}

marathon_app::marathon_app(const marathon_app& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.marathon_app)
}

void marathon_app::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

marathon_app::~marathon_app() {
  // @@protoc_insertion_point(destructor:draiosproto.marathon_app)
  SharedDtor();
}

void marathon_app::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void marathon_app::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marathon_app::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marathon_app_descriptor_;
}

const marathon_app& marathon_app::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<marathon_app> marathon_app_default_instance_;

marathon_app* marathon_app::New(::google::protobuf::Arena* arena) const {
  marathon_app* n = new marathon_app;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void marathon_app::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.marathon_app)
  if (has_id()) {
    id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  task_ids_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool marathon_app::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.marathon_app)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.marathon_app.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task_ids;
        break;
      }

      // repeated string task_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_task_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_task_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_ids(this->task_ids_size() - 1).data(),
            this->task_ids(this->task_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.marathon_app.task_ids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.marathon_app)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.marathon_app)
  return false;
#undef DO_
}

void marathon_app::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.marathon_app)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.marathon_app.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated string task_ids = 2;
  for (int i = 0; i < this->task_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_ids(i).data(), this->task_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.marathon_app.task_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->task_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.marathon_app)
}

::google::protobuf::uint8* marathon_app::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.marathon_app)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.marathon_app.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated string task_ids = 2;
  for (int i = 0; i < this->task_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_ids(i).data(), this->task_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.marathon_app.task_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->task_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.marathon_app)
  return target;
}

size_t marathon_app::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.marathon_app)
  size_t total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  // repeated string task_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->task_ids_size());
  for (int i = 0; i < this->task_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->task_ids(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marathon_app::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.marathon_app)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const marathon_app* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const marathon_app>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.marathon_app)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.marathon_app)
    UnsafeMergeFrom(*source);
  }
}

void marathon_app::MergeFrom(const marathon_app& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.marathon_app)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void marathon_app::UnsafeMergeFrom(const marathon_app& from) {
  GOOGLE_DCHECK(&from != this);
  task_ids_.UnsafeMergeFrom(from.task_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void marathon_app::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.marathon_app)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marathon_app::CopyFrom(const marathon_app& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.marathon_app)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool marathon_app::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void marathon_app::Swap(marathon_app* other) {
  if (other == this) return;
  InternalSwap(other);
}
void marathon_app::InternalSwap(marathon_app* other) {
  id_.Swap(&other->id_);
  task_ids_.UnsafeArenaSwap(&other->task_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata marathon_app::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marathon_app_descriptor_;
  metadata.reflection = marathon_app_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// marathon_app

// required string id = 1;
bool marathon_app::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void marathon_app::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void marathon_app::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void marathon_app::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& marathon_app::id() const {
  // @@protoc_insertion_point(field_get:draiosproto.marathon_app.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void marathon_app::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.marathon_app.id)
}
void marathon_app::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.marathon_app.id)
}
void marathon_app::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.marathon_app.id)
}
::std::string* marathon_app::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.marathon_app.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* marathon_app::release_id() {
  // @@protoc_insertion_point(field_release:draiosproto.marathon_app.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void marathon_app::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.marathon_app.id)
}

// repeated string task_ids = 2;
int marathon_app::task_ids_size() const {
  return task_ids_.size();
}
void marathon_app::clear_task_ids() {
  task_ids_.Clear();
}
const ::std::string& marathon_app::task_ids(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.marathon_app.task_ids)
  return task_ids_.Get(index);
}
::std::string* marathon_app::mutable_task_ids(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.marathon_app.task_ids)
  return task_ids_.Mutable(index);
}
void marathon_app::set_task_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:draiosproto.marathon_app.task_ids)
  task_ids_.Mutable(index)->assign(value);
}
void marathon_app::set_task_ids(int index, const char* value) {
  task_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:draiosproto.marathon_app.task_ids)
}
void marathon_app::set_task_ids(int index, const char* value, size_t size) {
  task_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:draiosproto.marathon_app.task_ids)
}
::std::string* marathon_app::add_task_ids() {
  // @@protoc_insertion_point(field_add_mutable:draiosproto.marathon_app.task_ids)
  return task_ids_.Add();
}
void marathon_app::add_task_ids(const ::std::string& value) {
  task_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:draiosproto.marathon_app.task_ids)
}
void marathon_app::add_task_ids(const char* value) {
  task_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:draiosproto.marathon_app.task_ids)
}
void marathon_app::add_task_ids(const char* value, size_t size) {
  task_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:draiosproto.marathon_app.task_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
marathon_app::task_ids() const {
  // @@protoc_insertion_point(field_list:draiosproto.marathon_app.task_ids)
  return task_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
marathon_app::mutable_task_ids() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.marathon_app.task_ids)
  return &task_ids_;
}

inline const marathon_app* marathon_app::internal_default_instance() {
  return &marathon_app_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int marathon_group::kIdFieldNumber;
const int marathon_group::kAppsFieldNumber;
const int marathon_group::kGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

marathon_group::marathon_group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.marathon_group)
}

void marathon_group::InitAsDefaultInstance() {
}

marathon_group::marathon_group(const marathon_group& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.marathon_group)
}

void marathon_group::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

marathon_group::~marathon_group() {
  // @@protoc_insertion_point(destructor:draiosproto.marathon_group)
  SharedDtor();
}

void marathon_group::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void marathon_group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marathon_group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marathon_group_descriptor_;
}

const marathon_group& marathon_group::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<marathon_group> marathon_group_default_instance_;

marathon_group* marathon_group::New(::google::protobuf::Arena* arena) const {
  marathon_group* n = new marathon_group;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void marathon_group::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.marathon_group)
  if (has_id()) {
    id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  apps_.Clear();
  groups_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool marathon_group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.marathon_group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.marathon_group.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_apps;
        break;
      }

      // repeated .draiosproto.marathon_app apps = 2;
      case 2: {
        if (tag == 18) {
         parse_apps:
          DO_(input->IncrementRecursionDepth());
         parse_loop_apps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_apps;
        if (input->ExpectTag(26)) goto parse_loop_groups;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.marathon_group groups = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_groups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.marathon_group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.marathon_group)
  return false;
#undef DO_
}

void marathon_group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.marathon_group)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.marathon_group.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .draiosproto.marathon_app apps = 2;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->apps(i), output);
  }

  // repeated .draiosproto.marathon_group groups = 3;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->groups(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.marathon_group)
}

::google::protobuf::uint8* marathon_group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.marathon_group)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.marathon_group.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .draiosproto.marathon_app apps = 2;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->apps(i), false, target);
  }

  // repeated .draiosproto.marathon_group groups = 3;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->groups(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.marathon_group)
  return target;
}

size_t marathon_group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.marathon_group)
  size_t total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  // repeated .draiosproto.marathon_app apps = 2;
  {
    unsigned int count = this->apps_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apps(i));
    }
  }

  // repeated .draiosproto.marathon_group groups = 3;
  {
    unsigned int count = this->groups_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groups(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marathon_group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.marathon_group)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const marathon_group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const marathon_group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.marathon_group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.marathon_group)
    UnsafeMergeFrom(*source);
  }
}

void marathon_group::MergeFrom(const marathon_group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.marathon_group)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void marathon_group::UnsafeMergeFrom(const marathon_group& from) {
  GOOGLE_DCHECK(&from != this);
  apps_.MergeFrom(from.apps_);
  groups_.MergeFrom(from.groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void marathon_group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.marathon_group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marathon_group::CopyFrom(const marathon_group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.marathon_group)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool marathon_group::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->apps())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->groups())) return false;
  return true;
}

void marathon_group::Swap(marathon_group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void marathon_group::InternalSwap(marathon_group* other) {
  id_.Swap(&other->id_);
  apps_.UnsafeArenaSwap(&other->apps_);
  groups_.UnsafeArenaSwap(&other->groups_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata marathon_group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marathon_group_descriptor_;
  metadata.reflection = marathon_group_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// marathon_group

// required string id = 1;
bool marathon_group::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void marathon_group::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void marathon_group::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void marathon_group::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& marathon_group::id() const {
  // @@protoc_insertion_point(field_get:draiosproto.marathon_group.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void marathon_group::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.marathon_group.id)
}
void marathon_group::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.marathon_group.id)
}
void marathon_group::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.marathon_group.id)
}
::std::string* marathon_group::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.marathon_group.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* marathon_group::release_id() {
  // @@protoc_insertion_point(field_release:draiosproto.marathon_group.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void marathon_group::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.marathon_group.id)
}

// repeated .draiosproto.marathon_app apps = 2;
int marathon_group::apps_size() const {
  return apps_.size();
}
void marathon_group::clear_apps() {
  apps_.Clear();
}
const ::draiosproto::marathon_app& marathon_group::apps(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.marathon_group.apps)
  return apps_.Get(index);
}
::draiosproto::marathon_app* marathon_group::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.marathon_group.apps)
  return apps_.Mutable(index);
}
::draiosproto::marathon_app* marathon_group::add_apps() {
  // @@protoc_insertion_point(field_add:draiosproto.marathon_group.apps)
  return apps_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::marathon_app >*
marathon_group::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.marathon_group.apps)
  return &apps_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::marathon_app >&
marathon_group::apps() const {
  // @@protoc_insertion_point(field_list:draiosproto.marathon_group.apps)
  return apps_;
}

// repeated .draiosproto.marathon_group groups = 3;
int marathon_group::groups_size() const {
  return groups_.size();
}
void marathon_group::clear_groups() {
  groups_.Clear();
}
const ::draiosproto::marathon_group& marathon_group::groups(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.marathon_group.groups)
  return groups_.Get(index);
}
::draiosproto::marathon_group* marathon_group::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.marathon_group.groups)
  return groups_.Mutable(index);
}
::draiosproto::marathon_group* marathon_group::add_groups() {
  // @@protoc_insertion_point(field_add:draiosproto.marathon_group.groups)
  return groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::marathon_group >*
marathon_group::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.marathon_group.groups)
  return &groups_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::marathon_group >&
marathon_group::groups() const {
  // @@protoc_insertion_point(field_list:draiosproto.marathon_group.groups)
  return groups_;
}

inline const marathon_group* marathon_group::internal_default_instance() {
  return &marathon_group_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mesos_framework::kCommonFieldNumber;
const int mesos_framework::kTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mesos_framework::mesos_framework()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.mesos_framework)
}

void mesos_framework::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::mesos_common*>(
      ::draiosproto::mesos_common::internal_default_instance());
}

mesos_framework::mesos_framework(const mesos_framework& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.mesos_framework)
}

void mesos_framework::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
}

mesos_framework::~mesos_framework() {
  // @@protoc_insertion_point(destructor:draiosproto.mesos_framework)
  SharedDtor();
}

void mesos_framework::SharedDtor() {
  if (this != &mesos_framework_default_instance_.get()) {
    delete common_;
  }
}

void mesos_framework::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mesos_framework::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mesos_framework_descriptor_;
}

const mesos_framework& mesos_framework::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<mesos_framework> mesos_framework_default_instance_;

mesos_framework* mesos_framework::New(::google::protobuf::Arena* arena) const {
  mesos_framework* n = new mesos_framework;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mesos_framework::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.mesos_framework)
  if (has_common()) {
    if (common_ != NULL) common_->::draiosproto::mesos_common::Clear();
  }
  tasks_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool mesos_framework::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.mesos_framework)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.mesos_common common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tasks;
        break;
      }

      // repeated .draiosproto.mesos_task tasks = 2;
      case 2: {
        if (tag == 18) {
         parse_tasks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_tasks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.mesos_framework)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.mesos_framework)
  return false;
#undef DO_
}

void mesos_framework::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.mesos_framework)
  // required .draiosproto.mesos_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_, output);
  }

  // repeated .draiosproto.mesos_task tasks = 2;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tasks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.mesos_framework)
}

::google::protobuf::uint8* mesos_framework::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.mesos_framework)
  // required .draiosproto.mesos_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_, false, target);
  }

  // repeated .draiosproto.mesos_task tasks = 2;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tasks(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.mesos_framework)
  return target;
}

size_t mesos_framework::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.mesos_framework)
  size_t total_size = 0;

  // required .draiosproto.mesos_common common = 1;
  if (has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);
  }
  // repeated .draiosproto.mesos_task tasks = 2;
  {
    unsigned int count = this->tasks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tasks(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mesos_framework::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.mesos_framework)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const mesos_framework* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mesos_framework>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.mesos_framework)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.mesos_framework)
    UnsafeMergeFrom(*source);
  }
}

void mesos_framework::MergeFrom(const mesos_framework& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.mesos_framework)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void mesos_framework::UnsafeMergeFrom(const mesos_framework& from) {
  GOOGLE_DCHECK(&from != this);
  tasks_.MergeFrom(from.tasks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::mesos_common::MergeFrom(from.common());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void mesos_framework::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.mesos_framework)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mesos_framework::CopyFrom(const mesos_framework& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.mesos_framework)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool mesos_framework::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->tasks())) return false;
  return true;
}

void mesos_framework::Swap(mesos_framework* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mesos_framework::InternalSwap(mesos_framework* other) {
  std::swap(common_, other->common_);
  tasks_.UnsafeArenaSwap(&other->tasks_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mesos_framework::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mesos_framework_descriptor_;
  metadata.reflection = mesos_framework_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mesos_framework

// required .draiosproto.mesos_common common = 1;
bool mesos_framework::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mesos_framework::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
void mesos_framework::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
void mesos_framework::clear_common() {
  if (common_ != NULL) common_->::draiosproto::mesos_common::Clear();
  clear_has_common();
}
const ::draiosproto::mesos_common& mesos_framework::common() const {
  // @@protoc_insertion_point(field_get:draiosproto.mesos_framework.common)
  return common_ != NULL ? *common_
                         : *::draiosproto::mesos_common::internal_default_instance();
}
::draiosproto::mesos_common* mesos_framework::mutable_common() {
  set_has_common();
  if (common_ == NULL) {
    common_ = new ::draiosproto::mesos_common;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.mesos_framework.common)
  return common_;
}
::draiosproto::mesos_common* mesos_framework::release_common() {
  // @@protoc_insertion_point(field_release:draiosproto.mesos_framework.common)
  clear_has_common();
  ::draiosproto::mesos_common* temp = common_;
  common_ = NULL;
  return temp;
}
void mesos_framework::set_allocated_common(::draiosproto::mesos_common* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.mesos_framework.common)
}

// repeated .draiosproto.mesos_task tasks = 2;
int mesos_framework::tasks_size() const {
  return tasks_.size();
}
void mesos_framework::clear_tasks() {
  tasks_.Clear();
}
const ::draiosproto::mesos_task& mesos_framework::tasks(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.mesos_framework.tasks)
  return tasks_.Get(index);
}
::draiosproto::mesos_task* mesos_framework::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.mesos_framework.tasks)
  return tasks_.Mutable(index);
}
::draiosproto::mesos_task* mesos_framework::add_tasks() {
  // @@protoc_insertion_point(field_add:draiosproto.mesos_framework.tasks)
  return tasks_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::mesos_task >*
mesos_framework::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.mesos_framework.tasks)
  return &tasks_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::mesos_task >&
mesos_framework::tasks() const {
  // @@protoc_insertion_point(field_list:draiosproto.mesos_framework.tasks)
  return tasks_;
}

inline const mesos_framework* mesos_framework::internal_default_instance() {
  return &mesos_framework_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mesos_slave::kCommonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mesos_slave::mesos_slave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.mesos_slave)
}

void mesos_slave::InitAsDefaultInstance() {
  common_ = const_cast< ::draiosproto::mesos_common*>(
      ::draiosproto::mesos_common::internal_default_instance());
}

mesos_slave::mesos_slave(const mesos_slave& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.mesos_slave)
}

void mesos_slave::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
}

mesos_slave::~mesos_slave() {
  // @@protoc_insertion_point(destructor:draiosproto.mesos_slave)
  SharedDtor();
}

void mesos_slave::SharedDtor() {
  if (this != &mesos_slave_default_instance_.get()) {
    delete common_;
  }
}

void mesos_slave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mesos_slave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mesos_slave_descriptor_;
}

const mesos_slave& mesos_slave::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<mesos_slave> mesos_slave_default_instance_;

mesos_slave* mesos_slave::New(::google::protobuf::Arena* arena) const {
  mesos_slave* n = new mesos_slave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mesos_slave::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.mesos_slave)
  if (has_common()) {
    if (common_ != NULL) common_->::draiosproto::mesos_common::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool mesos_slave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.mesos_slave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .draiosproto.mesos_common common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.mesos_slave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.mesos_slave)
  return false;
#undef DO_
}

void mesos_slave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.mesos_slave)
  // required .draiosproto.mesos_common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.mesos_slave)
}

::google::protobuf::uint8* mesos_slave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.mesos_slave)
  // required .draiosproto.mesos_common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.mesos_slave)
  return target;
}

size_t mesos_slave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.mesos_slave)
  size_t total_size = 0;

  // required .draiosproto.mesos_common common = 1;
  if (has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mesos_slave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.mesos_slave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const mesos_slave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mesos_slave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.mesos_slave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.mesos_slave)
    UnsafeMergeFrom(*source);
  }
}

void mesos_slave::MergeFrom(const mesos_slave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.mesos_slave)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void mesos_slave::UnsafeMergeFrom(const mesos_slave& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::draiosproto::mesos_common::MergeFrom(from.common());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void mesos_slave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.mesos_slave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mesos_slave::CopyFrom(const mesos_slave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.mesos_slave)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool mesos_slave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common_->IsInitialized()) return false;
  }
  return true;
}

void mesos_slave::Swap(mesos_slave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mesos_slave::InternalSwap(mesos_slave* other) {
  std::swap(common_, other->common_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mesos_slave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mesos_slave_descriptor_;
  metadata.reflection = mesos_slave_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mesos_slave

// required .draiosproto.mesos_common common = 1;
bool mesos_slave::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mesos_slave::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
void mesos_slave::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
void mesos_slave::clear_common() {
  if (common_ != NULL) common_->::draiosproto::mesos_common::Clear();
  clear_has_common();
}
const ::draiosproto::mesos_common& mesos_slave::common() const {
  // @@protoc_insertion_point(field_get:draiosproto.mesos_slave.common)
  return common_ != NULL ? *common_
                         : *::draiosproto::mesos_common::internal_default_instance();
}
::draiosproto::mesos_common* mesos_slave::mutable_common() {
  set_has_common();
  if (common_ == NULL) {
    common_ = new ::draiosproto::mesos_common;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.mesos_slave.common)
  return common_;
}
::draiosproto::mesos_common* mesos_slave::release_common() {
  // @@protoc_insertion_point(field_release:draiosproto.mesos_slave.common)
  clear_has_common();
  ::draiosproto::mesos_common* temp = common_;
  common_ = NULL;
  return temp;
}
void mesos_slave::set_allocated_common(::draiosproto::mesos_common* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.mesos_slave.common)
}

inline const mesos_slave* mesos_slave::internal_default_instance() {
  return &mesos_slave_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mesos_state::kFrameworksFieldNumber;
const int mesos_state::kGroupsFieldNumber;
const int mesos_state::kSlavesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mesos_state::mesos_state()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.mesos_state)
}

void mesos_state::InitAsDefaultInstance() {
}

mesos_state::mesos_state(const mesos_state& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.mesos_state)
}

void mesos_state::SharedCtor() {
  _cached_size_ = 0;
}

mesos_state::~mesos_state() {
  // @@protoc_insertion_point(destructor:draiosproto.mesos_state)
  SharedDtor();
}

void mesos_state::SharedDtor() {
}

void mesos_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mesos_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mesos_state_descriptor_;
}

const mesos_state& mesos_state::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<mesos_state> mesos_state_default_instance_;

mesos_state* mesos_state::New(::google::protobuf::Arena* arena) const {
  mesos_state* n = new mesos_state;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mesos_state::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.mesos_state)
  frameworks_.Clear();
  groups_.Clear();
  slaves_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool mesos_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.mesos_state)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.mesos_framework frameworks = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_frameworks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_frameworks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_frameworks;
        if (input->ExpectTag(18)) goto parse_loop_groups;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.marathon_group groups = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_groups;
        if (input->ExpectTag(26)) goto parse_loop_slaves;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.mesos_slave slaves = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_slaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_slaves()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_slaves;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.mesos_state)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.mesos_state)
  return false;
#undef DO_
}

void mesos_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.mesos_state)
  // repeated .draiosproto.mesos_framework frameworks = 1;
  for (unsigned int i = 0, n = this->frameworks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frameworks(i), output);
  }

  // repeated .draiosproto.marathon_group groups = 2;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groups(i), output);
  }

  // repeated .draiosproto.mesos_slave slaves = 3;
  for (unsigned int i = 0, n = this->slaves_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slaves(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.mesos_state)
}

::google::protobuf::uint8* mesos_state::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.mesos_state)
  // repeated .draiosproto.mesos_framework frameworks = 1;
  for (unsigned int i = 0, n = this->frameworks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->frameworks(i), false, target);
  }

  // repeated .draiosproto.marathon_group groups = 2;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->groups(i), false, target);
  }

  // repeated .draiosproto.mesos_slave slaves = 3;
  for (unsigned int i = 0, n = this->slaves_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->slaves(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.mesos_state)
  return target;
}

size_t mesos_state::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.mesos_state)
  size_t total_size = 0;

  // repeated .draiosproto.mesos_framework frameworks = 1;
  {
    unsigned int count = this->frameworks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frameworks(i));
    }
  }

  // repeated .draiosproto.marathon_group groups = 2;
  {
    unsigned int count = this->groups_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groups(i));
    }
  }

  // repeated .draiosproto.mesos_slave slaves = 3;
  {
    unsigned int count = this->slaves_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slaves(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mesos_state::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.mesos_state)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const mesos_state* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mesos_state>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.mesos_state)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.mesos_state)
    UnsafeMergeFrom(*source);
  }
}

void mesos_state::MergeFrom(const mesos_state& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.mesos_state)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void mesos_state::UnsafeMergeFrom(const mesos_state& from) {
  GOOGLE_DCHECK(&from != this);
  frameworks_.MergeFrom(from.frameworks_);
  groups_.MergeFrom(from.groups_);
  slaves_.MergeFrom(from.slaves_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void mesos_state::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.mesos_state)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mesos_state::CopyFrom(const mesos_state& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.mesos_state)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool mesos_state::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->frameworks())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->groups())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->slaves())) return false;
  return true;
}

void mesos_state::Swap(mesos_state* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mesos_state::InternalSwap(mesos_state* other) {
  frameworks_.UnsafeArenaSwap(&other->frameworks_);
  groups_.UnsafeArenaSwap(&other->groups_);
  slaves_.UnsafeArenaSwap(&other->slaves_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mesos_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mesos_state_descriptor_;
  metadata.reflection = mesos_state_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mesos_state

// repeated .draiosproto.mesos_framework frameworks = 1;
int mesos_state::frameworks_size() const {
  return frameworks_.size();
}
void mesos_state::clear_frameworks() {
  frameworks_.Clear();
}
const ::draiosproto::mesos_framework& mesos_state::frameworks(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.mesos_state.frameworks)
  return frameworks_.Get(index);
}
::draiosproto::mesos_framework* mesos_state::mutable_frameworks(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.mesos_state.frameworks)
  return frameworks_.Mutable(index);
}
::draiosproto::mesos_framework* mesos_state::add_frameworks() {
  // @@protoc_insertion_point(field_add:draiosproto.mesos_state.frameworks)
  return frameworks_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::mesos_framework >*
mesos_state::mutable_frameworks() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.mesos_state.frameworks)
  return &frameworks_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::mesos_framework >&
mesos_state::frameworks() const {
  // @@protoc_insertion_point(field_list:draiosproto.mesos_state.frameworks)
  return frameworks_;
}

// repeated .draiosproto.marathon_group groups = 2;
int mesos_state::groups_size() const {
  return groups_.size();
}
void mesos_state::clear_groups() {
  groups_.Clear();
}
const ::draiosproto::marathon_group& mesos_state::groups(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.mesos_state.groups)
  return groups_.Get(index);
}
::draiosproto::marathon_group* mesos_state::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.mesos_state.groups)
  return groups_.Mutable(index);
}
::draiosproto::marathon_group* mesos_state::add_groups() {
  // @@protoc_insertion_point(field_add:draiosproto.mesos_state.groups)
  return groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::marathon_group >*
mesos_state::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.mesos_state.groups)
  return &groups_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::marathon_group >&
mesos_state::groups() const {
  // @@protoc_insertion_point(field_list:draiosproto.mesos_state.groups)
  return groups_;
}

// repeated .draiosproto.mesos_slave slaves = 3;
int mesos_state::slaves_size() const {
  return slaves_.size();
}
void mesos_state::clear_slaves() {
  slaves_.Clear();
}
const ::draiosproto::mesos_slave& mesos_state::slaves(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.mesos_state.slaves)
  return slaves_.Get(index);
}
::draiosproto::mesos_slave* mesos_state::mutable_slaves(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.mesos_state.slaves)
  return slaves_.Mutable(index);
}
::draiosproto::mesos_slave* mesos_state::add_slaves() {
  // @@protoc_insertion_point(field_add:draiosproto.mesos_state.slaves)
  return slaves_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::mesos_slave >*
mesos_state::mutable_slaves() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.mesos_state.slaves)
  return &slaves_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::mesos_slave >&
mesos_state::slaves() const {
  // @@protoc_insertion_point(field_list:draiosproto.mesos_state.slaves)
  return slaves_;
}

inline const mesos_state* mesos_state::internal_default_instance() {
  return &mesos_state_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int metrics::kTimestampNsFieldNumber;
const int metrics::kMachineIdFieldNumber;
const int metrics::kCustomerIdFieldNumber;
const int metrics::kSamplingRatioFieldNumber;
const int metrics::kHostCustomNameFieldNumber;
const int metrics::kHostTagsFieldNumber;
const int metrics::kIsHostHiddenFieldNumber;
const int metrics::kHiddenProcessesFieldNumber;
const int metrics::kVersionFieldNumber;
const int metrics::kInstanceIdFieldNumber;
const int metrics::kHostinfoFieldNumber;
const int metrics::kProgramsFieldNumber;
const int metrics::kIpv4ConnectionsFieldNumber;
const int metrics::kIpv4NetworkInterfacesFieldNumber;
const int metrics::kCommandsFieldNumber;
const int metrics::kMountsFieldNumber;
const int metrics::kTopFilesFieldNumber;
const int metrics::kProtosFieldNumber;
const int metrics::kContainersFieldNumber;
const int metrics::kKubernetesFieldNumber;
const int metrics::kMesosFieldNumber;
const int metrics::kEventsFieldNumber;
const int metrics::kFalcoblFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

metrics::metrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.metrics)
}

void metrics::InitAsDefaultInstance() {
  hostinfo_ = const_cast< ::draiosproto::host*>(
      ::draiosproto::host::internal_default_instance());
  protos_ = const_cast< ::draiosproto::proto_info*>(
      ::draiosproto::proto_info::internal_default_instance());
  kubernetes_ = const_cast< ::draiosproto::k8s_state*>(
      ::draiosproto::k8s_state::internal_default_instance());
  mesos_ = const_cast< ::draiosproto::mesos_state*>(
      ::draiosproto::mesos_state::internal_default_instance());
  falcobl_ = const_cast< ::draiosproto::falco_baseline*>(
      ::draiosproto::falco_baseline::internal_default_instance());
}

metrics::metrics(const metrics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.metrics)
}

void metrics::SharedCtor() {
  _cached_size_ = 0;
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_custom_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_tags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hidden_processes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostinfo_ = NULL;
  protos_ = NULL;
  kubernetes_ = NULL;
  mesos_ = NULL;
  falcobl_ = NULL;
  ::memset(&timestamp_ns_, 0, reinterpret_cast<char*>(&is_host_hidden_) -
    reinterpret_cast<char*>(&timestamp_ns_) + sizeof(is_host_hidden_));
}

metrics::~metrics() {
  // @@protoc_insertion_point(destructor:draiosproto.metrics)
  SharedDtor();
}

void metrics::SharedDtor() {
  machine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_custom_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_tags_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hidden_processes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &metrics_default_instance_.get()) {
    delete hostinfo_;
    delete protos_;
    delete kubernetes_;
    delete mesos_;
    delete falcobl_;
  }
}

void metrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* metrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return metrics_descriptor_;
}

const metrics& metrics::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<metrics> metrics_default_instance_;

metrics* metrics::New(::google::protobuf::Arena* arena) const {
  metrics* n = new metrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void metrics::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.metrics)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(metrics, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<metrics*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(timestamp_ns_, is_host_hidden_);
    if (has_machine_id()) {
      machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_customer_id()) {
      customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_host_custom_name()) {
      host_custom_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_host_tags()) {
      host_tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_hidden_processes()) {
      hidden_processes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_version()) {
      version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_instance_id()) {
      instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_hostinfo()) {
      if (hostinfo_ != NULL) hostinfo_->::draiosproto::host::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 5898240u) {
    if (has_protos()) {
      if (protos_ != NULL) protos_->::draiosproto::proto_info::Clear();
    }
    if (has_kubernetes()) {
      if (kubernetes_ != NULL) kubernetes_->::draiosproto::k8s_state::Clear();
    }
    if (has_mesos()) {
      if (mesos_ != NULL) mesos_->::draiosproto::mesos_state::Clear();
    }
    if (has_falcobl()) {
      if (falcobl_ != NULL) falcobl_->::draiosproto::falco_baseline::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  programs_.Clear();
  ipv4_connections_.Clear();
  ipv4_network_interfaces_.Clear();
  commands_.Clear();
  mounts_.Clear();
  top_files_.Clear();
  containers_.Clear();
  events_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool metrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.metrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (tag == 8) {
          set_has_timestamp_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (tag == 18) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.metrics.machine_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (tag == 26) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.metrics.customer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hostinfo;
        break;
      }

      // optional .draiosproto.host hostinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_hostinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hostinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ipv4_connections;
        break;
      }

      // repeated .draiosproto.ipv4_connection ipv4_connections = 7;
      case 7: {
        if (tag == 58) {
         parse_ipv4_connections:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ipv4_connections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ipv4_connections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_ipv4_connections;
        if (input->ExpectTag(66)) goto parse_loop_ipv4_network_interfaces;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.ipv4_network_interface ipv4_network_interfaces = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_ipv4_network_interfaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ipv4_network_interfaces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_ipv4_network_interfaces;
        if (input->ExpectTag(74)) goto parse_loop_programs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.program programs = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_programs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_programs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_programs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(80)) goto parse_sampling_ratio;
        break;
      }

      // optional uint32 sampling_ratio = 10;
      case 10: {
        if (tag == 80) {
         parse_sampling_ratio:
          set_has_sampling_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sampling_ratio_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_host_custom_name;
        break;
      }

      // optional string host_custom_name = 11;
      case 11: {
        if (tag == 90) {
         parse_host_custom_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_custom_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host_custom_name().data(), this->host_custom_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.metrics.host_custom_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_host_tags;
        break;
      }

      // optional string host_tags = 12;
      case 12: {
        if (tag == 98) {
         parse_host_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host_tags().data(), this->host_tags().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.metrics.host_tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_is_host_hidden;
        break;
      }

      // optional bool is_host_hidden = 14;
      case 14: {
        if (tag == 112) {
         parse_is_host_hidden:
          set_has_is_host_hidden();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_host_hidden_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_hidden_processes;
        break;
      }

      // optional string hidden_processes = 15;
      case 15: {
        if (tag == 122) {
         parse_hidden_processes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hidden_processes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hidden_processes().data(), this->hidden_processes().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.metrics.hidden_processes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_version;
        break;
      }

      // optional string version = 16;
      case 16: {
        if (tag == 130) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.metrics.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_commands;
        break;
      }

      // repeated .draiosproto.command_details commands = 17;
      case 17: {
        if (tag == 138) {
         parse_commands:
          DO_(input->IncrementRecursionDepth());
         parse_loop_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_commands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_loop_commands;
        if (input->ExpectTag(146)) goto parse_loop_mounts;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.mounted_fs mounts = 18;
      case 18: {
        if (tag == 146) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_loop_mounts;
        if (input->ExpectTag(154)) goto parse_loop_top_files;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.file_stat top_files = 19;
      case 19: {
        if (tag == 154) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_top_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_top_files()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_loop_top_files;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(162)) goto parse_protos;
        break;
      }

      // optional .draiosproto.proto_info protos = 20;
      case 20: {
        if (tag == 162) {
         parse_protos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_protos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_instance_id;
        break;
      }

      // optional string instance_id = 21;
      case 21: {
        if (tag == 170) {
         parse_instance_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instance_id().data(), this->instance_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.metrics.instance_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_containers;
        break;
      }

      // repeated .draiosproto.container containers = 22;
      case 22: {
        if (tag == 178) {
         parse_containers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_containers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_containers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_loop_containers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(194)) goto parse_kubernetes;
        break;
      }

      // optional .draiosproto.k8s_state kubernetes = 24;
      case 24: {
        if (tag == 194) {
         parse_kubernetes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kubernetes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_mesos;
        break;
      }

      // optional .draiosproto.mesos_state mesos = 25;
      case 25: {
        if (tag == 202) {
         parse_mesos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mesos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_events;
        break;
      }

      // repeated .draiosproto.agent_event events = 26;
      case 26: {
        if (tag == 210) {
         parse_events:
          DO_(input->IncrementRecursionDepth());
         parse_loop_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_loop_events;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(218)) goto parse_falcobl;
        break;
      }

      // optional .draiosproto.falco_baseline falcobl = 27;
      case 27: {
        if (tag == 218) {
         parse_falcobl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_falcobl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.metrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.metrics)
  return false;
#undef DO_
}

void metrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.metrics)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.metrics.machine_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.metrics.customer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->customer_id(), output);
  }

  // optional .draiosproto.host hostinfo = 4;
  if (has_hostinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->hostinfo_, output);
  }

  // repeated .draiosproto.ipv4_connection ipv4_connections = 7;
  for (unsigned int i = 0, n = this->ipv4_connections_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ipv4_connections(i), output);
  }

  // repeated .draiosproto.ipv4_network_interface ipv4_network_interfaces = 8;
  for (unsigned int i = 0, n = this->ipv4_network_interfaces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ipv4_network_interfaces(i), output);
  }

  // repeated .draiosproto.program programs = 9;
  for (unsigned int i = 0, n = this->programs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->programs(i), output);
  }

  // optional uint32 sampling_ratio = 10;
  if (has_sampling_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sampling_ratio(), output);
  }

  // optional string host_custom_name = 11;
  if (has_host_custom_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_custom_name().data(), this->host_custom_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.metrics.host_custom_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->host_custom_name(), output);
  }

  // optional string host_tags = 12;
  if (has_host_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_tags().data(), this->host_tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.metrics.host_tags");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->host_tags(), output);
  }

  // optional bool is_host_hidden = 14;
  if (has_is_host_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_host_hidden(), output);
  }

  // optional string hidden_processes = 15;
  if (has_hidden_processes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hidden_processes().data(), this->hidden_processes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.metrics.hidden_processes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->hidden_processes(), output);
  }

  // optional string version = 16;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.metrics.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->version(), output);
  }

  // repeated .draiosproto.command_details commands = 17;
  for (unsigned int i = 0, n = this->commands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->commands(i), output);
  }

  // repeated .draiosproto.mounted_fs mounts = 18;
  for (unsigned int i = 0, n = this->mounts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->mounts(i), output);
  }

  // repeated .draiosproto.file_stat top_files = 19;
  for (unsigned int i = 0, n = this->top_files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->top_files(i), output);
  }

  // optional .draiosproto.proto_info protos = 20;
  if (has_protos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->protos_, output);
  }

  // optional string instance_id = 21;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instance_id().data(), this->instance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.metrics.instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->instance_id(), output);
  }

  // repeated .draiosproto.container containers = 22;
  for (unsigned int i = 0, n = this->containers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->containers(i), output);
  }

  // optional .draiosproto.k8s_state kubernetes = 24;
  if (has_kubernetes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->kubernetes_, output);
  }

  // optional .draiosproto.mesos_state mesos = 25;
  if (has_mesos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->mesos_, output);
  }

  // repeated .draiosproto.agent_event events = 26;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->events(i), output);
  }

  // optional .draiosproto.falco_baseline falcobl = 27;
  if (has_falcobl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->falcobl_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.metrics)
}

::google::protobuf::uint8* metrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.metrics)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.metrics.machine_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.metrics.customer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // optional .draiosproto.host hostinfo = 4;
  if (has_hostinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->hostinfo_, false, target);
  }

  // repeated .draiosproto.ipv4_connection ipv4_connections = 7;
  for (unsigned int i = 0, n = this->ipv4_connections_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->ipv4_connections(i), false, target);
  }

  // repeated .draiosproto.ipv4_network_interface ipv4_network_interfaces = 8;
  for (unsigned int i = 0, n = this->ipv4_network_interfaces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->ipv4_network_interfaces(i), false, target);
  }

  // repeated .draiosproto.program programs = 9;
  for (unsigned int i = 0, n = this->programs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->programs(i), false, target);
  }

  // optional uint32 sampling_ratio = 10;
  if (has_sampling_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sampling_ratio(), target);
  }

  // optional string host_custom_name = 11;
  if (has_host_custom_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_custom_name().data(), this->host_custom_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.metrics.host_custom_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->host_custom_name(), target);
  }

  // optional string host_tags = 12;
  if (has_host_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_tags().data(), this->host_tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.metrics.host_tags");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->host_tags(), target);
  }

  // optional bool is_host_hidden = 14;
  if (has_is_host_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_host_hidden(), target);
  }

  // optional string hidden_processes = 15;
  if (has_hidden_processes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hidden_processes().data(), this->hidden_processes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.metrics.hidden_processes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->hidden_processes(), target);
  }

  // optional string version = 16;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.metrics.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->version(), target);
  }

  // repeated .draiosproto.command_details commands = 17;
  for (unsigned int i = 0, n = this->commands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->commands(i), false, target);
  }

  // repeated .draiosproto.mounted_fs mounts = 18;
  for (unsigned int i = 0, n = this->mounts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->mounts(i), false, target);
  }

  // repeated .draiosproto.file_stat top_files = 19;
  for (unsigned int i = 0, n = this->top_files_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, this->top_files(i), false, target);
  }

  // optional .draiosproto.proto_info protos = 20;
  if (has_protos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->protos_, false, target);
  }

  // optional string instance_id = 21;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instance_id().data(), this->instance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.metrics.instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->instance_id(), target);
  }

  // repeated .draiosproto.container containers = 22;
  for (unsigned int i = 0, n = this->containers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->containers(i), false, target);
  }

  // optional .draiosproto.k8s_state kubernetes = 24;
  if (has_kubernetes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->kubernetes_, false, target);
  }

  // optional .draiosproto.mesos_state mesos = 25;
  if (has_mesos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->mesos_, false, target);
  }

  // repeated .draiosproto.agent_event events = 26;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, this->events(i), false, target);
  }

  // optional .draiosproto.falco_baseline falcobl = 27;
  if (has_falcobl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->falcobl_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.metrics)
  return target;
}

size_t metrics::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.metrics)
  size_t total_size = 0;

  if (has_timestamp_ns()) {
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());
  }

  if (has_machine_id()) {
    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());
  }

  return total_size;
}
size_t metrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.metrics)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());

    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 252u) {
    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // optional uint32 sampling_ratio = 10;
    if (has_sampling_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sampling_ratio());
    }

    // optional string host_custom_name = 11;
    if (has_host_custom_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_custom_name());
    }

    // optional string host_tags = 12;
    if (has_host_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_tags());
    }

    // optional bool is_host_hidden = 14;
    if (has_is_host_hidden()) {
      total_size += 1 + 1;
    }

    // optional string hidden_processes = 15;
    if (has_hidden_processes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hidden_processes());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional string version = 16;
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string instance_id = 21;
    if (has_instance_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instance_id());
    }

    // optional .draiosproto.host hostinfo = 4;
    if (has_hostinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hostinfo_);
    }

  }
  if (_has_bits_[17 / 32] & 5898240u) {
    // optional .draiosproto.proto_info protos = 20;
    if (has_protos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->protos_);
    }

    // optional .draiosproto.k8s_state kubernetes = 24;
    if (has_kubernetes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kubernetes_);
    }

    // optional .draiosproto.mesos_state mesos = 25;
    if (has_mesos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mesos_);
    }

    // optional .draiosproto.falco_baseline falcobl = 27;
    if (has_falcobl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->falcobl_);
    }

  }
  // repeated .draiosproto.program programs = 9;
  {
    unsigned int count = this->programs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->programs(i));
    }
  }

  // repeated .draiosproto.ipv4_connection ipv4_connections = 7;
  {
    unsigned int count = this->ipv4_connections_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ipv4_connections(i));
    }
  }

  // repeated .draiosproto.ipv4_network_interface ipv4_network_interfaces = 8;
  {
    unsigned int count = this->ipv4_network_interfaces_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ipv4_network_interfaces(i));
    }
  }

  // repeated .draiosproto.command_details commands = 17;
  {
    unsigned int count = this->commands_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commands(i));
    }
  }

  // repeated .draiosproto.mounted_fs mounts = 18;
  {
    unsigned int count = this->mounts_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mounts(i));
    }
  }

  // repeated .draiosproto.file_stat top_files = 19;
  {
    unsigned int count = this->top_files_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_files(i));
    }
  }

  // repeated .draiosproto.container containers = 22;
  {
    unsigned int count = this->containers_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->containers(i));
    }
  }

  // repeated .draiosproto.agent_event events = 26;
  {
    unsigned int count = this->events_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->events(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void metrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.metrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const metrics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const metrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.metrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.metrics)
    UnsafeMergeFrom(*source);
  }
}

void metrics::MergeFrom(const metrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.metrics)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void metrics::UnsafeMergeFrom(const metrics& from) {
  GOOGLE_DCHECK(&from != this);
  programs_.MergeFrom(from.programs_);
  ipv4_connections_.MergeFrom(from.ipv4_connections_);
  ipv4_network_interfaces_.MergeFrom(from.ipv4_network_interfaces_);
  commands_.MergeFrom(from.commands_);
  mounts_.MergeFrom(from.mounts_);
  top_files_.MergeFrom(from.top_files_);
  containers_.MergeFrom(from.containers_);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_has_machine_id();
      machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
    }
    if (from.has_customer_id()) {
      set_has_customer_id();
      customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
    }
    if (from.has_sampling_ratio()) {
      set_sampling_ratio(from.sampling_ratio());
    }
    if (from.has_host_custom_name()) {
      set_has_host_custom_name();
      host_custom_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_custom_name_);
    }
    if (from.has_host_tags()) {
      set_has_host_tags();
      host_tags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_tags_);
    }
    if (from.has_is_host_hidden()) {
      set_is_host_hidden(from.is_host_hidden());
    }
    if (from.has_hidden_processes()) {
      set_has_hidden_processes();
      hidden_processes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hidden_processes_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_instance_id()) {
      set_has_instance_id();
      instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_id_);
    }
    if (from.has_hostinfo()) {
      mutable_hostinfo()->::draiosproto::host::MergeFrom(from.hostinfo());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_protos()) {
      mutable_protos()->::draiosproto::proto_info::MergeFrom(from.protos());
    }
    if (from.has_kubernetes()) {
      mutable_kubernetes()->::draiosproto::k8s_state::MergeFrom(from.kubernetes());
    }
    if (from.has_mesos()) {
      mutable_mesos()->::draiosproto::mesos_state::MergeFrom(from.mesos());
    }
    if (from.has_falcobl()) {
      mutable_falcobl()->::draiosproto::falco_baseline::MergeFrom(from.falcobl());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void metrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void metrics::CopyFrom(const metrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.metrics)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool metrics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_hostinfo()) {
    if (!this->hostinfo_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->programs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ipv4_connections())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ipv4_network_interfaces())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->commands())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->mounts())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->top_files())) return false;
  if (has_protos()) {
    if (!this->protos_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->containers())) return false;
  if (has_kubernetes()) {
    if (!this->kubernetes_->IsInitialized()) return false;
  }
  if (has_mesos()) {
    if (!this->mesos_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->events())) return false;
  if (has_falcobl()) {
    if (!this->falcobl_->IsInitialized()) return false;
  }
  return true;
}

void metrics::Swap(metrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void metrics::InternalSwap(metrics* other) {
  std::swap(timestamp_ns_, other->timestamp_ns_);
  machine_id_.Swap(&other->machine_id_);
  customer_id_.Swap(&other->customer_id_);
  std::swap(sampling_ratio_, other->sampling_ratio_);
  host_custom_name_.Swap(&other->host_custom_name_);
  host_tags_.Swap(&other->host_tags_);
  std::swap(is_host_hidden_, other->is_host_hidden_);
  hidden_processes_.Swap(&other->hidden_processes_);
  version_.Swap(&other->version_);
  instance_id_.Swap(&other->instance_id_);
  std::swap(hostinfo_, other->hostinfo_);
  programs_.UnsafeArenaSwap(&other->programs_);
  ipv4_connections_.UnsafeArenaSwap(&other->ipv4_connections_);
  ipv4_network_interfaces_.UnsafeArenaSwap(&other->ipv4_network_interfaces_);
  commands_.UnsafeArenaSwap(&other->commands_);
  mounts_.UnsafeArenaSwap(&other->mounts_);
  top_files_.UnsafeArenaSwap(&other->top_files_);
  std::swap(protos_, other->protos_);
  containers_.UnsafeArenaSwap(&other->containers_);
  std::swap(kubernetes_, other->kubernetes_);
  std::swap(mesos_, other->mesos_);
  events_.UnsafeArenaSwap(&other->events_);
  std::swap(falcobl_, other->falcobl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata metrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = metrics_descriptor_;
  metadata.reflection = metrics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// metrics

// required uint64 timestamp_ns = 1;
bool metrics::has_timestamp_ns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void metrics::set_has_timestamp_ns() {
  _has_bits_[0] |= 0x00000001u;
}
void metrics::clear_has_timestamp_ns() {
  _has_bits_[0] &= ~0x00000001u;
}
void metrics::clear_timestamp_ns() {
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_ns();
}
::google::protobuf::uint64 metrics::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.timestamp_ns)
  return timestamp_ns_;
}
void metrics::set_timestamp_ns(::google::protobuf::uint64 value) {
  set_has_timestamp_ns();
  timestamp_ns_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.metrics.timestamp_ns)
}

// required string machine_id = 2;
bool metrics::has_machine_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void metrics::set_has_machine_id() {
  _has_bits_[0] |= 0x00000002u;
}
void metrics::clear_has_machine_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void metrics::clear_machine_id() {
  machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_id();
}
const ::std::string& metrics::machine_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.machine_id)
  return machine_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void metrics::set_machine_id(const ::std::string& value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.metrics.machine_id)
}
void metrics::set_machine_id(const char* value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.metrics.machine_id)
}
void metrics::set_machine_id(const char* value, size_t size) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.metrics.machine_id)
}
::std::string* metrics::mutable_machine_id() {
  set_has_machine_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.machine_id)
  return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* metrics::release_machine_id() {
  // @@protoc_insertion_point(field_release:draiosproto.metrics.machine_id)
  clear_has_machine_id();
  return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void metrics::set_allocated_machine_id(::std::string* machine_id) {
  if (machine_id != NULL) {
    set_has_machine_id();
  } else {
    clear_has_machine_id();
  }
  machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.metrics.machine_id)
}

// optional string customer_id = 3;
bool metrics::has_customer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void metrics::set_has_customer_id() {
  _has_bits_[0] |= 0x00000004u;
}
void metrics::clear_has_customer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void metrics::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customer_id();
}
const ::std::string& metrics::customer_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.customer_id)
  return customer_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void metrics::set_customer_id(const ::std::string& value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.metrics.customer_id)
}
void metrics::set_customer_id(const char* value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.metrics.customer_id)
}
void metrics::set_customer_id(const char* value, size_t size) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.metrics.customer_id)
}
::std::string* metrics::mutable_customer_id() {
  set_has_customer_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* metrics::release_customer_id() {
  // @@protoc_insertion_point(field_release:draiosproto.metrics.customer_id)
  clear_has_customer_id();
  return customer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void metrics::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != NULL) {
    set_has_customer_id();
  } else {
    clear_has_customer_id();
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.metrics.customer_id)
}

// optional uint32 sampling_ratio = 10;
bool metrics::has_sampling_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void metrics::set_has_sampling_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
void metrics::clear_has_sampling_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
void metrics::clear_sampling_ratio() {
  sampling_ratio_ = 0u;
  clear_has_sampling_ratio();
}
::google::protobuf::uint32 metrics::sampling_ratio() const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.sampling_ratio)
  return sampling_ratio_;
}
void metrics::set_sampling_ratio(::google::protobuf::uint32 value) {
  set_has_sampling_ratio();
  sampling_ratio_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.metrics.sampling_ratio)
}

// optional string host_custom_name = 11;
bool metrics::has_host_custom_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void metrics::set_has_host_custom_name() {
  _has_bits_[0] |= 0x00000010u;
}
void metrics::clear_has_host_custom_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void metrics::clear_host_custom_name() {
  host_custom_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host_custom_name();
}
const ::std::string& metrics::host_custom_name() const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.host_custom_name)
  return host_custom_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void metrics::set_host_custom_name(const ::std::string& value) {
  set_has_host_custom_name();
  host_custom_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.metrics.host_custom_name)
}
void metrics::set_host_custom_name(const char* value) {
  set_has_host_custom_name();
  host_custom_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.metrics.host_custom_name)
}
void metrics::set_host_custom_name(const char* value, size_t size) {
  set_has_host_custom_name();
  host_custom_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.metrics.host_custom_name)
}
::std::string* metrics::mutable_host_custom_name() {
  set_has_host_custom_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.host_custom_name)
  return host_custom_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* metrics::release_host_custom_name() {
  // @@protoc_insertion_point(field_release:draiosproto.metrics.host_custom_name)
  clear_has_host_custom_name();
  return host_custom_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void metrics::set_allocated_host_custom_name(::std::string* host_custom_name) {
  if (host_custom_name != NULL) {
    set_has_host_custom_name();
  } else {
    clear_has_host_custom_name();
  }
  host_custom_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_custom_name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.metrics.host_custom_name)
}

// optional string host_tags = 12;
bool metrics::has_host_tags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void metrics::set_has_host_tags() {
  _has_bits_[0] |= 0x00000020u;
}
void metrics::clear_has_host_tags() {
  _has_bits_[0] &= ~0x00000020u;
}
void metrics::clear_host_tags() {
  host_tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host_tags();
}
const ::std::string& metrics::host_tags() const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.host_tags)
  return host_tags_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void metrics::set_host_tags(const ::std::string& value) {
  set_has_host_tags();
  host_tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.metrics.host_tags)
}
void metrics::set_host_tags(const char* value) {
  set_has_host_tags();
  host_tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.metrics.host_tags)
}
void metrics::set_host_tags(const char* value, size_t size) {
  set_has_host_tags();
  host_tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.metrics.host_tags)
}
::std::string* metrics::mutable_host_tags() {
  set_has_host_tags();
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.host_tags)
  return host_tags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* metrics::release_host_tags() {
  // @@protoc_insertion_point(field_release:draiosproto.metrics.host_tags)
  clear_has_host_tags();
  return host_tags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void metrics::set_allocated_host_tags(::std::string* host_tags) {
  if (host_tags != NULL) {
    set_has_host_tags();
  } else {
    clear_has_host_tags();
  }
  host_tags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_tags);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.metrics.host_tags)
}

// optional bool is_host_hidden = 14;
bool metrics::has_is_host_hidden() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void metrics::set_has_is_host_hidden() {
  _has_bits_[0] |= 0x00000040u;
}
void metrics::clear_has_is_host_hidden() {
  _has_bits_[0] &= ~0x00000040u;
}
void metrics::clear_is_host_hidden() {
  is_host_hidden_ = false;
  clear_has_is_host_hidden();
}
bool metrics::is_host_hidden() const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.is_host_hidden)
  return is_host_hidden_;
}
void metrics::set_is_host_hidden(bool value) {
  set_has_is_host_hidden();
  is_host_hidden_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.metrics.is_host_hidden)
}

// optional string hidden_processes = 15;
bool metrics::has_hidden_processes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void metrics::set_has_hidden_processes() {
  _has_bits_[0] |= 0x00000080u;
}
void metrics::clear_has_hidden_processes() {
  _has_bits_[0] &= ~0x00000080u;
}
void metrics::clear_hidden_processes() {
  hidden_processes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hidden_processes();
}
const ::std::string& metrics::hidden_processes() const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.hidden_processes)
  return hidden_processes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void metrics::set_hidden_processes(const ::std::string& value) {
  set_has_hidden_processes();
  hidden_processes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.metrics.hidden_processes)
}
void metrics::set_hidden_processes(const char* value) {
  set_has_hidden_processes();
  hidden_processes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.metrics.hidden_processes)
}
void metrics::set_hidden_processes(const char* value, size_t size) {
  set_has_hidden_processes();
  hidden_processes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.metrics.hidden_processes)
}
::std::string* metrics::mutable_hidden_processes() {
  set_has_hidden_processes();
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.hidden_processes)
  return hidden_processes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* metrics::release_hidden_processes() {
  // @@protoc_insertion_point(field_release:draiosproto.metrics.hidden_processes)
  clear_has_hidden_processes();
  return hidden_processes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void metrics::set_allocated_hidden_processes(::std::string* hidden_processes) {
  if (hidden_processes != NULL) {
    set_has_hidden_processes();
  } else {
    clear_has_hidden_processes();
  }
  hidden_processes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hidden_processes);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.metrics.hidden_processes)
}

// optional string version = 16;
bool metrics::has_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void metrics::set_has_version() {
  _has_bits_[0] |= 0x00000100u;
}
void metrics::clear_has_version() {
  _has_bits_[0] &= ~0x00000100u;
}
void metrics::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& metrics::version() const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void metrics::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.metrics.version)
}
void metrics::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.metrics.version)
}
void metrics::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.metrics.version)
}
::std::string* metrics::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* metrics::release_version() {
  // @@protoc_insertion_point(field_release:draiosproto.metrics.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void metrics::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.metrics.version)
}

// optional string instance_id = 21;
bool metrics::has_instance_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void metrics::set_has_instance_id() {
  _has_bits_[0] |= 0x00000200u;
}
void metrics::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void metrics::clear_instance_id() {
  instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instance_id();
}
const ::std::string& metrics::instance_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.instance_id)
  return instance_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void metrics::set_instance_id(const ::std::string& value) {
  set_has_instance_id();
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.metrics.instance_id)
}
void metrics::set_instance_id(const char* value) {
  set_has_instance_id();
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.metrics.instance_id)
}
void metrics::set_instance_id(const char* value, size_t size) {
  set_has_instance_id();
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.metrics.instance_id)
}
::std::string* metrics::mutable_instance_id() {
  set_has_instance_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.instance_id)
  return instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* metrics::release_instance_id() {
  // @@protoc_insertion_point(field_release:draiosproto.metrics.instance_id)
  clear_has_instance_id();
  return instance_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void metrics::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != NULL) {
    set_has_instance_id();
  } else {
    clear_has_instance_id();
  }
  instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.metrics.instance_id)
}

// optional .draiosproto.host hostinfo = 4;
bool metrics::has_hostinfo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void metrics::set_has_hostinfo() {
  _has_bits_[0] |= 0x00000400u;
}
void metrics::clear_has_hostinfo() {
  _has_bits_[0] &= ~0x00000400u;
}
void metrics::clear_hostinfo() {
  if (hostinfo_ != NULL) hostinfo_->::draiosproto::host::Clear();
  clear_has_hostinfo();
}
const ::draiosproto::host& metrics::hostinfo() const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.hostinfo)
  return hostinfo_ != NULL ? *hostinfo_
                         : *::draiosproto::host::internal_default_instance();
}
::draiosproto::host* metrics::mutable_hostinfo() {
  set_has_hostinfo();
  if (hostinfo_ == NULL) {
    hostinfo_ = new ::draiosproto::host;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.hostinfo)
  return hostinfo_;
}
::draiosproto::host* metrics::release_hostinfo() {
  // @@protoc_insertion_point(field_release:draiosproto.metrics.hostinfo)
  clear_has_hostinfo();
  ::draiosproto::host* temp = hostinfo_;
  hostinfo_ = NULL;
  return temp;
}
void metrics::set_allocated_hostinfo(::draiosproto::host* hostinfo) {
  delete hostinfo_;
  hostinfo_ = hostinfo;
  if (hostinfo) {
    set_has_hostinfo();
  } else {
    clear_has_hostinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.metrics.hostinfo)
}

// repeated .draiosproto.program programs = 9;
int metrics::programs_size() const {
  return programs_.size();
}
void metrics::clear_programs() {
  programs_.Clear();
}
const ::draiosproto::program& metrics::programs(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.programs)
  return programs_.Get(index);
}
::draiosproto::program* metrics::mutable_programs(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.programs)
  return programs_.Mutable(index);
}
::draiosproto::program* metrics::add_programs() {
  // @@protoc_insertion_point(field_add:draiosproto.metrics.programs)
  return programs_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::program >*
metrics::mutable_programs() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.metrics.programs)
  return &programs_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::program >&
metrics::programs() const {
  // @@protoc_insertion_point(field_list:draiosproto.metrics.programs)
  return programs_;
}

// repeated .draiosproto.ipv4_connection ipv4_connections = 7;
int metrics::ipv4_connections_size() const {
  return ipv4_connections_.size();
}
void metrics::clear_ipv4_connections() {
  ipv4_connections_.Clear();
}
const ::draiosproto::ipv4_connection& metrics::ipv4_connections(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.ipv4_connections)
  return ipv4_connections_.Get(index);
}
::draiosproto::ipv4_connection* metrics::mutable_ipv4_connections(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.ipv4_connections)
  return ipv4_connections_.Mutable(index);
}
::draiosproto::ipv4_connection* metrics::add_ipv4_connections() {
  // @@protoc_insertion_point(field_add:draiosproto.metrics.ipv4_connections)
  return ipv4_connections_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::ipv4_connection >*
metrics::mutable_ipv4_connections() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.metrics.ipv4_connections)
  return &ipv4_connections_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::ipv4_connection >&
metrics::ipv4_connections() const {
  // @@protoc_insertion_point(field_list:draiosproto.metrics.ipv4_connections)
  return ipv4_connections_;
}

// repeated .draiosproto.ipv4_network_interface ipv4_network_interfaces = 8;
int metrics::ipv4_network_interfaces_size() const {
  return ipv4_network_interfaces_.size();
}
void metrics::clear_ipv4_network_interfaces() {
  ipv4_network_interfaces_.Clear();
}
const ::draiosproto::ipv4_network_interface& metrics::ipv4_network_interfaces(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.ipv4_network_interfaces)
  return ipv4_network_interfaces_.Get(index);
}
::draiosproto::ipv4_network_interface* metrics::mutable_ipv4_network_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.ipv4_network_interfaces)
  return ipv4_network_interfaces_.Mutable(index);
}
::draiosproto::ipv4_network_interface* metrics::add_ipv4_network_interfaces() {
  // @@protoc_insertion_point(field_add:draiosproto.metrics.ipv4_network_interfaces)
  return ipv4_network_interfaces_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::ipv4_network_interface >*
metrics::mutable_ipv4_network_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.metrics.ipv4_network_interfaces)
  return &ipv4_network_interfaces_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::ipv4_network_interface >&
metrics::ipv4_network_interfaces() const {
  // @@protoc_insertion_point(field_list:draiosproto.metrics.ipv4_network_interfaces)
  return ipv4_network_interfaces_;
}

// repeated .draiosproto.command_details commands = 17;
int metrics::commands_size() const {
  return commands_.size();
}
void metrics::clear_commands() {
  commands_.Clear();
}
const ::draiosproto::command_details& metrics::commands(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.commands)
  return commands_.Get(index);
}
::draiosproto::command_details* metrics::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.commands)
  return commands_.Mutable(index);
}
::draiosproto::command_details* metrics::add_commands() {
  // @@protoc_insertion_point(field_add:draiosproto.metrics.commands)
  return commands_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::command_details >*
metrics::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.metrics.commands)
  return &commands_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::command_details >&
metrics::commands() const {
  // @@protoc_insertion_point(field_list:draiosproto.metrics.commands)
  return commands_;
}

// repeated .draiosproto.mounted_fs mounts = 18;
int metrics::mounts_size() const {
  return mounts_.size();
}
void metrics::clear_mounts() {
  mounts_.Clear();
}
const ::draiosproto::mounted_fs& metrics::mounts(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.mounts)
  return mounts_.Get(index);
}
::draiosproto::mounted_fs* metrics::mutable_mounts(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.mounts)
  return mounts_.Mutable(index);
}
::draiosproto::mounted_fs* metrics::add_mounts() {
  // @@protoc_insertion_point(field_add:draiosproto.metrics.mounts)
  return mounts_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::mounted_fs >*
metrics::mutable_mounts() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.metrics.mounts)
  return &mounts_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::mounted_fs >&
metrics::mounts() const {
  // @@protoc_insertion_point(field_list:draiosproto.metrics.mounts)
  return mounts_;
}

// repeated .draiosproto.file_stat top_files = 19;
int metrics::top_files_size() const {
  return top_files_.size();
}
void metrics::clear_top_files() {
  top_files_.Clear();
}
const ::draiosproto::file_stat& metrics::top_files(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.top_files)
  return top_files_.Get(index);
}
::draiosproto::file_stat* metrics::mutable_top_files(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.top_files)
  return top_files_.Mutable(index);
}
::draiosproto::file_stat* metrics::add_top_files() {
  // @@protoc_insertion_point(field_add:draiosproto.metrics.top_files)
  return top_files_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::file_stat >*
metrics::mutable_top_files() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.metrics.top_files)
  return &top_files_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::file_stat >&
metrics::top_files() const {
  // @@protoc_insertion_point(field_list:draiosproto.metrics.top_files)
  return top_files_;
}

// optional .draiosproto.proto_info protos = 20;
bool metrics::has_protos() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void metrics::set_has_protos() {
  _has_bits_[0] |= 0x00020000u;
}
void metrics::clear_has_protos() {
  _has_bits_[0] &= ~0x00020000u;
}
void metrics::clear_protos() {
  if (protos_ != NULL) protos_->::draiosproto::proto_info::Clear();
  clear_has_protos();
}
const ::draiosproto::proto_info& metrics::protos() const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.protos)
  return protos_ != NULL ? *protos_
                         : *::draiosproto::proto_info::internal_default_instance();
}
::draiosproto::proto_info* metrics::mutable_protos() {
  set_has_protos();
  if (protos_ == NULL) {
    protos_ = new ::draiosproto::proto_info;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.protos)
  return protos_;
}
::draiosproto::proto_info* metrics::release_protos() {
  // @@protoc_insertion_point(field_release:draiosproto.metrics.protos)
  clear_has_protos();
  ::draiosproto::proto_info* temp = protos_;
  protos_ = NULL;
  return temp;
}
void metrics::set_allocated_protos(::draiosproto::proto_info* protos) {
  delete protos_;
  protos_ = protos;
  if (protos) {
    set_has_protos();
  } else {
    clear_has_protos();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.metrics.protos)
}

// repeated .draiosproto.container containers = 22;
int metrics::containers_size() const {
  return containers_.size();
}
void metrics::clear_containers() {
  containers_.Clear();
}
const ::draiosproto::container& metrics::containers(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.containers)
  return containers_.Get(index);
}
::draiosproto::container* metrics::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.containers)
  return containers_.Mutable(index);
}
::draiosproto::container* metrics::add_containers() {
  // @@protoc_insertion_point(field_add:draiosproto.metrics.containers)
  return containers_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::container >*
metrics::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.metrics.containers)
  return &containers_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::container >&
metrics::containers() const {
  // @@protoc_insertion_point(field_list:draiosproto.metrics.containers)
  return containers_;
}

// optional .draiosproto.k8s_state kubernetes = 24;
bool metrics::has_kubernetes() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void metrics::set_has_kubernetes() {
  _has_bits_[0] |= 0x00080000u;
}
void metrics::clear_has_kubernetes() {
  _has_bits_[0] &= ~0x00080000u;
}
void metrics::clear_kubernetes() {
  if (kubernetes_ != NULL) kubernetes_->::draiosproto::k8s_state::Clear();
  clear_has_kubernetes();
}
const ::draiosproto::k8s_state& metrics::kubernetes() const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.kubernetes)
  return kubernetes_ != NULL ? *kubernetes_
                         : *::draiosproto::k8s_state::internal_default_instance();
}
::draiosproto::k8s_state* metrics::mutable_kubernetes() {
  set_has_kubernetes();
  if (kubernetes_ == NULL) {
    kubernetes_ = new ::draiosproto::k8s_state;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.kubernetes)
  return kubernetes_;
}
::draiosproto::k8s_state* metrics::release_kubernetes() {
  // @@protoc_insertion_point(field_release:draiosproto.metrics.kubernetes)
  clear_has_kubernetes();
  ::draiosproto::k8s_state* temp = kubernetes_;
  kubernetes_ = NULL;
  return temp;
}
void metrics::set_allocated_kubernetes(::draiosproto::k8s_state* kubernetes) {
  delete kubernetes_;
  kubernetes_ = kubernetes;
  if (kubernetes) {
    set_has_kubernetes();
  } else {
    clear_has_kubernetes();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.metrics.kubernetes)
}

// optional .draiosproto.mesos_state mesos = 25;
bool metrics::has_mesos() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void metrics::set_has_mesos() {
  _has_bits_[0] |= 0x00100000u;
}
void metrics::clear_has_mesos() {
  _has_bits_[0] &= ~0x00100000u;
}
void metrics::clear_mesos() {
  if (mesos_ != NULL) mesos_->::draiosproto::mesos_state::Clear();
  clear_has_mesos();
}
const ::draiosproto::mesos_state& metrics::mesos() const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.mesos)
  return mesos_ != NULL ? *mesos_
                         : *::draiosproto::mesos_state::internal_default_instance();
}
::draiosproto::mesos_state* metrics::mutable_mesos() {
  set_has_mesos();
  if (mesos_ == NULL) {
    mesos_ = new ::draiosproto::mesos_state;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.mesos)
  return mesos_;
}
::draiosproto::mesos_state* metrics::release_mesos() {
  // @@protoc_insertion_point(field_release:draiosproto.metrics.mesos)
  clear_has_mesos();
  ::draiosproto::mesos_state* temp = mesos_;
  mesos_ = NULL;
  return temp;
}
void metrics::set_allocated_mesos(::draiosproto::mesos_state* mesos) {
  delete mesos_;
  mesos_ = mesos;
  if (mesos) {
    set_has_mesos();
  } else {
    clear_has_mesos();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.metrics.mesos)
}

// repeated .draiosproto.agent_event events = 26;
int metrics::events_size() const {
  return events_.size();
}
void metrics::clear_events() {
  events_.Clear();
}
const ::draiosproto::agent_event& metrics::events(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.events)
  return events_.Get(index);
}
::draiosproto::agent_event* metrics::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.events)
  return events_.Mutable(index);
}
::draiosproto::agent_event* metrics::add_events() {
  // @@protoc_insertion_point(field_add:draiosproto.metrics.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::agent_event >*
metrics::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.metrics.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::agent_event >&
metrics::events() const {
  // @@protoc_insertion_point(field_list:draiosproto.metrics.events)
  return events_;
}

// optional .draiosproto.falco_baseline falcobl = 27;
bool metrics::has_falcobl() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void metrics::set_has_falcobl() {
  _has_bits_[0] |= 0x00400000u;
}
void metrics::clear_has_falcobl() {
  _has_bits_[0] &= ~0x00400000u;
}
void metrics::clear_falcobl() {
  if (falcobl_ != NULL) falcobl_->::draiosproto::falco_baseline::Clear();
  clear_has_falcobl();
}
const ::draiosproto::falco_baseline& metrics::falcobl() const {
  // @@protoc_insertion_point(field_get:draiosproto.metrics.falcobl)
  return falcobl_ != NULL ? *falcobl_
                         : *::draiosproto::falco_baseline::internal_default_instance();
}
::draiosproto::falco_baseline* metrics::mutable_falcobl() {
  set_has_falcobl();
  if (falcobl_ == NULL) {
    falcobl_ = new ::draiosproto::falco_baseline;
  }
  // @@protoc_insertion_point(field_mutable:draiosproto.metrics.falcobl)
  return falcobl_;
}
::draiosproto::falco_baseline* metrics::release_falcobl() {
  // @@protoc_insertion_point(field_release:draiosproto.metrics.falcobl)
  clear_has_falcobl();
  ::draiosproto::falco_baseline* temp = falcobl_;
  falcobl_ = NULL;
  return temp;
}
void metrics::set_allocated_falcobl(::draiosproto::falco_baseline* falcobl) {
  delete falcobl_;
  falcobl_ = falcobl;
  if (falcobl) {
    set_has_falcobl();
  } else {
    clear_has_falcobl();
  }
  // @@protoc_insertion_point(field_set_allocated:draiosproto.metrics.falcobl)
}

inline const metrics* metrics::internal_default_instance() {
  return &metrics_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dump_request_start::kTimestampNsFieldNumber;
const int dump_request_start::kMachineIdFieldNumber;
const int dump_request_start::kCustomerIdFieldNumber;
const int dump_request_start::kDurationNsFieldNumber;
const int dump_request_start::kFiltersFieldNumber;
const int dump_request_start::kMaxSizeFieldNumber;
const int dump_request_start::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dump_request_start::dump_request_start()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.dump_request_start)
}

void dump_request_start::InitAsDefaultInstance() {
}

dump_request_start::dump_request_start(const dump_request_start& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.dump_request_start)
}

void dump_request_start::SharedCtor() {
  _cached_size_ = 0;
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ns_, 0, reinterpret_cast<char*>(&max_size_) -
    reinterpret_cast<char*>(&timestamp_ns_) + sizeof(max_size_));
}

dump_request_start::~dump_request_start() {
  // @@protoc_insertion_point(destructor:draiosproto.dump_request_start)
  SharedDtor();
}

void dump_request_start::SharedDtor() {
  machine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void dump_request_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dump_request_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dump_request_start_descriptor_;
}

const dump_request_start& dump_request_start::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<dump_request_start> dump_request_start_default_instance_;

dump_request_start* dump_request_start::New(::google::protobuf::Arena* arena) const {
  dump_request_start* n = new dump_request_start;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dump_request_start::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.dump_request_start)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(dump_request_start, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<dump_request_start*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(timestamp_ns_, max_size_);
    if (has_machine_id()) {
      machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_customer_id()) {
      customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_filters()) {
      filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool dump_request_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.dump_request_start)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (tag == 8) {
          set_has_timestamp_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (tag == 18) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.dump_request_start.machine_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (tag == 26) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.dump_request_start.customer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_duration_ns;
        break;
      }

      // optional uint64 duration_ns = 4;
      case 4: {
        if (tag == 32) {
         parse_duration_ns:
          set_has_duration_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_ns_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_filters;
        break;
      }

      // optional string filters = 5;
      case 5: {
        if (tag == 42) {
         parse_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filters().data(), this->filters().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.dump_request_start.filters");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_token;
        break;
      }

      // required string token = 6;
      case 6: {
        if (tag == 50) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.dump_request_start.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_size;
        break;
      }

      // optional uint64 max_size = 7;
      case 7: {
        if (tag == 56) {
         parse_max_size:
          set_has_max_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.dump_request_start)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.dump_request_start)
  return false;
#undef DO_
}

void dump_request_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.dump_request_start)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_request_start.machine_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_request_start.customer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->customer_id(), output);
  }

  // optional uint64 duration_ns = 4;
  if (has_duration_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->duration_ns(), output);
  }

  // optional string filters = 5;
  if (has_filters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filters().data(), this->filters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_request_start.filters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->filters(), output);
  }

  // required string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_request_start.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->token(), output);
  }

  // optional uint64 max_size = 7;
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->max_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.dump_request_start)
}

::google::protobuf::uint8* dump_request_start::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.dump_request_start)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_request_start.machine_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_request_start.customer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // optional uint64 duration_ns = 4;
  if (has_duration_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->duration_ns(), target);
  }

  // optional string filters = 5;
  if (has_filters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filters().data(), this->filters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_request_start.filters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filters(), target);
  }

  // required string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_request_start.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->token(), target);
  }

  // optional uint64 max_size = 7;
  if (has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->max_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.dump_request_start)
  return target;
}

size_t dump_request_start::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.dump_request_start)
  size_t total_size = 0;

  if (has_timestamp_ns()) {
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());
  }

  if (has_machine_id()) {
    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());
  }

  if (has_token()) {
    // required string token = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  return total_size;
}
size_t dump_request_start::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.dump_request_start)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000043) ^ 0x00000043) == 0) {  // All required fields are present.
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());

    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());

    // required string token = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 60u) {
    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // optional uint64 duration_ns = 4;
    if (has_duration_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duration_ns());
    }

    // optional string filters = 5;
    if (has_filters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filters());
    }

    // optional uint64 max_size = 7;
    if (has_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_size());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dump_request_start::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.dump_request_start)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const dump_request_start* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dump_request_start>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.dump_request_start)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.dump_request_start)
    UnsafeMergeFrom(*source);
  }
}

void dump_request_start::MergeFrom(const dump_request_start& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.dump_request_start)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void dump_request_start::UnsafeMergeFrom(const dump_request_start& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_has_machine_id();
      machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
    }
    if (from.has_customer_id()) {
      set_has_customer_id();
      customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
    }
    if (from.has_duration_ns()) {
      set_duration_ns(from.duration_ns());
    }
    if (from.has_filters()) {
      set_has_filters();
      filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
    }
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void dump_request_start::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.dump_request_start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dump_request_start::CopyFrom(const dump_request_start& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.dump_request_start)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool dump_request_start::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000043) != 0x00000043) return false;

  return true;
}

void dump_request_start::Swap(dump_request_start* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dump_request_start::InternalSwap(dump_request_start* other) {
  std::swap(timestamp_ns_, other->timestamp_ns_);
  machine_id_.Swap(&other->machine_id_);
  customer_id_.Swap(&other->customer_id_);
  std::swap(duration_ns_, other->duration_ns_);
  filters_.Swap(&other->filters_);
  std::swap(max_size_, other->max_size_);
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dump_request_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dump_request_start_descriptor_;
  metadata.reflection = dump_request_start_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dump_request_start

// required uint64 timestamp_ns = 1;
bool dump_request_start::has_timestamp_ns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void dump_request_start::set_has_timestamp_ns() {
  _has_bits_[0] |= 0x00000001u;
}
void dump_request_start::clear_has_timestamp_ns() {
  _has_bits_[0] &= ~0x00000001u;
}
void dump_request_start::clear_timestamp_ns() {
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_ns();
}
::google::protobuf::uint64 dump_request_start::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_request_start.timestamp_ns)
  return timestamp_ns_;
}
void dump_request_start::set_timestamp_ns(::google::protobuf::uint64 value) {
  set_has_timestamp_ns();
  timestamp_ns_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.dump_request_start.timestamp_ns)
}

// required string machine_id = 2;
bool dump_request_start::has_machine_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void dump_request_start::set_has_machine_id() {
  _has_bits_[0] |= 0x00000002u;
}
void dump_request_start::clear_has_machine_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void dump_request_start::clear_machine_id() {
  machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_id();
}
const ::std::string& dump_request_start::machine_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_request_start.machine_id)
  return machine_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_request_start::set_machine_id(const ::std::string& value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.dump_request_start.machine_id)
}
void dump_request_start::set_machine_id(const char* value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.dump_request_start.machine_id)
}
void dump_request_start::set_machine_id(const char* value, size_t size) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.dump_request_start.machine_id)
}
::std::string* dump_request_start::mutable_machine_id() {
  set_has_machine_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.dump_request_start.machine_id)
  return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dump_request_start::release_machine_id() {
  // @@protoc_insertion_point(field_release:draiosproto.dump_request_start.machine_id)
  clear_has_machine_id();
  return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_request_start::set_allocated_machine_id(::std::string* machine_id) {
  if (machine_id != NULL) {
    set_has_machine_id();
  } else {
    clear_has_machine_id();
  }
  machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.dump_request_start.machine_id)
}

// optional string customer_id = 3;
bool dump_request_start::has_customer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void dump_request_start::set_has_customer_id() {
  _has_bits_[0] |= 0x00000004u;
}
void dump_request_start::clear_has_customer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void dump_request_start::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customer_id();
}
const ::std::string& dump_request_start::customer_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_request_start.customer_id)
  return customer_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_request_start::set_customer_id(const ::std::string& value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.dump_request_start.customer_id)
}
void dump_request_start::set_customer_id(const char* value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.dump_request_start.customer_id)
}
void dump_request_start::set_customer_id(const char* value, size_t size) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.dump_request_start.customer_id)
}
::std::string* dump_request_start::mutable_customer_id() {
  set_has_customer_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.dump_request_start.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dump_request_start::release_customer_id() {
  // @@protoc_insertion_point(field_release:draiosproto.dump_request_start.customer_id)
  clear_has_customer_id();
  return customer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_request_start::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != NULL) {
    set_has_customer_id();
  } else {
    clear_has_customer_id();
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.dump_request_start.customer_id)
}

// optional uint64 duration_ns = 4;
bool dump_request_start::has_duration_ns() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void dump_request_start::set_has_duration_ns() {
  _has_bits_[0] |= 0x00000008u;
}
void dump_request_start::clear_has_duration_ns() {
  _has_bits_[0] &= ~0x00000008u;
}
void dump_request_start::clear_duration_ns() {
  duration_ns_ = GOOGLE_ULONGLONG(0);
  clear_has_duration_ns();
}
::google::protobuf::uint64 dump_request_start::duration_ns() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_request_start.duration_ns)
  return duration_ns_;
}
void dump_request_start::set_duration_ns(::google::protobuf::uint64 value) {
  set_has_duration_ns();
  duration_ns_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.dump_request_start.duration_ns)
}

// optional string filters = 5;
bool dump_request_start::has_filters() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void dump_request_start::set_has_filters() {
  _has_bits_[0] |= 0x00000010u;
}
void dump_request_start::clear_has_filters() {
  _has_bits_[0] &= ~0x00000010u;
}
void dump_request_start::clear_filters() {
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filters();
}
const ::std::string& dump_request_start::filters() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_request_start.filters)
  return filters_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_request_start::set_filters(const ::std::string& value) {
  set_has_filters();
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.dump_request_start.filters)
}
void dump_request_start::set_filters(const char* value) {
  set_has_filters();
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.dump_request_start.filters)
}
void dump_request_start::set_filters(const char* value, size_t size) {
  set_has_filters();
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.dump_request_start.filters)
}
::std::string* dump_request_start::mutable_filters() {
  set_has_filters();
  // @@protoc_insertion_point(field_mutable:draiosproto.dump_request_start.filters)
  return filters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dump_request_start::release_filters() {
  // @@protoc_insertion_point(field_release:draiosproto.dump_request_start.filters)
  clear_has_filters();
  return filters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_request_start::set_allocated_filters(::std::string* filters) {
  if (filters != NULL) {
    set_has_filters();
  } else {
    clear_has_filters();
  }
  filters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filters);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.dump_request_start.filters)
}

// optional uint64 max_size = 7;
bool dump_request_start::has_max_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void dump_request_start::set_has_max_size() {
  _has_bits_[0] |= 0x00000020u;
}
void dump_request_start::clear_has_max_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void dump_request_start::clear_max_size() {
  max_size_ = GOOGLE_ULONGLONG(0);
  clear_has_max_size();
}
::google::protobuf::uint64 dump_request_start::max_size() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_request_start.max_size)
  return max_size_;
}
void dump_request_start::set_max_size(::google::protobuf::uint64 value) {
  set_has_max_size();
  max_size_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.dump_request_start.max_size)
}

// required string token = 6;
bool dump_request_start::has_token() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void dump_request_start::set_has_token() {
  _has_bits_[0] |= 0x00000040u;
}
void dump_request_start::clear_has_token() {
  _has_bits_[0] &= ~0x00000040u;
}
void dump_request_start::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& dump_request_start::token() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_request_start.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_request_start::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.dump_request_start.token)
}
void dump_request_start::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.dump_request_start.token)
}
void dump_request_start::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.dump_request_start.token)
}
::std::string* dump_request_start::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:draiosproto.dump_request_start.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dump_request_start::release_token() {
  // @@protoc_insertion_point(field_release:draiosproto.dump_request_start.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_request_start::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.dump_request_start.token)
}

inline const dump_request_start* dump_request_start::internal_default_instance() {
  return &dump_request_start_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dump_request_stop::kTimestampNsFieldNumber;
const int dump_request_stop::kMachineIdFieldNumber;
const int dump_request_stop::kCustomerIdFieldNumber;
const int dump_request_stop::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dump_request_stop::dump_request_stop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.dump_request_stop)
}

void dump_request_stop::InitAsDefaultInstance() {
}

dump_request_stop::dump_request_stop(const dump_request_stop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.dump_request_stop)
}

void dump_request_stop::SharedCtor() {
  _cached_size_ = 0;
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
}

dump_request_stop::~dump_request_stop() {
  // @@protoc_insertion_point(destructor:draiosproto.dump_request_stop)
  SharedDtor();
}

void dump_request_stop::SharedDtor() {
  machine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void dump_request_stop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dump_request_stop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dump_request_stop_descriptor_;
}

const dump_request_stop& dump_request_stop::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<dump_request_stop> dump_request_stop_default_instance_;

dump_request_stop* dump_request_stop::New(::google::protobuf::Arena* arena) const {
  dump_request_stop* n = new dump_request_stop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dump_request_stop::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.dump_request_stop)
  if (_has_bits_[0 / 32] & 15u) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_customer_id()) {
      customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool dump_request_stop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.dump_request_stop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (tag == 8) {
          set_has_timestamp_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (tag == 18) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.dump_request_stop.machine_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (tag == 26) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.dump_request_stop.customer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // required string token = 4;
      case 4: {
        if (tag == 34) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.dump_request_stop.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.dump_request_stop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.dump_request_stop)
  return false;
#undef DO_
}

void dump_request_stop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.dump_request_stop)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_request_stop.machine_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_request_stop.customer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->customer_id(), output);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_request_stop.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.dump_request_stop)
}

::google::protobuf::uint8* dump_request_stop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.dump_request_stop)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_request_stop.machine_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_request_stop.customer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_request_stop.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.dump_request_stop)
  return target;
}

size_t dump_request_stop::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.dump_request_stop)
  size_t total_size = 0;

  if (has_timestamp_ns()) {
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());
  }

  if (has_machine_id()) {
    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());
  }

  if (has_token()) {
    // required string token = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  return total_size;
}
size_t dump_request_stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.dump_request_stop)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());

    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());

    // required string token = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string customer_id = 3;
  if (has_customer_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->customer_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dump_request_stop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.dump_request_stop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const dump_request_stop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dump_request_stop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.dump_request_stop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.dump_request_stop)
    UnsafeMergeFrom(*source);
  }
}

void dump_request_stop::MergeFrom(const dump_request_stop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.dump_request_stop)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void dump_request_stop::UnsafeMergeFrom(const dump_request_stop& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_has_machine_id();
      machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
    }
    if (from.has_customer_id()) {
      set_has_customer_id();
      customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void dump_request_stop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.dump_request_stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dump_request_stop::CopyFrom(const dump_request_stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.dump_request_stop)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool dump_request_stop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void dump_request_stop::Swap(dump_request_stop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dump_request_stop::InternalSwap(dump_request_stop* other) {
  std::swap(timestamp_ns_, other->timestamp_ns_);
  machine_id_.Swap(&other->machine_id_);
  customer_id_.Swap(&other->customer_id_);
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dump_request_stop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dump_request_stop_descriptor_;
  metadata.reflection = dump_request_stop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dump_request_stop

// required uint64 timestamp_ns = 1;
bool dump_request_stop::has_timestamp_ns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void dump_request_stop::set_has_timestamp_ns() {
  _has_bits_[0] |= 0x00000001u;
}
void dump_request_stop::clear_has_timestamp_ns() {
  _has_bits_[0] &= ~0x00000001u;
}
void dump_request_stop::clear_timestamp_ns() {
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_ns();
}
::google::protobuf::uint64 dump_request_stop::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_request_stop.timestamp_ns)
  return timestamp_ns_;
}
void dump_request_stop::set_timestamp_ns(::google::protobuf::uint64 value) {
  set_has_timestamp_ns();
  timestamp_ns_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.dump_request_stop.timestamp_ns)
}

// required string machine_id = 2;
bool dump_request_stop::has_machine_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void dump_request_stop::set_has_machine_id() {
  _has_bits_[0] |= 0x00000002u;
}
void dump_request_stop::clear_has_machine_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void dump_request_stop::clear_machine_id() {
  machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_id();
}
const ::std::string& dump_request_stop::machine_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_request_stop.machine_id)
  return machine_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_request_stop::set_machine_id(const ::std::string& value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.dump_request_stop.machine_id)
}
void dump_request_stop::set_machine_id(const char* value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.dump_request_stop.machine_id)
}
void dump_request_stop::set_machine_id(const char* value, size_t size) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.dump_request_stop.machine_id)
}
::std::string* dump_request_stop::mutable_machine_id() {
  set_has_machine_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.dump_request_stop.machine_id)
  return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dump_request_stop::release_machine_id() {
  // @@protoc_insertion_point(field_release:draiosproto.dump_request_stop.machine_id)
  clear_has_machine_id();
  return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_request_stop::set_allocated_machine_id(::std::string* machine_id) {
  if (machine_id != NULL) {
    set_has_machine_id();
  } else {
    clear_has_machine_id();
  }
  machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.dump_request_stop.machine_id)
}

// optional string customer_id = 3;
bool dump_request_stop::has_customer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void dump_request_stop::set_has_customer_id() {
  _has_bits_[0] |= 0x00000004u;
}
void dump_request_stop::clear_has_customer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void dump_request_stop::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customer_id();
}
const ::std::string& dump_request_stop::customer_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_request_stop.customer_id)
  return customer_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_request_stop::set_customer_id(const ::std::string& value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.dump_request_stop.customer_id)
}
void dump_request_stop::set_customer_id(const char* value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.dump_request_stop.customer_id)
}
void dump_request_stop::set_customer_id(const char* value, size_t size) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.dump_request_stop.customer_id)
}
::std::string* dump_request_stop::mutable_customer_id() {
  set_has_customer_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.dump_request_stop.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dump_request_stop::release_customer_id() {
  // @@protoc_insertion_point(field_release:draiosproto.dump_request_stop.customer_id)
  clear_has_customer_id();
  return customer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_request_stop::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != NULL) {
    set_has_customer_id();
  } else {
    clear_has_customer_id();
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.dump_request_stop.customer_id)
}

// required string token = 4;
bool dump_request_stop::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void dump_request_stop::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
void dump_request_stop::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
void dump_request_stop::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& dump_request_stop::token() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_request_stop.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_request_stop::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.dump_request_stop.token)
}
void dump_request_stop::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.dump_request_stop.token)
}
void dump_request_stop::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.dump_request_stop.token)
}
::std::string* dump_request_stop::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:draiosproto.dump_request_stop.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dump_request_stop::release_token() {
  // @@protoc_insertion_point(field_release:draiosproto.dump_request_stop.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_request_stop::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.dump_request_stop.token)
}

inline const dump_request_stop* dump_request_stop::internal_default_instance() {
  return &dump_request_stop_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dump_response::kTimestampNsFieldNumber;
const int dump_response::kMachineIdFieldNumber;
const int dump_response::kCustomerIdFieldNumber;
const int dump_response::kChunkNoFieldNumber;
const int dump_response::kFinalChunkFieldNumber;
const int dump_response::kKeepAliveFieldNumber;
const int dump_response::kContentFieldNumber;
const int dump_response::kFinalSizeBytesFieldNumber;
const int dump_response::kErrorFieldNumber;
const int dump_response::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dump_response::dump_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.dump_response)
}

void dump_response::InitAsDefaultInstance() {
}

dump_response::dump_response(const dump_response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.dump_response)
}

void dump_response::SharedCtor() {
  _cached_size_ = 0;
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ns_, 0, reinterpret_cast<char*>(&final_size_bytes_) -
    reinterpret_cast<char*>(&timestamp_ns_) + sizeof(final_size_bytes_));
}

dump_response::~dump_response() {
  // @@protoc_insertion_point(destructor:draiosproto.dump_response)
  SharedDtor();
}

void dump_response::SharedDtor() {
  machine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void dump_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dump_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dump_response_descriptor_;
}

const dump_response& dump_response::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<dump_response> dump_response_default_instance_;

dump_response* dump_response::New(::google::protobuf::Arena* arena) const {
  dump_response* n = new dump_response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dump_response::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.dump_response)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(dump_response, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<dump_response*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(timestamp_ns_, final_size_bytes_);
    if (has_machine_id()) {
      machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_customer_id()) {
      customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_content()) {
      content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_error()) {
      error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool dump_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.dump_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (tag == 8) {
          set_has_timestamp_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (tag == 18) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.dump_response.machine_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (tag == 26) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.dump_response.customer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }

      // optional string error = 5;
      case 5: {
        if (tag == 42) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.dump_response.error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_token;
        break;
      }

      // required string token = 6;
      case 6: {
        if (tag == 50) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.dump_response.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_chunk_no;
        break;
      }

      // optional uint32 chunk_no = 7;
      case 7: {
        if (tag == 56) {
         parse_chunk_no:
          set_has_chunk_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunk_no_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_final_chunk;
        break;
      }

      // optional bool final_chunk = 8;
      case 8: {
        if (tag == 64) {
         parse_final_chunk:
          set_has_final_chunk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &final_chunk_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_keep_alive;
        break;
      }

      // optional bool keep_alive = 9;
      case 9: {
        if (tag == 72) {
         parse_keep_alive:
          set_has_keep_alive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_alive_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_final_size_bytes;
        break;
      }

      // optional uint64 final_size_bytes = 10;
      case 10: {
        if (tag == 80) {
         parse_final_size_bytes:
          set_has_final_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &final_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.dump_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.dump_response)
  return false;
#undef DO_
}

void dump_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.dump_response)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_response.machine_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_response.customer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->customer_id(), output);
  }

  // optional bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  // optional string error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_response.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->error(), output);
  }

  // required string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_response.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->token(), output);
  }

  // optional uint32 chunk_no = 7;
  if (has_chunk_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->chunk_no(), output);
  }

  // optional bool final_chunk = 8;
  if (has_final_chunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->final_chunk(), output);
  }

  // optional bool keep_alive = 9;
  if (has_keep_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->keep_alive(), output);
  }

  // optional uint64 final_size_bytes = 10;
  if (has_final_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->final_size_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.dump_response)
}

::google::protobuf::uint8* dump_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.dump_response)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_response.machine_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_response.customer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // optional bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // optional string error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_response.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error(), target);
  }

  // required string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dump_response.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->token(), target);
  }

  // optional uint32 chunk_no = 7;
  if (has_chunk_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->chunk_no(), target);
  }

  // optional bool final_chunk = 8;
  if (has_final_chunk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->final_chunk(), target);
  }

  // optional bool keep_alive = 9;
  if (has_keep_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->keep_alive(), target);
  }

  // optional uint64 final_size_bytes = 10;
  if (has_final_size_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->final_size_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.dump_response)
  return target;
}

size_t dump_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.dump_response)
  size_t total_size = 0;

  if (has_timestamp_ns()) {
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());
  }

  if (has_machine_id()) {
    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());
  }

  if (has_token()) {
    // required string token = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  return total_size;
}
size_t dump_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.dump_response)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000203) ^ 0x00000203) == 0) {  // All required fields are present.
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());

    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());

    // required string token = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 252u) {
    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // optional uint32 chunk_no = 7;
    if (has_chunk_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chunk_no());
    }

    // optional bool final_chunk = 8;
    if (has_final_chunk()) {
      total_size += 1 + 1;
    }

    // optional bool keep_alive = 9;
    if (has_keep_alive()) {
      total_size += 1 + 1;
    }

    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional uint64 final_size_bytes = 10;
    if (has_final_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->final_size_bytes());
    }

  }
  // optional string error = 5;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dump_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.dump_response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const dump_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dump_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.dump_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.dump_response)
    UnsafeMergeFrom(*source);
  }
}

void dump_response::MergeFrom(const dump_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.dump_response)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void dump_response::UnsafeMergeFrom(const dump_response& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_has_machine_id();
      machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
    }
    if (from.has_customer_id()) {
      set_has_customer_id();
      customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
    }
    if (from.has_chunk_no()) {
      set_chunk_no(from.chunk_no());
    }
    if (from.has_final_chunk()) {
      set_final_chunk(from.final_chunk());
    }
    if (from.has_keep_alive()) {
      set_keep_alive(from.keep_alive());
    }
    if (from.has_content()) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (from.has_final_size_bytes()) {
      set_final_size_bytes(from.final_size_bytes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_error()) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void dump_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.dump_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dump_response::CopyFrom(const dump_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.dump_response)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool dump_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000203) != 0x00000203) return false;

  return true;
}

void dump_response::Swap(dump_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dump_response::InternalSwap(dump_response* other) {
  std::swap(timestamp_ns_, other->timestamp_ns_);
  machine_id_.Swap(&other->machine_id_);
  customer_id_.Swap(&other->customer_id_);
  std::swap(chunk_no_, other->chunk_no_);
  std::swap(final_chunk_, other->final_chunk_);
  std::swap(keep_alive_, other->keep_alive_);
  content_.Swap(&other->content_);
  std::swap(final_size_bytes_, other->final_size_bytes_);
  error_.Swap(&other->error_);
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dump_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dump_response_descriptor_;
  metadata.reflection = dump_response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dump_response

// required uint64 timestamp_ns = 1;
bool dump_response::has_timestamp_ns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void dump_response::set_has_timestamp_ns() {
  _has_bits_[0] |= 0x00000001u;
}
void dump_response::clear_has_timestamp_ns() {
  _has_bits_[0] &= ~0x00000001u;
}
void dump_response::clear_timestamp_ns() {
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_ns();
}
::google::protobuf::uint64 dump_response::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_response.timestamp_ns)
  return timestamp_ns_;
}
void dump_response::set_timestamp_ns(::google::protobuf::uint64 value) {
  set_has_timestamp_ns();
  timestamp_ns_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.dump_response.timestamp_ns)
}

// required string machine_id = 2;
bool dump_response::has_machine_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void dump_response::set_has_machine_id() {
  _has_bits_[0] |= 0x00000002u;
}
void dump_response::clear_has_machine_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void dump_response::clear_machine_id() {
  machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_id();
}
const ::std::string& dump_response::machine_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_response.machine_id)
  return machine_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_response::set_machine_id(const ::std::string& value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.dump_response.machine_id)
}
void dump_response::set_machine_id(const char* value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.dump_response.machine_id)
}
void dump_response::set_machine_id(const char* value, size_t size) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.dump_response.machine_id)
}
::std::string* dump_response::mutable_machine_id() {
  set_has_machine_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.dump_response.machine_id)
  return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dump_response::release_machine_id() {
  // @@protoc_insertion_point(field_release:draiosproto.dump_response.machine_id)
  clear_has_machine_id();
  return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_response::set_allocated_machine_id(::std::string* machine_id) {
  if (machine_id != NULL) {
    set_has_machine_id();
  } else {
    clear_has_machine_id();
  }
  machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.dump_response.machine_id)
}

// optional string customer_id = 3;
bool dump_response::has_customer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void dump_response::set_has_customer_id() {
  _has_bits_[0] |= 0x00000004u;
}
void dump_response::clear_has_customer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void dump_response::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customer_id();
}
const ::std::string& dump_response::customer_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_response.customer_id)
  return customer_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_response::set_customer_id(const ::std::string& value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.dump_response.customer_id)
}
void dump_response::set_customer_id(const char* value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.dump_response.customer_id)
}
void dump_response::set_customer_id(const char* value, size_t size) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.dump_response.customer_id)
}
::std::string* dump_response::mutable_customer_id() {
  set_has_customer_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.dump_response.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dump_response::release_customer_id() {
  // @@protoc_insertion_point(field_release:draiosproto.dump_response.customer_id)
  clear_has_customer_id();
  return customer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_response::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != NULL) {
    set_has_customer_id();
  } else {
    clear_has_customer_id();
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.dump_response.customer_id)
}

// optional uint32 chunk_no = 7;
bool dump_response::has_chunk_no() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void dump_response::set_has_chunk_no() {
  _has_bits_[0] |= 0x00000008u;
}
void dump_response::clear_has_chunk_no() {
  _has_bits_[0] &= ~0x00000008u;
}
void dump_response::clear_chunk_no() {
  chunk_no_ = 0u;
  clear_has_chunk_no();
}
::google::protobuf::uint32 dump_response::chunk_no() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_response.chunk_no)
  return chunk_no_;
}
void dump_response::set_chunk_no(::google::protobuf::uint32 value) {
  set_has_chunk_no();
  chunk_no_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.dump_response.chunk_no)
}

// optional bool final_chunk = 8;
bool dump_response::has_final_chunk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void dump_response::set_has_final_chunk() {
  _has_bits_[0] |= 0x00000010u;
}
void dump_response::clear_has_final_chunk() {
  _has_bits_[0] &= ~0x00000010u;
}
void dump_response::clear_final_chunk() {
  final_chunk_ = false;
  clear_has_final_chunk();
}
bool dump_response::final_chunk() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_response.final_chunk)
  return final_chunk_;
}
void dump_response::set_final_chunk(bool value) {
  set_has_final_chunk();
  final_chunk_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.dump_response.final_chunk)
}

// optional bool keep_alive = 9;
bool dump_response::has_keep_alive() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void dump_response::set_has_keep_alive() {
  _has_bits_[0] |= 0x00000020u;
}
void dump_response::clear_has_keep_alive() {
  _has_bits_[0] &= ~0x00000020u;
}
void dump_response::clear_keep_alive() {
  keep_alive_ = false;
  clear_has_keep_alive();
}
bool dump_response::keep_alive() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_response.keep_alive)
  return keep_alive_;
}
void dump_response::set_keep_alive(bool value) {
  set_has_keep_alive();
  keep_alive_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.dump_response.keep_alive)
}

// optional bytes content = 4;
bool dump_response::has_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void dump_response::set_has_content() {
  _has_bits_[0] |= 0x00000040u;
}
void dump_response::clear_has_content() {
  _has_bits_[0] &= ~0x00000040u;
}
void dump_response::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& dump_response::content() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_response.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_response::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.dump_response.content)
}
void dump_response::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.dump_response.content)
}
void dump_response::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.dump_response.content)
}
::std::string* dump_response::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:draiosproto.dump_response.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dump_response::release_content() {
  // @@protoc_insertion_point(field_release:draiosproto.dump_response.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_response::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.dump_response.content)
}

// optional uint64 final_size_bytes = 10;
bool dump_response::has_final_size_bytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void dump_response::set_has_final_size_bytes() {
  _has_bits_[0] |= 0x00000080u;
}
void dump_response::clear_has_final_size_bytes() {
  _has_bits_[0] &= ~0x00000080u;
}
void dump_response::clear_final_size_bytes() {
  final_size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_final_size_bytes();
}
::google::protobuf::uint64 dump_response::final_size_bytes() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_response.final_size_bytes)
  return final_size_bytes_;
}
void dump_response::set_final_size_bytes(::google::protobuf::uint64 value) {
  set_has_final_size_bytes();
  final_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.dump_response.final_size_bytes)
}

// optional string error = 5;
bool dump_response::has_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void dump_response::set_has_error() {
  _has_bits_[0] |= 0x00000100u;
}
void dump_response::clear_has_error() {
  _has_bits_[0] &= ~0x00000100u;
}
void dump_response::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
const ::std::string& dump_response::error() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_response.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_response::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.dump_response.error)
}
void dump_response::set_error(const char* value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.dump_response.error)
}
void dump_response::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.dump_response.error)
}
::std::string* dump_response::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:draiosproto.dump_response.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dump_response::release_error() {
  // @@protoc_insertion_point(field_release:draiosproto.dump_response.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_response::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.dump_response.error)
}

// required string token = 6;
bool dump_response::has_token() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void dump_response::set_has_token() {
  _has_bits_[0] |= 0x00000200u;
}
void dump_response::clear_has_token() {
  _has_bits_[0] &= ~0x00000200u;
}
void dump_response::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& dump_response::token() const {
  // @@protoc_insertion_point(field_get:draiosproto.dump_response.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_response::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.dump_response.token)
}
void dump_response::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.dump_response.token)
}
void dump_response::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.dump_response.token)
}
::std::string* dump_response::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:draiosproto.dump_response.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dump_response::release_token() {
  // @@protoc_insertion_point(field_release:draiosproto.dump_response.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dump_response::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.dump_response.token)
}

inline const dump_response* dump_response::internal_default_instance() {
  return &dump_response_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ssh_open_channel::kTimestampNsFieldNumber;
const int ssh_open_channel::kMachineIdFieldNumber;
const int ssh_open_channel::kCustomerIdFieldNumber;
const int ssh_open_channel::kTokenFieldNumber;
const int ssh_open_channel::kUserFieldNumber;
const int ssh_open_channel::kPasswordFieldNumber;
const int ssh_open_channel::kKeyFieldNumber;
const int ssh_open_channel::kPassphraseFieldNumber;
const int ssh_open_channel::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ssh_open_channel::ssh_open_channel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.ssh_open_channel)
}

void ssh_open_channel::InitAsDefaultInstance() {
}

ssh_open_channel::ssh_open_channel(const ssh_open_channel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.ssh_open_channel)
}

void ssh_open_channel::SharedCtor() {
  _cached_size_ = 0;
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passphrase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ns_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&timestamp_ns_) + sizeof(port_));
}

ssh_open_channel::~ssh_open_channel() {
  // @@protoc_insertion_point(destructor:draiosproto.ssh_open_channel)
  SharedDtor();
}

void ssh_open_channel::SharedDtor() {
  machine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passphrase_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ssh_open_channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssh_open_channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssh_open_channel_descriptor_;
}

const ssh_open_channel& ssh_open_channel::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ssh_open_channel> ssh_open_channel_default_instance_;

ssh_open_channel* ssh_open_channel::New(::google::protobuf::Arena* arena) const {
  ssh_open_channel* n = new ssh_open_channel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ssh_open_channel::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.ssh_open_channel)
  if (_has_bits_[0 / 32] & 255u) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_customer_id()) {
      customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user()) {
      user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_passphrase()) {
      passphrase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  port_ = 0u;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ssh_open_channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.ssh_open_channel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (tag == 8) {
          set_has_timestamp_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (tag == 18) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.ssh_open_channel.machine_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (tag == 26) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.ssh_open_channel.customer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // required string token = 4;
      case 4: {
        if (tag == 34) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.ssh_open_channel.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // required string user = 5;
      case 5: {
        if (tag == 42) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.ssh_open_channel.user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_password;
        break;
      }

      // optional string password = 6;
      case 6: {
        if (tag == 50) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.ssh_open_channel.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_key;
        break;
      }

      // optional string key = 7;
      case 7: {
        if (tag == 58) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.ssh_open_channel.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_passphrase;
        break;
      }

      // optional string passphrase = 8;
      case 8: {
        if (tag == 66) {
         parse_passphrase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passphrase()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passphrase().data(), this->passphrase().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.ssh_open_channel.passphrase");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_port;
        break;
      }

      // optional uint32 port = 9;
      case 9: {
        if (tag == 72) {
         parse_port:
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.ssh_open_channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.ssh_open_channel)
  return false;
#undef DO_
}

void ssh_open_channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.ssh_open_channel)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_open_channel.machine_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_open_channel.customer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->customer_id(), output);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_open_channel.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  // required string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_open_channel.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user(), output);
  }

  // optional string password = 6;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_open_channel.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->password(), output);
  }

  // optional string key = 7;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_open_channel.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->key(), output);
  }

  // optional string passphrase = 8;
  if (has_passphrase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passphrase().data(), this->passphrase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_open_channel.passphrase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->passphrase(), output);
  }

  // optional uint32 port = 9;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.ssh_open_channel)
}

::google::protobuf::uint8* ssh_open_channel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.ssh_open_channel)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_open_channel.machine_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_open_channel.customer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_open_channel.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // required string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_open_channel.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // optional string password = 6;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_open_channel.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->password(), target);
  }

  // optional string key = 7;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_open_channel.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->key(), target);
  }

  // optional string passphrase = 8;
  if (has_passphrase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passphrase().data(), this->passphrase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_open_channel.passphrase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->passphrase(), target);
  }

  // optional uint32 port = 9;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.ssh_open_channel)
  return target;
}

size_t ssh_open_channel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.ssh_open_channel)
  size_t total_size = 0;

  if (has_timestamp_ns()) {
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());
  }

  if (has_machine_id()) {
    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());
  }

  if (has_token()) {
    // required string token = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (has_user()) {
    // required string user = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  return total_size;
}
size_t ssh_open_channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.ssh_open_channel)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());

    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());

    // required string token = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

    // required string user = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 228u) {
    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // optional string password = 6;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string key = 7;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string passphrase = 8;
    if (has_passphrase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passphrase());
    }

  }
  // optional uint32 port = 9;
  if (has_port()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssh_open_channel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.ssh_open_channel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ssh_open_channel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ssh_open_channel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.ssh_open_channel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.ssh_open_channel)
    UnsafeMergeFrom(*source);
  }
}

void ssh_open_channel::MergeFrom(const ssh_open_channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.ssh_open_channel)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ssh_open_channel::UnsafeMergeFrom(const ssh_open_channel& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_has_machine_id();
      machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
    }
    if (from.has_customer_id()) {
      set_has_customer_id();
      customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_user()) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_passphrase()) {
      set_has_passphrase();
      passphrase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passphrase_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ssh_open_channel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.ssh_open_channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssh_open_channel::CopyFrom(const ssh_open_channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.ssh_open_channel)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ssh_open_channel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void ssh_open_channel::Swap(ssh_open_channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ssh_open_channel::InternalSwap(ssh_open_channel* other) {
  std::swap(timestamp_ns_, other->timestamp_ns_);
  machine_id_.Swap(&other->machine_id_);
  customer_id_.Swap(&other->customer_id_);
  token_.Swap(&other->token_);
  user_.Swap(&other->user_);
  password_.Swap(&other->password_);
  key_.Swap(&other->key_);
  passphrase_.Swap(&other->passphrase_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ssh_open_channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssh_open_channel_descriptor_;
  metadata.reflection = ssh_open_channel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ssh_open_channel

// required uint64 timestamp_ns = 1;
bool ssh_open_channel::has_timestamp_ns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ssh_open_channel::set_has_timestamp_ns() {
  _has_bits_[0] |= 0x00000001u;
}
void ssh_open_channel::clear_has_timestamp_ns() {
  _has_bits_[0] &= ~0x00000001u;
}
void ssh_open_channel::clear_timestamp_ns() {
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_ns();
}
::google::protobuf::uint64 ssh_open_channel::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_open_channel.timestamp_ns)
  return timestamp_ns_;
}
void ssh_open_channel::set_timestamp_ns(::google::protobuf::uint64 value) {
  set_has_timestamp_ns();
  timestamp_ns_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.ssh_open_channel.timestamp_ns)
}

// required string machine_id = 2;
bool ssh_open_channel::has_machine_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ssh_open_channel::set_has_machine_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ssh_open_channel::clear_has_machine_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ssh_open_channel::clear_machine_id() {
  machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_id();
}
const ::std::string& ssh_open_channel::machine_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_open_channel.machine_id)
  return machine_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_open_channel::set_machine_id(const ::std::string& value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ssh_open_channel.machine_id)
}
void ssh_open_channel::set_machine_id(const char* value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ssh_open_channel.machine_id)
}
void ssh_open_channel::set_machine_id(const char* value, size_t size) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ssh_open_channel.machine_id)
}
::std::string* ssh_open_channel::mutable_machine_id() {
  set_has_machine_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.ssh_open_channel.machine_id)
  return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ssh_open_channel::release_machine_id() {
  // @@protoc_insertion_point(field_release:draiosproto.ssh_open_channel.machine_id)
  clear_has_machine_id();
  return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_open_channel::set_allocated_machine_id(::std::string* machine_id) {
  if (machine_id != NULL) {
    set_has_machine_id();
  } else {
    clear_has_machine_id();
  }
  machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ssh_open_channel.machine_id)
}

// optional string customer_id = 3;
bool ssh_open_channel::has_customer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ssh_open_channel::set_has_customer_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ssh_open_channel::clear_has_customer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ssh_open_channel::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customer_id();
}
const ::std::string& ssh_open_channel::customer_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_open_channel.customer_id)
  return customer_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_open_channel::set_customer_id(const ::std::string& value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ssh_open_channel.customer_id)
}
void ssh_open_channel::set_customer_id(const char* value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ssh_open_channel.customer_id)
}
void ssh_open_channel::set_customer_id(const char* value, size_t size) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ssh_open_channel.customer_id)
}
::std::string* ssh_open_channel::mutable_customer_id() {
  set_has_customer_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.ssh_open_channel.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ssh_open_channel::release_customer_id() {
  // @@protoc_insertion_point(field_release:draiosproto.ssh_open_channel.customer_id)
  clear_has_customer_id();
  return customer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_open_channel::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != NULL) {
    set_has_customer_id();
  } else {
    clear_has_customer_id();
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ssh_open_channel.customer_id)
}

// required string token = 4;
bool ssh_open_channel::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ssh_open_channel::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
void ssh_open_channel::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
void ssh_open_channel::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& ssh_open_channel::token() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_open_channel.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_open_channel::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ssh_open_channel.token)
}
void ssh_open_channel::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ssh_open_channel.token)
}
void ssh_open_channel::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ssh_open_channel.token)
}
::std::string* ssh_open_channel::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:draiosproto.ssh_open_channel.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ssh_open_channel::release_token() {
  // @@protoc_insertion_point(field_release:draiosproto.ssh_open_channel.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_open_channel::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ssh_open_channel.token)
}

// required string user = 5;
bool ssh_open_channel::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ssh_open_channel::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
void ssh_open_channel::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
void ssh_open_channel::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
const ::std::string& ssh_open_channel::user() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_open_channel.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_open_channel::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ssh_open_channel.user)
}
void ssh_open_channel::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ssh_open_channel.user)
}
void ssh_open_channel::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ssh_open_channel.user)
}
::std::string* ssh_open_channel::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:draiosproto.ssh_open_channel.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ssh_open_channel::release_user() {
  // @@protoc_insertion_point(field_release:draiosproto.ssh_open_channel.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_open_channel::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ssh_open_channel.user)
}

// optional string password = 6;
bool ssh_open_channel::has_password() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ssh_open_channel::set_has_password() {
  _has_bits_[0] |= 0x00000020u;
}
void ssh_open_channel::clear_has_password() {
  _has_bits_[0] &= ~0x00000020u;
}
void ssh_open_channel::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& ssh_open_channel::password() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_open_channel.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_open_channel::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ssh_open_channel.password)
}
void ssh_open_channel::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ssh_open_channel.password)
}
void ssh_open_channel::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ssh_open_channel.password)
}
::std::string* ssh_open_channel::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:draiosproto.ssh_open_channel.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ssh_open_channel::release_password() {
  // @@protoc_insertion_point(field_release:draiosproto.ssh_open_channel.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_open_channel::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ssh_open_channel.password)
}

// optional string key = 7;
bool ssh_open_channel::has_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ssh_open_channel::set_has_key() {
  _has_bits_[0] |= 0x00000040u;
}
void ssh_open_channel::clear_has_key() {
  _has_bits_[0] &= ~0x00000040u;
}
void ssh_open_channel::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& ssh_open_channel::key() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_open_channel.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_open_channel::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ssh_open_channel.key)
}
void ssh_open_channel::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ssh_open_channel.key)
}
void ssh_open_channel::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ssh_open_channel.key)
}
::std::string* ssh_open_channel::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:draiosproto.ssh_open_channel.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ssh_open_channel::release_key() {
  // @@protoc_insertion_point(field_release:draiosproto.ssh_open_channel.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_open_channel::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ssh_open_channel.key)
}

// optional string passphrase = 8;
bool ssh_open_channel::has_passphrase() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ssh_open_channel::set_has_passphrase() {
  _has_bits_[0] |= 0x00000080u;
}
void ssh_open_channel::clear_has_passphrase() {
  _has_bits_[0] &= ~0x00000080u;
}
void ssh_open_channel::clear_passphrase() {
  passphrase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_passphrase();
}
const ::std::string& ssh_open_channel::passphrase() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_open_channel.passphrase)
  return passphrase_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_open_channel::set_passphrase(const ::std::string& value) {
  set_has_passphrase();
  passphrase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ssh_open_channel.passphrase)
}
void ssh_open_channel::set_passphrase(const char* value) {
  set_has_passphrase();
  passphrase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ssh_open_channel.passphrase)
}
void ssh_open_channel::set_passphrase(const char* value, size_t size) {
  set_has_passphrase();
  passphrase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ssh_open_channel.passphrase)
}
::std::string* ssh_open_channel::mutable_passphrase() {
  set_has_passphrase();
  // @@protoc_insertion_point(field_mutable:draiosproto.ssh_open_channel.passphrase)
  return passphrase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ssh_open_channel::release_passphrase() {
  // @@protoc_insertion_point(field_release:draiosproto.ssh_open_channel.passphrase)
  clear_has_passphrase();
  return passphrase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_open_channel::set_allocated_passphrase(::std::string* passphrase) {
  if (passphrase != NULL) {
    set_has_passphrase();
  } else {
    clear_has_passphrase();
  }
  passphrase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passphrase);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ssh_open_channel.passphrase)
}

// optional uint32 port = 9;
bool ssh_open_channel::has_port() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ssh_open_channel::set_has_port() {
  _has_bits_[0] |= 0x00000100u;
}
void ssh_open_channel::clear_has_port() {
  _has_bits_[0] &= ~0x00000100u;
}
void ssh_open_channel::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 ssh_open_channel::port() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_open_channel.port)
  return port_;
}
void ssh_open_channel::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.ssh_open_channel.port)
}

inline const ssh_open_channel* ssh_open_channel::internal_default_instance() {
  return &ssh_open_channel_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ssh_data::kTimestampNsFieldNumber;
const int ssh_data::kMachineIdFieldNumber;
const int ssh_data::kCustomerIdFieldNumber;
const int ssh_data::kTokenFieldNumber;
const int ssh_data::kDataFieldNumber;
const int ssh_data::kErrorFieldNumber;
const int ssh_data::kExitStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ssh_data::ssh_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.ssh_data)
}

void ssh_data::InitAsDefaultInstance() {
}

ssh_data::ssh_data(const ssh_data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.ssh_data)
}

void ssh_data::SharedCtor() {
  _cached_size_ = 0;
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ns_, 0, reinterpret_cast<char*>(&exit_status_) -
    reinterpret_cast<char*>(&timestamp_ns_) + sizeof(exit_status_));
}

ssh_data::~ssh_data() {
  // @@protoc_insertion_point(destructor:draiosproto.ssh_data)
  SharedDtor();
}

void ssh_data::SharedDtor() {
  machine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ssh_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssh_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssh_data_descriptor_;
}

const ssh_data& ssh_data::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ssh_data> ssh_data_default_instance_;

ssh_data* ssh_data::New(::google::protobuf::Arena* arena) const {
  ssh_data* n = new ssh_data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ssh_data::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.ssh_data)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ssh_data, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ssh_data*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(timestamp_ns_, exit_status_);
    if (has_machine_id()) {
      machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_customer_id()) {
      customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_error()) {
      error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ssh_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.ssh_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (tag == 8) {
          set_has_timestamp_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (tag == 18) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.ssh_data.machine_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (tag == 26) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.ssh_data.customer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // required string token = 4;
      case 4: {
        if (tag == 34) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.ssh_data.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_error;
        break;
      }

      // optional string error = 6;
      case 6: {
        if (tag == 50) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.ssh_data.error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_exit_status;
        break;
      }

      // optional int32 exit_status = 7;
      case 7: {
        if (tag == 56) {
         parse_exit_status:
          set_has_exit_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.ssh_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.ssh_data)
  return false;
#undef DO_
}

void ssh_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.ssh_data)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_data.machine_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_data.customer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->customer_id(), output);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_data.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // optional string error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_data.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->error(), output);
  }

  // optional int32 exit_status = 7;
  if (has_exit_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exit_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.ssh_data)
}

::google::protobuf::uint8* ssh_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.ssh_data)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_data.machine_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_data.customer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_data.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // optional string error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_data.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->error(), target);
  }

  // optional int32 exit_status = 7;
  if (has_exit_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exit_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.ssh_data)
  return target;
}

size_t ssh_data::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.ssh_data)
  size_t total_size = 0;

  if (has_timestamp_ns()) {
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());
  }

  if (has_machine_id()) {
    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());
  }

  if (has_token()) {
    // required string token = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  return total_size;
}
size_t ssh_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.ssh_data)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());

    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());

    // required string token = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 116u) {
    // optional string customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer_id());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional string error = 6;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional int32 exit_status = 7;
    if (has_exit_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_status());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssh_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.ssh_data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ssh_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ssh_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.ssh_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.ssh_data)
    UnsafeMergeFrom(*source);
  }
}

void ssh_data::MergeFrom(const ssh_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.ssh_data)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ssh_data::UnsafeMergeFrom(const ssh_data& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_has_machine_id();
      machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
    }
    if (from.has_customer_id()) {
      set_has_customer_id();
      customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_error()) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (from.has_exit_status()) {
      set_exit_status(from.exit_status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ssh_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.ssh_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssh_data::CopyFrom(const ssh_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.ssh_data)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ssh_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void ssh_data::Swap(ssh_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ssh_data::InternalSwap(ssh_data* other) {
  std::swap(timestamp_ns_, other->timestamp_ns_);
  machine_id_.Swap(&other->machine_id_);
  customer_id_.Swap(&other->customer_id_);
  token_.Swap(&other->token_);
  data_.Swap(&other->data_);
  error_.Swap(&other->error_);
  std::swap(exit_status_, other->exit_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ssh_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssh_data_descriptor_;
  metadata.reflection = ssh_data_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ssh_data

// required uint64 timestamp_ns = 1;
bool ssh_data::has_timestamp_ns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ssh_data::set_has_timestamp_ns() {
  _has_bits_[0] |= 0x00000001u;
}
void ssh_data::clear_has_timestamp_ns() {
  _has_bits_[0] &= ~0x00000001u;
}
void ssh_data::clear_timestamp_ns() {
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_ns();
}
::google::protobuf::uint64 ssh_data::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_data.timestamp_ns)
  return timestamp_ns_;
}
void ssh_data::set_timestamp_ns(::google::protobuf::uint64 value) {
  set_has_timestamp_ns();
  timestamp_ns_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.ssh_data.timestamp_ns)
}

// required string machine_id = 2;
bool ssh_data::has_machine_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ssh_data::set_has_machine_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ssh_data::clear_has_machine_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ssh_data::clear_machine_id() {
  machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_id();
}
const ::std::string& ssh_data::machine_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_data.machine_id)
  return machine_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_data::set_machine_id(const ::std::string& value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ssh_data.machine_id)
}
void ssh_data::set_machine_id(const char* value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ssh_data.machine_id)
}
void ssh_data::set_machine_id(const char* value, size_t size) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ssh_data.machine_id)
}
::std::string* ssh_data::mutable_machine_id() {
  set_has_machine_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.ssh_data.machine_id)
  return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ssh_data::release_machine_id() {
  // @@protoc_insertion_point(field_release:draiosproto.ssh_data.machine_id)
  clear_has_machine_id();
  return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_data::set_allocated_machine_id(::std::string* machine_id) {
  if (machine_id != NULL) {
    set_has_machine_id();
  } else {
    clear_has_machine_id();
  }
  machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ssh_data.machine_id)
}

// optional string customer_id = 3;
bool ssh_data::has_customer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ssh_data::set_has_customer_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ssh_data::clear_has_customer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ssh_data::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customer_id();
}
const ::std::string& ssh_data::customer_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_data.customer_id)
  return customer_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_data::set_customer_id(const ::std::string& value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ssh_data.customer_id)
}
void ssh_data::set_customer_id(const char* value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ssh_data.customer_id)
}
void ssh_data::set_customer_id(const char* value, size_t size) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ssh_data.customer_id)
}
::std::string* ssh_data::mutable_customer_id() {
  set_has_customer_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.ssh_data.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ssh_data::release_customer_id() {
  // @@protoc_insertion_point(field_release:draiosproto.ssh_data.customer_id)
  clear_has_customer_id();
  return customer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_data::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != NULL) {
    set_has_customer_id();
  } else {
    clear_has_customer_id();
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ssh_data.customer_id)
}

// required string token = 4;
bool ssh_data::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ssh_data::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
void ssh_data::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
void ssh_data::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& ssh_data::token() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_data.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_data::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ssh_data.token)
}
void ssh_data::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ssh_data.token)
}
void ssh_data::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ssh_data.token)
}
::std::string* ssh_data::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:draiosproto.ssh_data.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ssh_data::release_token() {
  // @@protoc_insertion_point(field_release:draiosproto.ssh_data.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_data::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ssh_data.token)
}

// optional bytes data = 5;
bool ssh_data::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ssh_data::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
void ssh_data::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void ssh_data::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& ssh_data::data() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_data.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_data::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ssh_data.data)
}
void ssh_data::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ssh_data.data)
}
void ssh_data::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ssh_data.data)
}
::std::string* ssh_data::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:draiosproto.ssh_data.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ssh_data::release_data() {
  // @@protoc_insertion_point(field_release:draiosproto.ssh_data.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_data::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ssh_data.data)
}

// optional string error = 6;
bool ssh_data::has_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ssh_data::set_has_error() {
  _has_bits_[0] |= 0x00000020u;
}
void ssh_data::clear_has_error() {
  _has_bits_[0] &= ~0x00000020u;
}
void ssh_data::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
const ::std::string& ssh_data::error() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_data.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_data::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ssh_data.error)
}
void ssh_data::set_error(const char* value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ssh_data.error)
}
void ssh_data::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ssh_data.error)
}
::std::string* ssh_data::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:draiosproto.ssh_data.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ssh_data::release_error() {
  // @@protoc_insertion_point(field_release:draiosproto.ssh_data.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_data::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ssh_data.error)
}

// optional int32 exit_status = 7;
bool ssh_data::has_exit_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ssh_data::set_has_exit_status() {
  _has_bits_[0] |= 0x00000040u;
}
void ssh_data::clear_has_exit_status() {
  _has_bits_[0] &= ~0x00000040u;
}
void ssh_data::clear_exit_status() {
  exit_status_ = 0;
  clear_has_exit_status();
}
::google::protobuf::int32 ssh_data::exit_status() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_data.exit_status)
  return exit_status_;
}
void ssh_data::set_exit_status(::google::protobuf::int32 value) {
  set_has_exit_status();
  exit_status_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.ssh_data.exit_status)
}

inline const ssh_data* ssh_data::internal_default_instance() {
  return &ssh_data_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ssh_close_channel::kTimestampNsFieldNumber;
const int ssh_close_channel::kMachineIdFieldNumber;
const int ssh_close_channel::kCustomerIdFieldNumber;
const int ssh_close_channel::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ssh_close_channel::ssh_close_channel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.ssh_close_channel)
}

void ssh_close_channel::InitAsDefaultInstance() {
}

ssh_close_channel::ssh_close_channel(const ssh_close_channel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.ssh_close_channel)
}

void ssh_close_channel::SharedCtor() {
  _cached_size_ = 0;
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
}

ssh_close_channel::~ssh_close_channel() {
  // @@protoc_insertion_point(destructor:draiosproto.ssh_close_channel)
  SharedDtor();
}

void ssh_close_channel::SharedDtor() {
  machine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ssh_close_channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssh_close_channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssh_close_channel_descriptor_;
}

const ssh_close_channel& ssh_close_channel::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ssh_close_channel> ssh_close_channel_default_instance_;

ssh_close_channel* ssh_close_channel::New(::google::protobuf::Arena* arena) const {
  ssh_close_channel* n = new ssh_close_channel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ssh_close_channel::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.ssh_close_channel)
  if (_has_bits_[0 / 32] & 15u) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_customer_id()) {
      customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ssh_close_channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.ssh_close_channel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (tag == 8) {
          set_has_timestamp_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (tag == 18) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.ssh_close_channel.machine_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (tag == 26) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.ssh_close_channel.customer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // required string token = 4;
      case 4: {
        if (tag == 34) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.ssh_close_channel.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.ssh_close_channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.ssh_close_channel)
  return false;
#undef DO_
}

void ssh_close_channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.ssh_close_channel)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_close_channel.machine_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_close_channel.customer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->customer_id(), output);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_close_channel.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.ssh_close_channel)
}

::google::protobuf::uint8* ssh_close_channel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.ssh_close_channel)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_close_channel.machine_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_close_channel.customer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // required string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.ssh_close_channel.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.ssh_close_channel)
  return target;
}

size_t ssh_close_channel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.ssh_close_channel)
  size_t total_size = 0;

  if (has_timestamp_ns()) {
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());
  }

  if (has_machine_id()) {
    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());
  }

  if (has_token()) {
    // required string token = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  return total_size;
}
size_t ssh_close_channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.ssh_close_channel)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());

    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());

    // required string token = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string customer_id = 3;
  if (has_customer_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->customer_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssh_close_channel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.ssh_close_channel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ssh_close_channel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ssh_close_channel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.ssh_close_channel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.ssh_close_channel)
    UnsafeMergeFrom(*source);
  }
}

void ssh_close_channel::MergeFrom(const ssh_close_channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.ssh_close_channel)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ssh_close_channel::UnsafeMergeFrom(const ssh_close_channel& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_has_machine_id();
      machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
    }
    if (from.has_customer_id()) {
      set_has_customer_id();
      customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ssh_close_channel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.ssh_close_channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssh_close_channel::CopyFrom(const ssh_close_channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.ssh_close_channel)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ssh_close_channel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void ssh_close_channel::Swap(ssh_close_channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ssh_close_channel::InternalSwap(ssh_close_channel* other) {
  std::swap(timestamp_ns_, other->timestamp_ns_);
  machine_id_.Swap(&other->machine_id_);
  customer_id_.Swap(&other->customer_id_);
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ssh_close_channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssh_close_channel_descriptor_;
  metadata.reflection = ssh_close_channel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ssh_close_channel

// required uint64 timestamp_ns = 1;
bool ssh_close_channel::has_timestamp_ns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ssh_close_channel::set_has_timestamp_ns() {
  _has_bits_[0] |= 0x00000001u;
}
void ssh_close_channel::clear_has_timestamp_ns() {
  _has_bits_[0] &= ~0x00000001u;
}
void ssh_close_channel::clear_timestamp_ns() {
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_ns();
}
::google::protobuf::uint64 ssh_close_channel::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_close_channel.timestamp_ns)
  return timestamp_ns_;
}
void ssh_close_channel::set_timestamp_ns(::google::protobuf::uint64 value) {
  set_has_timestamp_ns();
  timestamp_ns_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.ssh_close_channel.timestamp_ns)
}

// required string machine_id = 2;
bool ssh_close_channel::has_machine_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ssh_close_channel::set_has_machine_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ssh_close_channel::clear_has_machine_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ssh_close_channel::clear_machine_id() {
  machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_id();
}
const ::std::string& ssh_close_channel::machine_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_close_channel.machine_id)
  return machine_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_close_channel::set_machine_id(const ::std::string& value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ssh_close_channel.machine_id)
}
void ssh_close_channel::set_machine_id(const char* value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ssh_close_channel.machine_id)
}
void ssh_close_channel::set_machine_id(const char* value, size_t size) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ssh_close_channel.machine_id)
}
::std::string* ssh_close_channel::mutable_machine_id() {
  set_has_machine_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.ssh_close_channel.machine_id)
  return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ssh_close_channel::release_machine_id() {
  // @@protoc_insertion_point(field_release:draiosproto.ssh_close_channel.machine_id)
  clear_has_machine_id();
  return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_close_channel::set_allocated_machine_id(::std::string* machine_id) {
  if (machine_id != NULL) {
    set_has_machine_id();
  } else {
    clear_has_machine_id();
  }
  machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ssh_close_channel.machine_id)
}

// optional string customer_id = 3;
bool ssh_close_channel::has_customer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ssh_close_channel::set_has_customer_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ssh_close_channel::clear_has_customer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ssh_close_channel::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customer_id();
}
const ::std::string& ssh_close_channel::customer_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_close_channel.customer_id)
  return customer_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_close_channel::set_customer_id(const ::std::string& value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ssh_close_channel.customer_id)
}
void ssh_close_channel::set_customer_id(const char* value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ssh_close_channel.customer_id)
}
void ssh_close_channel::set_customer_id(const char* value, size_t size) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ssh_close_channel.customer_id)
}
::std::string* ssh_close_channel::mutable_customer_id() {
  set_has_customer_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.ssh_close_channel.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ssh_close_channel::release_customer_id() {
  // @@protoc_insertion_point(field_release:draiosproto.ssh_close_channel.customer_id)
  clear_has_customer_id();
  return customer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_close_channel::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != NULL) {
    set_has_customer_id();
  } else {
    clear_has_customer_id();
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ssh_close_channel.customer_id)
}

// required string token = 4;
bool ssh_close_channel::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ssh_close_channel::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
void ssh_close_channel::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
void ssh_close_channel::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& ssh_close_channel::token() const {
  // @@protoc_insertion_point(field_get:draiosproto.ssh_close_channel.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_close_channel::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.ssh_close_channel.token)
}
void ssh_close_channel::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.ssh_close_channel.token)
}
void ssh_close_channel::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.ssh_close_channel.token)
}
::std::string* ssh_close_channel::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:draiosproto.ssh_close_channel.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ssh_close_channel::release_token() {
  // @@protoc_insertion_point(field_release:draiosproto.ssh_close_channel.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ssh_close_channel::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.ssh_close_channel.token)
}

inline const ssh_close_channel* ssh_close_channel::internal_default_instance() {
  return &ssh_close_channel_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int auto_update_request::kTimestampNsFieldNumber;
const int auto_update_request::kMachineIdFieldNumber;
const int auto_update_request::kCustomerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

auto_update_request::auto_update_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.auto_update_request)
}

void auto_update_request::InitAsDefaultInstance() {
}

auto_update_request::auto_update_request(const auto_update_request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.auto_update_request)
}

void auto_update_request::SharedCtor() {
  _cached_size_ = 0;
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
}

auto_update_request::~auto_update_request() {
  // @@protoc_insertion_point(destructor:draiosproto.auto_update_request)
  SharedDtor();
}

void auto_update_request::SharedDtor() {
  machine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void auto_update_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auto_update_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auto_update_request_descriptor_;
}

const auto_update_request& auto_update_request::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<auto_update_request> auto_update_request_default_instance_;

auto_update_request* auto_update_request::New(::google::protobuf::Arena* arena) const {
  auto_update_request* n = new auto_update_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void auto_update_request::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.auto_update_request)
  if (_has_bits_[0 / 32] & 7u) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_customer_id()) {
      customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool auto_update_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.auto_update_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (tag == 8) {
          set_has_timestamp_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (tag == 18) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.auto_update_request.machine_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (tag == 26) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.auto_update_request.customer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.auto_update_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.auto_update_request)
  return false;
#undef DO_
}

void auto_update_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.auto_update_request)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.auto_update_request.machine_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.auto_update_request.customer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->customer_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.auto_update_request)
}

::google::protobuf::uint8* auto_update_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.auto_update_request)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.auto_update_request.machine_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.auto_update_request.customer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.auto_update_request)
  return target;
}

size_t auto_update_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.auto_update_request)
  size_t total_size = 0;

  if (has_timestamp_ns()) {
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());
  }

  if (has_machine_id()) {
    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());
  }

  return total_size;
}
size_t auto_update_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.auto_update_request)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());

    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string customer_id = 3;
  if (has_customer_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->customer_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auto_update_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.auto_update_request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const auto_update_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const auto_update_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.auto_update_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.auto_update_request)
    UnsafeMergeFrom(*source);
  }
}

void auto_update_request::MergeFrom(const auto_update_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.auto_update_request)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void auto_update_request::UnsafeMergeFrom(const auto_update_request& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_has_machine_id();
      machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
    }
    if (from.has_customer_id()) {
      set_has_customer_id();
      customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void auto_update_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.auto_update_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auto_update_request::CopyFrom(const auto_update_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.auto_update_request)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool auto_update_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void auto_update_request::Swap(auto_update_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void auto_update_request::InternalSwap(auto_update_request* other) {
  std::swap(timestamp_ns_, other->timestamp_ns_);
  machine_id_.Swap(&other->machine_id_);
  customer_id_.Swap(&other->customer_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata auto_update_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auto_update_request_descriptor_;
  metadata.reflection = auto_update_request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// auto_update_request

// required uint64 timestamp_ns = 1;
bool auto_update_request::has_timestamp_ns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void auto_update_request::set_has_timestamp_ns() {
  _has_bits_[0] |= 0x00000001u;
}
void auto_update_request::clear_has_timestamp_ns() {
  _has_bits_[0] &= ~0x00000001u;
}
void auto_update_request::clear_timestamp_ns() {
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_ns();
}
::google::protobuf::uint64 auto_update_request::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:draiosproto.auto_update_request.timestamp_ns)
  return timestamp_ns_;
}
void auto_update_request::set_timestamp_ns(::google::protobuf::uint64 value) {
  set_has_timestamp_ns();
  timestamp_ns_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.auto_update_request.timestamp_ns)
}

// required string machine_id = 2;
bool auto_update_request::has_machine_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void auto_update_request::set_has_machine_id() {
  _has_bits_[0] |= 0x00000002u;
}
void auto_update_request::clear_has_machine_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void auto_update_request::clear_machine_id() {
  machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_id();
}
const ::std::string& auto_update_request::machine_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.auto_update_request.machine_id)
  return machine_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void auto_update_request::set_machine_id(const ::std::string& value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.auto_update_request.machine_id)
}
void auto_update_request::set_machine_id(const char* value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.auto_update_request.machine_id)
}
void auto_update_request::set_machine_id(const char* value, size_t size) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.auto_update_request.machine_id)
}
::std::string* auto_update_request::mutable_machine_id() {
  set_has_machine_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.auto_update_request.machine_id)
  return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* auto_update_request::release_machine_id() {
  // @@protoc_insertion_point(field_release:draiosproto.auto_update_request.machine_id)
  clear_has_machine_id();
  return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void auto_update_request::set_allocated_machine_id(::std::string* machine_id) {
  if (machine_id != NULL) {
    set_has_machine_id();
  } else {
    clear_has_machine_id();
  }
  machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.auto_update_request.machine_id)
}

// optional string customer_id = 3;
bool auto_update_request::has_customer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void auto_update_request::set_has_customer_id() {
  _has_bits_[0] |= 0x00000004u;
}
void auto_update_request::clear_has_customer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void auto_update_request::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customer_id();
}
const ::std::string& auto_update_request::customer_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.auto_update_request.customer_id)
  return customer_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void auto_update_request::set_customer_id(const ::std::string& value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.auto_update_request.customer_id)
}
void auto_update_request::set_customer_id(const char* value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.auto_update_request.customer_id)
}
void auto_update_request::set_customer_id(const char* value, size_t size) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.auto_update_request.customer_id)
}
::std::string* auto_update_request::mutable_customer_id() {
  set_has_customer_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.auto_update_request.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* auto_update_request::release_customer_id() {
  // @@protoc_insertion_point(field_release:draiosproto.auto_update_request.customer_id)
  clear_has_customer_id();
  return customer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void auto_update_request::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != NULL) {
    set_has_customer_id();
  } else {
    clear_has_customer_id();
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.auto_update_request.customer_id)
}

inline const auto_update_request* auto_update_request::internal_default_instance() {
  return &auto_update_request_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dirty_shutdown_report::kTimestampNsFieldNumber;
const int dirty_shutdown_report::kMachineIdFieldNumber;
const int dirty_shutdown_report::kCustomerIdFieldNumber;
const int dirty_shutdown_report::kLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dirty_shutdown_report::dirty_shutdown_report()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.dirty_shutdown_report)
}

void dirty_shutdown_report::InitAsDefaultInstance() {
}

dirty_shutdown_report::dirty_shutdown_report(const dirty_shutdown_report& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.dirty_shutdown_report)
}

void dirty_shutdown_report::SharedCtor() {
  _cached_size_ = 0;
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
}

dirty_shutdown_report::~dirty_shutdown_report() {
  // @@protoc_insertion_point(destructor:draiosproto.dirty_shutdown_report)
  SharedDtor();
}

void dirty_shutdown_report::SharedDtor() {
  machine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void dirty_shutdown_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dirty_shutdown_report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dirty_shutdown_report_descriptor_;
}

const dirty_shutdown_report& dirty_shutdown_report::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<dirty_shutdown_report> dirty_shutdown_report_default_instance_;

dirty_shutdown_report* dirty_shutdown_report::New(::google::protobuf::Arena* arena) const {
  dirty_shutdown_report* n = new dirty_shutdown_report;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dirty_shutdown_report::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.dirty_shutdown_report)
  if (_has_bits_[0 / 32] & 15u) {
    timestamp_ns_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_customer_id()) {
      customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_log()) {
      log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool dirty_shutdown_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.dirty_shutdown_report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_ns = 1;
      case 1: {
        if (tag == 8) {
          set_has_timestamp_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_machine_id;
        break;
      }

      // required string machine_id = 2;
      case 2: {
        if (tag == 18) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.dirty_shutdown_report.machine_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_customer_id;
        break;
      }

      // optional string customer_id = 3;
      case 3: {
        if (tag == 26) {
         parse_customer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customer_id().data(), this->customer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.dirty_shutdown_report.customer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_log;
        break;
      }

      // required string log = 4;
      case 4: {
        if (tag == 34) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.dirty_shutdown_report.log");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.dirty_shutdown_report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.dirty_shutdown_report)
  return false;
#undef DO_
}

void dirty_shutdown_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.dirty_shutdown_report)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dirty_shutdown_report.machine_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_id(), output);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dirty_shutdown_report.customer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->customer_id(), output);
  }

  // required string log = 4;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dirty_shutdown_report.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->log(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.dirty_shutdown_report)
}

::google::protobuf::uint8* dirty_shutdown_report::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.dirty_shutdown_report)
  // required uint64 timestamp_ns = 1;
  if (has_timestamp_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // required string machine_id = 2;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dirty_shutdown_report.machine_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_id(), target);
  }

  // optional string customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer_id().data(), this->customer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dirty_shutdown_report.customer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer_id(), target);
  }

  // required string log = 4;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.dirty_shutdown_report.log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->log(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.dirty_shutdown_report)
  return target;
}

size_t dirty_shutdown_report::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.dirty_shutdown_report)
  size_t total_size = 0;

  if (has_timestamp_ns()) {
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());
  }

  if (has_machine_id()) {
    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());
  }

  if (has_log()) {
    // required string log = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  return total_size;
}
size_t dirty_shutdown_report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.dirty_shutdown_report)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required uint64 timestamp_ns = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());

    // required string machine_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());

    // required string log = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string customer_id = 3;
  if (has_customer_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->customer_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dirty_shutdown_report::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.dirty_shutdown_report)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const dirty_shutdown_report* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dirty_shutdown_report>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.dirty_shutdown_report)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.dirty_shutdown_report)
    UnsafeMergeFrom(*source);
  }
}

void dirty_shutdown_report::MergeFrom(const dirty_shutdown_report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.dirty_shutdown_report)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void dirty_shutdown_report::UnsafeMergeFrom(const dirty_shutdown_report& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ns()) {
      set_timestamp_ns(from.timestamp_ns());
    }
    if (from.has_machine_id()) {
      set_has_machine_id();
      machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
    }
    if (from.has_customer_id()) {
      set_has_customer_id();
      customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
    }
    if (from.has_log()) {
      set_has_log();
      log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void dirty_shutdown_report::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.dirty_shutdown_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dirty_shutdown_report::CopyFrom(const dirty_shutdown_report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.dirty_shutdown_report)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool dirty_shutdown_report::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void dirty_shutdown_report::Swap(dirty_shutdown_report* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dirty_shutdown_report::InternalSwap(dirty_shutdown_report* other) {
  std::swap(timestamp_ns_, other->timestamp_ns_);
  machine_id_.Swap(&other->machine_id_);
  customer_id_.Swap(&other->customer_id_);
  log_.Swap(&other->log_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dirty_shutdown_report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dirty_shutdown_report_descriptor_;
  metadata.reflection = dirty_shutdown_report_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dirty_shutdown_report

// required uint64 timestamp_ns = 1;
bool dirty_shutdown_report::has_timestamp_ns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void dirty_shutdown_report::set_has_timestamp_ns() {
  _has_bits_[0] |= 0x00000001u;
}
void dirty_shutdown_report::clear_has_timestamp_ns() {
  _has_bits_[0] &= ~0x00000001u;
}
void dirty_shutdown_report::clear_timestamp_ns() {
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_ns();
}
::google::protobuf::uint64 dirty_shutdown_report::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:draiosproto.dirty_shutdown_report.timestamp_ns)
  return timestamp_ns_;
}
void dirty_shutdown_report::set_timestamp_ns(::google::protobuf::uint64 value) {
  set_has_timestamp_ns();
  timestamp_ns_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.dirty_shutdown_report.timestamp_ns)
}

// required string machine_id = 2;
bool dirty_shutdown_report::has_machine_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void dirty_shutdown_report::set_has_machine_id() {
  _has_bits_[0] |= 0x00000002u;
}
void dirty_shutdown_report::clear_has_machine_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void dirty_shutdown_report::clear_machine_id() {
  machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_id();
}
const ::std::string& dirty_shutdown_report::machine_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.dirty_shutdown_report.machine_id)
  return machine_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dirty_shutdown_report::set_machine_id(const ::std::string& value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.dirty_shutdown_report.machine_id)
}
void dirty_shutdown_report::set_machine_id(const char* value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.dirty_shutdown_report.machine_id)
}
void dirty_shutdown_report::set_machine_id(const char* value, size_t size) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.dirty_shutdown_report.machine_id)
}
::std::string* dirty_shutdown_report::mutable_machine_id() {
  set_has_machine_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.dirty_shutdown_report.machine_id)
  return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dirty_shutdown_report::release_machine_id() {
  // @@protoc_insertion_point(field_release:draiosproto.dirty_shutdown_report.machine_id)
  clear_has_machine_id();
  return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dirty_shutdown_report::set_allocated_machine_id(::std::string* machine_id) {
  if (machine_id != NULL) {
    set_has_machine_id();
  } else {
    clear_has_machine_id();
  }
  machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.dirty_shutdown_report.machine_id)
}

// optional string customer_id = 3;
bool dirty_shutdown_report::has_customer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void dirty_shutdown_report::set_has_customer_id() {
  _has_bits_[0] |= 0x00000004u;
}
void dirty_shutdown_report::clear_has_customer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void dirty_shutdown_report::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customer_id();
}
const ::std::string& dirty_shutdown_report::customer_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.dirty_shutdown_report.customer_id)
  return customer_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dirty_shutdown_report::set_customer_id(const ::std::string& value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.dirty_shutdown_report.customer_id)
}
void dirty_shutdown_report::set_customer_id(const char* value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.dirty_shutdown_report.customer_id)
}
void dirty_shutdown_report::set_customer_id(const char* value, size_t size) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.dirty_shutdown_report.customer_id)
}
::std::string* dirty_shutdown_report::mutable_customer_id() {
  set_has_customer_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.dirty_shutdown_report.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dirty_shutdown_report::release_customer_id() {
  // @@protoc_insertion_point(field_release:draiosproto.dirty_shutdown_report.customer_id)
  clear_has_customer_id();
  return customer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dirty_shutdown_report::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != NULL) {
    set_has_customer_id();
  } else {
    clear_has_customer_id();
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.dirty_shutdown_report.customer_id)
}

// required string log = 4;
bool dirty_shutdown_report::has_log() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void dirty_shutdown_report::set_has_log() {
  _has_bits_[0] |= 0x00000008u;
}
void dirty_shutdown_report::clear_has_log() {
  _has_bits_[0] &= ~0x00000008u;
}
void dirty_shutdown_report::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log();
}
const ::std::string& dirty_shutdown_report::log() const {
  // @@protoc_insertion_point(field_get:draiosproto.dirty_shutdown_report.log)
  return log_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dirty_shutdown_report::set_log(const ::std::string& value) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.dirty_shutdown_report.log)
}
void dirty_shutdown_report::set_log(const char* value) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.dirty_shutdown_report.log)
}
void dirty_shutdown_report::set_log(const char* value, size_t size) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.dirty_shutdown_report.log)
}
::std::string* dirty_shutdown_report::mutable_log() {
  set_has_log();
  // @@protoc_insertion_point(field_mutable:draiosproto.dirty_shutdown_report.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* dirty_shutdown_report::release_log() {
  // @@protoc_insertion_point(field_release:draiosproto.dirty_shutdown_report.log)
  clear_has_log();
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void dirty_shutdown_report::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    set_has_log();
  } else {
    clear_has_log();
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.dirty_shutdown_report.log)
}

inline const dirty_shutdown_report* dirty_shutdown_report::internal_default_instance() {
  return &dirty_shutdown_report_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int key_value::kKeyFieldNumber;
const int key_value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

key_value::key_value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.key_value)
}

void key_value::InitAsDefaultInstance() {
}

key_value::key_value(const key_value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.key_value)
}

void key_value::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

key_value::~key_value() {
  // @@protoc_insertion_point(destructor:draiosproto.key_value)
  SharedDtor();
}

void key_value::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void key_value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* key_value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return key_value_descriptor_;
}

const key_value& key_value::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<key_value> key_value_default_instance_;

key_value* key_value::New(::google::protobuf::Arena* arena) const {
  key_value* n = new key_value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void key_value::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.key_value)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool key_value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.key_value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.key_value.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.key_value.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.key_value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.key_value)
  return false;
#undef DO_
}

void key_value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.key_value)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.key_value.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.key_value.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.key_value)
}

::google::protobuf::uint8* key_value::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.key_value)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.key_value.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.key_value.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.key_value)
  return target;
}

size_t key_value::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.key_value)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t key_value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.key_value)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void key_value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.key_value)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const key_value* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const key_value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.key_value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.key_value)
    UnsafeMergeFrom(*source);
  }
}

void key_value::MergeFrom(const key_value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.key_value)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void key_value::UnsafeMergeFrom(const key_value& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void key_value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.key_value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void key_value::CopyFrom(const key_value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.key_value)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool key_value::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void key_value::Swap(key_value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void key_value::InternalSwap(key_value* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata key_value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = key_value_descriptor_;
  metadata.reflection = key_value_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// key_value

// required string key = 1;
bool key_value::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void key_value::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void key_value::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void key_value::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& key_value::key() const {
  // @@protoc_insertion_point(field_get:draiosproto.key_value.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void key_value::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.key_value.key)
}
void key_value::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.key_value.key)
}
void key_value::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.key_value.key)
}
::std::string* key_value::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:draiosproto.key_value.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* key_value::release_key() {
  // @@protoc_insertion_point(field_release:draiosproto.key_value.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void key_value::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.key_value.key)
}

// required string value = 2;
bool key_value::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void key_value::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void key_value::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void key_value::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& key_value::value() const {
  // @@protoc_insertion_point(field_get:draiosproto.key_value.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void key_value::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.key_value.value)
}
void key_value::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.key_value.value)
}
void key_value::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.key_value.value)
}
::std::string* key_value::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:draiosproto.key_value.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* key_value::release_value() {
  // @@protoc_insertion_point(field_release:draiosproto.key_value.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void key_value::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.key_value.value)
}

inline const key_value* key_value::internal_default_instance() {
  return &key_value_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int agent_event::kTimestampSecFieldNumber;
const int agent_event::kScopeFieldNumber;
const int agent_event::kTitleFieldNumber;
const int agent_event::kDescriptionFieldNumber;
const int agent_event::kSeverityFieldNumber;
const int agent_event::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

agent_event::agent_event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.agent_event)
}

void agent_event::InitAsDefaultInstance() {
}

agent_event::agent_event(const agent_event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.agent_event)
}

void agent_event::SharedCtor() {
  _cached_size_ = 0;
  scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_sec_, 0, reinterpret_cast<char*>(&severity_) -
    reinterpret_cast<char*>(&timestamp_sec_) + sizeof(severity_));
}

agent_event::~agent_event() {
  // @@protoc_insertion_point(destructor:draiosproto.agent_event)
  SharedDtor();
}

void agent_event::SharedDtor() {
  scope_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void agent_event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* agent_event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agent_event_descriptor_;
}

const agent_event& agent_event::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<agent_event> agent_event_default_instance_;

agent_event* agent_event::New(::google::protobuf::Arena* arena) const {
  agent_event* n = new agent_event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void agent_event::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.agent_event)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(agent_event, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<agent_event*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(timestamp_sec_, severity_);
    if (has_scope()) {
      scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  tags_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool agent_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.agent_event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp_sec = 1;
      case 1: {
        if (tag == 8) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scope;
        break;
      }

      // optional string scope = 2;
      case 2: {
        if (tag == 18) {
         parse_scope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scope()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scope().data(), this->scope().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.agent_event.scope");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.agent_event.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.agent_event.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_severity;
        break;
      }

      // optional uint32 severity = 5;
      case 5: {
        if (tag == 40) {
         parse_severity:
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tags;
        break;
      }

      // repeated .draiosproto.key_value tags = 6;
      case 6: {
        if (tag == 50) {
         parse_tags:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_tags;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.agent_event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.agent_event)
  return false;
#undef DO_
}

void agent_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.agent_event)
  // optional uint64 timestamp_sec = 1;
  if (has_timestamp_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_sec(), output);
  }

  // optional string scope = 2;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scope().data(), this->scope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.agent_event.scope");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scope(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.agent_event.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.agent_event.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // optional uint32 severity = 5;
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->severity(), output);
  }

  // repeated .draiosproto.key_value tags = 6;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.agent_event)
}

::google::protobuf::uint8* agent_event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.agent_event)
  // optional uint64 timestamp_sec = 1;
  if (has_timestamp_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_sec(), target);
  }

  // optional string scope = 2;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scope().data(), this->scope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.agent_event.scope");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scope(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.agent_event.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.agent_event.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // optional uint32 severity = 5;
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->severity(), target);
  }

  // repeated .draiosproto.key_value tags = 6;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->tags(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.agent_event)
  return target;
}

size_t agent_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.agent_event)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint64 timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_sec());
    }

    // optional string scope = 2;
    if (has_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scope());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint32 severity = 5;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->severity());
    }

  }
  // repeated .draiosproto.key_value tags = 6;
  {
    unsigned int count = this->tags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void agent_event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.agent_event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const agent_event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const agent_event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.agent_event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.agent_event)
    UnsafeMergeFrom(*source);
  }
}

void agent_event::MergeFrom(const agent_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.agent_event)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void agent_event::UnsafeMergeFrom(const agent_event& from) {
  GOOGLE_DCHECK(&from != this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_sec()) {
      set_timestamp_sec(from.timestamp_sec());
    }
    if (from.has_scope()) {
      set_has_scope();
      scope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scope_);
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void agent_event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.agent_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void agent_event::CopyFrom(const agent_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.agent_event)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool agent_event::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->tags())) return false;
  return true;
}

void agent_event::Swap(agent_event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void agent_event::InternalSwap(agent_event* other) {
  std::swap(timestamp_sec_, other->timestamp_sec_);
  scope_.Swap(&other->scope_);
  title_.Swap(&other->title_);
  description_.Swap(&other->description_);
  std::swap(severity_, other->severity_);
  tags_.UnsafeArenaSwap(&other->tags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata agent_event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = agent_event_descriptor_;
  metadata.reflection = agent_event_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// agent_event

// optional uint64 timestamp_sec = 1;
bool agent_event::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void agent_event::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x00000001u;
}
void agent_event::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
void agent_event::clear_timestamp_sec() {
  timestamp_sec_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_sec();
}
::google::protobuf::uint64 agent_event::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:draiosproto.agent_event.timestamp_sec)
  return timestamp_sec_;
}
void agent_event::set_timestamp_sec(::google::protobuf::uint64 value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.agent_event.timestamp_sec)
}

// optional string scope = 2;
bool agent_event::has_scope() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void agent_event::set_has_scope() {
  _has_bits_[0] |= 0x00000002u;
}
void agent_event::clear_has_scope() {
  _has_bits_[0] &= ~0x00000002u;
}
void agent_event::clear_scope() {
  scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scope();
}
const ::std::string& agent_event::scope() const {
  // @@protoc_insertion_point(field_get:draiosproto.agent_event.scope)
  return scope_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void agent_event::set_scope(const ::std::string& value) {
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.agent_event.scope)
}
void agent_event::set_scope(const char* value) {
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.agent_event.scope)
}
void agent_event::set_scope(const char* value, size_t size) {
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.agent_event.scope)
}
::std::string* agent_event::mutable_scope() {
  set_has_scope();
  // @@protoc_insertion_point(field_mutable:draiosproto.agent_event.scope)
  return scope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* agent_event::release_scope() {
  // @@protoc_insertion_point(field_release:draiosproto.agent_event.scope)
  clear_has_scope();
  return scope_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void agent_event::set_allocated_scope(::std::string* scope) {
  if (scope != NULL) {
    set_has_scope();
  } else {
    clear_has_scope();
  }
  scope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scope);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.agent_event.scope)
}

// optional string title = 3;
bool agent_event::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void agent_event::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void agent_event::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void agent_event::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& agent_event::title() const {
  // @@protoc_insertion_point(field_get:draiosproto.agent_event.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void agent_event::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.agent_event.title)
}
void agent_event::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.agent_event.title)
}
void agent_event::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.agent_event.title)
}
::std::string* agent_event::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:draiosproto.agent_event.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* agent_event::release_title() {
  // @@protoc_insertion_point(field_release:draiosproto.agent_event.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void agent_event::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.agent_event.title)
}

// optional string description = 4;
bool agent_event::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void agent_event::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
void agent_event::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
void agent_event::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& agent_event::description() const {
  // @@protoc_insertion_point(field_get:draiosproto.agent_event.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void agent_event::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.agent_event.description)
}
void agent_event::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.agent_event.description)
}
void agent_event::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.agent_event.description)
}
::std::string* agent_event::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:draiosproto.agent_event.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* agent_event::release_description() {
  // @@protoc_insertion_point(field_release:draiosproto.agent_event.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void agent_event::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.agent_event.description)
}

// optional uint32 severity = 5;
bool agent_event::has_severity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void agent_event::set_has_severity() {
  _has_bits_[0] |= 0x00000010u;
}
void agent_event::clear_has_severity() {
  _has_bits_[0] &= ~0x00000010u;
}
void agent_event::clear_severity() {
  severity_ = 0u;
  clear_has_severity();
}
::google::protobuf::uint32 agent_event::severity() const {
  // @@protoc_insertion_point(field_get:draiosproto.agent_event.severity)
  return severity_;
}
void agent_event::set_severity(::google::protobuf::uint32 value) {
  set_has_severity();
  severity_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.agent_event.severity)
}

// repeated .draiosproto.key_value tags = 6;
int agent_event::tags_size() const {
  return tags_.size();
}
void agent_event::clear_tags() {
  tags_.Clear();
}
const ::draiosproto::key_value& agent_event::tags(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.agent_event.tags)
  return tags_.Get(index);
}
::draiosproto::key_value* agent_event::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.agent_event.tags)
  return tags_.Mutable(index);
}
::draiosproto::key_value* agent_event::add_tags() {
  // @@protoc_insertion_point(field_add:draiosproto.agent_event.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::key_value >*
agent_event::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.agent_event.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::key_value >&
agent_event::tags() const {
  // @@protoc_insertion_point(field_list:draiosproto.agent_event.tags)
  return tags_;
}

inline const agent_event* agent_event::internal_default_instance() {
  return &agent_event_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int config_file::kNameFieldNumber;
const int config_file::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

config_file::config_file()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.config_file)
}

void config_file::InitAsDefaultInstance() {
}

config_file::config_file(const config_file& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.config_file)
}

void config_file::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

config_file::~config_file() {
  // @@protoc_insertion_point(destructor:draiosproto.config_file)
  SharedDtor();
}

void config_file::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void config_file::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* config_file::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return config_file_descriptor_;
}

const config_file& config_file::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<config_file> config_file_default_instance_;

config_file* config_file::New(::google::protobuf::Arena* arena) const {
  config_file* n = new config_file;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void config_file::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.config_file)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_content()) {
      content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool config_file::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.config_file)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.config_file.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.config_file.content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.config_file)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.config_file)
  return false;
#undef DO_
}

void config_file::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.config_file)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.config_file.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.config_file.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.config_file)
}

::google::protobuf::uint8* config_file::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.config_file)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.config_file.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.config_file.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.config_file)
  return target;
}

size_t config_file::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.config_file)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void config_file::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.config_file)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const config_file* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const config_file>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.config_file)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.config_file)
    UnsafeMergeFrom(*source);
  }
}

void config_file::MergeFrom(const config_file& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.config_file)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void config_file::UnsafeMergeFrom(const config_file& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_content()) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void config_file::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.config_file)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void config_file::CopyFrom(const config_file& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.config_file)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool config_file::IsInitialized() const {

  return true;
}

void config_file::Swap(config_file* other) {
  if (other == this) return;
  InternalSwap(other);
}
void config_file::InternalSwap(config_file* other) {
  name_.Swap(&other->name_);
  content_.Swap(&other->content_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata config_file::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = config_file_descriptor_;
  metadata.reflection = config_file_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// config_file

// optional string name = 1;
bool config_file::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void config_file::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void config_file::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void config_file::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& config_file::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.config_file.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void config_file::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.config_file.name)
}
void config_file::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.config_file.name)
}
void config_file::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.config_file.name)
}
::std::string* config_file::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.config_file.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* config_file::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.config_file.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void config_file::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.config_file.name)
}

// optional string content = 2;
bool config_file::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void config_file::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void config_file::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void config_file::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& config_file::content() const {
  // @@protoc_insertion_point(field_get:draiosproto.config_file.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void config_file::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.config_file.content)
}
void config_file::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.config_file.content)
}
void config_file::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.config_file.content)
}
::std::string* config_file::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:draiosproto.config_file.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* config_file::release_content() {
  // @@protoc_insertion_point(field_release:draiosproto.config_file.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void config_file::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.config_file.content)
}

inline const config_file* config_file::internal_default_instance() {
  return &config_file_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int config_data::kConfigFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

config_data::config_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.config_data)
}

void config_data::InitAsDefaultInstance() {
}

config_data::config_data(const config_data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.config_data)
}

void config_data::SharedCtor() {
  _cached_size_ = 0;
}

config_data::~config_data() {
  // @@protoc_insertion_point(destructor:draiosproto.config_data)
  SharedDtor();
}

void config_data::SharedDtor() {
}

void config_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* config_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return config_data_descriptor_;
}

const config_data& config_data::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<config_data> config_data_default_instance_;

config_data* config_data::New(::google::protobuf::Arena* arena) const {
  config_data* n = new config_data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void config_data::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.config_data)
  config_files_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool config_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.config_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.config_file config_files = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_config_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_config_files()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_config_files;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.config_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.config_data)
  return false;
#undef DO_
}

void config_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.config_data)
  // repeated .draiosproto.config_file config_files = 1;
  for (unsigned int i = 0, n = this->config_files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config_files(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.config_data)
}

::google::protobuf::uint8* config_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.config_data)
  // repeated .draiosproto.config_file config_files = 1;
  for (unsigned int i = 0, n = this->config_files_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->config_files(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.config_data)
  return target;
}

size_t config_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.config_data)
  size_t total_size = 0;

  // repeated .draiosproto.config_file config_files = 1;
  {
    unsigned int count = this->config_files_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config_files(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void config_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.config_data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const config_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const config_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.config_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.config_data)
    UnsafeMergeFrom(*source);
  }
}

void config_data::MergeFrom(const config_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.config_data)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void config_data::UnsafeMergeFrom(const config_data& from) {
  GOOGLE_DCHECK(&from != this);
  config_files_.MergeFrom(from.config_files_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void config_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.config_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void config_data::CopyFrom(const config_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.config_data)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool config_data::IsInitialized() const {

  return true;
}

void config_data::Swap(config_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void config_data::InternalSwap(config_data* other) {
  config_files_.UnsafeArenaSwap(&other->config_files_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata config_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = config_data_descriptor_;
  metadata.reflection = config_data_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// config_data

// repeated .draiosproto.config_file config_files = 1;
int config_data::config_files_size() const {
  return config_files_.size();
}
void config_data::clear_config_files() {
  config_files_.Clear();
}
const ::draiosproto::config_file& config_data::config_files(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.config_data.config_files)
  return config_files_.Get(index);
}
::draiosproto::config_file* config_data::mutable_config_files(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.config_data.config_files)
  return config_files_.Mutable(index);
}
::draiosproto::config_file* config_data::add_config_files() {
  // @@protoc_insertion_point(field_add:draiosproto.config_data.config_files)
  return config_files_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::config_file >*
config_data::mutable_config_files() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.config_data.config_files)
  return &config_files_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::config_file >&
config_data::config_files() const {
  // @@protoc_insertion_point(field_list:draiosproto.config_data.config_files)
  return config_files_;
}

inline const config_data* config_data::internal_default_instance() {
  return &config_data_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int error_message::kTypeFieldNumber;
const int error_message::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

error_message::error_message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.error_message)
}

void error_message::InitAsDefaultInstance() {
}

error_message::error_message(const error_message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.error_message)
}

void error_message::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
}

error_message::~error_message() {
  // @@protoc_insertion_point(destructor:draiosproto.error_message)
  SharedDtor();
}

void error_message::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void error_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* error_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return error_message_descriptor_;
}

const error_message& error_message::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<error_message> error_message_default_instance_;

error_message* error_message::New(::google::protobuf::Arena* arena) const {
  error_message* n = new error_message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void error_message::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.error_message)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 1;
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool error_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.error_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .draiosproto.error_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::draiosproto::error_type_IsValid(value)) {
            set_type(static_cast< ::draiosproto::error_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.error_message.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.error_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.error_message)
  return false;
#undef DO_
}

void error_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.error_message)
  // optional .draiosproto.error_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.error_message.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.error_message)
}

::google::protobuf::uint8* error_message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.error_message)
  // optional .draiosproto.error_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.error_message.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.error_message)
  return target;
}

size_t error_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.error_message)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .draiosproto.error_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void error_message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.error_message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const error_message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const error_message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.error_message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.error_message)
    UnsafeMergeFrom(*source);
  }
}

void error_message::MergeFrom(const error_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.error_message)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void error_message::UnsafeMergeFrom(const error_message& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void error_message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.error_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void error_message::CopyFrom(const error_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.error_message)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool error_message::IsInitialized() const {

  return true;
}

void error_message::Swap(error_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void error_message::InternalSwap(error_message* other) {
  std::swap(type_, other->type_);
  description_.Swap(&other->description_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata error_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = error_message_descriptor_;
  metadata.reflection = error_message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// error_message

// optional .draiosproto.error_type type = 1;
bool error_message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void error_message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void error_message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void error_message::clear_type() {
  type_ = 1;
  clear_has_type();
}
::draiosproto::error_type error_message::type() const {
  // @@protoc_insertion_point(field_get:draiosproto.error_message.type)
  return static_cast< ::draiosproto::error_type >(type_);
}
void error_message::set_type(::draiosproto::error_type value) {
  assert(::draiosproto::error_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.error_message.type)
}

// optional string description = 2;
bool error_message::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void error_message::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void error_message::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void error_message::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& error_message::description() const {
  // @@protoc_insertion_point(field_get:draiosproto.error_message.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void error_message::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.error_message.description)
}
void error_message::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.error_message.description)
}
void error_message::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.error_message.description)
}
::std::string* error_message::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:draiosproto.error_message.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* error_message::release_description() {
  // @@protoc_insertion_point(field_release:draiosproto.error_message.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void error_message::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.error_message.description)
}

inline const error_message* error_message::internal_default_instance() {
  return &error_message_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int falco_subcategory::kNameFieldNumber;
const int falco_subcategory::kDFieldNumber;
const int falco_subcategory::kFullFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

falco_subcategory::falco_subcategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.falco_subcategory)
}

void falco_subcategory::InitAsDefaultInstance() {
}

falco_subcategory::falco_subcategory(const falco_subcategory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.falco_subcategory)
}

void falco_subcategory::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_ = false;
}

falco_subcategory::~falco_subcategory() {
  // @@protoc_insertion_point(destructor:draiosproto.falco_subcategory)
  SharedDtor();
}

void falco_subcategory::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void falco_subcategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* falco_subcategory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return falco_subcategory_descriptor_;
}

const falco_subcategory& falco_subcategory::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<falco_subcategory> falco_subcategory_default_instance_;

falco_subcategory* falco_subcategory::New(::google::protobuf::Arena* arena) const {
  falco_subcategory* n = new falco_subcategory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void falco_subcategory::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.falco_subcategory)
  if (_has_bits_[0 / 32] & 5u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    full_ = false;
  }
  d_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool falco_subcategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.falco_subcategory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.falco_subcategory.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_d;
        break;
      }

      // repeated string d = 2;
      case 2: {
        if (tag == 18) {
         parse_d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_d()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->d(this->d_size() - 1).data(),
            this->d(this->d_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.falco_subcategory.d");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_d;
        if (input->ExpectTag(24)) goto parse_full;
        break;
      }

      // optional bool full = 3;
      case 3: {
        if (tag == 24) {
         parse_full:
          set_has_full();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &full_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.falco_subcategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.falco_subcategory)
  return false;
#undef DO_
}

void falco_subcategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.falco_subcategory)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_subcategory.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string d = 2;
  for (int i = 0; i < this->d_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->d(i).data(), this->d(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_subcategory.d");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->d(i), output);
  }

  // optional bool full = 3;
  if (has_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->full(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.falco_subcategory)
}

::google::protobuf::uint8* falco_subcategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.falco_subcategory)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_subcategory.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string d = 2;
  for (int i = 0; i < this->d_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->d(i).data(), this->d(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_subcategory.d");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->d(i), target);
  }

  // optional bool full = 3;
  if (has_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->full(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.falco_subcategory)
  return target;
}

size_t falco_subcategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.falco_subcategory)
  size_t total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // optional bool full = 3;
  if (has_full()) {
    total_size += 1 + 1;
  }

  // repeated string d = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->d_size());
  for (int i = 0; i < this->d_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->d(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void falco_subcategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.falco_subcategory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const falco_subcategory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const falco_subcategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.falco_subcategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.falco_subcategory)
    UnsafeMergeFrom(*source);
  }
}

void falco_subcategory::MergeFrom(const falco_subcategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.falco_subcategory)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void falco_subcategory::UnsafeMergeFrom(const falco_subcategory& from) {
  GOOGLE_DCHECK(&from != this);
  d_.UnsafeMergeFrom(from.d_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_full()) {
      set_full(from.full());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void falco_subcategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.falco_subcategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void falco_subcategory::CopyFrom(const falco_subcategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.falco_subcategory)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool falco_subcategory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void falco_subcategory::Swap(falco_subcategory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void falco_subcategory::InternalSwap(falco_subcategory* other) {
  name_.Swap(&other->name_);
  d_.UnsafeArenaSwap(&other->d_);
  std::swap(full_, other->full_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata falco_subcategory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = falco_subcategory_descriptor_;
  metadata.reflection = falco_subcategory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// falco_subcategory

// required string name = 1;
bool falco_subcategory::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void falco_subcategory::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void falco_subcategory::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void falco_subcategory::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& falco_subcategory::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_subcategory.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_subcategory::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.falco_subcategory.name)
}
void falco_subcategory::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.falco_subcategory.name)
}
void falco_subcategory::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.falco_subcategory.name)
}
::std::string* falco_subcategory::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_subcategory.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* falco_subcategory::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.falco_subcategory.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_subcategory::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.falco_subcategory.name)
}

// repeated string d = 2;
int falco_subcategory::d_size() const {
  return d_.size();
}
void falco_subcategory::clear_d() {
  d_.Clear();
}
const ::std::string& falco_subcategory::d(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_subcategory.d)
  return d_.Get(index);
}
::std::string* falco_subcategory::mutable_d(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_subcategory.d)
  return d_.Mutable(index);
}
void falco_subcategory::set_d(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:draiosproto.falco_subcategory.d)
  d_.Mutable(index)->assign(value);
}
void falco_subcategory::set_d(int index, const char* value) {
  d_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:draiosproto.falco_subcategory.d)
}
void falco_subcategory::set_d(int index, const char* value, size_t size) {
  d_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:draiosproto.falco_subcategory.d)
}
::std::string* falco_subcategory::add_d() {
  // @@protoc_insertion_point(field_add_mutable:draiosproto.falco_subcategory.d)
  return d_.Add();
}
void falco_subcategory::add_d(const ::std::string& value) {
  d_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:draiosproto.falco_subcategory.d)
}
void falco_subcategory::add_d(const char* value) {
  d_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:draiosproto.falco_subcategory.d)
}
void falco_subcategory::add_d(const char* value, size_t size) {
  d_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:draiosproto.falco_subcategory.d)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
falco_subcategory::d() const {
  // @@protoc_insertion_point(field_list:draiosproto.falco_subcategory.d)
  return d_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
falco_subcategory::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.falco_subcategory.d)
  return &d_;
}

// optional bool full = 3;
bool falco_subcategory::has_full() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void falco_subcategory::set_has_full() {
  _has_bits_[0] |= 0x00000004u;
}
void falco_subcategory::clear_has_full() {
  _has_bits_[0] &= ~0x00000004u;
}
void falco_subcategory::clear_full() {
  full_ = false;
  clear_has_full();
}
bool falco_subcategory::full() const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_subcategory.full)
  return full_;
}
void falco_subcategory::set_full(bool value) {
  set_has_full();
  full_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.falco_subcategory.full)
}

inline const falco_subcategory* falco_subcategory::internal_default_instance() {
  return &falco_subcategory_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int falco_subcategory_container::kSubcatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

falco_subcategory_container::falco_subcategory_container()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.falco_subcategory_container)
}

void falco_subcategory_container::InitAsDefaultInstance() {
}

falco_subcategory_container::falco_subcategory_container(const falco_subcategory_container& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.falco_subcategory_container)
}

void falco_subcategory_container::SharedCtor() {
  _cached_size_ = 0;
}

falco_subcategory_container::~falco_subcategory_container() {
  // @@protoc_insertion_point(destructor:draiosproto.falco_subcategory_container)
  SharedDtor();
}

void falco_subcategory_container::SharedDtor() {
}

void falco_subcategory_container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* falco_subcategory_container::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return falco_subcategory_container_descriptor_;
}

const falco_subcategory_container& falco_subcategory_container::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<falco_subcategory_container> falco_subcategory_container_default_instance_;

falco_subcategory_container* falco_subcategory_container::New(::google::protobuf::Arena* arena) const {
  falco_subcategory_container* n = new falco_subcategory_container;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void falco_subcategory_container::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.falco_subcategory_container)
  subcats_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool falco_subcategory_container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.falco_subcategory_container)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.falco_subcategory subcats = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_subcats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_subcats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_subcats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.falco_subcategory_container)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.falco_subcategory_container)
  return false;
#undef DO_
}

void falco_subcategory_container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.falco_subcategory_container)
  // repeated .draiosproto.falco_subcategory subcats = 1;
  for (unsigned int i = 0, n = this->subcats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->subcats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.falco_subcategory_container)
}

::google::protobuf::uint8* falco_subcategory_container::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.falco_subcategory_container)
  // repeated .draiosproto.falco_subcategory subcats = 1;
  for (unsigned int i = 0, n = this->subcats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->subcats(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.falco_subcategory_container)
  return target;
}

size_t falco_subcategory_container::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.falco_subcategory_container)
  size_t total_size = 0;

  // repeated .draiosproto.falco_subcategory subcats = 1;
  {
    unsigned int count = this->subcats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subcats(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void falco_subcategory_container::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.falco_subcategory_container)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const falco_subcategory_container* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const falco_subcategory_container>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.falco_subcategory_container)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.falco_subcategory_container)
    UnsafeMergeFrom(*source);
  }
}

void falco_subcategory_container::MergeFrom(const falco_subcategory_container& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.falco_subcategory_container)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void falco_subcategory_container::UnsafeMergeFrom(const falco_subcategory_container& from) {
  GOOGLE_DCHECK(&from != this);
  subcats_.MergeFrom(from.subcats_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void falco_subcategory_container::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.falco_subcategory_container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void falco_subcategory_container::CopyFrom(const falco_subcategory_container& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.falco_subcategory_container)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool falco_subcategory_container::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->subcats())) return false;
  return true;
}

void falco_subcategory_container::Swap(falco_subcategory_container* other) {
  if (other == this) return;
  InternalSwap(other);
}
void falco_subcategory_container::InternalSwap(falco_subcategory_container* other) {
  subcats_.UnsafeArenaSwap(&other->subcats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata falco_subcategory_container::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = falco_subcategory_container_descriptor_;
  metadata.reflection = falco_subcategory_container_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// falco_subcategory_container

// repeated .draiosproto.falco_subcategory subcats = 1;
int falco_subcategory_container::subcats_size() const {
  return subcats_.size();
}
void falco_subcategory_container::clear_subcats() {
  subcats_.Clear();
}
const ::draiosproto::falco_subcategory& falco_subcategory_container::subcats(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_subcategory_container.subcats)
  return subcats_.Get(index);
}
::draiosproto::falco_subcategory* falco_subcategory_container::mutable_subcats(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_subcategory_container.subcats)
  return subcats_.Mutable(index);
}
::draiosproto::falco_subcategory* falco_subcategory_container::add_subcats() {
  // @@protoc_insertion_point(field_add:draiosproto.falco_subcategory_container.subcats)
  return subcats_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::falco_subcategory >*
falco_subcategory_container::mutable_subcats() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.falco_subcategory_container.subcats)
  return &subcats_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::falco_subcategory >&
falco_subcategory_container::subcats() const {
  // @@protoc_insertion_point(field_list:draiosproto.falco_subcategory_container.subcats)
  return subcats_;
}

inline const falco_subcategory_container* falco_subcategory_container::internal_default_instance() {
  return &falco_subcategory_container_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int falco_category::kNameFieldNumber;
const int falco_category::kStartupSubcatsFieldNumber;
const int falco_category::kRegularSubcatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

falco_category::falco_category()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.falco_category)
}

void falco_category::InitAsDefaultInstance() {
}

falco_category::falco_category(const falco_category& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.falco_category)
}

void falco_category::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

falco_category::~falco_category() {
  // @@protoc_insertion_point(destructor:draiosproto.falco_category)
  SharedDtor();
}

void falco_category::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void falco_category::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* falco_category::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return falco_category_descriptor_;
}

const falco_category& falco_category::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<falco_category> falco_category_default_instance_;

falco_category* falco_category::New(::google::protobuf::Arena* arena) const {
  falco_category* n = new falco_category;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void falco_category::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.falco_category)
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  startup_subcats_.Clear();
  regular_subcats_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool falco_category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.falco_category)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.falco_category.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_startup_subcats;
        break;
      }

      // repeated .draiosproto.falco_subcategory_container startup_subcats = 2;
      case 2: {
        if (tag == 18) {
         parse_startup_subcats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_startup_subcats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_startup_subcats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_startup_subcats;
        if (input->ExpectTag(26)) goto parse_loop_regular_subcats;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.falco_subcategory_container regular_subcats = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_regular_subcats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_regular_subcats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_regular_subcats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.falco_category)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.falco_category)
  return false;
#undef DO_
}

void falco_category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.falco_category)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_category.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .draiosproto.falco_subcategory_container startup_subcats = 2;
  for (unsigned int i = 0, n = this->startup_subcats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->startup_subcats(i), output);
  }

  // repeated .draiosproto.falco_subcategory_container regular_subcats = 3;
  for (unsigned int i = 0, n = this->regular_subcats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->regular_subcats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.falco_category)
}

::google::protobuf::uint8* falco_category::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.falco_category)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_category.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .draiosproto.falco_subcategory_container startup_subcats = 2;
  for (unsigned int i = 0, n = this->startup_subcats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->startup_subcats(i), false, target);
  }

  // repeated .draiosproto.falco_subcategory_container regular_subcats = 3;
  for (unsigned int i = 0, n = this->regular_subcats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->regular_subcats(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.falco_category)
  return target;
}

size_t falco_category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.falco_category)
  size_t total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated .draiosproto.falco_subcategory_container startup_subcats = 2;
  {
    unsigned int count = this->startup_subcats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startup_subcats(i));
    }
  }

  // repeated .draiosproto.falco_subcategory_container regular_subcats = 3;
  {
    unsigned int count = this->regular_subcats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regular_subcats(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void falco_category::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.falco_category)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const falco_category* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const falco_category>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.falco_category)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.falco_category)
    UnsafeMergeFrom(*source);
  }
}

void falco_category::MergeFrom(const falco_category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.falco_category)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void falco_category::UnsafeMergeFrom(const falco_category& from) {
  GOOGLE_DCHECK(&from != this);
  startup_subcats_.MergeFrom(from.startup_subcats_);
  regular_subcats_.MergeFrom(from.regular_subcats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void falco_category::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.falco_category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void falco_category::CopyFrom(const falco_category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.falco_category)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool falco_category::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->startup_subcats())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->regular_subcats())) return false;
  return true;
}

void falco_category::Swap(falco_category* other) {
  if (other == this) return;
  InternalSwap(other);
}
void falco_category::InternalSwap(falco_category* other) {
  name_.Swap(&other->name_);
  startup_subcats_.UnsafeArenaSwap(&other->startup_subcats_);
  regular_subcats_.UnsafeArenaSwap(&other->regular_subcats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata falco_category::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = falco_category_descriptor_;
  metadata.reflection = falco_category_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// falco_category

// required string name = 1;
bool falco_category::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void falco_category::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void falco_category::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void falco_category::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& falco_category::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_category.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_category::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.falco_category.name)
}
void falco_category::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.falco_category.name)
}
void falco_category::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.falco_category.name)
}
::std::string* falco_category::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_category.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* falco_category::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.falco_category.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_category::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.falco_category.name)
}

// repeated .draiosproto.falco_subcategory_container startup_subcats = 2;
int falco_category::startup_subcats_size() const {
  return startup_subcats_.size();
}
void falco_category::clear_startup_subcats() {
  startup_subcats_.Clear();
}
const ::draiosproto::falco_subcategory_container& falco_category::startup_subcats(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_category.startup_subcats)
  return startup_subcats_.Get(index);
}
::draiosproto::falco_subcategory_container* falco_category::mutable_startup_subcats(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_category.startup_subcats)
  return startup_subcats_.Mutable(index);
}
::draiosproto::falco_subcategory_container* falco_category::add_startup_subcats() {
  // @@protoc_insertion_point(field_add:draiosproto.falco_category.startup_subcats)
  return startup_subcats_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::falco_subcategory_container >*
falco_category::mutable_startup_subcats() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.falco_category.startup_subcats)
  return &startup_subcats_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::falco_subcategory_container >&
falco_category::startup_subcats() const {
  // @@protoc_insertion_point(field_list:draiosproto.falco_category.startup_subcats)
  return startup_subcats_;
}

// repeated .draiosproto.falco_subcategory_container regular_subcats = 3;
int falco_category::regular_subcats_size() const {
  return regular_subcats_.size();
}
void falco_category::clear_regular_subcats() {
  regular_subcats_.Clear();
}
const ::draiosproto::falco_subcategory_container& falco_category::regular_subcats(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_category.regular_subcats)
  return regular_subcats_.Get(index);
}
::draiosproto::falco_subcategory_container* falco_category::mutable_regular_subcats(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_category.regular_subcats)
  return regular_subcats_.Mutable(index);
}
::draiosproto::falco_subcategory_container* falco_category::add_regular_subcats() {
  // @@protoc_insertion_point(field_add:draiosproto.falco_category.regular_subcats)
  return regular_subcats_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::falco_subcategory_container >*
falco_category::mutable_regular_subcats() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.falco_category.regular_subcats)
  return &regular_subcats_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::falco_subcategory_container >&
falco_category::regular_subcats() const {
  // @@protoc_insertion_point(field_list:draiosproto.falco_category.regular_subcats)
  return regular_subcats_;
}

inline const falco_category* falco_category::internal_default_instance() {
  return &falco_category_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int falco_prog::kCommFieldNumber;
const int falco_prog::kExeFieldNumber;
const int falco_prog::kArgsFieldNumber;
const int falco_prog::kUserIdFieldNumber;
const int falco_prog::kContainerIdFieldNumber;
const int falco_prog::kCatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

falco_prog::falco_prog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.falco_prog)
}

void falco_prog::InitAsDefaultInstance() {
}

falco_prog::falco_prog(const falco_prog& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.falco_prog)
}

void falco_prog::SharedCtor() {
  _cached_size_ = 0;
  comm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = GOOGLE_ULONGLONG(0);
}

falco_prog::~falco_prog() {
  // @@protoc_insertion_point(destructor:draiosproto.falco_prog)
  SharedDtor();
}

void falco_prog::SharedDtor() {
  comm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exe_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void falco_prog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* falco_prog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return falco_prog_descriptor_;
}

const falco_prog& falco_prog::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<falco_prog> falco_prog_default_instance_;

falco_prog* falco_prog::New(::google::protobuf::Arena* arena) const {
  falco_prog* n = new falco_prog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void falco_prog::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.falco_prog)
  if (_has_bits_[0 / 32] & 27u) {
    if (has_comm()) {
      comm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_exe()) {
      exe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_container_id()) {
      container_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  args_.Clear();
  cats_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool falco_prog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.falco_prog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string comm = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comm().data(), this->comm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.falco_prog.comm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exe;
        break;
      }

      // required string exe = 2;
      case 2: {
        if (tag == 18) {
         parse_exe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exe().data(), this->exe().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.falco_prog.exe");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }

      // repeated string args = 3;
      case 3: {
        if (tag == 26) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->args(this->args_size() - 1).data(),
            this->args(this->args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.falco_prog.args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_args;
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }

      // required uint64 user_id = 4;
      case 4: {
        if (tag == 32) {
         parse_user_id:
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_container_id;
        break;
      }

      // optional string container_id = 5;
      case 5: {
        if (tag == 42) {
         parse_container_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->container_id().data(), this->container_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.falco_prog.container_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cats;
        break;
      }

      // repeated .draiosproto.falco_category cats = 6;
      case 6: {
        if (tag == 50) {
         parse_cats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_cats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_cats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.falco_prog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.falco_prog)
  return false;
#undef DO_
}

void falco_prog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.falco_prog)
  // required string comm = 1;
  if (has_comm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comm().data(), this->comm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_prog.comm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->comm(), output);
  }

  // required string exe = 2;
  if (has_exe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exe().data(), this->exe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_prog.exe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exe(), output);
  }

  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_prog.args");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->args(i), output);
  }

  // required uint64 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->user_id(), output);
  }

  // optional string container_id = 5;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_prog.container_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->container_id(), output);
  }

  // repeated .draiosproto.falco_category cats = 6;
  for (unsigned int i = 0, n = this->cats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.falco_prog)
}

::google::protobuf::uint8* falco_prog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.falco_prog)
  // required string comm = 1;
  if (has_comm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comm().data(), this->comm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_prog.comm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->comm(), target);
  }

  // required string exe = 2;
  if (has_exe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exe().data(), this->exe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_prog.exe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exe(), target);
  }

  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_prog.args");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->args(i), target);
  }

  // required uint64 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->user_id(), target);
  }

  // optional string container_id = 5;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_prog.container_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->container_id(), target);
  }

  // repeated .draiosproto.falco_category cats = 6;
  for (unsigned int i = 0, n = this->cats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->cats(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.falco_prog)
  return target;
}

size_t falco_prog::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.falco_prog)
  size_t total_size = 0;

  if (has_comm()) {
    // required string comm = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comm());
  }

  if (has_exe()) {
    // required string exe = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exe());
  }

  if (has_user_id()) {
    // required uint64 user_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  return total_size;
}
size_t falco_prog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.falco_prog)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string comm = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comm());

    // required string exe = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exe());

    // required uint64 user_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string container_id = 5;
  if (has_container_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->container_id());
  }

  // repeated string args = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  // repeated .draiosproto.falco_category cats = 6;
  {
    unsigned int count = this->cats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cats(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void falco_prog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.falco_prog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const falco_prog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const falco_prog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.falco_prog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.falco_prog)
    UnsafeMergeFrom(*source);
  }
}

void falco_prog::MergeFrom(const falco_prog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.falco_prog)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void falco_prog::UnsafeMergeFrom(const falco_prog& from) {
  GOOGLE_DCHECK(&from != this);
  args_.UnsafeMergeFrom(from.args_);
  cats_.MergeFrom(from.cats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comm()) {
      set_has_comm();
      comm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comm_);
    }
    if (from.has_exe()) {
      set_has_exe();
      exe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exe_);
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_container_id()) {
      set_has_container_id();
      container_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void falco_prog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.falco_prog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void falco_prog::CopyFrom(const falco_prog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.falco_prog)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool falco_prog::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cats())) return false;
  return true;
}

void falco_prog::Swap(falco_prog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void falco_prog::InternalSwap(falco_prog* other) {
  comm_.Swap(&other->comm_);
  exe_.Swap(&other->exe_);
  args_.UnsafeArenaSwap(&other->args_);
  std::swap(user_id_, other->user_id_);
  container_id_.Swap(&other->container_id_);
  cats_.UnsafeArenaSwap(&other->cats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata falco_prog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = falco_prog_descriptor_;
  metadata.reflection = falco_prog_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// falco_prog

// required string comm = 1;
bool falco_prog::has_comm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void falco_prog::set_has_comm() {
  _has_bits_[0] |= 0x00000001u;
}
void falco_prog::clear_has_comm() {
  _has_bits_[0] &= ~0x00000001u;
}
void falco_prog::clear_comm() {
  comm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comm();
}
const ::std::string& falco_prog::comm() const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_prog.comm)
  return comm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_prog::set_comm(const ::std::string& value) {
  set_has_comm();
  comm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.falco_prog.comm)
}
void falco_prog::set_comm(const char* value) {
  set_has_comm();
  comm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.falco_prog.comm)
}
void falco_prog::set_comm(const char* value, size_t size) {
  set_has_comm();
  comm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.falco_prog.comm)
}
::std::string* falco_prog::mutable_comm() {
  set_has_comm();
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_prog.comm)
  return comm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* falco_prog::release_comm() {
  // @@protoc_insertion_point(field_release:draiosproto.falco_prog.comm)
  clear_has_comm();
  return comm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_prog::set_allocated_comm(::std::string* comm) {
  if (comm != NULL) {
    set_has_comm();
  } else {
    clear_has_comm();
  }
  comm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.falco_prog.comm)
}

// required string exe = 2;
bool falco_prog::has_exe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void falco_prog::set_has_exe() {
  _has_bits_[0] |= 0x00000002u;
}
void falco_prog::clear_has_exe() {
  _has_bits_[0] &= ~0x00000002u;
}
void falco_prog::clear_exe() {
  exe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exe();
}
const ::std::string& falco_prog::exe() const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_prog.exe)
  return exe_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_prog::set_exe(const ::std::string& value) {
  set_has_exe();
  exe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.falco_prog.exe)
}
void falco_prog::set_exe(const char* value) {
  set_has_exe();
  exe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.falco_prog.exe)
}
void falco_prog::set_exe(const char* value, size_t size) {
  set_has_exe();
  exe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.falco_prog.exe)
}
::std::string* falco_prog::mutable_exe() {
  set_has_exe();
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_prog.exe)
  return exe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* falco_prog::release_exe() {
  // @@protoc_insertion_point(field_release:draiosproto.falco_prog.exe)
  clear_has_exe();
  return exe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_prog::set_allocated_exe(::std::string* exe) {
  if (exe != NULL) {
    set_has_exe();
  } else {
    clear_has_exe();
  }
  exe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exe);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.falco_prog.exe)
}

// repeated string args = 3;
int falco_prog::args_size() const {
  return args_.size();
}
void falco_prog::clear_args() {
  args_.Clear();
}
const ::std::string& falco_prog::args(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_prog.args)
  return args_.Get(index);
}
::std::string* falco_prog::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_prog.args)
  return args_.Mutable(index);
}
void falco_prog::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:draiosproto.falco_prog.args)
  args_.Mutable(index)->assign(value);
}
void falco_prog::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:draiosproto.falco_prog.args)
}
void falco_prog::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:draiosproto.falco_prog.args)
}
::std::string* falco_prog::add_args() {
  // @@protoc_insertion_point(field_add_mutable:draiosproto.falco_prog.args)
  return args_.Add();
}
void falco_prog::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:draiosproto.falco_prog.args)
}
void falco_prog::add_args(const char* value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:draiosproto.falco_prog.args)
}
void falco_prog::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:draiosproto.falco_prog.args)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
falco_prog::args() const {
  // @@protoc_insertion_point(field_list:draiosproto.falco_prog.args)
  return args_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
falco_prog::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.falco_prog.args)
  return &args_;
}

// required uint64 user_id = 4;
bool falco_prog::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void falco_prog::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void falco_prog::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void falco_prog::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 falco_prog::user_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_prog.user_id)
  return user_id_;
}
void falco_prog::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:draiosproto.falco_prog.user_id)
}

// optional string container_id = 5;
bool falco_prog::has_container_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void falco_prog::set_has_container_id() {
  _has_bits_[0] |= 0x00000010u;
}
void falco_prog::clear_has_container_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void falco_prog::clear_container_id() {
  container_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_container_id();
}
const ::std::string& falco_prog::container_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_prog.container_id)
  return container_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_prog::set_container_id(const ::std::string& value) {
  set_has_container_id();
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.falco_prog.container_id)
}
void falco_prog::set_container_id(const char* value) {
  set_has_container_id();
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.falco_prog.container_id)
}
void falco_prog::set_container_id(const char* value, size_t size) {
  set_has_container_id();
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.falco_prog.container_id)
}
::std::string* falco_prog::mutable_container_id() {
  set_has_container_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_prog.container_id)
  return container_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* falco_prog::release_container_id() {
  // @@protoc_insertion_point(field_release:draiosproto.falco_prog.container_id)
  clear_has_container_id();
  return container_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_prog::set_allocated_container_id(::std::string* container_id) {
  if (container_id != NULL) {
    set_has_container_id();
  } else {
    clear_has_container_id();
  }
  container_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.falco_prog.container_id)
}

// repeated .draiosproto.falco_category cats = 6;
int falco_prog::cats_size() const {
  return cats_.size();
}
void falco_prog::clear_cats() {
  cats_.Clear();
}
const ::draiosproto::falco_category& falco_prog::cats(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_prog.cats)
  return cats_.Get(index);
}
::draiosproto::falco_category* falco_prog::mutable_cats(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_prog.cats)
  return cats_.Mutable(index);
}
::draiosproto::falco_category* falco_prog::add_cats() {
  // @@protoc_insertion_point(field_add:draiosproto.falco_prog.cats)
  return cats_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::falco_category >*
falco_prog::mutable_cats() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.falco_prog.cats)
  return &cats_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::falco_category >&
falco_prog::cats() const {
  // @@protoc_insertion_point(field_list:draiosproto.falco_prog.cats)
  return cats_;
}

inline const falco_prog* falco_prog::internal_default_instance() {
  return &falco_prog_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int falco_container::kIdFieldNumber;
const int falco_container::kNameFieldNumber;
const int falco_container::kImageNameFieldNumber;
const int falco_container::kImageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

falco_container::falco_container()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.falco_container)
}

void falco_container::InitAsDefaultInstance() {
}

falco_container::falco_container(const falco_container& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.falco_container)
}

void falco_container::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

falco_container::~falco_container() {
  // @@protoc_insertion_point(destructor:draiosproto.falco_container)
  SharedDtor();
}

void falco_container::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void falco_container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* falco_container::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return falco_container_descriptor_;
}

const falco_container& falco_container::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<falco_container> falco_container_default_instance_;

falco_container* falco_container::New(::google::protobuf::Arena* arena) const {
  falco_container* n = new falco_container;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void falco_container::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.falco_container)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_image_name()) {
      image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_image_id()) {
      image_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool falco_container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.falco_container)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.falco_container.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.falco_container.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image_name;
        break;
      }

      // optional string image_name = 3;
      case 3: {
        if (tag == 26) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_name().data(), this->image_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.falco_container.image_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_image_id;
        break;
      }

      // optional string image_id = 4;
      case 4: {
        if (tag == 34) {
         parse_image_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_id().data(), this->image_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draiosproto.falco_container.image_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.falco_container)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.falco_container)
  return false;
#undef DO_
}

void falco_container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.falco_container)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_container.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_container.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string image_name = 3;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_container.image_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image_name(), output);
  }

  // optional string image_id = 4;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_container.image_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->image_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.falco_container)
}

::google::protobuf::uint8* falco_container::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.falco_container)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_container.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_container.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string image_name = 3;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_container.image_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image_name(), target);
  }

  // optional string image_id = 4;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draiosproto.falco_container.image_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->image_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.falco_container)
  return target;
}

size_t falco_container::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:draiosproto.falco_container)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
size_t falco_container::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.falco_container)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional string image_name = 3;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

    // optional string image_id = 4;
    if (has_image_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void falco_container::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.falco_container)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const falco_container* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const falco_container>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.falco_container)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.falco_container)
    UnsafeMergeFrom(*source);
  }
}

void falco_container::MergeFrom(const falco_container& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.falco_container)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void falco_container::UnsafeMergeFrom(const falco_container& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_image_name()) {
      set_has_image_name();
      image_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_name_);
    }
    if (from.has_image_id()) {
      set_has_image_id();
      image_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void falco_container::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.falco_container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void falco_container::CopyFrom(const falco_container& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.falco_container)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool falco_container::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void falco_container::Swap(falco_container* other) {
  if (other == this) return;
  InternalSwap(other);
}
void falco_container::InternalSwap(falco_container* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  image_name_.Swap(&other->image_name_);
  image_id_.Swap(&other->image_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata falco_container::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = falco_container_descriptor_;
  metadata.reflection = falco_container_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// falco_container

// required string id = 1;
bool falco_container::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void falco_container::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void falco_container::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void falco_container::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& falco_container::id() const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_container.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_container::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.falco_container.id)
}
void falco_container::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.falco_container.id)
}
void falco_container::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.falco_container.id)
}
::std::string* falco_container::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_container.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* falco_container::release_id() {
  // @@protoc_insertion_point(field_release:draiosproto.falco_container.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_container::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.falco_container.id)
}

// required string name = 2;
bool falco_container::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void falco_container::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void falco_container::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void falco_container::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& falco_container::name() const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_container.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_container::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.falco_container.name)
}
void falco_container::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.falco_container.name)
}
void falco_container::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.falco_container.name)
}
::std::string* falco_container::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_container.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* falco_container::release_name() {
  // @@protoc_insertion_point(field_release:draiosproto.falco_container.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_container::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.falco_container.name)
}

// optional string image_name = 3;
bool falco_container::has_image_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void falco_container::set_has_image_name() {
  _has_bits_[0] |= 0x00000004u;
}
void falco_container::clear_has_image_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void falco_container::clear_image_name() {
  image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_name();
}
const ::std::string& falco_container::image_name() const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_container.image_name)
  return image_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_container::set_image_name(const ::std::string& value) {
  set_has_image_name();
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.falco_container.image_name)
}
void falco_container::set_image_name(const char* value) {
  set_has_image_name();
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.falco_container.image_name)
}
void falco_container::set_image_name(const char* value, size_t size) {
  set_has_image_name();
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.falco_container.image_name)
}
::std::string* falco_container::mutable_image_name() {
  set_has_image_name();
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_container.image_name)
  return image_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* falco_container::release_image_name() {
  // @@protoc_insertion_point(field_release:draiosproto.falco_container.image_name)
  clear_has_image_name();
  return image_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_container::set_allocated_image_name(::std::string* image_name) {
  if (image_name != NULL) {
    set_has_image_name();
  } else {
    clear_has_image_name();
  }
  image_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_name);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.falco_container.image_name)
}

// optional string image_id = 4;
bool falco_container::has_image_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void falco_container::set_has_image_id() {
  _has_bits_[0] |= 0x00000008u;
}
void falco_container::clear_has_image_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void falco_container::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_id();
}
const ::std::string& falco_container::image_id() const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_container.image_id)
  return image_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_container::set_image_id(const ::std::string& value) {
  set_has_image_id();
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:draiosproto.falco_container.image_id)
}
void falco_container::set_image_id(const char* value) {
  set_has_image_id();
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:draiosproto.falco_container.image_id)
}
void falco_container::set_image_id(const char* value, size_t size) {
  set_has_image_id();
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:draiosproto.falco_container.image_id)
}
::std::string* falco_container::mutable_image_id() {
  set_has_image_id();
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_container.image_id)
  return image_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* falco_container::release_image_id() {
  // @@protoc_insertion_point(field_release:draiosproto.falco_container.image_id)
  clear_has_image_id();
  return image_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void falco_container::set_allocated_image_id(::std::string* image_id) {
  if (image_id != NULL) {
    set_has_image_id();
  } else {
    clear_has_image_id();
  }
  image_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:draiosproto.falco_container.image_id)
}

inline const falco_container* falco_container::internal_default_instance() {
  return &falco_container_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int falco_baseline::kProgsFieldNumber;
const int falco_baseline::kContainersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

falco_baseline::falco_baseline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_draios_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:draiosproto.falco_baseline)
}

void falco_baseline::InitAsDefaultInstance() {
}

falco_baseline::falco_baseline(const falco_baseline& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:draiosproto.falco_baseline)
}

void falco_baseline::SharedCtor() {
  _cached_size_ = 0;
}

falco_baseline::~falco_baseline() {
  // @@protoc_insertion_point(destructor:draiosproto.falco_baseline)
  SharedDtor();
}

void falco_baseline::SharedDtor() {
}

void falco_baseline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* falco_baseline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return falco_baseline_descriptor_;
}

const falco_baseline& falco_baseline::default_instance() {
  protobuf_InitDefaults_draios_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<falco_baseline> falco_baseline_default_instance_;

falco_baseline* falco_baseline::New(::google::protobuf::Arena* arena) const {
  falco_baseline* n = new falco_baseline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void falco_baseline::Clear() {
// @@protoc_insertion_point(message_clear_start:draiosproto.falco_baseline)
  progs_.Clear();
  containers_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool falco_baseline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:draiosproto.falco_baseline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .draiosproto.falco_prog progs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_progs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_progs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_progs;
        if (input->ExpectTag(18)) goto parse_loop_containers;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .draiosproto.falco_container containers = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_containers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_containers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_containers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:draiosproto.falco_baseline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:draiosproto.falco_baseline)
  return false;
#undef DO_
}

void falco_baseline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:draiosproto.falco_baseline)
  // repeated .draiosproto.falco_prog progs = 1;
  for (unsigned int i = 0, n = this->progs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->progs(i), output);
  }

  // repeated .draiosproto.falco_container containers = 2;
  for (unsigned int i = 0, n = this->containers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->containers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:draiosproto.falco_baseline)
}

::google::protobuf::uint8* falco_baseline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:draiosproto.falco_baseline)
  // repeated .draiosproto.falco_prog progs = 1;
  for (unsigned int i = 0, n = this->progs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->progs(i), false, target);
  }

  // repeated .draiosproto.falco_container containers = 2;
  for (unsigned int i = 0, n = this->containers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->containers(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:draiosproto.falco_baseline)
  return target;
}

size_t falco_baseline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:draiosproto.falco_baseline)
  size_t total_size = 0;

  // repeated .draiosproto.falco_prog progs = 1;
  {
    unsigned int count = this->progs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->progs(i));
    }
  }

  // repeated .draiosproto.falco_container containers = 2;
  {
    unsigned int count = this->containers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->containers(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void falco_baseline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:draiosproto.falco_baseline)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const falco_baseline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const falco_baseline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:draiosproto.falco_baseline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:draiosproto.falco_baseline)
    UnsafeMergeFrom(*source);
  }
}

void falco_baseline::MergeFrom(const falco_baseline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:draiosproto.falco_baseline)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void falco_baseline::UnsafeMergeFrom(const falco_baseline& from) {
  GOOGLE_DCHECK(&from != this);
  progs_.MergeFrom(from.progs_);
  containers_.MergeFrom(from.containers_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void falco_baseline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:draiosproto.falco_baseline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void falco_baseline::CopyFrom(const falco_baseline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:draiosproto.falco_baseline)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool falco_baseline::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->progs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->containers())) return false;
  return true;
}

void falco_baseline::Swap(falco_baseline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void falco_baseline::InternalSwap(falco_baseline* other) {
  progs_.UnsafeArenaSwap(&other->progs_);
  containers_.UnsafeArenaSwap(&other->containers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata falco_baseline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = falco_baseline_descriptor_;
  metadata.reflection = falco_baseline_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// falco_baseline

// repeated .draiosproto.falco_prog progs = 1;
int falco_baseline::progs_size() const {
  return progs_.size();
}
void falco_baseline::clear_progs() {
  progs_.Clear();
}
const ::draiosproto::falco_prog& falco_baseline::progs(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_baseline.progs)
  return progs_.Get(index);
}
::draiosproto::falco_prog* falco_baseline::mutable_progs(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_baseline.progs)
  return progs_.Mutable(index);
}
::draiosproto::falco_prog* falco_baseline::add_progs() {
  // @@protoc_insertion_point(field_add:draiosproto.falco_baseline.progs)
  return progs_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::falco_prog >*
falco_baseline::mutable_progs() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.falco_baseline.progs)
  return &progs_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::falco_prog >&
falco_baseline::progs() const {
  // @@protoc_insertion_point(field_list:draiosproto.falco_baseline.progs)
  return progs_;
}

// repeated .draiosproto.falco_container containers = 2;
int falco_baseline::containers_size() const {
  return containers_.size();
}
void falco_baseline::clear_containers() {
  containers_.Clear();
}
const ::draiosproto::falco_container& falco_baseline::containers(int index) const {
  // @@protoc_insertion_point(field_get:draiosproto.falco_baseline.containers)
  return containers_.Get(index);
}
::draiosproto::falco_container* falco_baseline::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:draiosproto.falco_baseline.containers)
  return containers_.Mutable(index);
}
::draiosproto::falco_container* falco_baseline::add_containers() {
  // @@protoc_insertion_point(field_add:draiosproto.falco_baseline.containers)
  return containers_.Add();
}
::google::protobuf::RepeatedPtrField< ::draiosproto::falco_container >*
falco_baseline::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:draiosproto.falco_baseline.containers)
  return &containers_;
}
const ::google::protobuf::RepeatedPtrField< ::draiosproto::falco_container >&
falco_baseline::containers() const {
  // @@protoc_insertion_point(field_list:draiosproto.falco_baseline.containers)
  return containers_;
}

inline const falco_baseline* falco_baseline::internal_default_instance() {
  return &falco_baseline_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace draiosproto

// @@protoc_insertion_point(global_scope)
