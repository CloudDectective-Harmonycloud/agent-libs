/* vim:expandtab:sw=4:ts=4:sts=4
*/

pipeline {
    agent { label 'agent-docker-builder' }
    parameters {
        string(name: 'AGENT_BRANCH', defaultValue: 'dev', trim: true)
        string(name: 'SYSDIG_BRANCH', defaultValue: 'dev', trim: true)
        string(name: 'FALCO_BRANCH', defaultValue: 'master-sync', trim: true)
        string(name: 'PROTOREPO_BRANCH', defaultValue: 'master', trim: true)
        string(name: 'LIBSINSP_BRANCH', defaultValue: 'dev', trim: true)
        string(name: 'BUILDER_VERSION', defaultValue: 'latest', trim: true)
        string(name: 'LIBSCAP_HAYABUSA_BRANCH', defaultValue: 'dev', trim: true)
        string(name: 'VERSION_TAG', defaultValue: '', trim: true, description: 'DO NOT SET! Only to be set by the postsubmit job when building the "official" dev version. This will upload the appropriately tagged (0.99.Xdev) build as well')
        string(name: 'LIBS_BRANCH', defaultValue: 'dev', trim: true)
        booleanParam(name: 'USE_LEGACY_LIBS', defaultValue: false, description: 'Checkout and use libsinsp and libscap from their respective legacy repositories, as opposed to agent-libs')
    }
    environment {
        AGENT_BRANCH="${params.AGENT_BRANCH}"
        BUILDER_VERSION="${params.BUILDER_VERSION}"
        USE_LEGACY_LIBS="${params.USE_LEGACY_LIBS}"
        VERSION_TAG="${params.VERSION_TAG}"
    }
    stages {
        stage('Check out dependencies') {
            steps {
                dir('agent') {
                    checkout scm
                }
                dir('oss-falco') {
                    checkout([$class: 'GitSCM', branches: [[name: 'master-sync']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/oss-falco']]])
                    sh "git checkout ${params.FALCO_BRANCH}"
                }
                dir('libsinsp') {
                    checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/libsinsp']]])
                    sh "git checkout ${params.LIBSINSP_BRANCH}"
                }
                dir('libscap-hayabusa') {
                    checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/libscap-hayabusa']]])
                    sh "git checkout ${params.LIBSCAP_HAYABUSA_BRANCH}"
                }
                dir('protorepo') {
                    checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/protorepo']]])
                    sh "git checkout ${params.PROTOREPO_BRANCH}"
                }
                dir('agent-libs') {
                    checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/agent-libs']]])
                    sh "git checkout ${params.LIBS_BRANCH}"
                }
            }
        }
        stage('Build') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'QUAY', passwordVariable: 'QUAY_PASSWORD', usernameVariable: 'QUAY_USERNAME')]) {
                    sh label: '', script: '''
                        echo "$QUAY_PASSWORD" | docker login quay.io -u="$QUAY_USERNAME" --password-stdin
                        docker pull quay.io/sysdig/agent-builder:$BUILDER_VERSION-alpine
                        if [ ! -z $VERSION_TAG ]
                        then
                            docker run -i --rm -e MAKE_JOBS=$(nproc) -e AGENT_IMAGE=agentino-internal:$AGENT_BRANCH -e USE_OLD_DIRS=$USE_LEGACY_LIBS -e AGENT_VERSION=$VERSION_TAG -v $PWD:/draios:ro -v /var/run/docker.sock:/var/run/docker.sock quay.io/sysdig/agent-builder:$BUILDER_VERSION-alpine agentino
                        else
                            docker run -i --rm -e MAKE_JOBS=$(nproc) -e AGENT_IMAGE=agentino-internal:$AGENT_BRANCH -e USE_OLD_DIRS=$USE_LEGACY_LIBS -v $PWD:/draios:ro -v /var/run/docker.sock:/var/run/docker.sock quay.io/sysdig/agent-builder:$BUILDER_VERSION-alpine agentino
                        fi
                    '''
                }
            }
        }
        stage('Upload') {
            steps {
                script {
                    docker.withRegistry("https://docker.internal.sysdig.com", 'jenkins-artifactory') {
                        sh label: '', script: '''
                            docker tag agentino-internal:$AGENT_BRANCH  docker.internal.sysdig.com/agentino-internal:$AGENT_BRANCH
                            docker push docker.internal.sysdig.com/agentino-internal:$AGENT_BRANCH
                            if [ ! -z $VERSION_TAG ]
                            then
                                docker tag agentino-internal:$AGENT_BRANCH  docker.internal.sysdig.com/agentino-internal:$VERSION_TAG
                                docker push docker.internal.sysdig.com/agentino-internal:$VERSION_TAG
                            fi
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            sh label: '', script: '''
                docker rmi -f agentino-internal:$AGENT_BRANCH || echo "no container to remove"
                docker rmi -f $(docker images | grep -vE 'quay.io/sysdig/agent-builder.*latest-(alpine|centos)' | awk 'NR>1 {print $3}') || echo "no containers to remove"
                docker images -q -f 'dangling=true' | xargs --no-run-if-empty docker rmi -f || echo "something went wrong"
                sudo rm -rf * .[!.]*
            '''
            cleanWs()
        }
    }
}
