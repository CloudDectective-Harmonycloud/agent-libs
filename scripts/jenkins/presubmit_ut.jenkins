/* vim:expandtab:sw=4:ts=4:sts=4
*/

pipeline {
    agent { label 'agent-docker-builder' }
    parameters {
        string(name: 'AGENT_BRANCH', defaultValue: 'dev')
        string(name: 'LIBSCAP_BRANCH', defaultValue: 'dev')
        string(name: 'FALCO_BRANCH', defaultValue: 'master-sync')
        string(name: 'BUILDER_VERSION', defaultValue: 'latest', description: 'build container to use for building the agent')
        string(name: 'PROTOREPO_BRANCH', defaultValue: 'master')
        string(name: 'PROMETHEUS_BRANCH', defaultValue: 'master')
        string(name: 'LIBSINSP_BRANCH', defaultValue: 'dev')
        string(name: 'LIBS_BRANCH', defaultValue: 'dev')
        booleanParam(name: 'USE_LEGACY_LIBS', defaultValue: false, description: 'Checkout and use libsinsp and libscap from their respective legacy repositories, as opposed to agent-libs')
    }
    environment {
        BUILDER_VERSION="${params.BUILDER_VERSION}"
        CONTAINER_NAME="${params.CONTAINER_NAME}"
    }
    stages {
        stage('Check out dependencies') {
            steps {
                dir('agent') {
                    checkout scm
                }
                dir('oss-falco') {
                    checkout([$class: 'GitSCM', branches: [[name: 'master-sync']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/oss-falco']]])
                    sh "git checkout ${params.FALCO_BRANCH}"
                }
                dir('libsinsp') {
                    checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/libsinsp']]])
                    sh "git checkout ${params.LIBSINSP_BRANCH}"
                }
                dir('libscap') {
                    checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/libscap']]])
                    sh "git checkout ${params.LIBSCAP_BRANCH}"
                }
                dir('protorepo') {
                    checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/protorepo']]])
                    sh "git checkout ${params.PROTOREPO_BRANCH}"
                }
                dir('agent-libs') {
                    checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/agent-libs']]])
                    sh "git checkout ${params.LIBS_BRANCH}"
                }
            }
        }
        stage('Build and Unit Test') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'QUAY', passwordVariable: 'QUAY_PASSWORD', usernameVariable: 'QUAY_USERNAME')]) {
                    sh label: '', script: '''
                        echo "$QUAY_PASSWORD" | docker login quay.io -u="$QUAY_USERNAME" --password-stdin
                        docker pull quay.io/sysdig/agent-builder:$BUILDER_VERSION
                        CONTAINER_NAME=presubmit-$BUILD_NUMBER
                        docker rm -f "$CONTAINER_NAME" || true
                        cd agent; git rev-parse HEAD; cd ..;
                        cd oss-falco; git rev-parse HEAD; cd ..;
                        cd libscap; git rev-parse HEAD; cd ..;
                        cd protorepo; git rev-parse HEAD; cd ..;
                        cd agent-libs; git rev-parse HEAD; cd ..;
                        timeout 3600 docker run -i --rm --name "$CONTAINER_NAME" -e MAKE_JOBS=$(nproc) -v $PWD:/draios:ro -e USE_OLD_DIRS=$USE_LEGACY_LIBS quay.io/sysdig/agent-builder:$BUILDER_VERSION presubmit
                        docker rm -f "$CONTAINER_NAME" || true
                    '''
                }
            }
        }
    }
    post {
        always {
            sh label: '', script: '''
                docker rmi -f $(docker images | grep -ve 'quay.io/sysdig/agent-builder.*latest'  | awk 'NR>1 {print $3}') || echo "no containers to remove"
                docker images -q -f 'dangling=true' | xargs --no-run-if-empty docker rmi -f || echo "something went wrong"
                sudo rm -rf * .[!.]*

            '''
            cleanWs()
        }
    }
}
