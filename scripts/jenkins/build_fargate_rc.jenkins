pipeline {
    agent { label 'agent-docker-builder' }
    stages {
        stage('Check out dependencies') {
           steps {
                dir('agent') {
                    checkout scm
                    sh "git checkout ${params.AGENT_BRANCH}"
                }
                dir('oss-falco') {
                    checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/oss-falco']]])
                    sh "git checkout ${params.FALCO_BRANCH}"
                }
                dir('libsinsp') {
                    checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/libsinsp']]])
                    sh "git checkout ${params.LIBSINSP_BRANCH}"
                }
                dir('libscap') {
                    checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/libscap']]])
                    sh "git checkout ${params.LIBSCAP_BRANCH}"
                }
                dir('libscap-hayabusa') {
                    checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/libscap-hayabusa']]])
                    sh "git checkout ${params.LIBSCAP_HAYABUSA_BRANCH}"
                }
                dir('protorepo') {
                    checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/protorepo']]])
                    sh "git checkout ${params.PROTOREPO_BRANCH}"
                }
            }
        }
		stage('Build Agentino'){
			steps {
				withCredentials([usernamePassword(credentialsId: 'QUAY', passwordVariable: 'QUAY_PASSWORD', usernameVariable: 'QUAY_USERNAME')]) {
					sh label: '', script: '''
						echo "$QUAY_PASSWORD" | docker login quay.io -u="$QUAY_USERNAME" --password-stdin
						AGENT_BUILD_COMMIT="`git -C agent rev-parse --short HEAD`"
						docker pull quay.io/sysdig/agent-builder:$BUILDER_VERSION-alpine
						docker run -i --rm -e MAKE_JOBS=$(nproc) -e AGENT_VERSION=$RELEASE_VERSION -e AGENT_BUILD_COMMIT -e AGENT_BUILD_DATE="`date`" -e AGENT_IMAGE=docker.internal.sysdig.com/agentino-internal:$RELEASE_VERSION-rc$BUILD_NUMBER -v $PWD:/draios:ro -v $PWD/out:/out -v /var/run/docker.sock:/var/run/docker.sock -v $PWD/pipcache:/root/.cache quay.io/sysdig/agent-builder:$BUILDER_VERSION-alpine agentino
					'''
				}
			}
		}
		stage('Upload Agentino'){
            when {
                expression { params.UPLOAD == true }
            }
            steps {
				script {
					docker.withRegistry("https://docker.internal.sysdig.com", 'jenkins-artifactory') {
						sh label: '', script: '''
							docker push docker.internal.sysdig.com/agentino-internal:$RELEASE_VERSION-rc$BUILD_NUMBER
						'''
					}
				}
			}
		}
        stage('Build Agentone') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME'), usernamePassword(credentialsId: 'QUAY', passwordVariable: 'QUAY_PASSWORD', usernameVariable: 'QUAY_USERNAME')]) {
                    sh label: '', script: '''
                        echo "$QUAY_PASSWORD" | docker login quay.io -u="$QUAY_USERNAME" --password-stdin
                        AGENT_BUILD_COMMIT="`git -C agent rev-parse --short HEAD`"
                        docker pull quay.io/sysdig/agent-builder:$BUILDER_VERSION
                        sudo rm -rf $PWD/out
						# we don't care about promscrape in fargate. It will always download
						# which is a bit jank, so at least set it to something guaranteed
						# to be there
                        docker run -i --rm -e MAKE_JOBS=$(nproc) -e AGENT_VERSION=$RELEASE_VERSION -e AGENT_BUILD_COMMIT -e AGENT_BUILD_DATE="`date`" -e PROMSCRAPE_VERSION=dev -v $PWD:/draios:ro -v $PWD/out:/out -v /var/run/docker.sock:/var/run/docker.sock -v $PWD/pipcache:/root/.cache quay.io/sysdig/agent-builder:$BUILDER_VERSION release
                    '''
                }
            }
        }
        stage('Upload Packages') {
            when {
                expression { params.UPLOAD == true }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh label: '', script: '''
                        echo "$DOCKER_PASSWORD" | docker login docker.io -u="$DOCKER_USERNAME" --password-stdin
                        sudo rm -rf $PWD/repo
                        sudo agent/scripts/jenkins/upload-agent fargate-rc $PWD/out $PWD/repo "s3://download.draios.com" $RELEASE_VERSION release
                    '''
                }
            }
        }
		stage('Build Agentone Container') {
            when {
                expression { params.UPLOAD == true }
            }
			steps {
				sh label: '', script: '''
					sudo agent/scripts/jenkins/build-prod-container $PWD/out docker.internal.sysdig.com/agentone:$RELEASE_VERSION-rc$BUILD_NUMBER
				'''
			}
		}
		stage('Upload Agentone Container'){
            when {
                expression { params.UPLOAD == true }
            }
            steps {
				script {
					docker.withRegistry("https://docker.internal.sysdig.com", 'jenkins-artifactory') {
						sh label: '', script: '''
							docker push docker.internal.sysdig.com/agentone:$RELEASE_VERSION-rc$BUILD_NUMBER
						'''
					}
				}
			}
		}

    }
    post {
        always {
            sh label: '', script: '''
                sudo rm -rf ./build
                sudo rm -rf ./out
                docker rmi -f $(docker images | grep -ve 'quay.io/sysdig/agent-builder.*latest'  | awk 'NR>1 {print $3}') || echo "no containers to remove"
                docker images -q -f 'dangling=true' | xargs --no-run-if-empty docker rmi -f
            '''
            cleanWs deleteDirs: true, notFailBuild: true
        }
    }
}
