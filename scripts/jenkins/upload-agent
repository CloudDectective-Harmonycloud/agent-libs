#!/bin/bash
set -exuo pipefail

# repo-name should be rc, dev, or stable
# bin-dir should be what was mapped to /out when invoking the release build target container
# repo-dir is just some place to use as a working dir. this can probably be removed
# s3 bucket is the url for the s3 bucket
# agent_version is something like 11.0.0
# build-variant is release or debug
if [ $# -ne 6 ]
then
    echo "Usage: $0 repo-name bin-dir repo-dir s3-bucket agent_version build-variant" >&2
    exit 1
fi

REPOSITORY_NAME=$1
BINARIES_DIR=$2
REPOSITORY_DIR=$3
S3_BUCKET=$4
AGENT_VERSION=$5
BUILD_VARIANT=$6

SCRIPT=$(readlink -f $0)
SCRIPTS_DIR=$(dirname $(dirname $SCRIPT))
BASEARCH=$(uname -m)
PACKAGES_DIR=$BINARIES_DIR/$BUILD_VARIANT

export AWS_DEFAULT_REGION="us-east-1"



function configure_rpm_repo {
	RPM_BASEARCH=$(python -c 'import rpmUtils.arch; print rpmUtils.arch.getBaseArch()')

	mkdir -p $REPOSITORY_DIR/rpm/$RPM_BASEARCH
	
	aws s3 sync $S3_BUCKET/$REPOSITORY_NAME/rpm/$RPM_BASEARCH/ $REPOSITORY_DIR/rpm/$RPM_BASEARCH/ --acl public-read --delete --exact-timestamps
	ls -1tdr $REPOSITORY_DIR/rpm/$RPM_BASEARCH/draios*dockerfiles* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr $REPOSITORY_DIR/rpm/$RPM_BASEARCH/draios*tests* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr $REPOSITORY_DIR/rpm/$RPM_BASEARCH/*agent.* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr $REPOSITORY_DIR/rpm/$RPM_BASEARCH/*agent-slim* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr $REPOSITORY_DIR/rpm/$RPM_BASEARCH/*agent-kmodule* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr $REPOSITORY_DIR/rpm/$RPM_BASEARCH/*agent-kmodule-thin* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr $REPOSITORY_DIR/rpm/$RPM_BASEARCH/*sysdig* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr $REPOSITORY_DIR/rpm/$RPM_BASEARCH/*falco* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr $REPOSITORY_DIR/rpm/$RPM_BASEARCH/*agentone* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr $REPOSITORY_DIR/rpm/$RPM_BASEARCH/*agentino* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr $REPOSITORY_DIR/rpm/$BASEARCH/*Unspecified* | xargs -d '\n' rm -f || true
	ls -1tdr $REPOSITORY_DIR/rpm/$BASEARCH/*fake-collector* | xargs -d '\n' rm -f || true
	ls -1tdr $REPOSITORY_DIR/rpm/$BASEARCH/*unit-test* | xargs -d '\n' rm -f || true

	if test -n "$(find $PACKAGES_DIR -maxdepth 1 -name '*.rpm' -print -quit)"
	then
		$SCRIPTS_DIR/rpm-sign.exp $PACKAGES_DIR/*rpm
		cp $PACKAGES_DIR/*rpm $REPOSITORY_DIR/rpm/$RPM_BASEARCH
	fi
	createrepo $REPOSITORY_DIR/rpm/$RPM_BASEARCH
	gpg --local-user EC51E8C4 --batch --no-tty --yes --detach-sign --armor $REPOSITORY_DIR/rpm/$RPM_BASEARCH/repodata/repomd.xml

	cp $SCRIPTS_DIR/draios.repo $REPOSITORY_DIR/rpm
	sed -i s/_REPOSITORY_/$REPOSITORY_NAME/g $REPOSITORY_DIR/rpm/draios.repo

	aws s3 cp $REPOSITORY_DIR/rpm/draios.repo $S3_BUCKET/$REPOSITORY_NAME/rpm/ --acl public-read
	aws s3 sync $REPOSITORY_DIR/rpm/$RPM_BASEARCH/ $S3_BUCKET/$REPOSITORY_NAME/rpm/$RPM_BASEARCH/ --acl public-read --delete --exact-timestamps
}

function checksum {
	LABEL=$1
	CMD=$2

	cat <<EOF
$LABEL:
 $($CMD Packages | cut -d" " -f1) $(du -b Packages | tr \\t " ")
 $($CMD Packages.gz | cut -d" " -f1) $(du -b Packages.gz | tr \\t " ")
EOF

}

function configure_debian_repo {
	DEB_BASEARCH=$(dpkg --print-architecture)

	mkdir -p $REPOSITORY_DIR/deb/stable-$DEB_BASEARCH
	pushd $REPOSITORY_DIR/deb
	
	aws s3 sync $S3_BUCKET/$REPOSITORY_NAME/deb/stable-$DEB_BASEARCH/ stable-$DEB_BASEARCH/ --acl public-read --delete --exact-timestamps
	ls -1tdr stable-$DEB_BASEARCH/draios*dockerfiles* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr stable-$DEB_BASEARCH/draios*tests* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr stable-$DEB_BASEARCH/*agent.* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr stable-$DEB_BASEARCH/*agent-slim* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr stable-$DEB_BASEARCH/*agent-kmodule* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr stable-$DEB_BASEARCH/*agent-kmodule-thin* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr stable-$DEB_BASEARCH/*falco* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr stable-$DEB_BASEARCH/*sysdig* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr stable-$DEB_BASEARCH/*agentone* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr stable-$DEB_BASEARCH/*agentino* | head -n -5 | xargs -d '\n' rm -f || true
	ls -1tdr stable-$DEB_BASEARCH/*Unspecified* | xargs -d '\n' rm -f || true
	ls -1tdr stable-$DEB_BASEARCH/*fake-collector* | xargs -d '\n' rm -f || true
	ls -1tdr stable-$DEB_BASEARCH/*unit-test* | xargs -d '\n' rm -f || true

	if test -n "$(find $PACKAGES_DIR -maxdepth 1 -name '*.deb' -print -quit)"
	then
		$SCRIPTS_DIR/dpkg-sig -k EC51E8C4 -s builder $PACKAGES_DIR/*deb
		cp $PACKAGES_DIR/*deb stable-$DEB_BASEARCH
	fi
	dpkg-scanpackages --multiversion stable-$DEB_BASEARCH > stable-$DEB_BASEARCH/Packages

	gzip -c stable-$DEB_BASEARCH/Packages > stable-$DEB_BASEARCH/Packages.gz
	pushd stable-$DEB_BASEARCH
	(cat <<EOF
Date: $(date -R)
Suite: stable-$DEB_BASEARCH
EOF
	checksum MD5Sum md5sum
	checksum SHA1 sha1sum
	checksum SHA256 sha256sum
	checksum SHA512 sha512sum
	) > Release
	gpg --local-user EC51E8C4 --batch --no-tty --yes --digest-algo SHA256 -abs -o Release.gpg Release
	gpg --local-user EC51E8C4 --batch --no-tty --yes -a -s --clearsign --digest-algo SHA256 --output  InRelease Release
	popd

	sed s/_REPOSITORY_/$REPOSITORY_NAME/g < $SCRIPTS_DIR/draios.list > draios.list

	aws s3 cp draios.list $S3_BUCKET/$REPOSITORY_NAME/deb/ --acl public-read
	aws s3 sync stable-$DEB_BASEARCH/ $S3_BUCKET/$REPOSITORY_NAME/deb/stable-$DEB_BASEARCH/ --acl public-read --delete --exact-timestamps

	popd
}

function configure_tgz_repo {
	if test -n "$(find $PACKAGES_DIR -maxdepth 1 -name '*.tar.gz' -print -quit)"
	then
		mkdir -p $REPOSITORY_DIR/tgz/$BASEARCH

		aws s3 sync $S3_BUCKET/$REPOSITORY_NAME/tgz/$BASEARCH/ $REPOSITORY_DIR/tgz/$BASEARCH/ --acl public-read --delete --exact-timestamps
		ls -1tdr $REPOSITORY_DIR/tgz/$BASEARCH/draios*dockerfiles* | head -n -5 | xargs -d '\n' rm -f || true
		ls -1tdr $REPOSITORY_DIR/tgz/$BASEARCH/draios*tests* | head -n -5 | xargs -d '\n' rm -f || true
		ls -1tdr $REPOSITORY_DIR/tgz/$BASEARCH/*agent.* | head -n -5 | xargs -d '\n' rm -f || true
		ls -1tdr $REPOSITORY_DIR/tgz/$BASEARCH/*agent-slim* | head -n -5 | xargs -d '\n' rm -f || true
		ls -1tdr $REPOSITORY_DIR/tgz/$BASEARCH/*agent-kmodule* | head -n -5 | xargs -d '\n' rm -f || true
		ls -1tdr $REPOSITORY_DIR/tgz/$BASEARCH/*agent-kmodule-thin* | head -n -5 | xargs -d '\n' rm -f || true
		ls -1tdr $REPOSITORY_DIR/tgz/$BASEARCH/*sysdig* | head -n -5 | xargs -d '\n' rm -f || true
		ls -1tdr $REPOSITORY_DIR/tgz/$BASEARCH/*falco* | head -n -5 | xargs -d '\n' rm -f || true
		ls -1tdr $REPOSITORY_DIR/tgz/$BASEARCH/*agentone* | head -n -5 | xargs -d '\n' rm -f || true
		ls -1tdr $REPOSITORY_DIR/tgz/$BASEARCH/*agentino* | head -n -5 | xargs -d '\n' rm -f || true
		ls -1tdr $REPOSITORY_DIR/tgz/$BASEARCH/*Unspecified* | xargs -d '\n' rm -f || true
		ls -1tdr $REPOSITORY_DIR/tgz/$BASEARCH/*fake-collector* | xargs -d '\n' rm -f || true
		ls -1tdr $REPOSITORY_DIR/tgz/$BASEARCH/*unit-test* | xargs -d '\n' rm -f || true

		cp $PACKAGES_DIR/*tar.gz $REPOSITORY_DIR/tgz/$BASEARCH
		aws s3 sync $REPOSITORY_DIR/tgz/$BASEARCH/ $S3_BUCKET/$REPOSITORY_NAME/tgz/$BASEARCH --acl public-read --delete --exact-timestamps
	fi
}

function configure_installers {

	# Some jenkins jobs don't have permission to overwrite the
	# install-script. Allow for them to skip this without failing
	if [[ ! ( ${SKIP_OVERWRITE_SCRIPTS-} == 'yes' ) ]]
	then
		for FILE_NAME in install-agent install-agent-kubernetes; do

			TEMPLATE_FILE="${SCRIPTS_DIR}/${FILE_NAME}"
			cp ${TEMPLATE_FILE} ${REPOSITORY_DIR}/${FILE_NAME}

			sed -i s/_REPOSITORY_NAME_/${REPOSITORY_NAME}/g ${REPOSITORY_DIR}/${FILE_NAME}
			aws s3 cp $REPOSITORY_DIR/${FILE_NAME} $S3_BUCKET/$REPOSITORY_NAME/ --acl public-read
		done

		aws s3 cp $SCRIPTS_DIR/smoke-tests $S3_BUCKET/ --acl public-read
	fi
}

function upload_binaries {
	rm -rf $REPOSITORY_DIR
	configure_rpm_repo
	configure_debian_repo
	configure_tgz_repo
	configure_installers
}

pushd $SCRIPTS_DIR/../..
upload_binaries
popd
