#!/bin/bash

if [ -z "$SYSDIG_VERSION" ]
then
    echo "\$SYSDIG_VERSION must be set" >&2
    exit 1
fi

set -exuo pipefail

REPOSITORY_BASENAME=$1
BUILDER_IMAGE=${BUILDER_IMAGE:-quay.io/sysdig/agent-builder}
ACTUALLY_RELEASE=${ACTUALLY_RELEASE:-}

SCRIPT=$(readlink -f $0)
SCRIPTS_DIR=$(dirname $(dirname $SCRIPT))
BINARIES_DIR=$(mktemp -d -p . -t binariesXXXXXX | xargs -I{} echo "$(pwd)/{}")
REPOSITORY_DIR=$(mktemp -d -p . -t repoXXXXXX | xargs -I{} echo "$(pwd)/{}")
DEB_REPOSITORY_DIR=$REPOSITORY_DIR/deb/
JOBS=${JOBS:-$(nproc)}

cd $SCRIPTS_DIR/..
AGENT_REPO_ROOT=$(pwd)
cd ..

if [ -z "$ACTUALLY_RELEASE" ]
then
    AWS=echo
else
    AWS=aws
fi


export AWS_DEFAULT_REGION="us-east-1"


function build_components {
    rm -rf $BINARIES_DIR
    mkdir -p $BINARIES_DIR

    docker run -it --rm -e MAKE_JOBS=$JOBS -e SYSDIG_VERSION -v $(pwd):/draios:ro -v /var/run/docker.sock:/var/run/docker.sock -v $BINARIES_DIR:/out $BUILDER_IMAGE sysdig-release
}

function configure_rpm_repo {
    RPM_BASEARCH=$(python -c 'import rpmUtils.arch; print rpmUtils.arch.getBaseArch()')

    mkdir -p $REPOSITORY_DIR/rpm/$RPM_BASEARCH
    
    ${AWS} s3 sync s3://download.draios.com/$REPOSITORY_NAME/rpm/$RPM_BASEARCH/ $REPOSITORY_DIR/rpm/$RPM_BASEARCH/ --acl public-read --delete --exact-timestamps
    ls -1tdr $REPOSITORY_DIR/rpm/$RPM_BASEARCH/*sysdig*.rpm | head -n -5 | xargs -d '\n' rm -f || true

    if [ -n "$ACTUALLY_RELEASE" ]
    then
        $SCRIPTS_DIR/rpm-sign.exp $PACKAGES_DIR/*rpm
    fi
    cp $PACKAGES_DIR/*rpm $REPOSITORY_DIR/rpm/$RPM_BASEARCH
    createrepo $REPOSITORY_DIR/rpm/$RPM_BASEARCH

    cp $SCRIPTS_DIR/draios.repo $REPOSITORY_DIR/rpm
    sed -i s/_REPOSITORY_/$REPOSITORY_NAME/g $REPOSITORY_DIR/rpm/draios.repo

    ${AWS} s3 cp $REPOSITORY_DIR/rpm/draios.repo s3://download.draios.com/$REPOSITORY_NAME/rpm/ --acl public-read
    ${AWS} s3 sync $REPOSITORY_DIR/rpm/$RPM_BASEARCH/ s3://download.draios.com/$REPOSITORY_NAME/rpm/$RPM_BASEARCH/ --acl public-read --delete --exact-timestamps
}

function configure_debian_repo {
    DEB_BASEARCH=$(dpkg --print-architecture)

    mkdir -p $REPOSITORY_DIR/deb/stable-$DEB_BASEARCH
    
    ${AWS} s3 sync s3://download.draios.com/$REPOSITORY_NAME/deb/stable-$DEB_BASEARCH/ $REPOSITORY_DIR/deb/stable-$DEB_BASEARCH/ --acl public-read --delete --exact-timestamps
    ls -1tdr $REPOSITORY_DIR/deb/stable-$DEB_BASEARCH/*sysdig* | head -n -5 | xargs -d '\n' rm -f || true

    if [ -n "$ACTUALLY_RELEASE" ]
    then
        $SCRIPTS_DIR/dpkg-sig -s builder $PACKAGES_DIR/*deb
    fi
    cp $PACKAGES_DIR/*deb $REPOSITORY_DIR/deb/stable-$DEB_BASEARCH
    dpkg-scanpackages --multiversion $REPOSITORY_DIR/deb/stable-$DEB_BASEARCH | sed s@$DEB_REPOSITORY_DIR@@ > $REPOSITORY_DIR/deb/stable-$DEB_BASEARCH/Packages

    gzip -c $REPOSITORY_DIR/deb/stable-$DEB_BASEARCH/Packages > $REPOSITORY_DIR/deb/stable-$DEB_BASEARCH/Packages.gz
    cd $REPOSITORY_DIR/deb/stable-$DEB_BASEARCH
    echo "Date:" $(date -R) > Release
    echo "Suite: stable-$DEB_BASEARCH" >> Release
    echo "MD5Sum:" >> Release
    echo -n " "$(md5sum Packages | cut -d" " -f1) >> Release
    echo " "$(du -b Packages) >> Release
    echo -n " "$(md5sum Packages.gz | cut -d" " -f1) >> Release
    echo " "$(du -b Packages.gz) >> Release
    echo "SHA1:" >> Release
    echo -n " "$(sha1sum Packages | cut -d" " -f1) >> Release
    echo " "$(du -b Packages) >> Release
    echo -n " "$(sha1sum Packages.gz | cut -d" " -f1) >> Release
    echo " "$(du -b Packages.gz) >> Release
    echo "SHA256:" >> Release
    echo -n " "$(sha256sum Packages | cut -d" " -f1) >> Release
    echo " "$(du -b Packages) >> Release
    echo -n " "$(sha256sum Packages.gz | cut -d" " -f1) >> Release
    echo " "$(du -b Packages.gz) >> Release
    echo "SHA512:" >> Release
    echo -n " "$(sha512sum Packages | cut -d" " -f1) >> Release
    echo " "$(du -b Packages) >> Release
    echo -n " "$(sha512sum Packages.gz | cut -d" " -f1) >> Release
    echo " "$(du -b Packages.gz) >> Release
    if [ -n "$ACTUALLY_RELEASE" ]
    then
        gpg --local-user EC51E8C4 --batch --no-tty --yes --digest-algo SHA256 -abs -o Release.gpg Release
        gpg --local-user EC51E8C4 --batch --no-tty --yes -a -s --clearsign --digest-algo SHA256 --output  InRelease Release
    fi
    cd -

    sed -e s/_REPOSITORY_/$REPOSITORY_NAME/g < $SCRIPTS_DIR/draios.list > $REPOSITORY_DIR/deb/draios.list

    ${AWS} s3 cp $REPOSITORY_DIR/deb/draios.list s3://download.draios.com/$REPOSITORY_NAME/deb/ --acl public-read
    ${AWS} s3 sync $REPOSITORY_DIR/deb/stable-$DEB_BASEARCH/ s3://download.draios.com/$REPOSITORY_NAME/deb/stable-$DEB_BASEARCH/ --acl public-read --delete --exact-timestamps
}

function configure_tgz_repo {
    BASEARCH=$(uname -m)

    mkdir -p $REPOSITORY_DIR/tgz/$BASEARCH
    
    ${AWS} s3 sync s3://download.draios.com/$REPOSITORY_NAME/tgz/$BASEARCH/ $REPOSITORY_DIR/tgz/$BASEARCH/ --acl public-read --delete --exact-timestamps
    ls -1tdr $REPOSITORY_DIR/tgz/$BASEARCH/*sysdig* | head -n -5 | xargs -d '\n' rm -f || true

    cp $PACKAGES_DIR/*tar.gz $REPOSITORY_DIR/tgz/$BASEARCH
    ${AWS} s3 sync $REPOSITORY_DIR/tgz/$BASEARCH/ s3://download.draios.com/$REPOSITORY_NAME/tgz/$BASEARCH --acl public-read --delete --exact-timestamps
}

function configure_installers {
    TEMPLATE_FILE="${AGENT_REPO_ROOT}/../sysdig/scripts/install-sysdig.in"
    sed -e s/_COMPONENT_/sysdig/g  < $TEMPLATE_FILE > ${REPOSITORY_DIR}/install-sysdig

    # Some jenkins jobs don't have permission to overwrite the
    # install-script. Allow for them to skip this without failing
    if [[ ! ( ${SKIP_OVERWRITE_SCRIPTS-} == 'yes' ) ]]
    then
        sed -i s/_REPOSITORY_NAME_/${REPOSITORY_NAME}/g ${REPOSITORY_DIR}/install-sysdig
        ${AWS} s3 cp $REPOSITORY_DIR/install-sysdig s3://download.draios.com/$REPOSITORY_NAME/ --acl public-read
        ${AWS} s3 cp $SCRIPTS_DIR/smoke-tests s3://download.draios.com/ --acl public-read
    fi
}

function upload_binaries {
    rm -rf $REPOSITORY_DIR
    configure_rpm_repo
    configure_debian_repo
    configure_tgz_repo
    configure_installers
}

build_components

REPOSITORY_NAME=$REPOSITORY_BASENAME
PACKAGES_DIR=$BINARIES_DIR/sysdig-release
upload_binaries

REPOSITORY_NAME=$REPOSITORY_BASENAME-debug
PACKAGES_DIR=$BINARIES_DIR/sysdig-debug
upload_binaries

if [ -n "$ACTUALLY_RELEASE" ]
then
	docker tag sysdig:latest sysdig/sysdig:$SYSDIG_VERSION
	docker push sysdig/sysdig:$SYSDIG_VERSION

	docker tag sysdig:latest sysdig/sysdig:latest
	docker push sysdig/sysdig:latest
fi

#keep /tmp clean
rm -rf $BINARIES_DIR
rm -rf $REPOSITORY_DIR
