int initialDigits(num) {
	def match = (num =~ /^([0-9]+)/)
	if (match.find()) {
		return match.group(1).toInteger()
	} else {
		return -1
	}
}

int compareVersions(a, b) {
	List verA = a.tokenize('.')
	List verB = b.tokenize('.')

	def commonIndices = Math.min(verA.size(), verB.size())

	for (int i = 0; i < commonIndices; ++i) {
		def numA = initialDigits(verA[i])
		def numB = initialDigits(verB[i])

		if (numA != numB) {
			return numA <=> numB
		}
	}

	// If we got this far then all the common indices are identical, so whichever version is longer must be more recent
	verA.size() <=> verB.size()
}

pipeline {
    agent { label 'agent-builder-parallel' }

    stages {

    // grab the repos we need
    stage('Check out dependencies') {
        steps {
            dir('agent') {
                checkout scm
            }
        }
    }

    // update the file that the probe builder uses for agent releases
    stage('Update Probe Builder') {
        steps {
            withCredentials([usernamePassword(credentialsId: 'github-jenkins-user-token', passwordVariable: 'GITHUB_PASSWORD', usernameVariable: 'GITHUB_USERNAME')]) {
                sh label: '', script: """
                    curl -sH "Authorization: token $GITHUB_PASSWORD" https://api.github.com/repos/draios/agent/releases | grep tag_name | grep -v fargate | head -n 5 | awk '{ print \$2 }' | cut -c2- | rev | cut -c3- | rev > releases
                    cat releases
                """
            }
            // only fail the job if the latest release doesn't build
            // I can probably do the propagate release by just passing the
            // variable in directly, but i'm not good enough with groovy to care to try
            script {
                def releases = readFile(file:'releases').split()
                def latest_release = true
                for (release in releases) {
                    if (compareVersions(release, "11.1.0") >= 0) {
                        driver_repo = "ssh://git@github.com/draios/libscap.git"
                    } else {
                        driver_repo = "ssh://git@github.com/draios/sysdig.git"
                    }

                    build job: 'sysdig-probe-builder', parameters: [
                        string(name: 'RELEASE_NUMBER', value: release),
                        string(name: 'DRIVER_REPO', value: driver_repo),
                        string(name: 'DRIVER_REPO_COMMIT', value: "agent/$release"),
                        string(name: 'PROBE_NAME', value: 'sysdigcloud-probe')
                    ], propagate: latest_release
                    latest_release = false
                }
            }
        }

    }

    }

   post {
        always {
            cleanWs deleteDirs: true, notFailBuild: true
        }
    }

}

