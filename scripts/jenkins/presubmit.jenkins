/* vim:expandtab:sw=4:ts=4:sts=4
*/


def getAgentCommitSha() {
    sh "git rev-parse HEAD > current-commit"
    return readFile("current-commit").trim()
}

void setBuildStatus(String context, String message, String state) {

  // There are issues with the GitHubCommitStatusSetter where it gets
  // confused when multiple repos are checked out. To get around this,
  // we explicitly grab the commit sha for the agent repo.
  commitSha = getAgentCommitSha()

  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/draios/agent"],
      commitShaSource: [$class: "ManuallyEnteredShaSource", sha: commitSha],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: context],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
    agent { label 'agent-builder-parallel' }
    options {
        timeout(time: 180, unit: 'MINUTES')
    }
    parameters {
        booleanParam(name: 'BUILD_BUILDER', defaultValue: false, description: "set to true to build the builder for this branch. name will be same as agent branch")
        string(name: 'BUILDER_VERSION', defaultValue: "latest", description: "build container to use for building the agent")
        string(name: 'PROBEBUILDER_BRANCH', defaultValue: "dev")
        string(name: 'FALCO_BRANCH', defaultValue: "master-sync")
        string(name: 'PROTOREPO_BRANCH', defaultValue: "master")
        string(name: 'LIBSCAP_HAYABUSA_BRANCH', defaultValue: "dev")
        string(name: 'LIBS_BRANCH', defaultValue: "dev")
    }
    stages {
        stage('Build Builder') {
            parallel {
                stage('Regular Builder') {
                    when {
                        expression { params.BUILD_BUILDER == true }
                    }
                    steps {
                        build job:'agent-build-builder',parameters:[
                            string(name:'AGENT_BRANCH', value:"${env.BRANCH_NAME}"),
                            string(name:'FALCO_BRANCH', value:"${params.FALCO_BRANCH}"),
                            string(name:'PROTOREPO_BRANCH', value:"${params.PROTOREPO_BRANCH}"),
                            string(name:'PROMETHEUS_BRANCH', value:"${params.PROMETHEUS_BRANCH}")
                        ]
                    }
                }
                stage('Alpine Builder') {
                    when {
                        expression { params.BUILD_BUILDER == true }
                    }
                    steps {
                        build job:'agent-build-alpine-builder',parameters:[string(name:'AGENT_BRANCH', value:"${env.BRANCH_NAME}")]
                    }
                }
            }
        }

        stage('Update PR') {
            steps {
                // First set the statuses on github
                setBuildStatus('Unit Test', 'Waiting for resources', 'PENDING')
                setBuildStatus('System Test', 'Waiting for resources', 'PENDING')
            }
        }
        stage('Run Tests') {
            parallel {
                stage('Unit Test') {
                    steps {
                        setBuildStatus('Unit Test', 'In Progress', 'PENDING')
                        build job:'agent-presubmit-ut',parameters:[
                            string(name:'AGENT_BRANCH', value:"${env.BRANCH_NAME}"),
                            string(name:'FALCO_BRANCH', value:"${params.FALCO_BRANCH}"),
                            string(name:'LIBSINSP_BRANCH', value:"${params.LIBSINSP_BRANCH}"),
                            string(name:'PROTOREPO_BRANCH', value:"${params.PROTOREPO_BRANCH}"),
                            string(name:'LIBSCAP_BRANCH', value:"${params.LIBSCAP_BRANCH}"),
                            string(name:'BUILDER_VERSION', value:"${params.BUILDER_VERSION}"),
                            string(name:'LIBS_BRANCH', value:"${params.LIBS_BRANCH}"),
                            booleanParam(name:'USE_LEGACY_LIBS', value:"false")
                        ]
                    }
                    post {
                        success {
                            setBuildStatus('Unit Test', 'Zero problems found', 'SUCCESS')
                        }
                        failure {
                            setBuildStatus('Unit Test', 'FAILED! See Jenkins console output for more info.', 'FAILURE')
                        }
                    }
                }
                stage('System Test') {
                    steps {
                        setBuildStatus('System Test', 'In Progress', 'PENDING')
                        build job:'agent-presubmit-system',parameters:[
                            string(name:'AGENT_BRANCH', value:"${env.BRANCH_NAME}"),
                            string(name:'FALCO_BRANCH', value:"${params.FALCO_BRANCH}"),
                            string(name:'LIBSINSP_BRANCH', value:"${params.LIBSINSP_BRANCH}"),
                            string(name:'PROTOREPO_BRANCH', value:"${params.PROTOREPO_BRANCH}"),
                            string(name:'LIBSCAP_BRANCH', value:"${params.LIBSCAP_BRANCH}"),
                            string(name:'LIBS_BRANCH', value:"${params.LIBS_BRANCH}"),
                            string(name:'BUILDER_VERSION', value:"${params.BUILDER_VERSION}"),
                            booleanParam(name:'USE_LEGACY_LIBS', value:"false")
                        ]
                    }
                    post {
                        success {
                            setBuildStatus('System Test', 'Zero problems found', 'SUCCESS')
                        }
                        failure {
                            setBuildStatus('System Test', 'FAILED! See Jenkins console output for more info.', 'FAILURE')
                        }
                    }
                }
                stage('Systemic Regression Test') {
                    stages {
                        stage('Build Container') {
                            steps {
                                setBuildStatus('QA Test', 'In Progress', 'PENDING')
                                build job:'agent-build-container',parameters:[
                                    string(name:'AGENT_BRANCH', value:"${env.BRANCH_NAME}"),
                                    string(name:'FALCO_BRANCH', value:"${params.FALCO_BRANCH}"),
                                    string(name:'PROTOREPO_BRANCH', value:"${params.PROTOREPO_BRANCH}"),
                                    string(name:'LIBS_BRANCH', value:"${params.LIBS_BRANCH}"),
                                    string(name:'BUILDER_VERSION', value:"${params.BUILDER_VERSION}"),
                                ]
                            }
                        }
                        stage('QA - Extended Label Set Test') {
                            steps {
                                build job:'QA-agent/extended-label-set-test',parameters:[
                                    string(name:'REGISTRY', value:"docker.internal.sysdig.com"),
                                    string(name:'AGENT_REPOSITORY', value:"agent-internal"),
                                    string(name:'AGENT_VERSION', value:"${env.BRANCH_NAME}"),
                                    string(name:'SLACK_CHANNEL', value:"")
                                ]
                            }
                        }
                    }
                    post {
                        success {
                            setBuildStatus('QA Test', 'Zero problems found', 'SUCCESS')
                        }
                        failure {
                            setBuildStatus('QA Test', 'FAILED! see Jenkins console output for more info.', 'FAILURE')
                        }
                    }
                }
                stage('Agentino Build') {
                    steps {
                        setBuildStatus('Agentino Build', 'Building Container', 'PENDING')
                        build job:'agent-build-agentino',parameters:[
                            string(name:'AGENT_BRANCH', value:"${env.BRANCH_NAME}"),
                            string(name:'FALCO_BRANCH', value:"${params.FALCO_BRANCH}"),
                            string(name:'LIBSCAP_HAYABUSA_BRANCH', value:"${params.LIBSCAP_HAYABUSA_BRANCH}"),
                            string(name:'PROTOREPO_BRANCH', value:"${params.PROTOREPO_BRANCH}"),
                            string(name:'LIBS_BRANCH', value:"${params.LIBS_BRANCH}"),
                            string(name:'BUILDER_VERSION', value:"${params.BUILDER_VERSION}"),
                        ]
                    }
                    post {
                        success {
                            setBuildStatus('Agentino Build', 'Zero problems found', 'SUCCESS')
                        }
                        failure {
                            setBuildStatus('Agentino Build', 'FAILED! see Jenkins console output for more info.', 'FAILURE')
                        }
                    }
                }
            }
        }
    }
}
