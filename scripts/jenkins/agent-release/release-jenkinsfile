pipeline {
    agent { label 'agent-docker-builder' }

    stages {

	// grab the 3 repos we need
	stage('Check out dependencies') {
	    steps {
			dir('agent') {
				checkout scm
			}
			dir('oss-falco') {
				checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/oss-falco']]])
			}
			dir('sysdig') {
				checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/sysdig']]])
			}
	    }
	}


	// if we need to push the release branch, do so
	stage('Push Release Branch') {
	    when {
			expression { params.CREATE_RELEASE_BRANCH == true }
	    }
	    steps {
			//slackSend channel: '#docs', message: "@here Agent release ${params.RELEASE_VERSION} has branched and is in progress.", tokenCredentialId: 'slack'
			//slackSend channel: '#support', message: "@here Agent release ${params.RELEASE_VERSION} has branched and is in progress.", tokenCredentialId: 'slack'
			//slackSend channel: '#ws-agent-core', message: "@here Agent release ${params.RELEASE_VERSION} has branched and is in progress.", tokenCredentialId: 'slack'
			slackSend channel: '#ws-agent-core-team', message: "Agent release ${params.RELEASE_VERSION} has branched and is in progress.", tokenCredentialId: 'slack'
			withCredentials([sshUserPrivateKey(credentialsId: '4399087a-3e99-41e5-9dbe-a70a554672c8', keyFileVariable: 'GITHUB_KEYFILE', passphraseVariable: 'GITHUB_PASSPHRASE', usernameVariable: 'GITHUB_USERNAME')]) {
				dir('agent') {
					sh label: '', script: """
						git checkout -b release-${params.RELEASE_VERSION}
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git push -u origin release-${params.RELEASE_VERSION}
					"""
				}
				dir('sysdig') {
					sh label: '', script: """
						git checkout -b agent-release-${params.RELEASE_VERSION}
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git remote add origin2 ssh://git@github.com/draios/sysdig.git
						git push -u origin2 agent-release-${params.RELEASE_VERSION}
					"""
				}
				dir('oss-falco') {
					sh label: '', script: """
						git checkout -b agent-release-${params.RELEASE_VERSION}
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git remote add origin2 ssh://git@github.com/draios/oss-falco.git
						git push -u origin2 agent-release-${params.RELEASE_VERSION}
					"""
				}
			}
	    }
	}

	// switch all clients to the release branch. necessary if we didn't push a release branch
	stage('Switch To Release Branch') {
	    steps {
			dir('agent') {
				sh "git checkout release-${params.RELEASE_VERSION}"
			}
			dir('sysdig') {
				sh "git checkout agent-release-${params.RELEASE_VERSION}"
			}
			dir('oss-falco') {
				sh "git checkout agent-release-${params.RELEASE_VERSION}"
			}
	    }
	}

	// build and push the docker builder. this is to ensure we are not affected by
	// non-backwards compatible changes to the builder and can always build
	// this release easily from quay
	stage('Build Builder') {
	    steps {
			withCredentials([usernamePassword(credentialsId: 'QUAY', passwordVariable: 'QUAY_PASSWORD', usernameVariable: 'QUAY_USERNAME')]) {
				sh label: '', script: '''
					docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD"  quay.io
					docker pull quay.io/sysdig/agent-builder:release-$RELEASE_VERSION || echo "Build not found. no problem"
					docker build --build-arg max_parallelism=$(nproc) -t quay.io/sysdig/agent-builder:release-$RELEASE_VERSION -f agent/docker/builder/Dockerfile agent/docker/builder
					docker push quay.io/sysdig/agent-builder:release-$RELEASE_VERSION
				'''
			}
	    }
	}

	// double checks that presubmit tests pass
	stage('Run Presubmit') {
	    steps {
			withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME'), usernamePassword(credentialsId: 'QUAY', passwordVariable: 'QUAY_PASSWORD', usernameVariable: 'QUAY_USERNAME')]) {
				sh label: '', script: '''
					docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
					docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD"  quay.io
					export S3_BUCKET="s3://download.draios.com"
					docker pull quay.io/sysdig/agent-builder:release-$RELEASE_VERSION
					INSTALL_DIR=$PWD/install
					OUT=$PWD/out
					BUILD=$PWD/build
					PIPCACHE=$PWD/pipcache
					mkdir -p $INSTALL_DIR
					mkdir -p $OUT
					mkdir -p $BUILD
					docker run -i --rm -e MAKE_JOBS=$(nproc) -e AGENT_VERSION -e AGENT_BUILD_COMMIT -e AGENT_BUILD_DATE -v $PWD:/draios:ro -v $INSTALL_DIR:/opt/draios -v $OUT:/out -v /var/run/docker.sock:/var/run/docker.sock -v $BUILD:/code/agent/build -v $PIPCACHE:/root/.cache quay.io/sysdig/agent-builder:release-$RELEASE_VERSION presubmit
				'''
			}
	    }
	}

	// builds the RC, runs integration tests, and uploads to docker/quay
	// Uploaded image should be sysdig/agent:${params.RELEASE_VERSION}-rc
	stage('Build RC') {
		steps {
			withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME'), usernamePassword(credentialsId: 'QUAY', passwordVariable: 'QUAY_PASSWORD', usernameVariable: 'QUAY_USERNAME')]) {
				sh label: '', script: """
					docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
					docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD"  quay.io
					export S3_BUCKET="s3://download.draios.com"
					export AGENT_VERSION="${params.RELEASE_VERSION}"
					agent/scripts/jenkins/build-agent-release rc
				"""
			}
		}
	}

	// create github release
	stage('github release') {
	    steps {
			withCredentials([usernamePassword(credentialsId: 'github-jenkins-user-token', passwordVariable: 'GITHUB_PASSWORD', usernameVariable: 'GITHUB_USERNAME')]) { 
				sh label: '', script: """
					curl -H "Authorization: token $GITHUB_PASSWORD" --data '{"tag_name":"${params.RELEASE_VERSION}","name":"${params.RELEASE_VERSION}","body":"https://sysdig.atlassian.net/issues/?jql=fixVersion%20%3D%2${params.RELEASE_VERSION} \\n\\n $ADDITIONAL_RELEASE_TEXT","target_commitish":"release-${params.RELEASE_VERSION}","draft":false}' https://api.github.com/repos/draios/agent/releases
				"""
			}
	    }
	}

	// push the release tags to git.
	stage('Push Tags') {
	    steps {
			withCredentials([sshUserPrivateKey(credentialsId: '4399087a-3e99-41e5-9dbe-a70a554672c8', keyFileVariable: 'GITHUB_KEYFILE', passphraseVariable: 'GITHUB_PASSPHRASE', usernameVariable: 'GITHUB_USERNAME')]) {
				dir('agent') {
					sh label: '', script: """
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git tag -d ${params.RELEASE_VERSION} || echo "Tag not found. No problem."
						git push origin :refs/tags/${params.RELEASE_VERSION}
						git tag ${params.RELEASE_VERSION}
						git push origin ${params.RELEASE_VERSION}
					"""
				}
				dir('sysdig') {
					sh label: '', script: """
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git remote add origin2 ssh://git@github.com/draios/sysdig.git
						git tag -d release/${params.RELEASE_VERSION} || echo "Tag not found. No problem."
						git push origin2 :refs/tags/release/${params.RELEASE_VERSION}
						git tag agent/${params.RELEASE_VERSION}
						git push origin2 agent/${params.RELEASE_VERSION}
					"""
				}
				dir('oss-falco') {
					sh label: '', script: """
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git remote add origin2 ssh://git@github.com/draios/oss-falco.git
						git tag -d release/${params.RELEASE_VERSION} || echo "Tag not found. No problem."
						git push origin2 :refs/tags/release/${params.RELEASE_VERSION}
						git tag agent/${params.RELEASE_VERSION}
						git push origin2 agent/${params.RELEASE_VERSION}
					"""
				}
			}
	    }
	}

	// kick off the probe builder with the correct version. This does not update
	// the default of that job, so we will keep building current GA release until
	// this one is promoted
	stage('Build Probes') {
		steps {
			build job: 'sysdig-probe-builder', parameters: [string(name: 'AGENT_RELEASE', value: "${params.RELEASE_VERSION}")]
		}
	}


	// Runs QA level tests
	/* SMAGENt-2057
	stage('Release Test') {
	    agent {
			docker {
				image 'agent-qa-tools:0.1'
				alwaysPull true
				registryUrl 'https://docker.internal.sysdig.com'
				registryCredentialsId 'jenkins-artifactory'
				args '--shm-size="8G" -e TF_IN_AUTOMATION="true" -e AWS_DEFAULT_REGION=us-east-1'
				label 'builder-backend-j8'
			}
	    }
	    steps {
			checkout([$class: 'GitSCM', branches: [[name: 'agent_docker_maniacal_longevity']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/automation']]])
			withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'qa-draios-dev-account', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
				sh "cd agent-automation; ./jenkins-runner.sh --tests-to-run test/container_runtimes/docker/test_docker_longevity.py --log-dir . --agent-image sysdig/agent --agent-version '${params.RELEASE_VERSION}-rc' --collector-url ${params.COLLECTOR_URL} --frontend-url ${params.FRONTEND_URL} --access-key ${params.AGENT_ACCESS_KEY}"
			}
	    }
	}
	*/

	stage('Wait for QA') {
	    steps {
			//slackSend channel: '#ws-agent-core', message: "@here Agent release ${params.RELEASE_VERSION} is ready for testing. When complete, go to https://sysdig-jenkins.internal.sysdig.com/job/agent-release/ and approve the release.", tokenCredentialId: 'slack'
			slackSend channel: '#ws-agent-core-team', message: "Agent release ${params.RELEASE_VERSION} is ready for testing. When complete, go to https://sysdig-jenkins.internal.sysdig.com/job/agent-release/ and approve the release.", tokenCredentialId: 'slack'
			input message: 'QA Complete', ok: 'Approve Release'
	    }
	}

	stage('Wait for Docs') {
	    steps {
			//slackSend channel: '#ws-agent-core', message: "@here Agent release ${params.RELEASE_VERSION} is QA approved and awaits Docs team for approvals. When complete, go to https://sysdig-jenkins.internal.sysdig.com/job/agent-release/ and approve the release.", tokenCredentialId: 'slack'
			//slackSend channel: '#docs', message: "@here Agent release ${params.RELEASE_VERSION} is QA approved and awaits Docs team for approvals. When complete, go to https://sysdig-jenkins.internal.sysdig.com/job/agent-release/ and approve the release.", tokenCredentialId: 'slack'
			slackSend channel: '#ws-agent-core-team', message: "Agent release ${params.RELEASE_VERSION} is QA approved and awaits Docs team for approvals. When complete, go to https://sysdig-jenkins.internal.sysdig.com/job/agent-release/ and approve the release.", tokenCredentialId: 'slack'
			input message: 'Docs Complete', ok: 'Approve Release'
	    }
	}

	// Promotes the RC to release
	stage('Promote RC') {
	    steps {
			withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME'), usernamePassword(credentialsId: 'QUAY', passwordVariable: 'QUAY_PASSWORD', usernameVariable: 'QUAY_USERNAME')]) {
				sh label: '', script: '''
					docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
					docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD"  quay.io
					export S3_BUCKET="s3://download.draios.com"
					export AGENT_VERSION=${params.RELEASE_VERSION}
					//agent/scripts/jenkins/release-agent-rc
				'''
			}
	    }
	}

	// dev agent and support
	stage ('Notify Slack') {
	    steps {
			slackSend channel: '#ws-agent-core', message: "@here *new agent release*: https://github.com/draios/agent/releases/tag/${params.RELEASE_VERSION}\nDo *not* distribute the release notes publicly unless approved by Product", tokenCredentialId: 'slack'
			slackSend channel: '#support', message: "@here *new agent release*: https://github.com/draios/agent/releases/tag/${params.RELEASE_VERSION}\nDo *not* distribute the release notes publicly unless approved by Product", tokenCredentialId: 'slack'
	    }
	}

	/*  SMAGENT-2052
	// checks that we can get the downloaded images
	stage('Smoke Test') {
	    steps {
	    }
	}
	 */
    }
	post {
		always {
			cleanWs()
		}
	}
}

