/* vim:expandtab:sw=4:ts=4:sts=4
*/

def getBuildNumber() {
    sh label: '' , script: '''
        echo "0.99.$((BUILD_NUMBER + 7000))dev" > build-number
    '''
    return readFile("build-number").trim()
}

pipeline {
    agent { label 'agent-builder-parallel' }
    parameters {
        string(name: 'AGENT_BRANCH', defaultValue: 'dev', trim: true)
        string(name: 'FALCO_BRANCH', defaultValue: 'master-sync', trim: true)
        string(name: 'SYSDIG_BRANCH', defaultValue: 'dev', trim: true)
        string(name: 'PROTOREPO_BRANCH', defaultValue: 'master', trim: true)
        string(name: 'BUILDER_VERSION', defaultValue: 'latest', trim: true)
        string(name: 'LIBSINSP_BRANCH', defaultValue: 'dev', trim: true)
        string(name: 'LIBSCAP_HAYABUSA_BRANCH', defaultValue: 'dev', trim: true)
        string(name: 'LIBSCAP_BRANCH', defaultValue: 'dev', trim: true)
        string(name: 'LIBS_BRANCH', defaultValue: 'dev', trim: true)
        booleanParam(name: 'USE_LEGACY_LIBS', defaultValue: false, description: 'Checkout and use libsinsp and libscap from their respective legacy repositories, as opposed to agent-libs')
    }
    stages {
        stage ('Tests') {
            parallel {
                stage('UTs') {
                    steps {
                        build job:'agent-presubmit-ut',parameters:[
                            string(name:'AGENT_BRANCH', value:"${params.AGENT_BRANCH}"),
                            string(name:'FALCO_BRANCH', value:"${params.FALCO_BRANCH}"),
                            string(name:'LIBS_BRANCH', value:"${params.LIBS_BRANCH}"),
                            string(name:'LIBSCAP_BRANCH', value:"${params.LIBSCAP_BRANCH}"),
                            string(name:'PROTOREPO_BRANCH', value:"${params.PROTOREPO_BRANCH}"),
                            string(name:'BUILDER_VERSION', value:"${params.BUILDER_VERSION}")
                        ]
                    }
                }
                stage('System Tests') {
                    steps {
                        build job:'agent-presubmit-system',parameters:[
                            string(name:'AGENT_BRANCH', value:"${params.AGENT_BRANCH}"),
                            string(name:'FALCO_BRANCH', value:"${params.FALCO_BRANCH}"),
                            string(name:'LIBS_BRANCH', value:"${params.LIBS_BRANCH}"),
                            string(name:'LIBSCAP_BRANCH', value:"${params.LIBSCAP_BRANCH}"),
                            string(name:'PROTOREPO_BRANCH', value:"${params.PROTOREPO_BRANCH}"),
                            string(name:'BUILDER_VERSION', value:"${params.BUILDER_VERSION}")
                        ]
                    }
                }
            }
        }
        stage ('Builds') {
            parallel {
                stage('Build Agentino Oss Libs') {
                    steps {
                        build job:'agent-build-agentino',parameters:[
                            string(name:'AGENT_BRANCH', value:"${params.AGENT_BRANCH}"),
                            string(name:'FALCO_BRANCH', value:"${params.FALCO_BRANCH}"),
                            string(name:'LIBS_BRANCH', value:"${params.LIBS_BRANCH}"),
                            string(name:'LIBSCAP_HAYABUSA_BRANCH', value:"${params.LIBSCAP_HAYABUSA_BRANCH}"),
                            string(name:'PROTOREPO_BRANCH', value:"${params.PROTOREPO_BRANCH}"),
                            string(name:'BUILDER_VERSION', value:"${params.BUILDER_VERSION}"),
                            string(name:'VERSION_TAG', value:"${getBuildNumber()}"),
                            booleanParam(name:'USE_LEGACY_LIBS', value:false)
                        ]
                    }
                }

                stage('Build from Oss Libs') {
                    steps {
                        build job:'agent-build-dev',parameters:[
                            string(name:'AGENT_BRANCH', value:"${params.AGENT_BRANCH}"),
                            string(name:'LIBS_BRANCH', value:"${params.LIBS_BRANCH}"),
                            string(name:'LIBSCAP_BRANCH', value:"${params.LIBSCAP_BRANCH}"),
                            string(name:'FALCO_BRANCH', value:"${params.FALCO_BRANCH}"),
                            string(name:'PROTOREPO_BRANCH', value:"${params.PROTOREPO_BRANCH}"),
                            string(name:'BUILDER_VERSION', value:"${params.BUILDER_VERSION}"),
                            string(name:'RELEASE_VERSION', value:"${getBuildNumber()}"),
                            booleanParam(name:'UPLOAD', value:true),
                            booleanParam(name:'PUBLIC_RELEASE', value:false),
                            booleanParam(name:'USE_LEGACY_LIBS', value:false)
                        ]
                    }
                }
            }
        }
        stage ('Fargate Artifacts') {
            steps {
                 build job: '/Fargate-Artifacts/main', parameters: [
                    string(name: "AGENT_BUILD", value: "${getBuildNumber()}"),
                ], propagate: false
            }
        }
        stage ('Secure Scans') {
            parallel {
                stage('agent') {
                    steps {
                        build job:'agent-scan-container',parameters:[string(name:'CONTAINER_NAME', value:"docker.io/sysdig/agent:dev")],propagate: false
                    }
                }
                stage('agent slim') {
                    steps {
                        build job:'agent-scan-container',parameters:[string(name:'CONTAINER_NAME', value:"docker.io/sysdig/agent-slim:dev")],propagate: false
                    }
                }
                stage('agent kmod thin') {
                    steps {
                        build job:'agent-scan-container',parameters:[string(name:'CONTAINER_NAME', value:"docker.io/sysdig/agent-kmodule-thin:dev")],propagate: false
                    }
                }
                stage('agentone') {
                    steps {
                        build job:'agent-scan-container',parameters:[string(name:'CONTAINER_NAME', value:"docker.internal.sysdig.com/agentone:dev")],propagate: false
                    }
                }
                stage('agentino') {
                    steps {
                        build job:'agent-scan-container',parameters:[string(name:'CONTAINER_NAME', value:"docker.internal.sysdig.com/agentino-internal:dev")],propagate: false
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs deleteDirs: true, notFailBuild: true
        }
        success {
            script {
                if (currentBuild.getPreviousBuild().result == "FAILURE") {
                    slackSend channel: '#dev-agent-ci', message: "agent-postsubmit - #<${currentBuild.absoluteUrl}|${currentBuild.number}> Back to normal", tokenCredentialId: 'slack'
                }
            }
        }
        failure {
            script {
                if (currentBuild.getPreviousBuild().result == "FAILURE") {
                    slackSend channel: '#dev-agent-ci', message: "agent-postsubmit - # <${currentBuild.absoluteUrl}|${currentBuild.number}> Still failing", tokenCredentialId: 'slack'
                } else {
                    slackSend channel: '#dev-agent-ci', message: "agent-postsubmit - # <${currentBuild.absoluteUrl}|${currentBuild.number}> Failure", tokenCredentialId: 'slack'
                }
            }
        }
    }
}
