
def getAgentCommitSha() {
  dir('agent') {
    sh "git rev-parse HEAD > current-commit"
    return readFile("current-commit").trim()
  }
}

void setBuildStatus(String context, String message, String state) {

  // There are issues with the GitHubCommitStatusSetter where it gets
  // confused when multiple repos are checked out. To get around this,
  // we explicitly grab the commit sha for the agent repo.
  commitSha = getAgentCommitSha()

  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/draios/agent"],
      commitShaSource: [$class: "ManuallyEnteredShaSource", sha: commitSha],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: context],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
	agent { label 'agent-docker-builder' }
	stages {
		stage('Check out dependencies') {
			steps {
				// First set the statuses on github
				setBuildStatus('Build and Unit Test', 'Building all targets and running unit tests', 'PENDING')
				setBuildStatus('System Test', 'Waiting for build to finish', 'PENDING')

				dir('agent') {
					checkout scm
				}
				dir('oss-falco') {
					checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/oss-falco']]])
				}
				dir('sysdig') {
					checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/sysdig']]])
				}
				dir('protorepo')
				{
					checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/protorepo']]])
				}
				dir('prometheus')
				{
					checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/prometheus']]])
				}
			}
		}
		stage('Build and Unit Test') {
			steps {
				script{
					docker.withRegistry("https://quay.io", 'QUAY') {
						sh('./agent/scripts/jenkins/agent-build-presubmit/build-presubmit')
					}
				}
			}
			post {
				success {
					setBuildStatus('Build and Unit Test', 'Zero problems found', 'SUCCESS')
				}
				failure {
					setBuildStatus('Build and Unit Test', 'FAILED! See Jenkins console output for more info.', 'FAILURE')
				}

			}
		}
		stage('System Test') {
			steps {
				setBuildStatus('System Test', 'Installing probe and running system tests', 'PENDING')
				script{
					docker.withRegistry("https://quay.io", 'QUAY') {
						sh('./agent/scripts/jenkins/agent-build-presubmit/install-probe-and-run-system-test')
					}
				}
			}
			post {
				success {
					setBuildStatus('System Test', 'Zero problems found', 'SUCCESS')
				}
				failure {
					setBuildStatus('System Test', 'FAILED! See Jenkins console output for more info.', 'FAILURE')
				}
			}
		}
	}
	post {
		always {
			cleanWs deleteDirs: true, notFailBuild: true
		}
	}
}
