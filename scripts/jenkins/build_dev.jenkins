pipeline {
    agent { label 'agent-docker-builder' }
    stages {
        stage('Check out dependencies') {
           steps {
                dir('agent') {
                    checkout scm
                    sh "git checkout ${params.AGENT_BRANCH}"
                }
                dir('oss-falco') {
                    checkout([$class: 'GitSCM', branches: [[name: 'master-sync']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/oss-falco']]])
                    sh "git checkout ${params.FALCO_BRANCH}"
                }
                dir('libsinsp') {
                    checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/libsinsp']]])
                    sh "git checkout ${params.LIBSINSP_BRANCH}"
                }
                dir('libscap') {
                    checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/libscap']]])
                    sh "git checkout ${params.LIBSCAP_BRANCH}"
                }
                dir('protorepo') {
                    checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/protorepo']]])
                    sh "git checkout ${params.PROTOREPO_BRANCH}"
                }
                dir('agent-libs') {
                    checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/agent-libs']]])
                    sh "git checkout ${params.LIBS_BRANCH}"
                }
            }
        }
        stage('Build Release') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME'), usernamePassword(credentialsId: 'QUAY', passwordVariable: 'QUAY_PASSWORD', usernameVariable: 'QUAY_USERNAME')]) {
                    sh label: '', script: '''
                        echo "$QUAY_PASSWORD" | docker login quay.io -u="$QUAY_USERNAME" --password-stdin
                        AGENT_BUILD_COMMIT="`git -C agent rev-parse --short HEAD`"
                        docker pull quay.io/sysdig/agent-builder:$BUILDER_VERSION
                        sudo rm -rf $PWD/out
                        docker run -i --rm -e MAKE_JOBS=$(nproc) -e AGENT_VERSION=$RELEASE_VERSION -e AGENT_BUILD_COMMIT -e AGENT_BUILD_DATE="`date`" -v $PWD:/draios:ro -v $PWD/out:/out -v /var/run/docker.sock:/var/run/docker.sock -v $PWD/pipcache:/root/.cache -e USE_OLD_DIRS=$USE_LEGACY_LIBS quay.io/sysdig/agent-builder:$BUILDER_VERSION release
                    '''
                }
            }
        }
        stage('Upload Packages') {
            when {
                expression { params.UPLOAD == true }
            }
            steps {
                sh label: '', script: '''
                    sudo agent/scripts/jenkins/upload-agent dev $PWD/out $PWD/repo "s3://download.draios.com" $RELEASE_VERSION release
                    sudo agent/scripts/jenkins/upload-agent dev-debug $PWD/out $PWD/repo "s3://download.draios.com" $RELEASE_VERSION debug
                '''
            }
        }
        stage('Build Prod Containers') {
            when {
                expression { params.UPLOAD == true }
            }
            steps {
                sh label: '', script: '''
                    sudo agent/scripts/jenkins/build-prod-container dev $PWD/out
                '''
            }
        }
        stage('Upload Prod Containers'){
            when {
                expression { params.UPLOAD == true }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    script {
                        docker.withRegistry("https://docker.internal.sysdig.com", 'jenkins-artifactory') {
                            sh label: '', script: '''
                                echo "$DOCKER_PASSWORD" | docker login docker.io -u="$DOCKER_USERNAME" --password-stdin
                                docker tag agent sysdig/agent:dev
                                docker tag agent sysdig/agent:$RELEASE_VERSION
                                docker push sysdig/agent
                                docker tag agent-slim sysdig/agent-slim:dev-v1
                                docker tag agent-slim sysdig/agent-slim:$RELEASE_VERSION-v1
                                docker tag agent-slim-v2 sysdig/agent-slim:dev
                                docker tag agent-slim-v2 sysdig/agent-slim:$RELEASE_VERSION
                                docker push sysdig/agent-slim
                                docker tag agentone docker.internal.sysdig.com/agentone:dev
                                docker tag agentone docker.internal.sysdig.com/agentone:$RELEASE_VERSION
                                docker push docker.internal.sysdig.com/agentone
                                docker tag agent-kmodule sysdig/agent-kmodule:dev
                                docker tag agent-kmodule sysdig/agent-kmodule:$RELEASE_VERSION
                                docker push sysdig/agent-kmodule
                                docker tag agent-kmodule-thin sysdig/agent-kmodule-thin:dev
                                docker tag agent-kmodule-thin sysdig/agent-kmodule-thin:$RELEASE_VERSION
                                docker push sysdig/agent-kmodule-thin
                            '''
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            sh label: '', script: '''
                sudo rm -rf ./build
                sudo rm -rf ./out
                sudo rm -rf ./repo
                docker rmi agent agent-slim agent-slim-v2 agentone agent-kmodule agent-kmodule-thin || echo "no containers to remove"
                docker rmi -f $(docker images | grep -ve 'quay.io/sysdig/agent-builder.*latest'  | awk 'NR>1 {print $3}') || echo "no containers to remove"
                docker images -q -f 'dangling=true' | xargs --no-run-if-empty docker rmi -f
            '''
            cleanWs deleteDirs: true, notFailBuild: true
        }
    }
}
