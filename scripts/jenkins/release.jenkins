pipeline {
    agent { label 'agent-builder-parallel' }

    stages {

	// grab the repos we need
	stage('Check out dependencies') {
	    steps {
			dir('agent') {
				checkout scm
			}
			dir('oss-falco') {
				checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/oss-falco']]])
			}
			dir('sysdig') {
				checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/sysdig']]])
			}
			dir('protorepo') {
				checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/protorepo']]])
			}
			dir('prometheus') {
				checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/prometheus']]])
			}
	    }
	}

	stage('Switch to Release Base') {
		when {
			expression { params.RELEASE_BASE != "dev" }
		}
		steps {
			dir('agent') {
				sh "git checkout release-${params.RELEASE_BASE}"
			}
			dir('sysdig') {
				sh "git checkout agent-release-${params.RELEASE_BASE}"
			}
			dir('oss-falco') {
				sh "git checkout agent-release-${params.RELEASE_BASE}"
			}
			dir('protorepo') {
				sh "git checkout agent-release-${params.RELEASE_BASE}"
			}
			dir('prometheus') {
				sh "git checkout agent-release-${params.RELEASE_BASE}"
			}
		}
	}

	// if we need to push the release branch, do so
	stage('Push Release Branch') {
	    when {
			expression { params.CREATE_RELEASE_BRANCH == true }
	    }
	    steps {
			slackSend channel: '#docs', message: "Agent release ${params.RELEASE_VERSION} has branched and is in progress.", tokenCredentialId: 'slack'
			slackSend channel: '#support', message: "Agent release ${params.RELEASE_VERSION} has branched and is in progress.", tokenCredentialId: 'slack'
			slackSend channel: '#ws-agent-core', message: "@here Agent release ${params.RELEASE_VERSION} has branched and is in progress.", tokenCredentialId: 'slack'
			withCredentials([sshUserPrivateKey(credentialsId: '4399087a-3e99-41e5-9dbe-a70a554672c8', keyFileVariable: 'GITHUB_KEYFILE', passphraseVariable: 'GITHUB_PASSPHRASE', usernameVariable: 'GITHUB_USERNAME')]) {
				dir('agent') {
					sh label: '', script: """
						git checkout -b release-${params.RELEASE_VERSION}
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git push -u origin release-${params.RELEASE_VERSION}
					"""
				}
				dir('sysdig') {
					sh label: '', script: """
						git checkout -b agent-release-${params.RELEASE_VERSION}
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git remote add origin2 ssh://git@github.com/draios/sysdig.git
						git push -u origin2 agent-release-${params.RELEASE_VERSION}
					"""
				}
				dir('oss-falco') {
					sh label: '', script: """
						git checkout -b agent-release-${params.RELEASE_VERSION}
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git remote add origin2 ssh://git@github.com/draios/oss-falco.git
						git push -u origin2 agent-release-${params.RELEASE_VERSION}
					"""
				}
				dir('protorepo') {
					sh label: '', script: """
						git checkout -b agent-release-${params.RELEASE_VERSION}
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git remote add origin2 ssh://git@github.com/draios/protorepo.git
						git push -u origin2 agent-release-${params.RELEASE_VERSION}
					"""
				}
				dir('prometheus') {
					sh label: '', script: """
						git checkout -b agent-release-${params.RELEASE_VERSION}
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git remote add origin2 ssh://git@github.com/draios/prometheus.git
						git push -u origin2 agent-release-${params.RELEASE_VERSION}
					"""
				}

			}
	    }
	}

	// switch all clients to the release branch. necessary if we didn't push a release branch
	stage('Switch To Release Branch') {
	    steps {
			dir('agent') {
				sh "git checkout release-${params.RELEASE_VERSION}"
			}
			dir('sysdig') {
				sh "git checkout agent-release-${params.RELEASE_VERSION}"
			}
			dir('oss-falco') {
				sh "git checkout agent-release-${params.RELEASE_VERSION}"
			}
			dir('protorepo') {
				sh "git checkout agent-release-${params.RELEASE_VERSION}"
			}
			dir('prometheus') {
				sh "git checkout agent-release-${params.RELEASE_VERSION}"
			}
	    }
	}

	// build and push the docker builder. this is to ensure we are not affected by
	// non-backwards compatible changes to the builder and can always build
	// this release easily from quay
	stage('Build Builder') {
	    steps {
			build job:'agent-build-builder',parameters:[string(name:'AGENT_BRANCH', value:"release-${params.RELEASE_VERSION}"),string(name:'SYSDIG_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),string(name:'FALCO_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),string(name:'PROTOREPO_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),string(name:'PROMETHEUS_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),booleanParam(name:'TAG_LATEST', value:false),string(name:'CONTAINER_NAME', value:"release-$RELEASE_VERSION")]
		}
	}

	// double checks that presubmit tests pass
	stage('Run Presubmit') {
		 parallel {
			stage('Unit Test') {
				steps {
					build job:'agent-presubmit-ut',parameters:[string(name:'AGENT_BRANCH', value:"release-${params.RELEASE_VERSION}"),string(name:'SYSDIG_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),string(name:'FALCO_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),string(name:'PROTOREPO_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),string(name:'PROMETHEUS_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),string(name:'BUILDER_VERSION', value:"release-$RELEASE_VERSION")]
				}
			}
			stage('System Test') {
				steps {
					build job:'agent-presubmit-system',parameters:[string(name:'AGENT_BRANCH', value:"release-${params.RELEASE_VERSION}"),string(name:'SYSDIG_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),string(name:'FALCO_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),string(name:'PROTOREPO_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),string(name:'PROMETHEUS_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),string(name:'BUILDER_VERSION', value:"release-$RELEASE_VERSION")]
				}
			}
		}
	}

	// builds the RC, runs integration tests, and uploads to docker/quay
	// Uploaded image should be sysdig/agent:${params.RELEASE_VERSION}-rc
	stage('Build RC') {
		steps {
			build job:'agent-build-rc',parameters:[string(name:'AGENT_BRANCH', value:"release-${params.RELEASE_VERSION}"),string(name:'SYSDIG_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),string(name:'FALCO_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),string(name:'PROTOREPO_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),string(name:'PROMETHEUS_BRANCH', value:"agent-release-${params.RELEASE_VERSION}"),string(name:'BUILDER_VERSION', value:"release-$RELEASE_VERSION"),string(name:'RELEASE_VERSION', value:"$RELEASE_VERSION"),booleanParam(name:'UPLOAD', value:true),booleanParam(name:'PUBLIC_RELEASE', value:true)]
		}
	}

	stage('Scan Release Container') {
		steps {
			build job:'agent-scan-container',parameters:[string(name:'CONTAINER_NAME', value:"sysdig/agent:${params.RELEASE_VERSION}-rc")],propagate: false
		}
	}

	// create github release. For some reason this doesn't publish. We even send the
	// code to commit it twice. shrug.
	stage('github release') {
	    steps {
			withCredentials([usernamePassword(credentialsId: 'github-jenkins-user-token', passwordVariable: 'GITHUB_PASSWORD', usernameVariable: 'GITHUB_USERNAME')]) { 
				sh label: '', script: """
					curl -sH "Authorization: token $GITHUB_PASSWORD" https://api.github.com/repos/draios/agent/releases/tags/$RELEASE_VERSION
					RELEASE_ID=`curl -sH "Authorization: token $GITHUB_PASSWORD" https://api.github.com/repos/draios/agent/releases/tags/$RELEASE_VERSION | grep \"id\" | head -n 1 | awk '{print \$2}' | sed 's/.\$//'`
					if [ -z \$RELEASE_ID ];
					then
						echo "No prior release found, nothing to delete"
					else
						echo "Deleting release id \$RELEASE_ID"
						curl -sH "Authorization: token $GITHUB_PASSWORD" -X DELETE https://api.github.com/repos/draios/agent/releases/\$RELEASE_ID
					fi
					curl -H "Authorization: token $GITHUB_PASSWORD" --data '{"tag_name":"${params.RELEASE_VERSION}","name":"${params.RELEASE_VERSION}","body":"https://sysdig.atlassian.net/issues/?jql=fixVersion%20%3D%20${params.RELEASE_VERSION} \\n\\n $ADDITIONAL_RELEASE_TEXT","target_commitish":"release-${params.RELEASE_VERSION}","draft":false}' https://api.github.com/repos/draios/agent/releases
					RELEASE_ID=`curl -sH "Authorization: token $GITHUB_PASSWORD" https://api.github.com/repos/draios/agent/releases/tags/$RELEASE_VERSION | grep \"id\" | head -n 1 | awk '{print \$2}' | sed 's/.\$//'`
					curl -H "Authorization: token $GITHUB_PASSWORD" --data '{"draft":false}' https://api.github.com/repos/draios/agent/releases/\$RELEASE_ID
				"""
			}
	    }
	}

	// push the release tags to git.
	stage('Push Tags') {
	    steps {
			withCredentials([sshUserPrivateKey(credentialsId: '4399087a-3e99-41e5-9dbe-a70a554672c8', keyFileVariable: 'GITHUB_KEYFILE', passphraseVariable: 'GITHUB_PASSPHRASE', usernameVariable: 'GITHUB_USERNAME')]) {
				dir('agent') {
					sh label: '', script: """
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git tag -d ${params.RELEASE_VERSION} || echo "Tag not found. No problem."
						git push origin :refs/tags/${params.RELEASE_VERSION}
						git tag ${params.RELEASE_VERSION}
						git push origin ${params.RELEASE_VERSION}
					"""
				}
				dir('sysdig') {
					sh label: '', script: """
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git remote add origin2 ssh://git@github.com/draios/sysdig.git
						git tag -d agent/${params.RELEASE_VERSION} || echo "Tag not found. No problem."
						git push origin2 :refs/tags/agent/${params.RELEASE_VERSION}
						git tag agent/${params.RELEASE_VERSION}
						git push origin2 agent/${params.RELEASE_VERSION}
					"""
				}
				dir('oss-falco') {
					sh label: '', script: """
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git remote add origin2 ssh://git@github.com/draios/oss-falco.git
						git tag -d agent/${params.RELEASE_VERSION} || echo "Tag not found. No problem."
						git push origin2 :refs/tags/agent/${params.RELEASE_VERSION}
						git tag agent/${params.RELEASE_VERSION}
						git push origin2 agent/${params.RELEASE_VERSION}
					"""
				}
				dir('protorepo') {
					sh label: '', script: """
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git remote add origin2 ssh://git@github.com/draios/protorepo.git
						git tag -d agent/${params.RELEASE_VERSION} || echo "Tag not found. No problem."
						git push origin2 :refs/tags/agent/${params.RELEASE_VERSION}
						git tag agent/${params.RELEASE_VERSION}
						git push origin2 agent/${params.RELEASE_VERSION}
					"""
				}
				dir('prometheus') {
					sh label: '', script: """
						export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
						git remote add origin2 ssh://git@github.com/draios/prometheus.git
						git tag -d agent/${params.RELEASE_VERSION} || echo "Tag not found. No problem."
						git push origin2 :refs/tags/agent/${params.RELEASE_VERSION}
						git tag agent/${params.RELEASE_VERSION}
						git push origin2 agent/${params.RELEASE_VERSION}
					"""
				}

			}
	    }
	}

	// kick off the probe builder with the correct version. This does not update
	// the default of that job, so we will keep building current GA release until
	// this one is promoted
	stage('Build Probes') {
		steps {
			build job: 'sysdig-probe-builder', parameters: [string(name: 'AGENT_RELEASE', value: "${params.RELEASE_VERSION}")]
		}
	}


	// Runs QA level tests
	/* SMAGENt-2057
	stage('Release Test') {
	    agent {
			docker {
				image 'agent-qa-tools:0.1'
				alwaysPull true
				registryUrl 'https://docker.internal.sysdig.com'
				registryCredentialsId 'jenkins-artifactory'
				args '--shm-size="8G" -e TF_IN_AUTOMATION="true" -e AWS_DEFAULT_REGION=us-east-1'
				label 'builder-backend-j8'
			}
	    }
	    steps {
			checkout([$class: 'GitSCM', branches: [[name: 'agent_docker_maniacal_longevity']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/automation']]])
			withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'qa-draios-dev-account', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
				sh "cd agent-automation; ./jenkins-runner.sh --tests-to-run test/container_runtimes/docker/test_docker_longevity.py --log-dir . --agent-image sysdig/agent --agent-version '${params.RELEASE_VERSION}-rc' --collector-url ${params.COLLECTOR_URL} --frontend-url ${params.FRONTEND_URL} --access-key ${params.AGENT_ACCESS_KEY}"
			}
	    }
	}

	stage('Wait for Commit') {
		stages {
			stage {'Wait for Other People'} {
				 parallel {
					stage('Wait for QA') {
						steps {
							slackSend channel: '@adam', message: "Agent release ${params.RELEASE_VERSION} is ready for testing. When complete, go to https://sysdig-jenkins.internal.sysdig.com/job/agent-release/ and approve the release.", tokenCredentialId: 'slack'
							input message: 'QA Complete', ok: 'Approve Release'
						}
					}
					stage('Wait for Docs') {
						steps {
							slackSend channel: '#docs', message: "Agent release ${params.RELEASE_VERSION} is awaiting docs approval. When complete, go to https://sysdig-jenkins.internal.sysdig.com/job/agent-release/ and approve the release.", tokenCredentialId: 'slack'
							input message: 'Docs Complete', ok: 'Approve Release'
						}
					}
			    }
			}
			stage {'Wait for Final Go'} {
				 parallel {
					stage('Wait for Manager') {
						steps {
							slackSend channel: '@UBYCWGBG9', message: "Agent release ${params.RELEASE_VERSION} is awaiting managerial approval. When complete, go to https://sysdig-jenkins.internal.sysdig.com/job/agent-release/ and approve the release.", tokenCredentialId: 'slack'
							input message: 'Manager Complete', ok: 'Approve Release'
						}
					}
					stage('Wait for Releaser') {
						steps {
							slackSend channel: '#ws-agent-core-team', message: "Agent release ${params.RELEASE_VERSION} is awaiting releaser approval. When complete, go to https://sysdig-jenkins.internal.sysdig.com/job/agent-release/ and approve the release.", tokenCredentialId: 'slack'
							input message: 'Releaser Complete', ok: 'Approve Release'
						}
					}
			    }
			}
	    }
	}

	stage('Promote') {
		steps {
			build job:'agent-promote',parameters:[string(name:'RELEASE_VERSION', value:"${params.RELEASE_VERSION}")]
		}
	}

	*/
	}

	post {
		always {
			cleanWs deleteDirs: true, notFailBuild: true
		}
	}
}

