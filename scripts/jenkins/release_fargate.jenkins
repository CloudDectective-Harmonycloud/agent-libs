/* vim:expandtab:sw=4:ts=4:sts=4
*/

pipeline {
    agent { label 'agent-builder-parallel' }
    parameters {
        booleanParam(name: 'CREATE_RELEASE_BRANCH', defaultValue: true, description: 'only check this the first time you run for a given release')
        string(name: 'RELEASE_VERSION', defaultValue: '0.DEV-TEST', trim: true)
        string(name: 'RELEASER_SLACK_ID', defaultValue: 'UCR1M702Y', trim: true,
            description: 'The slack ID of the person running the job so they can be informed of current status. This can be found under "view full profile" and the 3-dots menu: "Copy member ID." Alternatively, it is the last characters after the slash in the URL when viewing your full profile. If you do not wish to be notified, leave blank.')
        string(name: 'RELEASE_BASE', defaultValue: 'dev', trim: true,
            description: 'if this is a dot release, and such should come off a release branch, put that here. example: 9.9.0. Leave as "dev" otherwise. Note this is the release number, NOT the branch name. We do not support releasing off arbitrary branches.')
    }
    environment {
        RELEASE_VERSION="${params.RELEASE_VERSION}"
    }
    stages {

    // grab the repos we need
    stage('Check out dependencies') {
        steps {
            dir('agent') {
                checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/agent']]])
            }
            dir('oss-falco') {
                checkout([$class: 'GitSCM', branches: [[name: 'master-sync']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/oss-falco']]])
            }
            dir('libscap-hayabusa') {
                checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/libscap-hayabusa']]])
            }
            dir('protorepo') {
                checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/protorepo']]])
            }
            dir('kilt-definitions') {
                checkout([$class: 'GitSCM', branches: [[name: 'main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/kilt-definitions']]])
            }
            dir('agent-libs') {
                checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/agent-libs']]])
            }
            dir('probe-builder') {
                checkout([$class: 'GitSCM', branches: [[name: 'dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-jenkins-user-token', url: 'https://github.com/draios/probe-builder']]])
            }
        }
    }

    stage('Switch to Release Base') {
        when {
            expression { params.RELEASE_BASE != "dev" }
        }
        steps {
            dir('agent') {
                sh "git checkout fargate-release-${params.RELEASE_BASE}"
            }
            dir('agent-libs') {
                sh "git checkout fargate-release-${params.RELEASE_BASE}"
            }
            dir('libscap-hayabusa') {
                sh "git checkout fargate-release-${params.RELEASE_BASE}"
            }
            dir('oss-falco') {
                sh "git checkout fargate-release-${params.RELEASE_BASE}"
            }
            dir('protorepo') {
                sh "git checkout fargate-release-${params.RELEASE_BASE}"
            }
            dir('kilt-definitions') {
                sh "git checkout fargate-release-${params.RELEASE_BASE}"
            }
            dir('probe-builder') {
                sh "git checkout fargate-release-${params.RELEASE_BASE}"
            }
        }
    }

    // if we need to push the release branch, do so
    stage('Push Release Branch') {
        when {
            expression { params.CREATE_RELEASE_BRANCH == true }
        }
        steps {
            slackSend channel: '#docs,#support,#sds-f-fargate', message: "Fargate agent release ${params.RELEASE_VERSION} has branched and is in progress.", tokenCredentialId: 'slack'
            slackSend channel: "#sds-f-fargate-dev", message: "@here Release in progress", tokenCredentialId: 'slack'

            withCredentials([sshUserPrivateKey(credentialsId: '4399087a-3e99-41e5-9dbe-a70a554672c8', keyFileVariable: 'GITHUB_KEYFILE', passphraseVariable: 'GITHUB_PASSPHRASE', usernameVariable: 'GITHUB_USERNAME')]) {
                dir('agent') {
                    sh label: '', script: """
                        git checkout -b fargate-release-${params.RELEASE_VERSION}
                        export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
                        git remote add origin2 ssh://git@github.com/draios/agent.git
                        git push -u origin2 fargate-release-${params.RELEASE_VERSION}
                    """
                }
                dir('agent-libs') {
                    sh label: '', script: """
                        git checkout -b fargate-release-${params.RELEASE_VERSION}
                        export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
                        git remote add origin2 ssh://git@github.com/draios/agent-libs.git
                        git push -u origin2 fargate-release-${params.RELEASE_VERSION}
                    """
                }
                dir('libscap-hayabusa') {
                    sh label: '', script: """
                        git checkout -b fargate-release-${params.RELEASE_VERSION}
                        export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
                        git remote add origin2 ssh://git@github.com/draios/libscap-hayabusa.git
                        git push -u origin2 fargate-release-${params.RELEASE_VERSION}
                    """
                }
                dir('oss-falco') {
                    sh label: '', script: """
                        git checkout -b fargate-release-${params.RELEASE_VERSION}
                        export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
                        git remote add origin2 ssh://git@github.com/draios/oss-falco.git
                        git push -u origin2 fargate-release-${params.RELEASE_VERSION}
                    """
                }
                dir('protorepo') {
                    sh label: '', script: """
                        git checkout -b fargate-release-${params.RELEASE_VERSION}
                        export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
                        git remote add origin2 ssh://git@github.com/draios/protorepo.git
                        git push -u origin2 fargate-release-${params.RELEASE_VERSION}
                    """
                }
                dir('kilt-definitions') {
                    sh label: '', script: """
                        git checkout -b fargate-release-${params.RELEASE_VERSION}
                        export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
                        git remote add origin2 ssh://git@github.com/draios/kilt-definitions.git
                        git push -u origin2 fargate-release-${params.RELEASE_VERSION}
                    """
                }
                dir('probe-builder') {
                    sh label: '', script: """
                        git checkout -b fargate-release-${params.RELEASE_VERSION}
                        export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
                        git remote add origin2 ssh://git@github.com/draios/probe-builder.git
                        git push -u origin2 fargate-release-${params.RELEASE_VERSION}
                    """
                }
            }
        }
    }

    // switch all clients to the release branch. necessary if we didn't push a release branch
    stage('Switch To Release Branch') {
        steps {
            dir('agent') {
                sh "git checkout fargate-release-${params.RELEASE_VERSION}"
            }
            dir('agent-libs') {
                sh "git checkout fargate-release-${params.RELEASE_VERSION}"
            }
            dir('libscap-hayabusa') {
                sh "git checkout fargate-release-${params.RELEASE_VERSION}"
            }
            dir('oss-falco') {
                sh "git checkout fargate-release-${params.RELEASE_VERSION}"
            }
            dir('protorepo') {
                sh "git checkout fargate-release-${params.RELEASE_VERSION}"
            }
            dir('kilt-definitions') {
                sh "git checkout fargate-release-${params.RELEASE_VERSION}"
            }
            dir('probe-builder') {
                sh "git checkout fargate-release-${params.RELEASE_VERSION}"
            }
        }
    }

    // build and push the docker builder. this is to ensure we are not affected by
    // non-backwards compatible changes to the builder and can always build
    // this release easily from quay
    stage('Build Builder') {
        parallel {
            stage('Regular Builder') {
                steps {
                    build job:'agent-build-builder',parameters:[
                        string(name:'AGENT_BRANCH', value:"fargate-release-${params.RELEASE_VERSION}"),
                        booleanParam(name:'TAG_LATEST', value:false),
                        string(name:'CONTAINER_NAME', value:"fargate-release-${params.RELEASE_VERSION}")
                    ]
                }
            }
            stage('Alpine Builder') {
                steps {
                    build job:'agent-build-alpine-builder',parameters:[
                        string(name:'AGENT_BRANCH', value:"fargate-release-${params.RELEASE_VERSION}"),
                        booleanParam(name:'TAG_LATEST', value:false),
                        string(name:'CONTAINER_NAME', value:"fargate-release-${params.RELEASE_VERSION}")
                    ]
                }
            }
        }
        post {
            success {
                slackSend channel: "@${params.RELEASER_SLACK_ID}", message: "Build container successfully built for release.", tokenCredentialId: 'slack'
            }
            failure {
                slackSend channel: "@${params.RELEASER_SLACK_ID}", message: "Release failed to build build container. Aborting release. Please fix in the new release branch and rerun with CREATE_RELEASE_BRANCH unchecked.", tokenCredentialId: 'slack'
            }
        }
    }

    // double checks that presubmit tests pass
    stage('Run Presubmit') {
         parallel {
            stage('Unit Test') {
                steps {
                    build job:'agent-presubmit-ut',parameters:[
                        string(name:'AGENT_BRANCH', value:"fargate-release-${params.RELEASE_VERSION}"),
                        string(name:'LIBS_BRANCH', value:"fargate-release-${params.RELEASE_VERSION}"),
                        string(name:'FALCO_BRANCH', value:"fargate-release-${params.RELEASE_VERSION}"),
                        string(name:'PROTOREPO_BRANCH', value:"fargate-release-${params.RELEASE_VERSION}"),
                        string(name:'PROBEBUILDER_BRANCH', value:"fargate-release-${params.RELEASE_VERSION}"),
                        string(name:'BUILDER_VERSION', value:"fargate-release-${params.RELEASE_VERSION}")
                    ]
                }
            }
        }
        post {
            success {
                slackSend channel: "@${params.RELEASER_SLACK_ID}", message: "Release branch passed presubmit tests.", tokenCredentialId: 'slack'
            }
            failure {
                slackSend channel: "@${params.RELEASER_SLACK_ID}", message: "Release failed presubmit tests. Aborting release. Please fix in the new release branch and rerun with CREATE_RELEASE_BRANCH unchecked.", tokenCredentialId: 'slack'
            }
        }
    }

    // builds the RC, runs integration tests, and uploads to artifactory
    // Uploaded image should be sysdig/agent:RELEASE_VERSION-rc
    stage('Build RC') {
        steps {
            build job:'agent-build-fargate-rc',parameters:[
                string(name:'AGENT_BRANCH', value:"fargate-release-${params.RELEASE_VERSION}"),
                string(name:'LIBS_BRANCH', value:"fargate-release-${params.RELEASE_VERSION}"),
                string(name:'LIBSCAP_HAYABUSA_BRANCH', value:"fargate-release-${params.RELEASE_VERSION}"),
                string(name:'FALCO_BRANCH', value:"fargate-release-${params.RELEASE_VERSION}"),
                string(name:'PROTOREPO_BRANCH', value:"fargate-release-${params.RELEASE_VERSION}"),
                string(name:'PROBEBUILDER_BRANCH', value:"fargate-release-${params.RELEASE_VERSION}"),
                string(name:'BUILDER_VERSION', value:"fargate-release-${params.RELEASE_VERSION}"),
                string(name:'RELEASE_VERSION', value:"${params.RELEASE_VERSION}"),
                booleanParam(name:'UPLOAD', value:true),
                booleanParam(name:'PUBLIC_RELEASE', value:true),
                string(name:'RC_NUMBER', value:"${env.BUILD_NUMBER}")
            ]
        }
        post {
            success {
                slackSend channel: "${params.RELEASE_VERSION}_agent_release_prep", message: "RC successfully built.", tokenCredentialId: 'slack'
                // The following QA folks are sent the notice and approval link explicitly.
                // Kelly Tucker (U01F2TW4V4Z)
                slackSend channel: '#qa-agent,@U01F2TW4V4Z', message: "RC successfully built. Testing can begin which does not depend on probes.", tokenCredentialId: 'slack'
            }
            failure {
                slackSend channel: "@${params.RELEASER_SLACK_ID}", message: "Release failed to build RC. Aborting release. Please fix in the new release branch and rerun with CREATE_RELEASE_BRANCH unchecked.", tokenCredentialId: 'slack'
            }
        }

    }

    // Note: we don't tag the fargate artifact with the number for the sole reason
    // of that would mean we could never restart the job without rebuilding the RC, as
    // the number would be wrong. There are ways around that, like paramaterizing that to
    // override the build number, but that medicine is worse than the disease of making it
    // marginally more difficult to have to look at the logs to see what version 
    // is running.
    stage('Build Fargate Artifacts') {
        steps {
            script {
                build job:'Fargate Artifacts Manual',parameters:[
                    string(name:'AGENT_BUILD', value:"${params.RELEASE_VERSION}-rc${env.BUILD_NUMBER}"),
                    string(name:'RELEASE_TAG', value:"${params.RELEASE_VERSION}-rc"),
                    booleanParam(name:'UPDATE_LATEST_TAG',value:false),
                    booleanParam(name:'UPLOAD_IMAGE', value:true),
                    booleanParam(name:'RUN_QA', value:false)
                ]
            }
        }
    }


    // github has a weird behavior where if you move tags, it auto moves a release from publish
    // to draft. Once it's there, we can't find it by tags anymore, and finding it by name
    // is a bit more of a pain. So to solve that, we do this in 3 stages:
    // 1: delete an old github release, which we can find by tag
    // 2: move/create the new tag
    // 3: create the new release, which should be publishable
    stage('delete duplicate github release') {
        steps {
            withCredentials([usernamePassword(credentialsId: 'github-jenkins-user-token', passwordVariable: 'GITHUB_PASSWORD', usernameVariable: 'GITHUB_USERNAME')]) {
                sh label: '', script: """
                    curl -sH "Authorization: token $GITHUB_PASSWORD" https://api.github.com/repos/draios/agent/releases/tags/$RELEASE_VERSION
                    RELEASE_ID=`curl -sH "Authorization: token $GITHUB_PASSWORD" https://api.github.com/repos/draios/agent/releases/tags/fargate-$RELEASE_VERSION | grep \"id\" | head -n 1 | awk '{print \$2}' | sed 's/.\$//'`
                    if [ -z \$RELEASE_ID ];
                    then
                        echo "No prior release found, nothing to delete"
                    else
                        echo "Deleting release id \$RELEASE_ID"
                        curl -sH "Authorization: token $GITHUB_PASSWORD" -X DELETE https://api.github.com/repos/draios/agent/releases/\$RELEASE_ID
                    fi
                """
            }
        }
    }

    // push the release tags to git.
    stage('Push Tags') {
        steps {
            withCredentials([sshUserPrivateKey(credentialsId: '4399087a-3e99-41e5-9dbe-a70a554672c8', keyFileVariable: 'GITHUB_KEYFILE', passphraseVariable: 'GITHUB_PASSPHRASE', usernameVariable: 'GITHUB_USERNAME')]) {
                dir('agent') {
                    sh label: '', script: """
                        export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
                        git tag -d fargate/${params.RELEASE_VERSION} || echo "Tag not found. No problem."
                        git push origin :refs/tags/fargate/${params.RELEASE_VERSION}
                        git tag fargate/${params.RELEASE_VERSION}
                        git push origin fargate/${params.RELEASE_VERSION}
                    """
                }
                dir('agent-libs') {
                    sh label: '', script: """
                        export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
                        git remote add origin2 ssh://git@github.com/draios/agent-libs.git || echo "remote already exists"
                        git tag -d fargate/${params.RELEASE_VERSION} || echo "Tag not found. No problem."
                        git push origin2 :refs/tags/fargate/${params.RELEASE_VERSION}
                        git tag fargate/${params.RELEASE_VERSION}
                        git push origin2 fargate/${params.RELEASE_VERSION}
                    """
                }
                dir('libscap-hayabusa') {
                    sh label: '', script: """
                        export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
                        git remote add origin2 ssh://git@github.com/draios/libscap-hayabusa.git || echo "remote already exists"
                        git tag -d fargate/${params.RELEASE_VERSION} || echo "Tag not found. No problem."
                        git push origin2 :refs/tags/fargate/${params.RELEASE_VERSION}
                        git tag fargate/${params.RELEASE_VERSION}
                        git push origin2 fargate/${params.RELEASE_VERSION}
                    """
                }
                dir('oss-falco') {
                    sh label: '', script: """
                        export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
                        git remote add origin2 ssh://git@github.com/draios/oss-falco.git || echo "remote already exists"
                        git tag -d fargate/${params.RELEASE_VERSION} || echo "Tag not found. No problem."
                        git push origin2 :refs/tags/fargate/${params.RELEASE_VERSION}
                        git tag fargate/${params.RELEASE_VERSION}
                        git push origin2 fargate/${params.RELEASE_VERSION}
                    """
                }
                dir('protorepo') {
                    sh label: '', script: """
                        export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
                        git remote add origin2 ssh://git@github.com/draios/protorepo.git || echo "remote already exists"
                        git tag -d fargate/${params.RELEASE_VERSION} || echo "Tag not found. No problem."
                        git push origin2 :refs/tags/fargate/${params.RELEASE_VERSION}
                        git tag fargate/${params.RELEASE_VERSION}
                        git push origin2 fargate/${params.RELEASE_VERSION}
                    """
                }
                dir('kilt-definitions') {
                    sh label: '', script: """
                        export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
                        git remote add origin2 ssh://git@github.com/draios/kilt-definitions.git || echo "remote already exists"
                        git tag -d fargate/${params.RELEASE_VERSION} || echo "Tag not found. No problem."
                        git push origin2 :refs/tags/fargate/${params.RELEASE_VERSION}
                        git tag fargate/${params.RELEASE_VERSION}
                        git push origin2 fargate/${params.RELEASE_VERSION}
                    """
                }
                dir('probe-builder') {
                    sh label: '', script: """
                        export GIT_SSH_COMMAND='ssh -i $GITHUB_KEYFILE -F /dev/null'
                        git remote add origin2 ssh://git@github.com/draios/probe-builder.git || echo "remote already exists"
                        git tag -d fargate/${params.RELEASE_VERSION} || echo "Tag not found. No problem."
                        git push origin2 :refs/tags/fargate/${params.RELEASE_VERSION}
                        git tag fargate/${params.RELEASE_VERSION}
                        git push origin2 fargate/${params.RELEASE_VERSION}
                    """
                }
            }
        }
    }

    stage('create github release') {
        steps {
            withCredentials([usernamePassword(credentialsId: 'github-jenkins-user-token', passwordVariable: 'GITHUB_PASSWORD', usernameVariable: 'GITHUB_USERNAME')]) {
                sh label: '', script: """
                    curl -H "Authorization: token $GITHUB_PASSWORD" --data '{"tag_name":"fargate/${params.RELEASE_VERSION}","name":"fargate-${params.RELEASE_VERSION}","body":"body","target_commitish":"fargate-release-${params.RELEASE_VERSION}","draft":false}' https://api.github.com/repos/draios/agent/releases
                """
            }
        }
    }
    stage('Wait for Commit') {
        stages {
            stage('Notify') {
                steps {
                    slackSend channel: "#sds-f-fargate-dev", message: "Release is awaiting approvals", tokenCredentialId: 'slack'
                }
            }

            stage('Wait for QA') {
                steps {
                    input message: 'QA Complete', ok: 'Approve Release'
                }
            }

            stage('Wait for Docs') {
                steps {
                    slackSend channel: '#docs', message: "Fargate agent release ${params.RELEASE_VERSION} is awaiting docs approval. When docs are ready for release, go to ${env.BUILD_URL}input and confirm. NOTE: The release does not become public at this point. Another notification will be made when the release has promoted and release notes should be posted.", tokenCredentialId: 'slack'
                    input message: 'Docs Ready', ok: 'Confirm'
                }
            }

            stage ('Wait for Final Go') {
                 parallel {
                    stage('Wait for Manager') {
                        steps {
                            // Naveen Bali
                            slackSend channel: '@UBYCWGBG9', message: "Fargate agent release ${params.RELEASE_VERSION} is awaiting managerial approval. When complete, go to ${env.BUILD_URL}input and approve the release.", tokenCredentialId: 'slack'
                            input message: 'Manager Complete', ok: 'Approve Release'
                        }
                    }
                    stage('Wait for Releaser') {
                        steps {
                            slackSend channel: "@${params.RELEASER_SLACK_ID},#sds-f-fargate-dev", message: "Fargate agent release ${params.RELEASE_VERSION} is awaiting releaser approval. When complete, go to ${env.BUILD_URL}input and approve the release.", tokenCredentialId: 'slack'
                            input message: 'Releaser Complete', ok: 'Approve Release'
                        }
                    }
                }
            }
        }
    }
    stage('Promote Fargate') {
        steps {
             slackSend channel: "#sds-f-fargate-dev", message: "Promote is in progress.", tokenCredentialId: 'slack'
            build job:'Fargate Artifact Promote',parameters:[
                string(name:'VERSION',value:"${params.RELEASE_VERSION}-rc"),
                string(name:'PROMOTE',value:"${params.RELEASE_VERSION}"),
                booleanParam(name:'UPDATE_LATEST_TAG',value:true)
            ]
        }
    }
    stage('Upload to S3'){
        steps{
            withCredentials([usernamePassword(credentialsId: 'jenkins-artifactory', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USERNAME')]) {
                sh label: '', script: '''
                    curl -u "$ARTIFACTORY_USERNAME:$ARTIFACTORY_PASSWORD" "https://artifactory.internal.sysdig.com/artifactory/falco-hayabusa/dist/branches/$RELEASE_VERSION-rc/fargate-agent-bundle.tar.gz" > fargate-agent-bundle.tar.gz
                    tar -xf fargate-agent-bundle.tar.gz
                    aws s3 cp dist/installer-linux-amd64 "s3://download.draios.com/dependencies/serverless/fargate/" --acl public-read
                    aws s3 cp dist/installer-windows-amd64.exe "s3://download.draios.com/dependencies/serverless/fargate/" --acl public-read
                    aws s3 cp dist/installer-macos-amd64 "s3://download.draios.com/dependencies/serverless/fargate/" --acl public-read
                    aws s3 cp dist/orchestrator-agent.yaml "s3://download.draios.com/dependencies/serverless/fargate/" --acl public-read
                    aws s3 cp dist/installer-linux-amd64 "s3://download.draios.com/dependencies/serverless/fargate/$RELEASE_VERSION/" --acl public-read
                    aws s3 cp dist/installer-windows-amd64.exe "s3://download.draios.com/dependencies/serverless/fargate/$RELEASE_VERSION/" --acl public-read
                    aws s3 cp dist/installer-macos-amd64 "s3://download.draios.com/dependencies/serverless/fargate/$RELEASE_VERSION/" --acl public-read
                    aws s3 cp dist/orchestrator-agent.yaml "s3://download.draios.com/dependencies/serverless/fargate/$RELEASE_VERSION/" --acl public-read
                '''
            }
        }
    }

    }

    post {
        always {
            sh label: '', script: '''
                sudo rm -rf * .[!.]*
            '''
            cleanWs()
        }
        success {
            slackSend channel: "@${params.RELEASER_SLACK_ID}", message: "Release job success!", tokenCredentialId: 'slack'
            slackSend channel: "sds-f-fargate-dev", message: "Release job success!", tokenCredentialId: 'slack'
            slackSend channel: "sds-f-fargate", message: "Fargate agent ${params.RELEASE_VERSION} has been promoted.", tokenCredentialId: 'slack'
        }
        failure {
            slackSend channel: "@${params.RELEASER_SLACK_ID}", message: "Release job failure.", tokenCredentialId: 'slack'
            slackSend channel: "#sds-f-fargate-dev", message: "Release job failure!", tokenCredentialId: 'slack'
        }
    }
}

