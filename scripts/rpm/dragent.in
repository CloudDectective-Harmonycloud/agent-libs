#!/bin/sh
#
# dragent Draios Agent
#
# chkconfig:   2345 55 45
# description: Draios Agent.
#

### BEGIN INIT INFO
# Provides: 
# Required-Start: 
# Required-Stop: 
# Should-Start: 
# Should-Stop: 
# Default-Start: 
# Default-Stop: 
# Short-Description: 
# Description:      
### END INIT INFO

# Source function library.
[ -e /etc/rc.d/init.d/functions ] && . /etc/rc.d/init.d/functions
[ -e /etc/rc.status ] && . /etc/rc.status

exec="@CMAKE_INSTALL_PREFIX@/bin/dragent"
prog="dragent"
# config="<path to major config file>"

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

lockfile=/var/lock/subsys/$prog
pidfile="/var/run/dragent.pid"

start() {
    if hash daemon > /dev/null 2>&1; then
        DAEMONIZE=daemon
    elif hash startproc > /dev/null 2>&1; then
        DAEMONIZE=startproc
    fi
    [ -x $exec ] || exit 5
    # [ -f $config ] || exit 6

    # Before we start the prog, we need to check
    # if it is already running. Do this by checking the pidfile
    # First check if program in pidfile is still running.
    # This has been seen to happen on RHEL6 especially if the system is
    # full. OR you started dragent as root(superuser) and now trying to
    # start it again as a non-root
    if [ -s $pidfile ] && [ -e /proc/$(< $pidfile) ]; then
	    echo "Process $prog is already running" && return 1
    elif [ -f $pidfile ]; then
	    echo "The pidfile $pidfile exists, but is likely empty. Check if $prog is running manually and retry after deleting $pidfile and killing the running instance" && return 2
    fi

    # Next check for lockfile also before proceeding.Sometimes in RHEL6 we see this can happen.
    # A previous run leaves a spurious lockfile behind because either it was killed or crashed
    # before it could remove the lockfile (see line `rm -f $lockfile` in the stop() function)
    # We don't want to keep creating processes that are started, but cannot create either the
    # pidfile or the lockfile due to lack of permissions. Error out and let user handle it.
    # So if a rogue lockfile is running, handle that here.
    if [ -f $lockfile ]; then
	    # try to touch it and move on. If it fails, throw error message and return
	    fail=0
	    result=$(touch $lockfile 2>&1) || { fail=1 && echo "Failed to touch $lockfile"; }
	    if [ $fail -eq 1 ]; then
		    echo "$result"
		    if [[ "$result" =~ "Permission denied" ]]; then
			    echo "Cannot touch $lockfile as current user. Retry running as superuser [or] rerun after deleting the lock file: $lockfile"
			    return 2
		    fi
		    # some other error. just quit
		    return 2
	    fi
    fi

    echo -n $"Starting $prog: "
    if [ ! -d /sys/module/sysdigcloud_probe ]; then
        /sbin/modprobe sysdigcloud-probe || return $?
    fi
    ${DAEMONIZE} $exec --daemon --dragentpid=$pidfile
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    killproc -p $pidfile $exec
    retval=$?
    echo
    /sbin/rmmod sysdigcloud-probe
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    status -p $pidfile $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
