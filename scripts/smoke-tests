#!/bin/bash
set -exu

function smoke_tests {
	killall -9 test || true

	cp /opt/draios/bin/dragent.properties /opt/draios/bin/dragent.properties.bak
	echo "server.address =" >> /opt/draios/bin/dragent.properties

	# The agent should be running after the installation script	
	sleep 2
	test -e /var/run/dragent.pid
	service dragent status
	MONITOR_PID=$(cat /var/run/dragent.pid)
	AGENT_PID=$(pidof -o $MONITOR_PID dragent)

	# The agent should restart if it dies unexpectedly
	kill -SIGKILL $AGENT_PID
	sleep 2
	pidof -o $MONITOR_PID dragent

	# The restart should work
	service dragent restart
	sleep 2
	MONITOR_PID=$(cat /var/run/dragent.pid)
	pidof -o $MONITOR_PID dragent

	# The stop should work and clean processes and pid files
	service dragent stop
	sleep 2
	test ! -e /var/run/dragent.pid
	service dragent status && false
	pidof dragent && false

	# The restart should work even when the agent is not running
	service dragent restart
	sleep 2
	MONITOR_PID=$(cat /var/run/dragent.pid)
	pidof -o $MONITOR_PID dragent
	service dragent stop

	# Run the backend server. The first connection should fail
	# since we are not using the right backend
	rm -rf /opt/draios/logs/*
	rm -rf /opt/draios/bin/dragent.properties
	cp /opt/draios/bin/dragent.properties.bak /opt/draios/bin/dragent.properties
	echo "127.0.0.1 collector.draios.com" >> /etc/hosts
	echo "server.port = 8080" >> /opt/draios/bin/dragent.properties
	python /opt/draios/test/resources/fake_backend.py --ssl-certificate=/opt/draios/test/resources/fake_backend.cert --ssl-key=/opt/draios/test/resources/fake_backend.key &
	service dragent start
	sleep 5
	cat /opt/draios/logs/* | grep "certificate verify failed"
	service dragent stop
	pkill -f fake_backend || true

	# Now put the right certificate and check the connection is
	# fine
	rm -rf /opt/draios/logs/*
	rm -rf /opt/draios/bin/dragent.properties
	cp /opt/draios/bin/dragent.properties.bak /opt/draios/bin/dragent.properties
	echo "server.port = 8080" >> /opt/draios/bin/dragent.properties
	echo "ssl.ca_certificate = test/resources/fake_backend.cert" >> /opt/draios/bin/dragent.properties
	python /opt/draios/test/resources/fake_backend.py --ssl-certificate=/opt/draios/test/resources/fake_backend.cert --ssl-key=/opt/draios/test/resources/fake_backend.key &
	service dragent start
	sleep 5
	cat /opt/draios/logs/* | grep "SSL identity verified"
	service dragent stop
	pkill -f fake_backend

	rm -rf /opt/draios/bin/dragent.properties
	mv /opt/draios/bin/dragent.properties.bak /opt/draios/bin/dragent.properties
	
	modprobe ppm
	sh -c "cd /opt/draios/test; ./test"
	rmmod ppm
}

function install_rpm {
	yum -y erase draios-tests draios-debug-agent draios-debug-tests
	yum -y install draios-tests
}

function install_deb {
	apt-get -y purge draios-tests draios-debug-agent draios-debug-tests || true
	apt-get -y install draios-tests
}

function install_debug_rpm {
	yum -y erase draios-agent draios-tests draios-debug-agent draios-debug-tests
	yum -y install draios-debug-agent draios-debug-tests
}

function install_debug_deb {
	apt-get -y purge draios-agent draios-tests draios-debug-agent draios-debug-tests || true
	apt-get -y install draios-debug-agent draios-debug-tests
}

if [ -f /etc/debian_version ]; then
    install_deb
elif [ -f /etc/system-release-cpe ]; then
    install_rpm
else
    echo "Unable to detect operating system."
    exit 1
fi

smoke_tests

if [ -f /etc/debian_version ]; then
    install_debug_deb
elif [ -f /etc/system-release-cpe ]; then
    install_debug_rpm
else
    echo "Unable to detect operating system."
    exit 1
fi

service dragent start
smoke_tests
