#!/bin/bash
set -exu

REPOSITORY=$1

function smoke_tests {
	killall -9 test || true

	cp /opt/draios/bin/dragent.properties /opt/draios/bin/dragent.properties.bak
	echo "server.address =" >> /opt/draios/bin/dragent.properties

	# The agent should be running after the installation script	
	sleep 2
	test -e /var/run/dragent.pid
	service dragent status
	MONITOR_PID=$(cat /var/run/dragent.pid)
	AGENT_PID=$(pidof -o $MONITOR_PID dragent)

	# The agent should restart if it dies unexpectedly
	kill -SIGKILL $AGENT_PID
	sleep 2
	pidof -o $MONITOR_PID dragent

	# The restart should work
	service dragent restart
	sleep 2
	MONITOR_PID=$(cat /var/run/dragent.pid)
	pidof -o $MONITOR_PID dragent

	# The stop should work and clean processes and pid files
	service dragent stop
	sleep 2
	test ! -e /var/run/dragent.pid
	service dragent status && false
	pidof dragent && false

	# The restart should work even when the agent is not running
	service dragent restart
	sleep 2
	MONITOR_PID=$(cat /var/run/dragent.pid)
	pidof -o $MONITOR_PID dragent
	service dragent stop

	# Run the backend server. The first connection should fail
	# since we are not using the right backend
	rm -rf /opt/draios/logs/*
	rm -rf /opt/draios/bin/dragent.properties
	cp /opt/draios/bin/dragent.properties.bak /opt/draios/bin/dragent.properties
	echo "127.0.0.1 collector.draios.com" >> /etc/hosts
	echo "server.port = 8080" >> /opt/draios/bin/dragent.properties
	python /opt/draios/test/resources/fake_backend.py --ssl-certificate=/opt/draios/test/resources/fake_backend.cert --ssl-key=/opt/draios/test/resources/fake_backend.key &
	service dragent start
	sleep 5
	cat /opt/draios/logs/* | grep "certificate verify failed"
	service dragent stop
	pkill -f fake_backend || true

	# Now put the right certificate and check the connection is
	# fine
	rm -rf /opt/draios/logs/*
	rm -rf /opt/draios/bin/dragent.properties
	cp /opt/draios/bin/dragent.properties.bak /opt/draios/bin/dragent.properties
	echo "server.port = 8080" >> /opt/draios/bin/dragent.properties
	echo "ssl.ca_certificate = test/resources/fake_backend.cert" >> /opt/draios/bin/dragent.properties
	python /opt/draios/test/resources/fake_backend.py --ssl-certificate=/opt/draios/test/resources/fake_backend.cert --ssl-key=/opt/draios/test/resources/fake_backend.key &
	service dragent start
	sleep 5
	cat /opt/draios/logs/* | grep "SSL identity verified"
	service dragent stop
	pkill -f fake_backend

	rm -rf /opt/draios/bin/dragent.properties
	mv /opt/draios/bin/dragent.properties.bak /opt/draios/bin/dragent.properties
	
	modprobe sysdig-probe
	sh -c "cd /opt/draios/test; ./test"
	sysdig -n 50
	rmmod sysdig-probe
}

function install_tests {
	if [ -f /etc/debian_version ]; then
	    apt-get -y install draios-tests
	elif [ -f /etc/system-release-cpe ]; then
	    yum -y install draios-tests
	else
	    echo "Unable to detect operating system."
	    exit 1
	fi
}

function uninstall {
	if [ -f /etc/debian_version ]; then
		apt-get -y purge draios-tests draios-agent sysdig || true
	elif [ -f /etc/system-release-cpe ]; then
		yum --enablerepo=draios clean all || true
		yum -y erase draios-tests draios-agent sysdig
	else
	    echo "Unable to detect operating system."
	    exit 1
	fi	
}

uninstall
curl -s http://download.draios.com/$REPOSITORY/install-agent | bash -s access_key
install_tests
smoke_tests

uninstall
curl -s http://download.draios.com/$REPOSITORY-debug/install-agent | bash -s access_key
install_tests
smoke_tests

uninstall
curl -s http://download.draios.com/$REPOSITORY/install-sysdig | bash
sysdig -n 50

uninstall
curl -s http://download.draios.com/$REPOSITORY-debug/install-sysdig | bash
sysdig -n 50
