#!/bin/bash
set -exu

BASE_REPOSITORY=$1

function smoke_tests {
	killall -9 test || true

	cat /opt/draios/bin/dragent.properties | grep "access_key"

	echo "watchdog.enabled = false" >> /opt/draios/bin/dragent.properties
	cp /opt/draios/bin/dragent.properties /opt/draios/bin/dragent.properties.bak

	# The agent should be running after the installation script	
	sleep 2
	test -e /var/run/dragent.pid
	service dragent status
	MONITOR_PID=$(cat /var/run/dragent.pid)
	AGENT_PID=$(pidof -o $MONITOR_PID dragent)

	# The agent should be sucessfully connected to app.draios.com
	cat /opt/draios/logs/* | grep "SSL identity verified"

	# The agent should correctly detect Java
	cat /opt/draios/logs/* | grep "Java detected"
	cat /opt/draios/logs/* | grep "Found JMX metrics for pid"
	cat /opt/draios/logs/* | grep "HeapMemoryUsage"

	# The agent should restart if it dies unexpectedly
	kill -SIGKILL $AGENT_PID
	sleep 2
	pidof -o $MONITOR_PID dragent

	# The restart should work
	service dragent restart
	sleep 2
	MONITOR_PID=$(cat /var/run/dragent.pid)
	pidof -o $MONITOR_PID dragent

	# The stop should work and clean processes and pid files
	service dragent stop
	sleep 2
	test ! -e /var/run/dragent.pid
	service dragent status && false
	pidof dragent && false

	# The restart should work even when the agent is not running
	service dragent restart
	sleep 2
	MONITOR_PID=$(cat /var/run/dragent.pid)
	pidof -o $MONITOR_PID dragent
	service dragent stop

	# Run the backend server. The first connection should fail
	# since we are not using the right backend
	rm -rf /opt/draios/logs/*
	rm -rf /opt/draios/bin/dragent.properties
	cp /opt/draios/bin/dragent.properties.bak /opt/draios/bin/dragent.properties
	cp /etc/hosts /etc/hosts.bak
	echo "127.0.0.1 collector.sysdigcloud.com" >> /etc/hosts
	echo "server.port = 8080" >> /opt/draios/bin/dragent.properties
	python ./opt/draios/test/resources/fake_backend.py --ssl-certificate=./opt/draios/test/resources/fake_backend.cert --ssl-key=./opt/draios/test/resources/fake_backend.key &
	service dragent start
	sleep 5
	cat /opt/draios/logs/* | grep "certificate verify failed"
	service dragent stop
	pkill -f fake_backend || true

	# Now put the right certificate and check the connection is
	# fine
	rm -rf /opt/draios/logs/*
	rm -rf /opt/draios/bin/dragent.properties
	cp /opt/draios/bin/dragent.properties.bak /opt/draios/bin/dragent.properties
	echo "server.port = 8080" >> /opt/draios/bin/dragent.properties
	echo "ssl.ca_certificate = test/resources/fake_backend.cert" >> /opt/draios/bin/dragent.properties
	mkdir -p /opt/draios/test/resources
	cp ./opt/draios/test/resources/fake_backend.cert /opt/draios/test/resources/
	python ./opt/draios/test/resources/fake_backend.py --ssl-certificate=./opt/draios/test/resources/fake_backend.cert --ssl-key=./opt/draios/test/resources/fake_backend.key &
	service dragent start
	sleep 5
	cat /opt/draios/logs/* | grep "SSL identity verified"
	service dragent stop
	pkill -f fake_backend

	rm -rf /opt/draios/bin/dragent.properties
	mv /opt/draios/bin/dragent.properties.bak /opt/draios/bin/dragent.properties
	rm -rf /etc/hosts
	mv /etc/hosts.bak /etc/hosts
	
	modprobe sysdig-probe
	sh -c "cd ./opt/draios/test; ./test"
	sysdig -n 50
	sysdig -cl
	sysdig -cstdout -n 50
	rmmod sysdig-probe
}

function install_tests {
	if [ -f /etc/debian_version ]; then
		AGENT_VERSION=$(dpkg-query -W --showformat='${Version}\n' draios-agent)
	elif [ -f /etc/system-release-cpe ]; then
		AGENT_VERSION=$(rpm -q --qf "%{VERSION}" draios-agent)
	else
	    echo "Unable to detect operating system."
	    exit 1
	fi

	ARCH=$(uname -m)
	FILE_NAME="draios-$AGENT_VERSION-$ARCH-tests.tar.gz"
	wget http://download.draios.com/$REPOSITORY/tgz/$ARCH/$FILE_NAME
	tar zxvf $FILE_NAME
	mkdir ./opt/draios/test/captures
	rm -rf $FILE_NAME
}

function uninstall {
	if [ -f /etc/debian_version ]; then
		apt-get -y purge draios-agent sysdig < /dev/null || true
	elif [ -f /etc/system-release-cpe ]; then
		yum -y erase draios-agent sysdig
		yum clean all
		rm -rf /etc/yum.repos.d/draios.repo
		yum clean all
	else
	    echo "Unable to detect operating system."
	    exit 1
	fi

	rm -rf ./opt || true
	rm -rf /opt/draios || true
}

uninstall
REPOSITORY=$BASE_REPOSITORY
curl -s http://download.draios.com/$REPOSITORY/install-agent | bash -s access_key
install_tests
smoke_tests

uninstall
REPOSITORY=$BASE_REPOSITORY-debug
curl -s http://download.draios.com/$REPOSITORY/install-agent | bash -s access_key
install_tests
smoke_tests

uninstall
REPOSITORY=$BASE_REPOSITORY-debug
curl -s http://download.draios.com/$REPOSITORY/install-sysdig | bash
sysdig -n 50
sysdig -cstdout -n 50

uninstall
REPOSITORY=$BASE_REPOSITORY
curl -s http://download.draios.com/$REPOSITORY/install-sysdig | bash
sysdig -n 50
sysdig -cstdout -n 50
