#!/bin/bash
#
# Installer for Draios agent
# www.draios.com
#
# (c) 2013-2014 Draios Inc.
#

set -e

function install_rpm {
	if ! hash curl > /dev/null 2>&1; then
		echo "* Installing curl"
		yum -q -y install curl
	fi

	if ! yum -q list dkms > /dev/null 2>&1; then
		echo "* Installing EPEL repository (for DKMS)"
		if [ $VERSION -eq 7 ] && [ $DISTRO = "centos" ]; then
			rpm --quiet -i http://mirrors.kernel.org/centos/7/extras/x86_64/Packages/epel-release-7-5.noarch.rpm
		elif [ $VERSION -eq 7 ]; then
			rpm --quiet -i http://mirrors.kernel.org/fedora-epel/7/x86_64/e/epel-release-7-5.noarch.rpm
		else
			rpm --quiet -i http://mirrors.kernel.org/fedora-epel/6/i386/epel-release-6-8.noarch.rpm
		fi
	fi

	echo "* Installing Draios public key"
	rpm --quiet --import https://s3.amazonaws.com/download.draios.com/DRAIOS-GPG-KEY.public
	echo "* Installing Draios repository"
	curl -s -o /etc/yum.repos.d/draios.repo http://download.draios.com/_REPOSITORY_NAME_/rpm/draios.repo
	echo "* Installing kernel headers"
	KERNEL_VERSION=$(uname -r)
	if [[ $KERNEL_VERSION == *PAE* ]]; then
		yum -q -y install kernel-PAE-devel-${KERNEL_VERSION%.PAE} || kernel_warning
	elif [[ $KERNEL_VERSION == *stab* ]]; then
		# It's OpenVZ kernel and we should install another package
		yum -q -y install vzkernel-devel-$KERNEL_VERSION || kernel_warning
	else
		yum -q -y install kernel-devel-$KERNEL_VERSION || kernel_warning
	fi
	echo "* Installing Draios agent"
	yum -q -y install draios-agent sysdig
	service dragent start
}

function install_deb {
	export DEBIAN_FRONTEND=noninteractive

	if ! hash curl > /dev/null 2>&1; then
		echo "* Installing curl"
		apt-get -qq -y install curl < /dev/null
	fi

	echo "* Installing Draios public key"
	curl -s https://s3.amazonaws.com/download.draios.com/DRAIOS-GPG-KEY.public | apt-key add -
	echo "* Installing Draios repository"
	curl -s -o /etc/apt/sources.list.d/draios.list http://download.draios.com/_REPOSITORY_NAME_/deb/draios.list
	apt-get -qq update < /dev/null
	echo "* Installing kernel headers"
	apt-get -qq -y install linux-headers-$(uname -r) < /dev/null || kernel_warning
	echo "* Installing Draios agent"
	apt-get -qq -y install draios-agent sysdig < /dev/null
}

function unsupported {
	echo "Unsupported operating system. Please consider contacting support@draios.com or trying the manual installation."
	exit 1	
}

function kernel_warning {
	echo "Unable to find kernel development files for the current kernel version" $(uname -r)
	echo "This usually means that your system is not up-to-date or you installed a custom kernel version."
	echo "The installation will continue but you'll need to install these yourself in order to use the agent."
	echo "Contact support@draios.com if you need further assistance."
}

function help {
	echo "Usage: $0 -a access_key [-t tags] [-c collector] [-s secure]"
	echo "  access_key: Secret access key, as shown in app.draios.com"
	echo "  tags: List of tags for this host. If set, tags can be used in"
	echo "        the Draios map. The syntax can be a comma-separated list of"
	echo "        TAG_NAME:TAG_VALUE or a single TAG_VALUE (in which case the tag"
	echo "        name \"Tag\" is implicitly assumed)."
	echo "        For example, \"role:webserver,location:europe\", \"role:webserver\""
	echo "        and \"webserver\" are all valid alternatives."
	echo "  collector: collector IP for sysdig cloud on premis installation"
	echo "  secure: use a secure TLS connection to send metrics to the collector"
	echo "          accepted values: true or false"
	echo
	exit 1
}

#main
while getopts ":a:t:c:s:" opt; do
  case ${opt} in
    a)  
        echo "access key: ${OPTARG}" >&2
        ACCESS_KEY=${OPTARG}
        ;;  
    t)  
        echo "tags: ${OPTARG}" >&2
        TAGS=${OPTARG}
        ;;  
    c)  
        echo "collector endpoint: ${OPTARG}" >&2
        COLLECTOR=${OPTARG}
        ;;  
    s)  
        echo "secure connection setting: ${OPTARG}" >&2
        SECURE=${OPTARG}
        ;;  
    \?) 
        echo "Invalid option: -${OPTARG}" >&2
        help
        exit 1
        ;;  
    :)  
      echo "Option -${OPTARG} requires an argument." >&2
      help
      exit 1
      ;;  
  esac
done

if [ $(id -u) != 0 ]; then
	echo "Installer must be run as root (or with sudo)."
	exit 1
fi

echo "* Detecting operating system"

ARCH=$(uname -m)
if [[ ! $ARCH = *86 ]] && [ ! $ARCH = "x86_64" ]; then
	unsupported
fi

if [ -f /etc/debian_version ]; then
	if [ -f /etc/lsb-release ]; then
		. /etc/lsb-release
		DISTRO=$DISTRIB_ID
		VERSION=${DISTRIB_RELEASE%%.*}
	else
		DISTRO="Debian"
		VERSION=$(cat /etc/debian_version | cut -d'.' -f1)
	fi

	case "$DISTRO" in

		"Ubuntu")
			if [ $VERSION -ge 10 ]; then
				install_deb
			else
				unsupported
			fi
			;;

		"LinuxMint")
			if [ $VERSION -ge 9 ]; then
				install_deb
			else
				unsupported
			fi
			;;

		"Debian")
			if [ $VERSION -ge 6 ]; then
				install_deb
			elif [[ $VERSION == *sid* ]]; then
				install_deb
			else
				unsupported
			fi
			;;

		*)
			unsupported
			;;

	esac

elif [ -f /etc/system-release-cpe ]; then
	DISTRO=$(cat /etc/system-release-cpe | cut -d':' -f3)
	VERSION=$(cat /etc/system-release-cpe | cut -d':' -f5 | cut -d'.' -f1 | sed 's/[^0-9]*//g')

	case "$DISTRO" in

		"oracle" | "centos" | "redhat")
			if [ $VERSION -ge 6 ]; then
				install_rpm
			else
				unsupported
			fi
			;;

		"amazon")
			install_rpm
			;;

		"fedoraproject")
			if [ $VERSION -ge 13 ]; then
				install_rpm
			else
				unsupported
			fi
			;;

		*)
			unsupported
			;;

	esac

else
	unsupported
fi

echo "* Setting access key"

CONFIG_FILE=/opt/draios/etc/dragent.yaml

if ! grep ^customerid $CONFIG_FILE > /dev/null 2>&1; then
	echo "customerid: $ACCESS_KEY" >> $CONFIG_FILE
else
	sed -i "s/^customerid.*/customerid: $ACCESS_KEY/g" $CONFIG_FILE
fi

if [ ! -z "$TAGS" ]; then
	echo "* Setting tags"

	if ! grep ^tags $CONFIG_FILE > /dev/null 2>&1; then
		echo "tags: $TAGS" >> $CONFIG_FILE
	else
		sed -i "s/^tags.*/tags: $TAGS/g" $CONFIG_FILE
	fi
fi

if [ ! -z "$COLLECTOR" ]; then
	echo "* Setting collector endpoint"

	if ! grep ^ui.tags $CONFIG_FILE > /dev/null 2>&1; then
		echo "collector: $COLLECTOR" >> $CONFIG_FILE
	else
		sed -i "s/^collector.*/collector: $COLLECTOR/g" $CONFIG_FILE
	fi
fi

if [ ! -z "$SECURE" ]; then
	echo "* Setting connection security"

	if ! grep ^ssl $CONFIG_FILE > /dev/null 2>&1; then
		echo "ssl: $SECURE" >> $CONFIG_FILE
	else
		sed -i "s/^ssl.*/ssl: $SECURE/g" $CONFIG_FILE
	fi
fi

service dragent restart
