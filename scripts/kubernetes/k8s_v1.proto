//*************************
// Kubernetes v1
//*************************


//
// ObjectReference contains enough information to let you inspect or modify the referred object.
//
message k8s_object_reference {
	// Kind of the referent. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds
	optional string kind = 1;

	// Name of the referent. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names
	optional string name = 2;

	// Namespace of the referent. More info: http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md
	optional string namespace = 3;

	// API version of the referent.
	optional string apiVersion = 4;

	// If referring to a piece of an object instead of an entire object, this string should contain a valid
	// JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object
	// reference is to a container within a pod, this would take on a value like: "spec.containers{name}"
	// (where "name" refers to the name of the container that triggered the event) or if no container name is
	// specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have
	// some well-defined way of referencing a part of an object.
	optional string fieldPath = 5;

	// Specific resourceVersion to which this reference is made, if any.
	// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency
	optional string resourceVersion = 6;

	// UID of the referent. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids
	optional string uid = 7;
}

//
// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create
//
message k8s_object_meta {
	// Name must be unique within a namespace. Is required when creating resources, although some resources may allow
	// a client to request the generation of an appropriate name automatically. Name is primarily intended for creation
	// idempotence and configuration definition.
	// Cannot be updated.
	// More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names
	optional string name = 1;
	
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided.
	// If this field is used, the name returned to the client will be different than the name passed.
	// This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field,
	// and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and
	// the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout
	// indicating a unique name could not be found in the time allotted, and the client should retry
	// (optionally after the time indicated in the Retry-After header).
	// Applied only if Name is not specified.
	// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency
	optional string generateName = 2;
	
	// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace,
	// but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field
	// for those objects will be empty. Must be a DNS_LABEL.
	// Cannot be updated.
	// More info: http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md
	optional string namespace = 3;
	
	// SelfLink is a URL representing this object.
	// Populated by the system. Read-only.
	optional string selfLink = 4;
	
	// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of
	// a resource and is not allowed to change on PUT operations. Populated by the system. Read-only.
	// More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids
	optional string uid = 5;
	
	// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed.
	// May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources.
	// Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
	// Populated by the system. Read-only. Value must be treated as opaque by clients and .
	// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency
	optional string resourceVersion = 6;
	
	// A sequence number representing a specific generation of the desired state.
	// Currently only implemented by replication controllers.
	// Populated by the system. Read-only.
	optional int64 generation = 7;
	
	// CreationTimestamp is a timestamp representing the server time when this object was created.
	// It is not guaranteed to be set in happens-before order across separate operations.
	// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
	// Populated by the system. Read-only. Null for lists.
	// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
	optional string creationTimestamp = 8;
	
	// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted.
	// This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client.
	// The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field.
	// Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be
	// deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending
	// a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard
	// termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when
	// a graceful deletion is requested.
	// Read-only.
	// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
	optional string deletionTimestamp = 9;
	
	// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system.
	// Only set when deletionTimestamp is also set. May only be shortened.
	// Read-only.
	optional int64 deletionGracePeriodSeconds = 10;
	
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of
	// replication controllers and services.
	// More info: http://releases.k8s.io/HEAD/docs/user-guide/labels.md
	// TODO: Any type requires special treatment and is only supported in proto3, leaving out for now
	// optional Any labels = 11;
	
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/HEAD/docs/user-guide/annotations.md
	// TODO: Any type requires special treatment and is only supported in proto3, leaving out for now
	// optional Any annotations = 12;
}

//
// EndpointAddress is a tuple that describes single IP address.
//
message k8s_endpoint_address {
	// The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24).
	optional string ip = 1;

	// Reference to object providing the endpoint.
	optional k8s_object_reference target_ref = 2;
}

//
// EndpointPort is a tuple that describes a single port.
//
message k8s_endpoint_port {
	// The IP protocol for this port. Must be UDP or TCP. Default is TCP.
	optional string protocol = 1;

	// The name of this port (corresponds to ServicePort.Name).
	// Must be a DNS_LABEL. Optional only if one port is defined.
	optional string name = 2;

	// The port number of the endpoint.
	optional int32 port = 3;
}

//
// EndpointSubset is a group of addresses with a common set of ports. 
// The expanded set of endpoints is the Cartesian product of Addresses x Ports.
// 
// For example, given:
// { Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//   Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}] }
// 
// The resulting set of endpoints can be viewed as:
// a: [ 10.10.1.1:8675, 10.10.2.2:8675 ], b: [ 10.10.1.1:309, 10.10.2.2:309 ]
//
message k8s_endpoint_subset {
	optional string id = 1;
	repeated k8s_endpoint_address endpoint_address = 2; // IP addresses which offer the related ports.
	repeated k8s_endpoint_port endpoint_port = 3; // Port numbers available on the related IP addresses.
}

//
// Endpoints is a collection of endpoints that implement the actual service. Example:
//   Name: "mysvc",
//   Subsets: [
//     {
//       Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//       Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//     },
//     {
//       Addresses: [{"ip": "10.10.3.3"}],
//       Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
//     },
//  ]
//
message k8s_endpoints {
	// A string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated. In CamelCase.
	// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds
	optional string kind = 1;

	// APIVersion defines the version of the schema of an object.
	// Servers should convert recognized schemas to the latest internal value,
	// and may reject unrecognized values.
	// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources
	optional string apiVersion = 2;

	// Standard object's metadata.
	// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
	optional k8s_object_meta metadata = 3;
	
	// The set of all endpoints is the union of all subsets.
	// Sets of addresses and ports that comprise a service.
	optional k8s_endpoint_subset subset = 4;
}

//
// watch individual changes to a list of Node (json.WatchEvent)
//
message k8s_watch_nodes {
	// the type of watch event; may be ADDED, MODIFIED, DELETED, or ERROR
	required string type = 1;

	// the object being watched; will match the type of the resource endpoint or be a Status object if the type is ERROR
	required k8s_endpoints endpoints = 2;
}

//
// watch individual changes to a list of Pod (json.WatchEvent)
//
message k8s_watch_namespaces_namespace_pods {
	// the type of watch event; may be ADDED, MODIFIED, DELETED, or ERROR
	required string type = 1;

	// the object being watched; will match the type of the resource endpoint or be a Status object if the type is ERROR
	required k8s_endpoints endpoints = 2;
}

//
// watch individual changes to a list of ReplicationController (json.WatchEvent)
//
message k8s_watch_namespaces_namespace_replicationcontrollers {
	// the type of watch event; may be ADDED, MODIFIED, DELETED, or ERROR
	required string type = 1;

	// the object being watched; will match the type of the resource endpoint or be a Status object if the type is ERROR
	required k8s_endpoints endpoints = 2;
}

//
// watch individual changes to a list of Service (json.WatchEvent)
//
message k8s_watch_namespaces_namespace_services {
	// the type of watch event; may be ADDED, MODIFIED, DELETED, or ERROR
	required string type = 1;

	// the object being watched; will match the type of the resource endpoint or be a Status object if the type is ERROR
	required k8s_endpoints endpoints = 2;
}

