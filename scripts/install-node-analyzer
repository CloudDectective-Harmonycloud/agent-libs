#!/bin/bash

set -e

function check_commands_installed {
	if ! hash curl > /dev/null 2>&1; then
		echo "* curl is not installed on this host. Install curl and retry."
		exit 1
	fi

	if ! hash kubectl > /dev/null 2>&1; then
		echo "* kubectl is not installed on this host. Install kubectl and retry."
		exit 1
	fi

	if [ $OPENSHIFT -eq 1 ]; then
		if ! hash oc > /dev/null 2>&1; then
			echo "* oc is not installed on this host. Install oc and retry."
			exit 1
		fi
	fi
}

function check_for_image_analyzer {
  fail=0
	if [ $OPENSHIFT -eq 0 ]; then
		echo "* Checking if sysdig-image-analyzer daemonset is installed in namespace: $NAMESPACE"
		out=$(kubectl get daemonset sysdig-image-analyzer --namespace=$NAMESPACE 2>&1) || { fail=1 && echo "kubectl get daemonset failed!"; }
	else
		echo "* Checking if sysdig-image-analyzer daemonset is installed in project: $NAMESPACE"
		out=$(oc get daemonset sysdig-image-analyzer -n $NAMESPACE 2>&1) || { fail=1 && echo "oc get daemonset failed!"; }
	fi
	if [ $fail -eq 1 ]; then
		if [[ "$out" =~ "NotFound" || "$out" =~ "not found" ]]; then
			echo "sysdig-image-analyer found. This will be removed and replaced by the sysdig-node-analyzer."
			IMAGE_ANALYZER_INSTALLED=1
		else
			echo "sysdig-image-analyer not found. sysdig-node-analyzer will be installed."
      IMAGE_ANALYZER_INSTALLED=0
		fi
	fi
}

function download_yamls {
	WORKDIR=$(mktemp -d /tmp/sysdig-agent-k8s.XXXXXX)
	echo "* Downloading yamls files to the temp directory: $WORKDIR"

	if [ $IMAGE_ANALYZER_INSTALLED -eq 0 ]; then
		echo "* Downloading Sysdig Image Analyzer config map yaml"
		curl -H 'Cache-Control: no-cache' -s -o $WORKDIR/sysdig-image-analyzer-configmap.yaml https://raw.githubusercontent.com/draios/sysdig-cloud-scripts/master/agent_deploy/kubernetes/sysdig-image-analyzer-configmap.yaml
	fi

  echo "* Downloading Sysdig Benchmark Runner config map yaml"
  curl -H 'Cache-Control: no-cache' -s -o $WORKDIR/sysdig-benchmark-runner-configmap.yaml https://raw.githubusercontent.com/draios/sysdig-cloud-scripts/master/agent_deploy/kubernetes/sysdig-benchmark-runner-configmap.yaml

  echo "* Downloading Sysdig Host Analyzer config map yaml"
  curl -H 'Cache-Control: no-cache' -s -o $WORKDIR/sysdig-host-analyzer-configmap.yaml https://raw.githubusercontent.com/draios/sysdig-cloud-scripts/master/agent_deploy/kubernetes/sysdig-host-analyzer-configmap.yaml

  echo "* Downloading Sysdig Node Analyzer daemonset v1 yaml"
  curl -H 'Cache-Control: no-cache' -s -o $WORKDIR/sysdig-node-analyzer-daemonset.yaml https://raw.githubusercontent.com/draios/sysdig-cloud-scripts/master/agent_deploy/kubernetes/sysdig-node-analyzer-daemonset.yaml
}

function install_node_analyzer {
  if [ $IMAGE_ANALYZER_INSTALLED -eq 0 ]; then
    apply_image_analyzer_configmap
  fi

  apply_benchmark_runner_configmap
  apply_host_scanner_configmap

  if [ $IMAGE_ANALYZER_INSTALLED -eq 1 ]; then
    remove_image_analyzer_daemonset
  fi

  apply_node_analyzer_daemonset
}

function apply_image_analyzer_configmap {
  # Image Analyzer config map
  IA_CONFIG_FILE=$WORKDIR/sysdig-image-analyzer-configmap.yaml

  # If the collector was changed but the analysis manager was not this was
  # most likely an onprem install, add the default analysis manager for that onprem
  if [ ! -z "$API_ENDPOINT" ] && [ -z "$ANALYSIS_MANAGER" ]; then
    ANALYSIS_MANAGER="https://${API_ENDPOINT}/internal/scanning/scanning-analysis-collector"
    echo "* Configuring Analysis Manager endpoint to ${ANALYSIS_MANAGER}. You can also use the -am option to explicitly specify it."
  fi

  if [ ! -z "$ANALYSIS_MANAGER" ]; then
    echo "* Setting Analysis Manager endpoint for Image Analyzer"
    echo "  collector_endpoint: $ANALYSIS_MANAGER" >> $IA_CONFIG_FILE
  fi
  if [ ! -z "$DOCKER_SOCKET_PATH" ]; then
    echo "* Setting docker socket path"
    echo "  docker_socket_path: $DOCKER_SOCKET_PATH" >> $IA_CONFIG_FILE
  fi
  if [ ! -z "$CRI_SOCKET_PATH" ]; then
    echo "* Setting CRI socket path"
    echo "  cri_socket_path: $CRI_SOCKET_PATH" >> $IA_CONFIG_FILE
  fi
  if [ ! -z "$CRI_CONTAINERD_SOCKET_PATH" ]; then
    echo "* Setting CRI-containerd socket path"
    echo "  containerd_socket_path: $CRI_CONTAINERD_SOCKET_PATH" >> $IA_CONFIG_FILE
  fi
  if [ ! -z "$CHECK_CERT" ]; then
    echo "* Setting SSL certificate check level"
    echo "  ssl_verify_certificate: \"$CHECK_CERT\"" >> $IA_CONFIG_FILE
  else
    echo "  ssl_verify_certificate: \"true\"" >> $IA_CONFIG_FILE
  fi

  kubectl apply -f $IA_CONFIG_FILE --namespace=$NAMESPACE
}

function apply_benchmark_runner_configmap {
  # Benchmark Runner config map
  BR_CONFIG_FILE=$WORKDIR/sysdig-benchmark-runner-configmap.yaml

  if [ ! -z "$API_ENDPOINT" ]; then
    echo "* Setting API endpoint for Benchmark Runner"
    echo "  collector_endpoint: https://$API_ENDPOINT" >> $BR_CONFIG_FILE
  fi

  if [ ! -z "$CHECK_CERT" ]; then
    echo "* Setting SSL certificate check level"
    echo "  ssl_verify_certificate: \"$CHECK_CERT\"" >> $BR_CONFIG_FILE
  else
    echo "  ssl_verify_certificate: \"true\"" >> $BR_CONFIG_FILE
  fi

  kubectl apply -f $BR_CONFIG_FILE --namespace=$NAMESPACE
}

function apply_host_scanner_configmap {
  # Host Analyzer config map
  HA_CONFIG_FILE=$WORKDIR/sysdig-host-analyzer-configmap.yaml

  echo "* Using Analysis Manager endpoint for Host Analyzer: ${ANALYSIS_MANAGER}"
  echo "  collector_endpoint: $ANALYSIS_MANAGER" >> $HA_CONFIG_FILE

  if [ ! -z "$CHECK_CERT" ]; then
    echo "* Setting SSL certificate check level"
    echo "  ssl_verify_certificate: \"$CHECK_CERT\"" >> $HA_CONFIG_FILE
  else
    echo "  ssl_verify_certificate: \"true\"" >> $HA_CONFIG_FILE
  fi

  kubectl apply -f $HA_CONFIG_FILE --namespace=$NAMESPACE
}

function remove_image_analyzer_daemonset {
  echo "* Deleting the sysdig-image-analyzer daemonset"
  kubectl delete daemonset sysdig-image-analyzer --namespace=$NAMESPACE
}

function apply_node_analyzer_daemonset {
  # Deploy Image Analyzer
  NA_FILE=$WORKDIR/sysdig-node-analyzer-daemonset.yaml
  if [ ! -z "$NA_CUSTOM_PATH" ]; then
    NL="\n"
    if [[ $uname -eq "Darwin" ]]; then
      NL=$'\\\n'
    fi

    IA_MATCH="Add custom volume here"
    IA_INSERT_VOLUME="      - name: custom-volume${NL}        hostPath:${NL}          path: ${IA_CUSTOM_PATH}"

    sed -i.bak -e "s|${IA_MATCH}|${IA_MATCH}${NL}${IA_INSERT_VOLUME}|" $NA_FILE

    IA_MATCH="Add custom volume mount here"
    IA_INSERT_VOLUME="        - mountPath: ${IA_CUSTOM_PATH}${NL}          name: custom-volume"

    sed -i.bak -e "s|${IA_MATCH}|${IA_MATCH}${NL}${IA_INSERT_VOLUME}|" $NA_FILE
  fi

  echo "* Deploying the Node Analyzer"
  kubectl apply -f $NA_FILE --namespace=$NAMESPACE

  echo -e "\nThe list of Node Analyzer pods deployed in the namespace \"$NAMESPACE\" are:"
  kubectl get pods -n $NAMESPACE | grep "node-analyzer"
}

NAMESPACE="sysdig-agent"
IMAGE_ANALYZER_INSTALLED=0

# Get and validate all arguments
while [[ ${#} > 0 ]]
do
	key="${1}"

	case ${key} in
		-cc|--check_certificate)
			if is_valid_value "${2}"; then
				CHECK_CERT="${2}"
			else
				echo "ERROR: no value provided for SSL check certificate option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-ns|--namespace)
			if is_valid_value "${2}"; then
				NAMESPACE="${2}"
			else
				echo "ERROR: no value provided for namespace, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-am|--analysismanager)
			if is_valid_value "${2}"; then
				ANALYSIS_MANAGER="${2}"
			else
				echo "ERROR: no value provided for Analysis Manager option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-ds|--dockersocket)
			if is_valid_value "${2}"; then
				DOCKER_SOCKET_PATH="${2}"
			else
				echo "ERROR: no value provided for docker socket path option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-cs|--crisocket)
			if is_valid_value "${2}"; then
				CRI_SOCKET_PATH="${2}"
			else
				echo "ERROR: no value provided for CRI socket path option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-cd|--cricontainerdsocket)
			if is_valid_value "${2}"; then
				CRI_CONTAINERD_SOCKET_PATH="${2}"
			else
				echo "ERROR: no value provided for CRI-containerd socket path option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-cv|--customvolume)
			if is_valid_value "${2}"; then
				IA_CUSTOM_PATH="${2}"
			else
				echo "ERROR: no value provided for custom volume path option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-ae|--api_endpoint)
			if is_valid_value "${2}"; then
				API_ENDPOINT="${2}"
			else
				echo "ERROR: no value provided for API endpoint option, use -h | --help for $(basename ${0}) Usage"
				exit 1
			fi
			shift
			;;
		-op|--openshift)
			OPENSHIFT=1
			;;
		-h|--help)
			help
			exit 1
			;;
		*)
			echo "ERROR: Invalid option: ${1}, use -h | --help for $(basename ${0}) Usage"
			exit 1
			;;
	esac
	shift
done

function help {
	echo "Usage: $(basename ${0}) [-cc | --check_certificate <value>] \ "
	echo "                [-ns | --namespace | --project <value>] \ "
	echo "                [-op | --openshift] \ "
	echo "                [-ae | --api_endpoint <value> ] \ "
	echo "                [-am | --analysismanager <value>] \ "
	echo "                [-ds | --dockersocket <value>] \ "
	echo "                [-cs | --crisocket <value>] \ "
	echo "                [-cv | --customvolume <value>] \ "
	echo "                [-h | --help]"
	echo ""
	echo " -cc : enable strong SSL certificate check (default: true)"
	echo " -ns : if provided, will be the namespace/project used to deploy the agent. (default: sysdig-agent)"
	echo " -op : if provided, perform the installation using the OpenShift command line"
	echo " -ae : if provided, will be used as the base (host) for the Node Analyzer endpoints."
	echo " -am : Analysis Manager endpoint for Sysdig Secure"
	echo " -ds : docker socket for Image Analyzer"
	echo " -cs : CRI socket for Image Analyzer"
	echo " -cd : CRI-containerd socket for Image Analyzer"
	echo " -cv : custom volume for Image Analyzer"
	echo " -h  : print this usage and exit"
	echo
	exit 1
}

check_commands_installed
check_for_image_analyzer
download_yamls
install_node_analyzer
